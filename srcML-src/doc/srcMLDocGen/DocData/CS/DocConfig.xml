<DocConfig title="C# srcML" lang="C#" outputFile="cs_srcML.html">

    <Category title="Statements">
        <DocEntry title="if statement" shortTitle="if">
            <Elements>
                <Element name="if" />
                <Subelement name="condition" />
                <Subelement name="then" />
                <Subelement name="else" />
                <Subelement name="elseif" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:if">
                    <Desc>Find all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:condition">
                    <Desc>Find all conditions of all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:then">
                    <Desc>Find all then statements</Desc>
                </XPath>
                <XPath path="//src:if/src:else">
                    <Desc>Find all else statements, this doesn't include else if statements</Desc>
                </XPath>
                <XPath path="//src:if[count(src:else) = 0]">
                    <Desc>Find all if statements without an else statement, this doesn't include else if sections of an if statement</Desc>
                </XPath>
                <XPath path="//src:if//src:if">
                    <Desc>Find all nested if statements</Desc>
                </XPath>
                <XPath path="//src:elseif">
                    <Desc>Find all else-if statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-if-1.c" />
            <Example file="../C/C-if-2.c" />
            <Example file="../C/C-if-3.c" />
            <Example file="../C/C-if-4.c" />
            <Example file="../C/C-if-5.c" />
            <Example file="../C/C-if-6.c" />
        </DocEntry>

        <DocEntry title="while statement" shortTitle="while">
            <Elements>
                <Element name="while" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:while">
                    <Desc>Find all while loops</Desc>
                </XPath>
                <XPath path="//src:while/src:condition">
                    <Desc>Find the conditions of all while loops</Desc>
                </XPath>
                <XPath path="//src:while[src:condition//src:name = 'i']">
                    <Desc>Find all while loops which have a condition containing the variable <code class="inline">i</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-while-1.c" />
        </DocEntry>

        <DocEntry title="for statement" shortTitle="for">
            <Elements>
                <Element name="for" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:for">
                    <Desc>Find all for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:init">
                    <Desc>Find all initialization statements from within the control of all for loops</Desc>
                </XPath>
                <XPath path="//src:for[string-length(src:control/src:init/src:decl/src:name) = 1]">
                    <Desc>Find all for loops which declare a variable with a single character name (e.g. <code class="inline">x</code>, <code class="inline">i</code> or <code class="inline">y</code>)</Desc>
                </XPath>
                <XPath path="//src:for[src:control/src:incr/src:expr//node()/following-sibling::src:operator[.= '++']]">
                    <Desc>Find all for loops which use post increment as part of the increment expression</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:incr">
                    <Desc>Find the increment expressions from every for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:condition">
                    <Desc>Find the conditions of all for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-for-1.c" />
            <Example file="../C/C-for-2.c" />
            <Example file="../C/C-for-3.c" />
        </DocEntry>

        <DocEntry title="foreach .. in statement" shortTitle="foreach">
            <Elements>
                <Element name="foreach" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:foreach">
                    <Desc>Find all foreach loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-foreach-1.cs" />
        </DocEntry>

        <DocEntry title="do statement" shortTitle="do">
            <Elements>
                <Element name="do" />
                <Subelement name="block" />
                <Subelement name="condition" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:do">
                    <Desc>Find all do-while loops</Desc>
                </XPath>
                <XPath path="//src:do[src:condition//src:name = 'counter']">
                    <Desc>Find all do-while loops which have a condition containing the variable <code class="inline">counter</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-do-while-1.c" />
            <Example file="../C/C-do-while-2.c" />
        </DocEntry>

        <DocEntry title="break statement" shortTitle="break">
            <Elements>
                <Element name="break" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:break">
                    <Desc>Find all break statements</Desc>
                </XPath>
                <XPath path="//src:break[ancestor::src:for]">
                    <Desc>Find all break statements within for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-break.c" />
        </DocEntry>

        <DocEntry title="continue statement" shortTitle="continue">
            <Elements>
                <Element name="continue" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:continue">
                    <Desc>Find all continue statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-continue.c" />
        </DocEntry>

        <DocEntry shortTitle="return" title="return statement">
            <Elements>
                <Element name="return" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:return">
                    <Desc>Find all return statements</Desc>
                </XPath>
                <XPath path="//src:function[ count(.//src:return) &gt; 1]">
                    <Desc>Find all functions with more then one return</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-return-1.c" />
            <Example file="../C/C-return-2.c" />
        </DocEntry>

        <DocEntry title="switch statement" shortTitle="switch">
            <Elements>
                <Element name="switch" />
                <Subelement name="condition" />
                <Subelement name="case" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:switch">
                    <Desc>Find all switch statements</Desc>
                </XPath>
                <XPath path="//src:switch/src:condition">
                    <Desc>Find all of the conditions of all switch statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-switch-1.c" />
            <Example file="../C/C-switch-2.c" />
        </DocEntry>

        <DocEntry shortTitle="case" title="case statement">
            <Elements>
                <Element name="case" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:case">
                    <Desc>Find all case labels</Desc>
                </XPath>
                <XPath path="//src:case[.//src:name = 'SATURDAY']">
                    <Desc>Find all case labels which use <code class="inline">SATURDAY</code></Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:case[.//src:name = 'SATURDAY']]">
                    <Desc>Find all switch statements that have a case that uses <code class="inline">SATURDAY</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-case-1.c" />
        </DocEntry>

        <DocEntry shortTitle="default" title="default statement">
            <Elements>
                <Element name="default" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default">
                    <Desc>Find all default labels</Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:default]">
                    <Desc>Find all switch statements which have a default label</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-default-1.c"/>
        </DocEntry>

        <DocEntry title="block">
            <Elements>
                <Element name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:block">
                    <Desc>Find all blocks</Desc>
                </XPath>
                <XPath path="//src:block/src:decl_stmt">
                    <Desc>Find all variable declaration within a block</Desc>
                </XPath>
            </XPathQueries>	
            <Example file="../C/C-compound-block.c" />
        </DocEntry>

        <DocEntry title="label">
            <Elements>
                <Element name="label" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:label">
                    <Desc>Find all labels</Desc>
                </XPath>
                <XPath path="//src:label[not(src:name[. = //src:goto/src:name])]">
                    <Desc>Find all labels without a goto statement</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-label.c" />
        </DocEntry>

        <DocEntry shortTitle="goto" title="goto statement">
            <Elements>
                <Element name="goto" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:goto">
                    <Desc>Find all goto statements</Desc>
                </XPath>
                <XPath path="BUG">
                    <Desc>Find all goto case labels</Desc>
                </XPath>
                <XPath path="BUG">
                    <Desc>Find all goto default case labels</Desc>
                </XPath>

            </XPathQueries>
            <Example file="../C/C-goto.c" />
            <Example file="CS-goto-1.cs" />
            <Example file="CS-goto-2.cs" />
        </DocEntry>

        <DocEntry title="empty statement">
            <Elements>
                <Element name="empty_stmt" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:empty_stmt">
                    <Desc>Find all empty statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-empty-stmt.c" />
        </DocEntry>

        <DocEntry title="fixed statement" shortTitle="fixed">
            <Elements>
                <Element name="fixed" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:fixed">
                    <Desc>Find all fixed statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-fixed-1.cs" />
        </DocEntry>

        <DocEntry title="lock statement" shortTitle="lock">
            <Elements>
                <Element name="lock" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:lock">
                    <Desc>Find all lock statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-lock-1.cs" />
        </DocEntry>

        <DocEntry title="using statement" shortTitle="using">
            <Elements>
                <Element name="using" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:using_stmt">
                    <Desc>Find all using statements</Desc>
                </XPath>
                <XPath path="//src:using_stmt[src:init/src:decl/src:type/src:name = 'StreamReader']">
                    <Desc>Find all using statements that use a <code>StreamReader</code> variable</Desc>
                </XPath>
                
            </XPathQueries>
            <Example file="CS-using-1.cs" />
        </DocEntry>

        <DocEntry title="unsafe statement" shortTitle="unsafe">
            <Elements>
                <Element name="unsafe" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:unsafe">
                    <Desc>Find all unsafe statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-unsafe-1.cs" />
        </DocEntry>

    </Category>




    <Category title="Specifiers">

        <DocEntry title="const">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='const']]">
                    <Desc>Find all const variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-const-1.cs" />
        </DocEntry>

        <DocEntry title="readonly">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='readonly']]">
                    <Desc>Find all readonly variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-readonly-1.cs" />
        </DocEntry>

        <DocEntry title="public">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier[.='public']]">
                    <Desc>Find all public classes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier[.='public']]">
                    <Desc>Find all public methods</Desc>
                </XPath>
                <XPath path="//src:property[src:type/src:specifier[.='public']]">
                    <Desc>Find all public properties</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-public-1.cs" />
            <Example file="CS-public-2.cs" />
            <Example file="CS-public-3.cs" />
            <Example file="CS-public-4.cs" />
        </DocEntry>

        <DocEntry title="private">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier[.='private']]">
                    <Desc>Find all explicitly private classes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier[.='private']]">
                    <Desc>Find all explicitly private methods</Desc>
                </XPath>
                <XPath path="//src:property[src:type/src:specifier[.='private']]">
                    <Desc>Find all explicitly private properties</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-private-1.cs" />
            <Example file="CS-private-2.cs" />
            <Example file="CS-private-3.cs" />
            <Example file="CS-private-4.cs" />
        </DocEntry>

        <DocEntry title="protected">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier[.='protected']]">
                    <Desc>Find all protected methods</Desc>
                </XPath>
                <XPath path="//src:property[src:type/src:specifier[.='protected']]">
                    <Desc>Find all protected properties</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-protected-1.cs" />
            <Example file="CS-protected-2.cs" />
            <Example file="CS-protected-3.cs" />
            <Example file="CS-protected-4.cs" />
        </DocEntry>

        <DocEntry title="internal">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier[.='internal']]">
                    <Desc>Find all internal classes</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-internal-1.cs" />
            <Example file="CS-internal-2.cs" />
            <Example file="CS-internal-3.cs" />
            <Example file="CS-internal-4.cs" />
        </DocEntry>

        <DocEntry title="protected internal">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt[src:decl[not(src:block)]/src:type[src:specifier[.='protected']][src:specifier[.='internal']]]">
                    <Desc>Find all protected internal fields</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-protected-internal-1.cs" />
        </DocEntry>

        <DocEntry title="static">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier ='static']">
                    <Desc>Find all static classes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier ='static']">
                    <Desc>Find all static function</Desc>
                </XPath>
                <XPath path="//src:decl_stmt[src:decl/src:type/src:specifier ='static']">
                    <Desc>Find all static fields</Desc>
                </XPath>
                <XPath path="//src:event[src:type/src:specifier = 'static']">
                    <Desc>Find all static events</Desc>
                </XPath>
                <XPath path="//src:property[src:type/src:specifier = 'static']">
                    <Desc>Find all static properties</Desc>
                </XPath>
                <XPath path="//src:constructor[src:specifier ='static']">
                    <Desc>Find all static constructors</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-static-1.cs" />
            <Example file="CS-static-2.cs" />
            <Example file="CS-static-3.cs" />
            <Example file="CS-static-4.cs" />
            <Example file="CS-static-5.cs" />
            <Example file="CS-static-6.cs" />
        </DocEntry>

        <DocEntry title="volatile">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier ='volatile']">
                    <Desc>Find all volatile variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-volatile.c" />
        </DocEntry>

        <DocEntry title="out (output parameter)">
            <Elements>
                <Element name="modifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:modifier='out']">
                    <Desc>Find all functions with out parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-output-parameter-1.cs" />
            <Example file="CS-output-parameter-call-2.cs" />
        </DocEntry>

        <DocEntry title="ref">
            <Elements>
                <Element name="modifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:modifier[.='ref']]">
                    <Desc>Find all functions with ref parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-ref-1.cs" />
            <!-- <Example file="CS-ref-call-2.cs" /> -->
        </DocEntry>

        <DocEntry title="params">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:specifier[.='params']]">
                    <Desc>Find all functions with a variable number of arguments</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-params-1.cs" />
        </DocEntry>

        <DocEntry title="extern specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='extern']]">
                    <Desc>Find all extern functions declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-extern-1.cs" />
        </DocEntry>

        <DocEntry title="virtual">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='virtual']]">
                    <Desc>Find all virtual functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-virtual-1.cs" />
        </DocEntry>

        <DocEntry title="override">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='override']]">
                    <Desc>Find all overridden functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-override-1.cs" />
        </DocEntry>

        <DocEntry title="new">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='new']]">
                    <Desc>Find all functions which hide a previous implementation using new</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-new-specifier-1.cs" />
        </DocEntry>

        <DocEntry title="sealed">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier [.='sealed']]">
                    <Desc>Find all sealed classes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier [.='sealed']]">
                    <Desc>Find all sealed methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-sealed-1.cs" />
            <Example file="CS-sealed-2.cs" />
        </DocEntry>

        <DocEntry title="async">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='async']]">
                    <Desc>Find all async methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-async-1.cs" />
        </DocEntry>

        <DocEntry title="partial">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:specifier [.='partial']]">
                    <Desc>Find all partial classes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier [.='partial']]">
                    <Desc>Find all partial functions</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:type/src:specifier [.='partial']]">
                    <Desc>Find all partial function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-partial-1.cs" />
            <Example file="CS-partial-2.cs" />
        </DocEntry>

        <DocEntry title="explicit">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='explicit']]">
                    <Desc>Find all explicit conversion operators</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-explicit-conversion-operator-1.cs" />
        </DocEntry>

        <DocEntry title="implicit">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:type/src:specifier [.='implicit']]">
                    <Desc>Find all implicit conversion operators</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-implicit-conversion-operator-1.cs" />
        </DocEntry>

        <DocEntry title="yield">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:specifier[.='yield']">
                    <Desc>Find all yield statements</Desc>
                </XPath>
                <XPath path="//src:return[src:specifier[.='yield']]">
                    <Desc>Find all yield-return statements</Desc>
                </XPath>
                <XPath path="//src:break[src:specifier[.='yield']]">
                    <Desc>Find all yield-break statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-yield-1.cs" />
            <Example file="CS-yield-2.cs" />
        </DocEntry>

        <DocEntry title="this (extension methods)">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:specifier[.='this']]">
                    <Desc>Find all extension methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-this-extension-method-1.cs" />
        </DocEntry>
        
    </Category>


    <Category title="Declarations, Definitions and Initializations">

        <DocEntry title="variable declaration statement">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt">
                    <Desc>Find all declaration statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-decl_stmt-1.cs" />
            <Example file="CS-decl_stmt-2.cs" />
            <Example file="CS-decl_stmt-3.cs" />
        </DocEntry>

        <DocEntry title="variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="init"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl">
                    <Desc>Find all variable declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:init]">
                    <Desc>Find all variable declarations which also initialize the variable</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-decl_stmt-1.cs" />
            <Example file="CS-decl_stmt-2.cs" />
        </DocEntry>

        <DocEntry title="nullable variable modifier">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="init"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='?']]">
                    <Desc>Find all nullable variable declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-nullable-1.cs" />
        </DocEntry>

        <DocEntry title="array declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:name/src:index]">
                    <Desc>Find all array declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-array-decl-1.cs" />
            <Example file="CS-array-decl-2.cs" />
            <Example file="CS-array-decl-3.cs" />
            <Example file="CS-array-decl-4.cs" />
            <Example file="CS-array-decl-5.cs" />
            <Example title="implicitly typed arrays" file="CS-array-decl-6.cs" />
        </DocEntry>

        <DocEntry title="function declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl">
                    <Desc>Find all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:type">
                    <Desc>Find all return types from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function declarations with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:name">
                    <Desc>Find the names of all function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-func-decl-1.cs" />
        </DocEntry>

        <DocEntry title="function definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function">
                    <Desc>Find all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:type">
                    <Desc>Find all return types from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function definitions with only two parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-func-def-1.cs" />
        </DocEntry>

        <DocEntry title="default arguments">
            <Elements>
                <Element name="init" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:parameter_list/src:parameter/src:decl/src:init]">
                    <Desc>Find all function declarations with default parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-default-parameter-values-1.cs" />
        </DocEntry>

        <DocEntry title="delegate type definition">
            <Elements>
                <Element name="function_decl"/>
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier[.='delegate']]">
                    <Desc>Find all delegate declarations.</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-delegate-type-decl-1.cs" />
        </DocEntry>

        <DocEntry title="anonymous methods">
            <Elements>
                <Element name="lambda"/>
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:delegate">
                    <Desc>Find all anonymous methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-delegate-def-1.cs" />
        </DocEntry>

        <DocEntry title="lambda">
            <Elements>
                <Element name="lambda" />
                <Subelement name="parameter_list" />
                <Subelement name="name_list" />
                <Subelement name="operator" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:lambda">
                    <Desc>Find all lambdas</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-lambda-1.cs" />
            <Example file="CS-lambda-2.cs" />
            <Example file="CS-lambda-3.cs" />
        </DocEntry>

        <DocEntry title="namespace">
            <Elements>
                <Element name="namespace" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:namespace">
                    <Desc>Find all namespaces</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-namespace-1.cs" />
        </DocEntry>

        <DocEntry title="using directive">
            <Elements>
                <Element name="using" />
                <Subelement name="name" />
                <Subelement name="init" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:using">
                    <Desc>Find all using directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-using-directive-1.cs" />
            <Example file="CS-using-directive-2.cs" />
        </DocEntry>

        <DocEntry title="extern alias">
            <Elements>
                <Element name="extern" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:extern[src:specifier[.='alias']]">
                    <Desc>Find all externally alias declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-extern-alias-1.cs" />
        </DocEntry>

        <DocEntry title="operator overloading">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[@type='operator']">
                    <Desc>Find all operator declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-operator-overload-decl-1.cs" />
        </DocEntry>

        <DocEntry title="indexer property">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:property[src:parameter_list]">
                    <Desc>Find all indexer method declarations</Desc>
                </XPath>
                <XPath path="//src:property[src:parameter_list[count(src:parameter) > 1]]">
                    <Desc>Find all indexer method declarations with more then one dimension</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-index-overload-1.cs" />
            <Example file="CS-index-overload-2.cs" />
        </DocEntry>

        <DocEntry title="implicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][src:type/src:specifier[.='implicit']]">
                    <Desc>Find all implicit conversion operator definition overloads</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-implicit-conv-operator-1.cs" />
            <Example file="CS-implicit-conv-operator-2.cs" />
        </DocEntry>

        <DocEntry title="explicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][src:type/src:specifier[.='explicit']]">
                    <Desc>Find all explicit conversion operator overloads</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-explicit-conv-operator-1.cs" />
        </DocEntry>

        <DocEntry title="operator false">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][src:name/src:name[.='false']]">
                    <Desc>Find all false operator overloads</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-operator-false-overload-1.cs" />
        </DocEntry>

        <DocEntry title="operator true">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][src:name/src:name[.='true']]">
                    <Desc>Find all true operator overloads</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-operator-true-overload-1.cs" />
        </DocEntry>

        <DocEntry title="pointer declaration">
            <Elements>
                <Element name="modifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='*']]">
                    <Desc>Find all of the declarations of pointers</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-ptr-decl-1.cs" />
        </DocEntry>
    </Category>


    <Category title="Classes, Structs, Interfaces and Enums">
        <DocEntry title="class">
            <Elements>
                <Element name="class" />
                <Subelement name="suepr" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class">
                    <Desc>Find all class definitions</Desc>
                </XPath>
                <XPath path="//src:class[src:name[.='foo']]">
                    <Desc>Find all classes with the name <code class="inline">foo</code></Desc>
                </XPath>
                <XPath path="//src:function[ancestor::src:class]">
                    <Desc>Find all functions within classes</Desc>
                </XPath>
                <XPath path="//src:function_decl[ancestor::src:class]">
                    <Desc>Find all function declarations within classes</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-class-1.cs" />
            <Example file="CS-class-2.cs" />
        </DocEntry>

        <DocEntry title="struct">
        	<Desc>See class for more examples.</Desc>
            <Elements>
                <Element name="struct" />
                <Subelement name="name" />
                <Subelement name="super" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct">
                    <Desc>Find the definition of all structs</Desc>
                </XPath>
                <XPath path="//src:struct/src:block/src:decl_stmt">
                    <Desc>Find the members from all structs</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-struct-1.cs" />
            <Example file="CS-struct-2.cs" />
        </DocEntry>

        <DocEntry title="interface">
        	<Desc>See class for more examples.</Desc>
            <Elements>
                <Element name="interface" />
                <Subelement name="name" />
                <Subelement name="super" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:interface">
                    <Desc>Find all interfaces</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-interface-1.cs" />
            <Example file="CS-interface-2.cs" />
        </DocEntry>

        <DocEntry title="anonymous type">
            <Elements>
                <Element name="expr" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::src:block]">
                    <Desc>Find all expressions that contain an anonymous class</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-anonymous-type-1.cs" />
        </DocEntry>

        <DocEntry title="property">
            <Elements>
                <Element name="decl_stmt"/>
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:property">
                    <Desc>Find all properties</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-property-1.cs" />
            <Example file="CS-property-2.cs" />
        </DocEntry>
    
        <DocEntry title="get">
            <Elements>
                <Element name="function"/>
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[.='get']]">
                    <Desc>Find all get functions with their own implementation</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-get-1.cs" />
        </DocEntry>

        <DocEntry title="get (default implementation)">
            <Elements>
                <Element name="function_decl"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:name[.='get']]">
                    <Desc>Find all default implemented get definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-get-2.cs" />
        </DocEntry>


        <DocEntry title="set">
            <Elements>
                <Element name="function"/>
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[.='set']]">
                    <Desc>Find all set definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-set-1.cs" />
        </DocEntry>

        <DocEntry title="set (default implementation)">
            <Elements>
                <Element name="function_decl"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:name[.='set']]">
                    <Desc>Find all default implemented set definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-set-2.cs" />
        </DocEntry>

        <DocEntry title="event">
            <Elements>
                <Element name="decl_stmt"/>
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:event">
                    <Desc>Find all events</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-event-1.cs" />
            <Example file="CS-event-2.cs" />
        </DocEntry>

        <DocEntry title="add">
            <Elements>
                <Element name="function"/>
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[.='add']]">
                    <Desc>Find all add definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-add-1.cs" />
        </DocEntry>

        <DocEntry title="remove">
            <Elements>
                <Element name="function"/>
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[.='remove']]">
                    <Desc>Find all remove definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-remove-1.cs" />
        </DocEntry>

        <DocEntry title="inheritance list">
            <Elements>
                <Element name="super" />
                <Subelement name="specifier" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super]">
                    <Desc>Find all classes with at least one super class</Desc>
                </XPath>
                <XPath path="//src:class[src:super/src:name[. = 'bar']]">
                    <Desc>Find all classes that inherit from <code class="inline">bar</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-inheritance-1.cs" />
        </DocEntry>

        <DocEntry title="constructor">
            <Elements>
                <Element name="constructor" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor">
                    <Desc>Find all constructors</Desc>
                </XPath>
                <XPath path="//src:constructor[src:parameter_list[not(src:parameter)]]">
                    <Desc>Find all constructors with no parameters</Desc>
                </XPath>
                <XPath path="//src:constructor[src:parameter_list[not(src:parameter)] or (count(src:parameter_list/src:parameter) = count(src:parameter_list/src:parameter/src:decl/src:init))]">
                    <Desc>Find all possible default constructors, including constructors with all default parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-ctor-1.cs" />
        </DocEntry>

        <DocEntry title="this (constructor forwarding)">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor[src:member_list/src:call/src:name = 'this']">
                    <Desc>Find all constructors which forward to the another constructor using this</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-this-ctor-1.cs" />
        </DocEntry>

        <DocEntry title="base (constructor selection)">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor[src:member_list/src:call/src:name = 'base']">
                    <Desc>Find all constructors which forward to a base classes constructor</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-base-ctor-1.cs" />
        </DocEntry>

        <DocEntry title="destructor">
            <Elements>
                <Element name="destructor" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:destructor">
                    <Desc>Find all destructors</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-dtor-1.cs" />
        </DocEntry>

        <!--<DocEntry title="object initializer">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:init/src:expr/src:block]">
                    <Desc>Find all object initializations, this excludes array initialization</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-property-wise-init-1.cs" />
        </DocEntry>-->

        <DocEntry title="enum">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum">
                    <Desc>Find all enum definitions</Desc>
                </XPath>
                <XPath path="//src:enum/src:block/src:decl/src:name">
                    <Desc>Find the names of all members of all enums</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-enum-1.cs" />
            <Example file="CS-enum-2.cs" />
        </DocEntry>

        <DocEntry title="disambiguating function override">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name[src:name][src:operator[.='.']]]">
                    <Desc>Find all disambiguating function overrides</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-disambiguating-func-override-1.cs" />
        </DocEntry>
    </Category>


    <Category title="Expressions">
        <DocEntry title="function call">
            <Elements>
                <Element name="call"/>
                <Subelement name="name" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:call">
                    <Desc>Find all function calls</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-call-1.cs" />
        </DocEntry>

        <DocEntry title="named parameters">
            <Elements>
                <Element name="call"/>
                <Subelement name="name" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:call[src:argument_list/src:argument/src:name]">
                    <Desc>Find all function calls with named parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-named-params-1.cs" />
        </DocEntry>

         <DocEntry title="new">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:operator[.='new']]">
                    <Desc>Find all expressions which call new</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-new-1.cs" />
            <Example file="CS-new-2.cs" />
        </DocEntry>

         <DocEntry title="stackalloc">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='stackalloc']">
                    <Desc>Find all expressions which call stackalloc</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-stackalloc-1.cs" />
        </DocEntry>

        <DocEntry title="array indexing">
            <Elements>
                <Element name="name"/>
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:name/src:index]">
                    <Desc>Find all array indexing expressions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-array-index-1.cs" />
            <Example file="CS-array-index-2.cs" />
        </DocEntry>

        <DocEntry title="ternary operator">
            <Elements>
                <Element name="ternary" />
                <Subelement name="condition" />
                <Subelement name="then"/>
                <Subelement name="else"/>
            </Elements>
            <Example file="../C/C-ternary-operator.c"/>
            <XPathQueries>
                <XPath path="//src:ternary">
                    <Desc>Find all uses of the ternary operator</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="dereference member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='-&gt;']">
                    <Desc>Find all uses of the -&gt; operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-deref-member-access.c" />
        </DocEntry>

        <DocEntry title="member and scope access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='.']">
                    <Desc>Find all uses of the . operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-member-access.c" />
        </DocEntry>

        <DocEntry title="this (object)">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='this']">
                    <Desc>Find all uses of this</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-this-1.cs" />
        </DocEntry>

        <DocEntry title="base (object)">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='base']">
                    <Desc>Find all uses of base</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-base-1.cs" />
        </DocEntry>

	    <OperatorEntry title="pre/post increment" op="++" example="../C/C-Operator-pre_increment.c" />
	    <OperatorEntry title="pre/post decrement" op="--" example="../C/C-Operator-pre_decrement.c" />
	    <OperatorEntry title="address of" op="&amp;" example="../C/C-Operator-address_of.c" />
	    <OperatorEntry title="dereference" op="*" example="../C/C-Operator-deref.c" />
	    <OperatorEntry title="unary minus" op="-" example="../C/C-Operator-unary-minus.c" />
	    <OperatorEntry title="unary plus" op="+" example="../C/C-Operator-unary-plus.c" />
	    <OperatorEntry title="logical not" op="!" example="../C/C-Operator-logical-not.c" />
	    <OperatorEntry title="multiplication" op="*" example="../C/C-Operator-multiplication.c" />
	    <OperatorEntry title="division" op="/" example="../C/C-Operator-divide.c" />
	    <OperatorEntry title="modulus" op="%" example="../C/C-Operator-modulus.c" />
	    <OperatorEntry title="addition" op="+" example="../C/C-Operator-addition.c" />
	    <OperatorEntry title="subtraction" op="-" example="../C/C-Operator-subtraction.c" />
	    <OperatorEntry title="left shift" op="&lt;&lt;" example="../C/C-Operator-left-shift.c" />
	    <OperatorEntry title="right shift" op="&gt;&gt;" example="../C/C-Operator-right-shift.c" />
	    <OperatorEntry title="less then" op="&lt;" example="../C/C-Operator-less-then.c" />
	    <OperatorEntry title="greater then" op="&gt;" example="../C/C-Operator-greater-then.c" />
	    <OperatorEntry title="less then or equal to" op="&lt;=" example="../C/C-Operator-less-equal.c" />
	    <OperatorEntry title="greater then or equal to" op="&gt;=" example="../C/C-Operator-greater-equal.c" />
	    <OperatorEntry title="equals" op="==" example="../C/C-Operator-equal.c" />
	    <OperatorEntry title="not equal" op="!=" example="../C/C-Operator-not-equal.c" />
	    <OperatorEntry title="bitwise not" op="~" example="../C/C-Operator-bitwise-not.c" />
	    <OperatorEntry title="bitwise and" op="&amp;" example="../C/C-Operator-bitwise-and.c" />
	    <OperatorEntry title="bitwise xor" op="^" example="../C/C-Operator-bitwise-xor.c" />
	    <OperatorEntry title="bitwise or" op="|" example="../C/C-Operator-bitwise-or.c" />
	    <OperatorEntry title="logical and" op="&amp;&amp;" example="../C/C-Operator-logical-and.c" />
	    <OperatorEntry title="logical or" op="||" example="../C/C-Operator-logical-or.c" />
	    <OperatorEntry title="assignment" op="=" example="../C/C-Operator-assignment.c" />
	    <OperatorEntry title="multiply assign" op="*=" example="../C/C-Operator-multiply-assign.c" />
	    <OperatorEntry title="divide assign" op="/=" example="../C/C-Operator-divide-assign.c" />
	    <OperatorEntry title="modulus assign" op="%=" example="../C/C-Operator-modulus-assign.c" />
	    <OperatorEntry title="add assign" op="+=" example="../C/C-Operator-addition-assign.c" />
	    <OperatorEntry title="subtract assign" op="-=" example="../C/C-Operator-sub-assign.c" />
	    <OperatorEntry title="left shift assign" op="&lt;&lt;=" example="../C/C-Operator-left-shift-assign.c" />
	    <OperatorEntry title="right shift assign" op="&gt;&gt;=" example="../C/C-Operator-right-shift-assign.c" />
	    <OperatorEntry title="bitwise and assign" op="&amp;=" example="../C/C-Operator-bitwise-and-assign.c" />
	    <OperatorEntry title="bitwise xor assign" op="^=" example="../C/C-Operator-bitwise-xor-assign.c" />
	    <OperatorEntry title="bitwise or assign" op="|=" example="../C/C-Operator-bitwise-or-assign.c" />
	    <OperatorEntry title="sceope" op="::" example="../CPlusPlus/CPP-Operator-scope.cpp" />
        <OperatorEntry title="null coalescing" op="??" example="CS-Operator-null-coalescing-1.cs" />
	    <OperatorEntry title="comma" op="," example="../C/C-Operator-comma.c" />
        <OperatorEntry title="dot" op="." example="../C/C-member-access.c" />
        <OperatorEntry title="arrow" op="-&gt;" example="../C/C-deref-member-access.c" />
        <OperatorEntry title="lambda" op="=&gt;" example="CS-lambda-1.cs" />
        <OperatorEntry title="await" op="await" example="CS-Operator-await-1.cs" />
        <OperatorEntry title="as" op="as" example="CS-Operator-as-1.cs" />
        <OperatorEntry title="is" op="is" example="CS-Operator-is-1.cs" />
    </Category>

    <Category title="Other">

        <DocEntry title="typeof">
            <Elements>
                <Element name="typeof"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:typeof">
                    <Desc>Find all uses of typeof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-typeof-1.cs" />
        </DocEntry>

        <DocEntry title="default (object construction)">
            <Elements>
                <Element name="default"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default[src:argument_list]">
                    <Desc>Find all uses of default, where default is used to default construct an object</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-default-1.cs" />
        </DocEntry>

        <DocEntry title="checked">
            <Elements>
                <Element name="checked"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:checked">
                    <Desc>Find all uses of checked, in both a statement and expression form</Desc>
                </XPath>
                <XPath path="//src:checked[not(src:block)]">
                    <Desc>Find all uses of checked when it's used as an expression</Desc>
                </XPath>
                <XPath path="//src:checked[src:block]">
                    <Desc>Find all uses of the checked statement</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-checked-1.cs" />
            <Example file="CS-Operator-checked-2.cs" />
        </DocEntry>

        <DocEntry title="unchecked">
            <Elements>
                <Element name="unchecked"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:unchecked">
                    <Desc>Find all uses of unchecked, in both statement and expression form</Desc>
                </XPath>
                <XPath path="//src:unchecked[not(src:block)]">
                    <Desc>Find all uses of unchecked used as an expression</Desc>
                </XPath>
                <XPath path="//src:unchecked[src:block]">
                    <Desc>Find all uses of the unchecked statement</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-Operator-unchecked-1.cs" />
            <Example file="CS-Operator-unchecked-2.cs" />
        </DocEntry>

        <DocEntry title="sizeof">
            <Elements>
                <Element name="sizeof"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:sizeof">
                    <Desc>Find all uses of sizeof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-sizeof-1.cs" />
        </DocEntry>

     	<DocEntry title="var">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:type[src:name[.='var']]">
                    <Desc>Find all types that use var for their type</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-var-1.cs" />
        </DocEntry>

     	<DocEntry title="object">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='object']">
                    <Desc>Find all uses of object</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-object-1.cs" />
        </DocEntry>

     	<DocEntry title="dynamic">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='dynamic']">
                    <Desc>Find all uses of dynamic</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-dynamic-1.cs" />
        </DocEntry>

     	<DocEntry title="string keyword">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='string']">
                    <Desc>Find all uses of the string keyword</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-string-1.cs" />
        </DocEntry>

        <DocEntry title="cast">
            <Elements>
                <Element name="operator"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast">
                    <Desc>Find all casts</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-cast-1.cs" />
        </DocEntry>

        <DocEntry title="attribute">
            <Elements>
                <Element name="attribute" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:attribute">
                    <Desc>Find all attributes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:attribute]">
                    <Desc>Find all functions with attributes</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-attribute-1.cs" />
            <Example file="CS-attribute-2.cs" />
            <Example file="CS-attribute-3.cs" />
        </DocEntry>

        <DocEntry title="global">
            <Elements>
                <Element name="name" />
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[src:name[.='global']]">
                    <Desc>Find all uses of global as part of a complex name</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-global-1.cs" />
        </DocEntry>

    </Category>

    <Category title="Generics">
        <DocEntry title="generic variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="src:name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:name/src:argument_list]">
                    <Desc>Find all declarations of generic variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-variable-decl-1.cs" />
        </DocEntry>

        <DocEntry title="generic class">
            <Elements>
                <Element name="class" />
                <Subelement name="specifier" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:name/src:argument_list]">
                    <Desc>Find all generic classes</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-class-1.cs" />
        </DocEntry>

        <DocEntry title="generic method">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:name/src:argument_list]">
                    <Desc>Find all generic methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-method-1.cs" />
        </DocEntry>

        <DocEntry title="in (generic parameter constraint)">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:argument[src:specifier[.='in']][parent::src:argument_list[@type='template']]">
                    <Desc>Find all generic parameters constrained with in</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-in-1.cs" />
        </DocEntry>

        <DocEntry title="out (generic parameter constraint)">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:argument[src:specifier[.='out']][parent::src:argument_list[@type='template']]">
                    <Desc>Find all generic parameters constrained with out</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-out-1.cs" />
        </DocEntry>

        <DocEntry title="where (constraint)">
            <Elements>
                <Element name="where" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:name/src:where]">
                    <Desc>Find all constrained generic classes</Desc>
                </XPath>
                <XPath path="//src:function[src:where]">
                    <Desc>Find all constrained generic methods</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-where-1.cs" />
            <Example file="CS-generic-where-2.cs" />
            <Example file="CS-generic-where-3.cs" />
        </DocEntry>

        <DocEntry title="new (constraint)">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constraint[src:name = 'new']">
                    <Desc>Find all uses of the new constraint</Desc>
                </XPath>
                <XPath path="//src:class[src:where/src:constraint/src:name = 'new']">
                    <Desc>Find all classes which specify the new constraint</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-new-constraint-1.cs" />
        </DocEntry>

        <DocEntry title="class (constraint)">
            <Elements>
                <Element name="constraint" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:where/src:constraint.='class']">
                    <Desc>Find all classes which use a class constraint</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-class-constraint-1.cs" />
        </DocEntry>

        <DocEntry title="struct (constraint)">
            <Elements>
                <Element name="constraint" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[src:where/src:constraint.='struct']">
                    <Desc>Find all generic methods that specify a struct constraint</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-generic-struct-constraint-1.cs" />
        </DocEntry>

    </Category>

    <Category title="Exceptions">
        <DocEntry title="throw">
            <Elements>
                <Element name="throw" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:throw">
                    <Desc>Find all uses of throw</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-throw-1.cs" />
            <Example file="CS-throw-2.cs" />
        </DocEntry>

        <DocEntry title="try">
            <Elements>
                <Element name="try" />
                <Subelement name="block" />
                <Subelement name="catch" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:try">
                    <Desc>Find all try blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-try-1.cs" />
        </DocEntry>

        <DocEntry title="catch">
            <Elements>
                <Element name="catch" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:catch">
                    <Desc>Find all catch blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-catch-1.cs" />
            <Example file="CS-catch-2.cs" />
        </DocEntry>

        <DocEntry title="finally">
            <Elements>
                <Element name="finally" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:finally">
                    <Desc>Find all finally blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-finally-1.cs" />
        </DocEntry>

    </Category>

    <Category title="LINQ">

        <DocEntry title="from">
            <Elements>
                <Element name="from" />
                <Subelement name="expr" />
                <Subelement name="in" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:from">
                    <Desc>Find all uses of from</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-from-1.cs" />
        </DocEntry>

        <DocEntry title="where (clause)">
            <Elements>
                <Element name="where" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:where[ancestor::src:linq]">
                    <Desc>Find all uses of the where clause</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-where-1.cs" />
        </DocEntry>

        <DocEntry title="select">
            <Elements>
                <Element name="select" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:select">
                    <Desc>Find all select clauses</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-select-1.cs" /> 
            <Example file="CS-linq-select-2.cs" /> 
        </DocEntry>

        <DocEntry title="group">
            <Elements>
                <Element name="group" />
                <Subelement name="by" />
                <Subelement name="into" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:group">
                    <Desc>Find all group clauses</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-group-1.cs" />
            <Example file="CS-linq-group-2.cs" />
            <Example file="CS-linq-group-3.cs" />
        </DocEntry>


        <DocEntry title="orderby">
            <Elements>
                <Element name="orderby" />
                <Subelement name="expr" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:orderby">
                    <Desc>Find all uses of the orderby clause</Desc>
                </XPath>
                <XPath path="//src:orderby[src:name[.='descending']]">
                    <Desc>Find all uses of the orderby clause which sort in descending order</Desc>
                </XPath>
                <XPath path="//src:orderby[src:name[.='ascending'] or not(src:name)]">
                    <Desc>Find all uses of the orderby clause which sort in ascending order </Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-orderby-1.cs" />
            <Example file="CS-linq-orderby-2.cs" />
            <Example file="CS-linq-orderby-3.cs" />
        </DocEntry>

        <DocEntry title="join">
            <Elements>
                <Element name="join" />
                <Subelement name="in" />
                <Subelement name="on" />
                <Subelement name="equals" />
                <Subelement name="into" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:join">
                    <Desc>Find all of the join clauses</Desc>
                </XPath>
            </XPathQueries>
            <Example title="inner join" file="CS-linq-join-1.cs" />
            <Example title="group join" file="CS-linq-join-2.cs" />
            <Example title="subquery join" file="CS-linq-join-3.cs" />
            <Example title="left outer join" file="CS-linq-join-4.cs" />
        </DocEntry>

        <DocEntry title="let">
            <Elements>
                <Element name="let" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:let">
                    <Desc>Find all let clauses</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-linq-let-1.cs" />
        </DocEntry>
    </Category>

    <Category title="C# Preprocessor">
        <DocEntry title="#if">
            <Elements>
                <Element name="if" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:if">
                    <Desc>Find all if directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-if-1.cs" />
        </DocEntry>

        <DocEntry title="#else">
            <Elements>
                <Element name="else" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:else">
                    <Desc>Find all else directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-else-1.cs" />
        </DocEntry>
        
        <DocEntry title="#elif">
            <Elements>
                <Element name="elif" ns="cpp" />
                <Subelement name="directive" ns="cpp" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:elif">
                    <Desc>Find all elif directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-elif-1.cs" />
        </DocEntry>
        
        <DocEntry title="#endif">
            <Elements>
                <Element name="endif" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:endif">
                    <Desc>Find all endif directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-endif-1.cs" />
        </DocEntry>
        
        <DocEntry title="#define">
            <Elements>
                <Element name="define" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:define">
                    <Desc>Find all define directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-define-1.cs" />
        </DocEntry>
        
        <DocEntry title="#undef">
            <Elements>
                <Element name="undef" ns="cpp" />
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="macro" ns="cpp" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:undef">
                    <Desc>Find all undef directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-undef-1.cs" />
        </DocEntry>
        
        <DocEntry title="#warning">
            <Elements>
                <Element name="warning" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:warning">
                    <Desc>Find all warning directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-warning-1.cs" />
        </DocEntry>
        
        <DocEntry title="#error">
            <Elements>
                <Element name="error" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:error">
                    <Desc>Find all error directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-error-1.cs" />
        </DocEntry>
        
        <DocEntry title="#line">
            <Elements>
                <Element name="line" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="number" ns="cpp" />
                <Subelement name="file" ns="cpp" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:line">
                    <Desc>Find all line directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-line-1.cs" />
            <Example file="CS-pp-line-2.cs" />
            <Example file="CS-pp-line-3.cs" />
        </DocEntry>
        
        <DocEntry title="#region">
            <Elements>
                <Element name="region" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:region">
                    <Desc>Find all region directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-region-1.cs" />
        </DocEntry>
        
        <DocEntry title="#endregion">
            <Elements>
                <Element name="endregion" ns="cpp" />
                <Subelement name="directive" ns="cpp"/>
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:endregion">
                    <Desc>Find all endregion directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-region-1.cs" />
        </DocEntry>
        
        <DocEntry title="#pragma">
            <Elements>
                <Element name="pragma" ns="cpp"/>
                <Subelement name="directive" ns="cpp"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//cpp:pragma">
                    <Desc>Find all pragma directives</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CS-pp-pragma-1.cs" />
        </DocEntry>
    </Category>
</DocConfig>

