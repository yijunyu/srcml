<XPathExtensionFunctions outputFile="XPathExtFunc.html">    
    <ExtFunc>
        <Name>bool has_return()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a return
statement. This is scope respecting, in that it doesn't search within
closures functions or local classes.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_return&lt;/code&gt; can be called on almost anything, but the typical case 
is using it on statements or functions. The behavior it has
when called on non-complex statements (those that don't combine multiple
statements using a block such as return, throw, expr_stmt and decl_stmt)
is to search those statements for a return including the sub elements 
excluding lambdas and delegates, This means that because only the sub
elements are searched that a return doesn't have a return (because it is one).
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a return" xpath="//src:constructor[src:has_return()]"/>
            <Example desc="Find all classes that have a constructor that calls return (C#)" xpath="//src:class[src:constructor[src:has_return()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_throw()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks all children and all subsequent children for a throw statement
statement. This is scope respecting, in that it doesn't search within
closures functions, local classes, catches or finallies.
&lt;br/&gt;
&lt;br/&gt;
&lt;code&gt;has_throw&lt;/code&gt; behaves in a similar manner to &lt;code&gt;has_return&lt;/code&gt;
accept that it searches for throw statements instead of return statements, and
it the scope it follows omits catch and finally. The &lt;code&gt;has_throw&lt;/code&gt;
extension function can be called directly on either a catch or finally and it will
search all children in the same scope respecting manner looking for a throw statement.
        </Desc>
        <Examples>
            <Example desc="Find all constructors that have a throw" xpath="//src:constructor[src:has_throw()]"/>
            <Example desc="Find all classes that have a destructor that contains a throw statement (C++)" xpath="//src:class[node()/src:destructor[src:has_throw()]]"/>
        </Examples>
        <Tags>
            <Tag name="block"/>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
            <Tag name="while"/>
            <Tag name="if"/>
            <Tag name="then"/>
            <Tag name="elseif"/>
            <Tag name="else"/>
            <Tag name="try"/>
            <Tag name="catch"/>
            <Tag name="finally"/>
            <Tag name="do"/>
            <Tag name="for"/>
            <Tag name="foreach"/>
            <Tag name="switch"/>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
            <Tag name="using_stmt"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
            <Tag name="synchronized"/>
            <Tag name="unsafe"/>
            <Tag name="static"/>
            <Tag name="checked"/>
            <Tag name="unchecked"/>
        </Tags>
    </ExtFunc>
    
    
    <ExtFunc>
        <Name>bool is_nested()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a class or type declaration is nested within another
scope. This function only works for parts of the language which
can occur at a global scope.
&lt;br/&gt;
&lt;br/&gt;
asm is handled specially it checks to see of the current ASM statement is within another ASM statement.
        </Desc>
        <Examples>
            <Example desc="Find all typedefs nested within a namespace, class, struct union or function" xpath="//src:typedef[src:is_nested()]"/>
        </Examples>
        <Tags>
            <Tag name="asm"/>
            <Tag name="typedef"/>
            <Tag name="using"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>
            <Tag name="destructor_decl"/>
            <Tag name="property"/>
            <Tag name="event"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="enum"/>
            <Tag name="namespace"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_class_template_partial_specialization()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a class template is a partial specialization. This is done
by checking for a template arguments and a template within the name of the
class, struct or union.
        </Desc>
        <Examples>
            <Example desc="Find all partial class template specializations" xpath="//src:class[src:is_class_template_partial_specialization()]"/>
        </Examples>
        <Tags>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_init()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks for an initialization within a declaration statement or the init
that's part of other statements such as a for, using_stmt, or synchronize.
        </Desc>
        <Examples>
            <Example desc="Find all declaration statements with an initialization" xpath="//src:decl_stmt[src:has_init()]"/>
        </Examples>
        <Tags>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="param"/>
            <Tag name="argument"/>
            <Tag name="using_stmt"/>
            <Tag name="using"/>
            <Tag name="try"/>
            <Tag name="synchronized"/>
            <Tag name="fixed"/>
            <Tag name="lock"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_break()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks using scope rules and attempts to locate a break statement within
a loop construct or switch statement. This respects the scope of other loops
by not searching their children when they are not the contexts of the
predicate.
        </Desc>
        <Examples>
            <Example desc="Find all for loops with break statements" xpath="//src:for[src:has_break()]"/>
        </Examples>
        <Tags>
            <Tag name="switch"/>
            <Tag name="do"/>
            <Tag name="while"/>
            <Tag name="foreach"/>
            <Tag name="for"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_unsafe()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the current statement, declaration or other element is within
an unsafe block.
        </Desc>
        <Examples>
            <Example desc="Find all unsafe declaration statements" xpath="//src:decl_stmt[src:is_unsafe()]"/>
        </Examples>
        <Tags>
            <Tag name="Any Statement"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_mutually_exclusive()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
Checks to see if a declaration is within a lock or synchronized function or block.
        </Desc>
        <Examples>
            <Example desc="Find all if statements that are within a mutually exclusive section of code" xpath="//src:if[src:is_mutually_exclusive()]"/>
        </Examples>
        <Tags>
            <Tag name="Any Statement"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_static()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>Checks if something was declared static.</Desc>
        <Examples>
            <Example desc="Find all static variable declaration" xpath="//src:decl_stmt[src:is_static()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:event" />
            <Tag name="src:property" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool block_is_static()</Name>
        <Langs>Java</Langs>
        <Desc>Checks if a block is a static constructor block.</Desc>
        <Examples>
            <Example desc="Find all static constructor block" xpath="//src:block[src:block_is_static()]"/>
        </Examples>
        <Tags>
            <Tag name="src:block" />
        </Tags>
    </ExtFunc>
    
    
    <ExtFunc>
        <Name>bool is_abstract() or bool is_pure_virtual()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Tests to see if a function or class is abstract or not.
        </Desc>
        <Examples>
            <Example desc="Find all abstract classes" xpath="//src:class[src:is_pure_virtual()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_default_impl()</Name>
        <Langs>C++, Java</Langs>
        <Desc>
In C++, this function checks if the function was specified as = default.
&lt;br/&gt;
&lt;br/&gt;
In Java, this function checks to see if a default implementation was given to a function
that is part of an interface.

        </Desc>
        <Examples>
            <Example desc="Find all default functions and constructors in C++" xpath="(//src:constructor_decl | //src:function_decl)[src:has_default_impl()]"/>
            <Example desc="Find all default functions in Java" xpath="//src:function[src:has_default_impl()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_default_property_value()</Name>
        <Langs>Java</Langs>
        <Desc>
Used within the definition of a Java annotation. This function checks to see if
the annotation's property has a default value.
        </Desc>
        <Examples>
            <Example desc="Find all of the annotation properties with default values" xpath="//src:annotation_defn/src:block/src:function_decl[src:has_default_property_value()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_synchronized()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a function or function_declaration is specified as synchronized.
        </Desc>
        <Examples>
            <Example desc="Find all synchronized functions" xpath="//src:function[src:is_synchronized()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_transient()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a declaration was declared transient.
        </Desc>
        <Examples>
            <Example desc="Find all transient member variables" xpath="//src:class/src:block/src:decl_stmt[src:is_transient()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_native()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
In C#, this function returns true if the function declaration contains an attribute
that contains a DLLImport.
&lt;br/&gt;
&lt;br/&gt;
In Java, this function indicates that a function was specified using the native
specifier.
        </Desc>
        <Examples>
            <Example desc="Find all native functions" xpath="//src:function[src:is_native()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_private()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a private scope. This function also
follows default accessibility rules that are not explicit within the source code.  
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all private member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_private()]"/>
            <Example desc="Find all private member classes (C++)" xpath="//src:class[src:is_private()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_protected()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a protected scope. Doesn't work with
inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all protected member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_protected()]"/>
            <Example desc="Find all protected member classes (C++)" xpath="//src:class[src:is_protected()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_public()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if a declaration of any type is within a public scope. This function also
follows default accessibility rules that are not explicit within the source code.
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all public member variables of a class (C# and Java)" xpath="//src:class/src:block/src:decl_stmt[src:is_public()]"/>
            <Example desc="Find all public member classes (C++)" xpath="//src:class[src:is_public()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_internal()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if something was declared to be internal or is internal by default.
Doesn't work with inheritance.
        </Desc>
        <Examples>
            <Example desc="Find all internal classes" xpath="//src:class[src:is_internal()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct" />
            <Tag name="src:struct_decl" />
            <Tag name="src:enum" />
            <Tag name="src:property" />
            <Tag name="src:event" />
            <Tag name="src:using" />
            <Tag name="src:typedef" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_protected_internal()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a type is declared protected internal. The behaves the same as is_public and is_private.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>
            <Tag name="destructor_decl"/>
            <Tag name="event"/>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_volatile()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Check to see if a function or variable is declared volatile.
        </Desc>
        <Examples>
            <Example desc="Find all volatile functions" xpath="//src:function[src:is_volatile()]"/>
        </Examples>
        <Tags>
            <Tag name="function_decl" />
            <Tag name="function" />
            <Tag name="decl_stmt" />
            <Tag name="decl" />
            <Tag name="typedef" />
            <Tag name="type" />
            <Tag name="using" />
            <Tag name="asm"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_const()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Checks to see if a function or variable was declared const.
        </Desc>
        <Examples>
            <Example desc="Find all const formal parameters" xpath="//src:parameter[src:is_const()]"/>
        </Examples>
        <Tags>
            <Tag name="function_decl" />
            <Tag name="function" />
            <Tag name="decl_stmt" />
            <Tag name="decl" />
            <Tag name="typedef" />
            <Tag name="type"/>
            <Tag name="param"/>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_inline()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a function or namespace was declared inline.
        </Desc>
        <Examples>
            <Example desc="Find all inline functions" xpath="//src:function[src:is_inline()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:namespace" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_restrict()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a variable or parameter was declared with the restrict specifier.
        </Desc>
        <Examples>
            <Example desc="Find all restrict parameters" xpath="//src:parameter[src:is_restrict()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:parameter" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_register()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable was declared with the register specifier.
        </Desc>
        <Examples>
            <Example desc="Find all variables declared with the register specifier" xpath="//src:decl_stmt[src:is_register()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_mutable()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a variable or lambda was declared mutable.
        </Desc>
        <Examples>
            <Example desc="Find all mutable variables" xpath=".//src:decl_stmt[src:is_mutable()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:lambda" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_thread_local()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable was declared thread_local or _Thread_local.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_constexpr()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a function was declared to be constexpr
        </Desc>
        <Examples>
            <Example desc="Find all constexpr functions" xpath="//src:function[src:is_constexpr()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_override()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a function is specified as being override, this means is declared
as override.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_virtual()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks to see if the function was specified as virtual in any way, that means
that it specifies override, sealed or final.
        </Desc>
        <Examples>
            <Example desc="Find all virtual functions." xpath="//src:function_decl[src:is_virtual()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_overridable()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
This checks to see if a function is specified virtual or override but not final or sealed
and also checks to make sure that the function is not within a sealed or final class.
        </Desc>
        <Examples>
            <Example desc="Find all overridable functions." xpath="//src:function[src:is_overridable()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_auto_specifier()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable declaration uses the auto specifier (that doesn't
mean the auto type in C++).
        </Desc>
        <Examples>
            <Example desc="Find all variables declared auto" xpath="//src:decl_stmt]src:has_auto_specifier()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_extern()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if the current block,function or variable is declared extern.
        </Desc>
        <Examples>
            <Example desc="Find all blocks that are extern blocks" xpath="//src:block[src:is_extern_block()]"/>
        </Examples>
        <Tags>
            <Tag name="src:block" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_deduced_type()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Checks if the type used for a declaration or in C++ also a function is auto.
        </Desc>
        <Examples>
            <Example desc="Find all variable declarations that have a deduced type" xpath="//src:decl_stmt[src:has_deduced_type()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:lambda" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_deleted()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if a function, constructor or destructor was marked as deleted.
        </Desc>
        <Examples>
            <Example desc="Find all deleted functions" xpath="//src:function[src:is_deleted()]"/>
        </Examples>
        <Tags>
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:function_decl" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_explicit()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
C++&lt;br/&gt;
    - works on constructors and operator declarations&lt;br/&gt;
    - checks for the use of the explicit specifier.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
C#&lt;br/&gt;
    - works on operator declarations&lt;br/&gt;
    - this checks for the use of the explicit specifier.
        </Desc>
        <Examples>
            <Example desc="" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="src:constructor_decl" />
            <Tag name="src:constructor" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_bitfield()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks if a declaration is a bitfield.
        </Desc>
        <Examples>
            <Example desc="Find all bitfield declarations" xpath="//src:decl_stmt[src:is_bitfield()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_member()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks if something is a member of a class struct or union.
&lt;br/&gt;
&lt;br/&gt;
This only works on C and C++ because normally every declaration within other languages
that work with elements below are already members of a class, struct etc...
        </Desc>
        <Examples>
            <Example desc="Find all member variable declarations" xpath="//src:decl_stmt[src:is_member()]"/>
        </Examples>
        <Tags>
            <Tag name="src:typedef" />
            <Tag name="src:function" />
            <Tag name="src:function_decl" />
            <Tag name="src:using" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:class" />
            <Tag name="src:struct" />
            <Tag name="src:enum" />
            <Tag name="src:friend" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct_decl" />
            <Tag name="src:union" />
            <Tag name="src:union_decl" />
            <Tag name="src:public" />
            <Tag name="src:private" />
            <Tag name="src:protected" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:event" />
            <Tag name="src:property" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_default()</Name>
        <Langs>C++, Java</Langs>
        <Desc>
Checks if something has a default implementation, in C++ this means that t looks for = default.
In java, this means that it looks for a default implementation for an interface method.
        </Desc>
        <Examples>
            <Example desc="Find all constructors that are set to = default (C++11)" xpath="//src:constructor_decl[src:is_default()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_pointer()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks if a variable is a pointer. On function declarations this checks to see
if the function is declares a function pointer.
        </Desc>
        <Examples>
            <Example desc="Find all function pointer declarations" xpath="//src:function_decl[src:is_pointer()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl_stmt" />
            <Tag name="src:decl" />
            <Tag name="src:type" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:parameter" />
            <Tag name="src:argument" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_parameter_pack()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if something is varargs.
        </Desc>
        <Examples>
            <Example desc="Find all varargs parameters" xpath="//src:parameter[src:is_parameter_pack()]"/>
        </Examples>
        <Tags>
            <Tag name="src:decl" />
            <Tag name="src:type" />
            <Tag name="src:parameter" />
            <Tag name="src:argument" />
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_generic()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if something is generic by looking for type arguments.
        </Desc>
        <Examples>
            <Example desc="Find all generic functions" xpath="//src:function[src:is_generic()]"/>
            <Example desc="Find all generic interfaces" xpath="//src:interface[src:is_generic()]"/>
        </Examples>
        <Tags>
            <Tag name="src:using" />
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:union" />
            <Tag name="src:union_decl" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct_decl" />
            <Tag name="src:struct" />
            <Tag name="src:constructor" />
            <Tag name="src:constructor_decl" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_aligned()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if something was declared with an alignment specification.
        </Desc>
        <Examples>
            <Example desc="Find all classes that have an alignment specification" xpath="//src:class[src:is_aligned()]"/>
        </Examples>
        <Tags>
            <Tag name="src:union" />
            <Tag name="src:union_decl" />
            <Tag name="src:class" />
            <Tag name="src:class_decl" />
            <Tag name="src:struct_decl" />
            <Tag name="src:struct" />
            <Tag name="src:decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:type" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_noexcept()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a declaration is declared with noexcept or an empty exception
specification. 
        </Desc>
        <Examples>
            <Example desc="Find all functions that specify that they don't throw exceptions" xpath="//src:function[src:is_noexcept()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
            <Tag name="src:constructor_decl" />
            <Tag name="src:constructor" />
            <Tag name="src:destructor_decl" />
            <Tag name="src:destructor" />            
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_reference()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Checks to see if a declaration, parameter or argument is declared as by reference.
        </Desc>
        <Examples>
            <Example desc="Find all parameters that are pass by reference" xpath="//src:parameter[src:is_reference()]"/>
        </Examples>
        <Tags>
            <Tag name="src:argument" />
            <Tag name="src:parameter" />
            <Tag name="src:decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:type" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_rvalue_reference()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a type, declaration, parameter etc.. was declared as an R-value
reference.
        </Desc>
        <Examples>
            <Example desc="Find all functions that return an R-value reference type" xpath="//src:function[src:type[src:is_rvalue_reference()]]"/>
        </Examples>
        <Tags>
            <Tag name="src:argument" />
            <Tag name="src:parameter" />
            <Tag name="src:decl" />
            <Tag name="src:decl_stmt" />
            <Tag name="src:type" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_noreturn()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a function is declared with the _Noreturn C11 keyword or the
C++ noreturn attribute.
        </Desc>
        <Examples>
            <Example desc="Find all noreturn functions" xpath="//src:function[src:is_noreturn()]"/>
        </Examples>
        <Tags>
            <Tag name="src:function_decl" />
            <Tag name="src:function" />
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_readonly()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a variable type or declaration statement are declared readonly.
        </Desc>
        <Examples>
            <Example desc="Find all read only private member variables" xpath="//src:decl_stmt[src:is_readonly() and src:is_private()]"/>
        </Examples>
        <Tags>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="type"/>
        </Tags>
    </ExtFunc>



    <ExtFunc>
        <Name>bool is_out_param() OR bool is_out_argument()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a parameter, argument, type etc.. declares that it is an out variable.
        </Desc>
        <Examples>
            <Example desc="Find all output parameters" xpath="//src:parameter[src:is_out_param()]"/>
        </Examples>
        <Tags>
            <Tag name="param"/>
            <Tag name="decl"/>
            <Tag name="type"/>
            <Tag name="argument"/>
            <Tag name="expr"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_variadic()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
This function works on varargs or ... or params. This doesn't work for nested
class template definitions outside of the body of the class that it was
declared within.
        </Desc>
        <Examples>
            <Example desc="Find all variadic functions" xpath="//src:function[src:is_variadic()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="argument_list[@type='template']"/>
            <Tag name="delegate"/>
            <Tag name="parameter_list"/>
            <Tag name="template"/>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_new_override()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks if the new specifier is being applied to a method.
        </Desc>
        <Examples>
            <Example desc="Find all functions that override a function non-virtually" xpath="//src:function[src:is_new_override()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_sealed()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a class or function has been declared sealed.
        </Desc>
        <Examples>
            <Example desc="Find all of the classes that are declared sealed" xpath="//src:class[src:is_sealed()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="event"/>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_async()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks if a method has been declared asynchronous.
        </Desc>
        <Examples>
            <Example desc="Find all asynchronous methods" xpath="//src:function[src:is_async()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_implicit()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks for the implicit keyword of the implicit conversion operator.
        </Desc>
        <Examples>
            <Example desc="Find all implicit conversion operators" xpath="//src:function[src:is_implicit()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_yield()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a return or break statement were declared as a yield return or
a yield break.
        </Desc>
        <Examples>
            <Example desc="Find all functions that contain a yield return or break" xpath="//src:function[.//src:break[src:is_yield()] or .//src:return[src:is_yield()]"/>
        </Examples>
        <Tags>
            <Tag name="return"/>
            <Tag name="break"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_extension_method()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if a method was declared as an extension method.
        </Desc>
        <Examples>
            <Example desc="Find all extension methods" xpath="//src:function[src:is_extension_method()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_main()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Returns true for the main function.
The main function is recognized in C# by the name "Main" and a static specifier.
Java's main function is deduced using the name "main" and the static specifier.
C and C++ main is recognized as a function that occurs at the unit level with name
main or one of the MSVC variants.
        </Desc>
        <Examples>
            <Example desc="Find all main functions" xpath="//src:function[src:is_main()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_extern_c()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if the declaration is within an extern "C" or extern "C" block.
        </Desc>
        <Examples>
            <Example desc="Find all functions declared within an extern &quot;C&quot; block or scope" xpath="//src:function[src:is_extern_c()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="decl_stmt"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_global()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a declaration isn't within a namespace or other type of block.
Global is determined in the following manner: Check to see if the parent
is src:unit, if it is then the name of the function is examined to see if
it uses the namespace qualifier (that isn't the first part of the name), if
that's true then the declaration is global. If the parent isn't a src:unit
but instead is a block, the parent of the block is checked, there is a special
if the parent of the current block is an extern block or an anonymous namespace 
continue checking until it isn't or the src:unit is reached, If the src:unit
is reached then the current element is considered global.
        </Desc>
        <Examples>
            <Example desc="Find all classes declared at the translation unit level" xpath="//src:function[src:is_global()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="namespace"/>
            <Tag name="using"/>
            <Tag name="typedef"/>
            <Tag name="enum"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_operator()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Checks if the current function declaration or function definition is an operator declaration.
        </Desc>
        <Examples>
            <Example desc="Find all operator declarations" xpath="//src:function[src:operator()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_ref_qualifier()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see of a function was declared with reference qualifiers.
        </Desc>
        <Examples>
            <Example desc="Find all ref qualified functions" xpath="//src:function[src:has_ref_qualifiers()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool has_trailing_return_type()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a function was declared with a trailing return type using the auto
keyword.
        </Desc>
        <Examples>
            <Example desc="Find all functions declared with a trailing return type" xpath="//src:function[src:has_trailing_return()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_empty_return()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a return statement doesn't have an expression to return.
        </Desc>
        <Examples>
            <Example desc="Find all functions that contain an empty return statement" xpath="//src:function[.//src:return[src:has_empty_return()]]"/>
        </Examples>
        <Tags>
            <Tag name="return"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_attributes() OR bool has_annotations()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Searches for an attribute or annotation based on language and returns true if
the current item has attributes or annotations.
        </Desc>
        <Examples>
            <Example desc="Find all classes with attributes or annotations" xpath="//src:class[src:has_annotation()]"/>
        </Examples>
        <Tags>
            <Tag name="unit" />
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>
            <Tag name="destructor_decl"/>
            <Tag name="property"/>
            <Tag name="event"/>
            <Tag name="param"/>
            <Tag name="decl_stmt"/>
            <Tag name="decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_function_try()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a function, constructor or destructor has a function try block.
        </Desc>
        <Examples>
            <Example desc="Find all constructors with try return blocks instead of a traditional block" xpath="//src:function[src:has_function_try()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="constructor"/>
            <Tag name="destructor"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_KnR_C()</Name>
        <Langs>C</Langs>
        <Desc>
Checks to see if a function definition declares is declared in K&amp;R C style.
        </Desc>
        <Examples>
            <Example desc="Find all K&amp;R C style function declarations" xpath="//src:fucntion[src:is_KnR_C()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_template_parameter() OR bool is_generic_parameter()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if the current parameter (or in the case of generics arguments because it's
marked wrong) is part of template. This also works for template or generic arguments,
and in C++ specializations arguments.
        </Desc>
        <Examples>
            <Example desc="Find all template parameters" xpath="//src:parameter[src:is_template_parameter()]"/>
        </Examples>
        <Tags>
            <Tag name="param"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_template_parameter_pack()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if the current parameter is a template parameter pack.
        </Desc>
        <Examples>
            <Example desc="Find all function parameters that are template parameter packs"
                xpath="//src:parameter_list[not(@type[.='template'])]/src:parameter[src:is_template_parameter_pack()]"/>
        </Examples>
        <Tags>
            <Tag name="param"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_template_template_parameter()</Name>
        <Langs>C++</Langs>
        <Desc>Checks if the current parameter of a template is a template template parameter.</Desc>
        <Examples>
            <Example desc="Find all template template parameters" xpath="//src:parameter[src:is_template_template_parameter()]"/>
        </Examples>
        <Tags>
            <Tag name="param"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_template() OR is_generic_name()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks to see if the type declaration is generic or has template parameters or aguments. 
That includes functions and constructors also. When applied to decl, param,
type name or any other type of argument that isn't part of the declaration of
a template.
        </Desc>
        <Examples>
            <Example desc="Find all using type alias declarations that include a template" xpath="//src:using[src:is_template()]"/>
            <Example desc="Find all generic interfaces" xpath="//src:interface[src:is_generic()]"/>
        </Examples>
        <Tags>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>  
            <Tag name="constructor"/>  
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>  
            <Tag name="destructor_decl"/>  
            <Tag name="call"/>
            <Tag name="name"/>
            <Tag name="type"/>
            <Tag name="param"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_default_parameter()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Checks to see if a parameter (in C++ this can also be used on template
parameters) has a default value.
        </Desc>
        <Examples>
            <Example desc="Find all functions with a default parameter" xpath="//src:function[.//src:parameter[src:is_default_parameter()]]"/>
        </Examples>
        <Tags>
            <Tag name="param"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_in_param()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks a parameter to see if it was specified using in.
        </Desc>
        <Examples>
            <Example desc="Find all input parameters" xpath="//src:argument[src:is_in_param()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_constrained()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
This works on generic parameters, types and methods. It simply checks to
see if there are any constraints on any of the generic arguments. In C#
this doesn't work on individual parameters.
        </Desc>
        <Examples>
            <Example desc="Find all functions that have a constraint" xpath="//src:function[src:is_constrained()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="decl"/>
            <Tag name="type"/>
            <Tag name="param"/>
            <Tag name="argument_list"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_bound()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a generic parameter is bound or not.
        </Desc>
        <Examples>
            <Example desc="Find all bound generic parameters" xpath="//src:argument[src:is_bound()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_unbound()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a generic parameter is unbound.
        </Desc>
        <Examples>
            <Example desc="Find all unbound generic parameters" xpath="//src:argument[src:is_unbound()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_upper_bound()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks for an upper bound generic parameter.
        </Desc>
        <Examples>
            <Example desc="Find all upper bound generic parameters" xpath="//src:argument[src:is_upper_bound()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_wildcard()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if the argument is a wildcard.
        </Desc>
        <Examples>
            <Example desc="Find all wildcard generic parameters" xpath="//src:argument[src:is_wildcard()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_lower_bound()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks for a lower bound on a generic parameter.
        </Desc>
        <Examples>
            <Example desc="Find all generic parameters that have a lower bound constraint" xpath="//src:argument[src:is_lower_bound()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_anonymous()</Name>
        <Langs>C, C++, Java</Langs>
        <Desc>
Returns true of there is no name specified. A Java wildcard is considered to be anonymous.
        </Desc>
        <Examples>
            <Example desc="Find all structs declared without a name" xpath="//src:struct[src:is_anonymous()]"/>
        </Examples>
        <Tags>
            <Tag name="namespace"/>
            <Tag name="class"/>
            <Tag name="struct"/>
            <Tag name="union"/>
            <Tag name="enum"/>
            <Tag name="decl"/>
            <Tag name="param"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool enum_specifies_integer_type()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Checks to see if an enum inherits from something.
        </Desc>
        <Examples>
            <Example desc="Find all enums which specify a base integer type" xpath="//src:enum[src:enum_specifies_integer_type()]"/>
        </Examples>
        <Tags>
            <Tag name="enum"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_complete()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Checks to see if specified type is not a partial type in C#, or a definition in C++
or C. This function DOES NOT search for declaration definition pairs.
        </Desc>
        <Examples>
            <Example desc="Find all complete types" xpath="//src:*[src:is_complete()]"/>
        </Examples>
        <Tags>
            <Tag name="enum"/>
            <Tag name="class"/>
            <Tag name="class_decl"/>
            <Tag name="struct"/>
            <Tag name="struct_decl"/>
            <Tag name="union"/>
            <Tag name="union_decl"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
            <Tag name="destructor"/>
            <Tag name="destructor_decl"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool enum_is_scoped()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if an enum is an enum class or declared within a class, struct or union.
        </Desc>
        <Examples>
            <Example desc="Find all scoped enums" xpath="//src:enum[src:enum_is_scoped()]"/>
        </Examples>
        <Tags>
            <Tag name="enum"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_using_access_decl()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a using is a C++03 just name style using declaration (e.g. using std::cout).
        </Desc>
        <Examples>
            <Example desc="Find all using access declarations" xpath="//src:uning[src:is_using_access_decl()]"/>
        </Examples>
        <Tags>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_type_alias()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if the using is a C++11 type alias.
        </Desc>
        <Examples>
            <Example desc="Find all using type aliases" xpath="//src:uning[src:is_type_alias()]"/>
        </Examples>
        <Tags>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_using_namespace()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if using contains namespace (e.x. using namespace std;).
        </Desc>
        <Examples>
            <Example desc="Find all using namespace declarations" xpath="//src:uning[src:is_using_namespace()]"/>
        </Examples>11
        <Tags>
            <Tag name="using"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_initializers()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if a constructor has an member initialization list.
        </Desc>
        <Examples>
            <Example desc="Find all constructors with member initialization lists" xpath="//src:constructor[src:has_initializers()]"/>
        </Examples>
        <Tags>
            <Tag name="constructor"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_converting_constructor()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if the constructor could be used for conversion with the assignment operator.
The following is used to determine if a constructor could be used as a conversion
constructor: It can not be explicit and it must have at min_number_of_arguments that's
either zero or one and if it has a minimum of zero then it must have at least one parameter.
        </Desc>
        <Examples>
            <Example desc="Find all constructors that could be used for conversion during assignment" xpath=""/>
        </Examples>
        <Tags>
            <Tag name="constructor"/>
            <Tag name="constructor_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_local_storage()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks to see if a variable declaration is not static and not extern.
        </Desc>
        <Examples>
            <Example desc="Find all variable declarations that have local storage." xpath="//src:decl_stmt[src:has_local_storage()]"/>
        </Examples>
        <Tags>
            <Tag name="decl_stmt"/>
            <Tag name="decl"/>
            <Tag name="type"/>
            <Tag name="param"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_scoped_to_file()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Checks if a variable declaration, type declaration or function is scoped to a
file because it's static or it's within an anonymous namespace.
        </Desc>
        <Examples>
            <Example desc="Find all variables that have their scope limited to a file" xpath="//src:decl_stmt[src:is_scoped_to_file()]"/>
        </Examples>
        <Tags>
            <Tag name="decl_stmt"/>
            <Tag name="using"/>
            <Tag name="class" />
            <Tag name="class_decl"/>
            <Tag name="struct" />
            <Tag name="struct_decl" />
            <Tag name="union" />
            <Tag name="union_decl" />
            <Tag name="function" />
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_single_decl()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks a declaration to see if it has more then one variable declared in it's declaration.
        </Desc>
        <Examples>
            <Example desc="Find all variables that declare a single variable" xpath="//src:decl_stmt[src:is_single_decl()]"/>
        </Examples>
        <Tags>
            <Tag name="decl_stmt"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_multi_decl()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Check to see if a declaration statement declares more then one variable.
        </Desc>
        <Examples>
            <Example desc="Find all variable declaration statements that declare more then on variable" xpath="//src:decl_stmt[src:is_multi_decl()]"/>
        </Examples>
        <Tags>
            <Tag name="decl_stmt"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_array()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if a declaration is an array.
        </Desc>
        <Examples>
            <Example desc="Find all parameters that are an array type" xpath="//src:parameter[src:is_array()]"/>
        </Examples>
        <Tags>
            <Tag name="argument"/>
            <Tag name="param"/>
            <Tag name="type"/>
            <Tag name="decl_stmt"/>
            <Tag name="decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_event_function()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the current function or function_decl is part of an event.
        </Desc>
        <Examples>
            <Example desc="Find all adders and remover functions" xpath="//src:function[src:is_event_function()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_property_function()</Name>
        <Langs>C#</Langs>
        <Desc>
Check to see if the function is get or set within a property.
        </Desc>
        <Examples>
            <Example desc="Find all implemented get and set functions" xpath="//src:function[src:is_property_function()]"/>
        </Examples>
        <Tags>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool defined_event_functions()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defined at least one event function.
        </Desc>
        <Examples>
            <Example desc="Find all events that define an adder and/or a remover" xpath="//src:event[sr:defined_event_function()]"/>
        </Examples>
        <Tags>
            <Tag name="event"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_add()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defines the add function of an event.
        </Desc>
        <Examples>
            <Example desc="Find all events that define an add function" xpath="//src:event[src:has_add()]"/>
        </Examples>
        <Tags>
            <Tag name="event"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_remove()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defines the remove function of an event.
        </Desc>
        <Examples>
            <Example desc="Find all events that define a remove function" xpath="//src:event[src:has_remove()]"/>
        </Examples>
        <Tags>
            <Tag name="event"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool defined_property_function()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defined get and/or set function.
        </Desc>
        <Examples>
            <Example desc="Find all properties that define a get and/or a set function" xpath="//src:property[src:defined_property_function()]"/>
        </Examples>
        <Tags>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_get()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defines the get function of a property.
        </Desc>
        <Examples>
            <Example desc="Find all properties that define a get function" xpath="//src:property[src:has_get()]"/>
        </Examples>
        <Tags>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_set()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the user defines the set function of a property.
        </Desc>
        <Examples>
            <Example desc="Find all properties that define a set function" xpath="//src:property[src:has_set()]"/>
        </Examples>
        <Tags>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_indexer()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks to see if the property is an indexer property.
        </Desc>
        <Examples>
            <Example desc="Find all indexer properties" xpath="//src:property[src:is_indexer()]"/>
        </Examples>
        <Tags>
            <Tag name="property"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_closure()</Name>
        <Langs>C++, C#</Langs>
        <Desc>
Works in both languages but doesn't matter accept in C#, checks if something is either a lambda or delegate.
        </Desc>
        <Examples>
            <Example desc="Find all closures" xpath="//src:*[src:is_closure()]"/>
        </Examples>
        <Tags>
            <Tag name="lambda"/>
            <Tag name="delegate"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_capture_all_by_value()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if a lambda only uses a capture all by value or if the capture argument
is the all by value capture.
        </Desc>
        <Examples>
            <Example desc="Find all lambda functions that use a capture all by value" xpath="//src:lambda[src:is_capture_all_by_value()]"/>
        </Examples>
        <Tags>
            <Tag name="lambda"/>
            <Tag name="capture"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_capture_all_by_reference()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if a lambda only uses a capture all by reference or if the capture argument
is the all by reference capture.
        </Desc>
        <Examples>
            <Example desc="Find all lambda functions that use a capture all by reference" xpath="//src:lambda[src:is_capture_all_by_reference()]"/>
        </Examples>
        <Tags>
            <Tag name="lambda"/>
            <Tag name="capture"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool captures_named_variable()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks the capture of lambda to see if it captures any variable by name or if
called on a capture argument then it returns true if the current argument is a named capture.
        </Desc>
        <Examples>
            <Example desc="Find all lambdas that capture a variable by name" xpath="//src:lambda[src:capture_named_variable()]"/>
        </Examples>
        <Tags>
            <Tag name="lambda"/>
            <Tag name="capture"/>
            <Tag name="argument"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_function_try()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks if the current try is a function try.
        </Desc>
        <Examples>
            <Example desc="Find all try statements that are function try statements" xpath="//src:try[src:is_function_try()]"/>
        </Examples>
        <Tags>
            <Tag name="try"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_finally()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
Checks for the finally clause of a try.
        </Desc>
        <Examples>
            <Example desc="Find all try statements that have a finally" xpath="//src:try[src:has_finally()]"/>
        </Examples>
        <Tags>
            <Tag name="catch"/>
            <Tag name="try"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_resource_try()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks the try's resource parameter to see if this is a resource based try.
        </Desc>
        <Examples>
            <Example desc="Find all try statements that contain a resource" xpath="//src:try[src:is_resource_try()]"/>
        </Examples>
        <Tags>
            <Tag name="try"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_indexing_expr()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if the current expression contains an indexing expression.
        </Desc>
        <Examples>
            <Example desc="Find all expressions that contain an indexing expression" xpath="//src:expr[src:has_indexing_expr()]"/>
        </Examples>
        <Tags>
            <Tag name="expr"/>
            <Tag name="expr_stmt"/>
            <Tag name="init"/>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="argument"/>
            <Tag name="param"/>
            <Tag name="condition"/>
            <Tag name="incr"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_call()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if an expression contains a call.
        </Desc>
        <Examples>
            <Example desc="Find all conditions that contain a call" xpath="//src:condition[src:has_call()]"/>
        </Examples>
        <Tags>
            <Tag name="expr"/>
            <Tag name="expr_stmt"/>
            <Tag name="argument"/>
            <Tag name="param"/>
            <Tag name="decl"/>
            <Tag name="decl_stmt"/>
            <Tag name="init"/>
            <Tag name="condition"/>
            <Tag name="incr"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_member_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if the operator is a member accessing operator. This includes any
scope operators or member access operators such as -&amp;gt; or .
&lt;br/&gt;
&lt;br/&gt;
Matches: &lt;code&gt;:: . -&amp;gt; .* -&amp;gt;*&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all of the member access operator uses" xpath="//src:operator[src:is_member_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_global_scope_operator()</Name>
        <Langs>C++</Langs>
        <Desc>
Checks to see if the use of an operator is being used to denote a global scope.
        </Desc>
        <Examples>
            <Example desc="Find all uses of the global scope operator" xpath="//src:operator[src:is_global_scope_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_pointer_member_operator()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Matches one of the following operators: &lt;code&gt;-&amp;gt; -&amp;gt;*&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all uses of a member pointer member operator" xpath="//src:operator[src:is_pointer_member_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_bitwise_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if an operator is a bitwise operator. This includes the address of
operator because there is no easy way to tell the difference between an address
of operator and the bitwise and operator using just srcML.
&lt;br/&gt;
&lt;br/&gt;
Matches one of the following operators: &lt;code&gt;&amp;gt;&amp;gt; &amp;lt;&amp;lt; ^ ~ &amp;amp; | &amp;gt;&amp;gt; &amp;lt;&amp;lt; ^= &amp;amp;= |= &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all bitwise operators" xpath="//src:operator[src:is_bitwise_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_arithmetic_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks to see if the operators is an arithmetic operator. This also includes
unary + and - operators and the pointer dereference operator.
&lt;br/&gt;
&lt;br/&gt;
Matches one of the following operators: &lt;code&gt; + - * / % += -= *= /= %=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all arithmetic operators" xpath="//src:operator[src:is_arithmetic_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_multiplicative_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches * and *=. This includes the dereference operator because as a limitation
of srcML it's impossible to tell the difference between the two.
        </Desc>
        <Examples>
            <Example desc="Find all multiplicative operators" xpath="//src:operator[src:is_multiplicative_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_divisible_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators: &lt;code&gt; / /=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all division operators" xpath="//src:operator[src:is_divisible_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_additive_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators: &lt;code&gt; + +=&lt;/code&gt; Includes unary +.
        </Desc>
        <Examples>
            <Example desc="Find all addition operators" xpath="//src:operator[src:is_additive_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>is_subtraction_operator</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators: &lt;code&gt; - -=&lt;/code&gt; Includes unary -.
        </Desc>
        <Examples>
            <Example desc="Find all subtraction operators" xpath="//src:operator[src:is_subtraction_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_shift_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of following operators: &lt;code&gt; &amp;gt;&amp;gt; &amp;lt;&amp;lt; &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;= &lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all shift operators" xpath="//src:operator[src:is_shift_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_relational_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators:&lt;code&gt; &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= == !=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all relational operators" xpath="//src:operator[src:is_relational_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_equality_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators:&lt;code&gt;== !=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all equality operators" xpath="//src:operator[src:is_equality_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_logical_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators:&lt;code&gt;! &amp;amp;&amp;amp; ||&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all logical operators" xpath="//src:operator[src:is_logical_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operators"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_assignment_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of the following operators:&lt;code&gt;= &amp;amp;= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= |= ^= += -= *= /= %= &amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all assignment operators" xpath="//src:operator[src:is_assignment_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_compound_assignment()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks for multiple assignment operators within a single expression or expression statement.
        </Desc>
        <Examples>
            <Example desc="Find all expressions that contain a compound assignment." xpath="//src:expr[src:is_compound_assignment()]"/>
        </Examples>
        <Tags>
            <Tag name="expr"/>
            <Tag name="expr_stmt"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_shift_assign_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of following operators: &lt;code&gt;&amp;gt;&amp;gt;= &amp;lt;&amp;lt;= &amp;gt;&amp;gt;&amp;gt;= &lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all shift assignment operators" xpath="//src:operator[src:is_shift_assignment_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_unsigned_shift_operator()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Matches one of following operators: &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;= &lt;/code&gt;
        </Desc>
        <Examples>
            <Example desc="Find all unsigned shift assignment operators" xpath="//src:operator[src:is_unsigned_shift_assignment_operator()]"/>
        </Examples>
        <Tags>
            <Tag name="operator"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_ranged_for()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if the for loop is a ranged for.
        </Desc>
        <Examples>
            <Example desc="Find all ranged for loops in C++ or Java" xpath="//src:for[src:is_ranged_for()]"/>
        </Examples>
        <Tags>
            <Tag name="for"/>
            <Tag name="foreach"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool has_default_case()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks if there is a default label within a switch statement.
        </Desc>
        <Examples>
            <Example desc="Find all of the switch statements with a default case" xpath="//src:switch[src:has_default_cast()]"/>
        </Examples>
        <Tags>
            <Tag name="switch"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_continue_to_label()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a continue statement is a continue to label statement.
        </Desc>
        <Examples>
            <Example desc="Find all continue statements that continue to a label" xpath="//src:continue[src:is_continue_to_label()]"/>
        </Examples>
        <Tags>
            <Tag name="continue"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_break_to_label()</Name>
        <Langs>Java</Langs>
        <Desc>
Checks to see if a break statement is a continue to label statement.
        </Desc>
        <Examples>
            <Example desc="Find all break statements that break to a label" xpath="//src:break[src:is_break_to_label()]"/>
        </Examples>
        <Tags>
            <Tag name="break"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_goto_case()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks if a goto is a goto case label.
        </Desc>
        <Examples>
            <Example desc="Find all goto statements that goto a case label" xpath="//src:goto[src:is_goto_case()]"/>
        </Examples>
        <Tags>
            <Tag name="goto"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_rethrow()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Checks if the current throw is a rethrow statement (meaning it's just throw).
        </Desc>
        <Examples>
            <Example desc="Find all rethrow statements" xpath="//src:throw[src:is_rethrow()]"/>
        </Examples>
        <Tags>
            <Tag name="throw"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_nullable()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks for the ? modifier.
        </Desc>
        <Examples>
            <Example desc="Find all functions with a nullable return type" xpath="//src:function[src:type[src:is_nullable()]]"/>
        </Examples>
        <Tags>
            <Tag name="decl"/>
            <Tag name="param"/>
            <Tag name="type"/>
            <Tag name="decl_stmt"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_type_definition()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Checks if something is a type definition. This doesn't include type declarations.
        </Desc>
        <Examples>
            <Example desc="Find all types within a system" xpath="//src:*[src:is_type_definition()]"/>
        </Examples>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_class()</Name>
        <Langs>C++, C#, Java</Langs>
        <Desc>
Check if the current item is a class. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_enum()</Name>
        <Langs>C, C++, C#, Java</Langs>
        <Desc>
Check if the current item is an enum. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_enum_class()</Name>
        <Langs>C++</Langs>
        <Desc>
Check if the current item is an enum class. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_struct()</Name>
        <Langs>C, C++, C#</Langs>
        <Desc>
Check if the current item is a struct. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_union()</Name>
        <Langs>C, C++</Langs>
        <Desc>
Check if the current item is a union. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>

    <ExtFunc>
        <Name>bool is_partial()</Name>
        <Langs>C#</Langs>
        <Desc>
Check if a class or function is partial.
        </Desc>
        <Examples>
            <Example desc="Find all partial classes" xpath="//src:class[src:is_partial()]"/>
        </Examples>
        <Tags>
            <Tag name="class"/>
            <Tag name="interface"/>
            <Tag name="struct"/>
            <Tag name="function"/>
            <Tag name="function_decl"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_delegate_type()</Name>
        <Langs>C#</Langs>
        <Desc>
Checks if the current item is delegate function type declarations. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_interface()</Name>
        <Langs>C#, Java</Langs>
        <Desc>
Check if the current item is a interface. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>
    
    <ExtFunc>
        <Name>bool is_annotation()</Name>
        <Langs>Java</Langs>
        <Desc>
Check if the current item is an annotation definition. This is intended to be used with is_type_definition.
        </Desc>
        <Tags>
            <Tag name="Any Element"/>
        </Tags>
    </ExtFunc>

</XPathExtensionFunctions>      
