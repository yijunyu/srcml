<HowToRead title="srcML Grammar Overview">
    <Desc>
This sections describes the grammar used to describe the srcML structure.
The grammar is an EBNF-like grammar that combines the known XML syntax and EBNF
to express the contents of individual elements in terms of rules. This
grammar is used instead of a DTD, RELAX NG or XML Schema
because the XML is being used to express the structure of a programming
language which can't be accurately or readably expressed using traditional
XML data description languages.
    </Desc>
    
    
    <Entry title="rules">
        <Desc>
There are three types of rules within the grammar: 1) an EBNF Rule 2) an Element Rule and 3) an Attribute Rule. 
All of the rules follow one of two forms:
<pre class="sourceCodeExample"><span class="replacableText">rule-name</span> : <span class="replacableText">rule-contents</span> ;</pre>
or
<pre class="sourceCodeExample"><span class="replacableText">rule-name</span> [<span class="replacableText">parameters</span>]: <span class="replacableText">rule-contents</span> ;</pre>
This is the syntax for the EBNF Rule, but the other types of rules make extensions to this rule structure
by adding meta information after the <span class="replacableText"><code>rule-name</code></span>.
<br/>
All rules are referred to by their <span class="replacableText"><code>rule-name</code></span> when used
as part of another rule.
<br/>
<span class="replacableText"><code>rule-name</code></span> the name of the rule.
<br/>
<span class="replacableText"><code>parameters</code></span> is a comma separated list of names.
<br/>
<span class="replacableText"><code>rule-contents</code></span> is the content of the rule.
<br/>
Whitespace within the XML is ignored when matching unless specified as part of
a literal.
        </Desc>
    </Entry>
    
    
    <Entry title="EBNF rule">
        <Desc>
A EBNF Rule is the most general rule that doesn't include any additional information from
XML as part of its name. Each rule is broken down into to parts: the left hand side
and right hand side, both sides are separated by a <code>:</code>(colon). The left hand side
of the rule represents its name and the right the rule's contents. The right hand side
is terminated by a <code>;</code>(semi-colon).
        </Desc>
        <Example type="pre"><span class="replacableText">rule-name</span> : <span class="replacableText">rule-contents</span> ;</Example>
        <Example type="pre" title="EBNF Rule with Parameters"><span class="replacableText">rule-name</span> [<span class="replacableText">parameters</span>]: <span class="replacableText">rule-contents</span> ;</Example>
    </Entry>


    <Entry title="element rule">
        <Desc>
An element rule describes the content of an XML element. An element rule adds the elements
name and optional attribute list to the rule as meta information. An element
rule may have parameters. Parameters are always last as part of a rule's left hand
side before the colon. An <span class="replacableText"><code>attribute-list</code></span>
is an unordered comma separated list of attributes that are part of the
<span class="replacableText"><code>tag-name</code></span>. An attribute within
the list may be optional, indicated by a <code>?</code> following it's name,
but no other grammar constructs can be used to describe it.
        </Desc>
        <Example type="pre"><span class="replacableText">rule-name</span> &lt;<span class="replacableText">tag-name</span>&gt; : <span class="replacableText">rule-contents</span> ;</Example>
        <Example type="pre"><span class="replacableText">rule-name</span> &lt;<span class="replacableText">tag-name</span>&gt; (<span class="replacableText">attribute-list</span>) : <span class="replacableText">rule-contents</span> ;</Example>
    </Entry>


    <Entry title="attribute rule">
        <Desc>
An attribute rule describes an XML attribute for an element. The XML attribute's
name is given as meta information following the rule name and prefixed with a
<code>@</code>. Attribute rules can not have parameters. 
XML attributes take the form <code>attribute-name="content"</code> and the 
<span class="replacableText"><code>rule-contents</code></span> represents what to expected
within the <code>content</code> of an attribute.
        </Desc>
        <Example type="pre"><span class="replacableText">rule-name</span> @<span class="replacableText">attribute-name</span> : <span class="replacableText">rule-contents</span> ;</Example>
    </Entry>


    
    <Entry title="rule parameters and referencing a rule with parameters">
        <Desc>
The parameters of a rule can be used to pass any information that can be used to describe
a rule. The use of a parameter within the description of a rule is indicated by using
a <code>$</code> before the variable's name. An example of this would be if an
element only has content based on the context it's used in. Each rule that would
use the parameterized rule would indicate its content using its parameter. For example, the rule
<pre class="sourceCodeExample">type &amp;lt;type&amp;gt; [value]: $value ;</pre>
describes an element with the name <code>type</code> whose value
is specified by the caller. This is illustrated in the following example:
<pre class="sourceCodeExample">documentation &amp;lt;documentation&amp;gt; : type["docbook"] ;</pre>
This means that the <code>documentation</code> rule would match the following XML,
<pre class="sourceCodeExample">&amp;lt;documentation&amp;gt;
    &amp;lt;type&amp;gt;docbook&amp;lt;/type&amp;gt;
&amp;lt;/documentation&amp;gt;</pre>
        </Desc>
    </Entry>

    
    <Entry title="group">
        <Desc>
A group is simply EBNF elements that are between <code>()</code>.
        </Desc>
        <Example type="pre">(<span class="replacableText">pattern</span>)</Example>
    </Entry>


    <Entry title="zero or more">
        <Desc>
The <code>*</code> indicates zero or more occurrences of the preceding pattern or group.
        </Desc>
        <Example type="pre"><span class="replacableText">pattern</span>*</Example>
        <Example type="pre">(<span class="replacableText">pattern</span>)*</Example>
    </Entry>


    <Entry title="one or more">
        <Desc>
The <code>+</code> indicates one or more occurrences of the preceding pattern or group.
        </Desc>
        <Example type="pre"><span class="replacableText">pattern</span>+</Example>
        <Example type="pre">(<span class="replacableText">pattern</span>)+</Example>
    </Entry>


    <Entry title="optional">
        <Desc>
The <code>?</code> indicates that a pattern or group may occur zero or one times.
        </Desc>
        <Example type="pre"><span class="replacableText">pattern</span>?</Example>
        <Example type="pre">(<span class="replacableText">pattern</span>)?</Example>
    </Entry>


    <Entry title="choice">
        <Desc>
The <code>|</code> indicates that a there are multiple possible matches.
        </Desc>
        <Example type="pre">(<span class="replacableText">pattern1</span> | <span class="replacableText">pattern2</span>)</Example>
    </Entry>


    <Entry title="inline element">
        <Desc>
An inline element is used to describe a special case of an element that would usually
contain a different pattern. An inline element is the element rule's
meta information followed by <code>{}</code> which surround the element's contents.
        </Desc>
        <Example type="pre">&amp;lt;<span class="replacableText">tag-name</span>&amp;gt;{ <span class="replacableText">pattern</span> }</Example>
        <Example type="pre">&amp;lt;<span class="replacableText">tag-name</span>&amp;gt; (<span class="replacableText">attribute-list</span>) { <span class="replacableText">pattern</span> }</Example>
    </Entry>


    <Entry title="literals">
        <Desc>
A literal describes possible text that occurs at a given location within the grammar.
Whitespace between a literal and any other element within the XML is undefined,
this means that it may or may not have whitespace before or after it. However,
the typical srcML behavior is to place tags without preceding or trailing whitespace
whenever possible.
        </Desc>
        <Example type="pre"><span style="color:red">"value"</span></Example>
    </Entry>

    
    <Entry title="Identifier keyword">
        <Desc>
The <code>Identifier</code> keyword indicates any possible identifier within the
language you are interested in. In some cases this also includes keywords. Typically
that means keywords that are names of built-in types, such as int, double, or auto,
or implicit variable names such as this, or base.
        </Desc>
        <Example type="pre"><span style="font-weight:bold">Identifier</span></Example>
    </Entry>
    

    <Entry title="Text keyword">
        <Desc>
The <code>Text</code> keyword is used to indicate that literally ANY text (that isn't an XML element),
including whitespace, could occur at that location within the grammar.
        </Desc>
        <Example type="pre"><span style="font-weight:bold">Text</span></Example>
    </Entry>
    

    <Entry title="Number keyword">
        <Desc>
The <code>Number</code> keyword is used to match any number, floating point or
integer, within the XML.
        </Desc>
        <Example type="pre"><span style="font-weight:bold">Number</span></Example>
    </Entry>
    
    

    <Entry title="Operator keyword">
        <Desc>
The <code>Operator</code> keyword matches any operator from any of the supported languages.
        </Desc>
        <Example type="pre"><span style="font-weight:bold">Operator</span></Example>
    </Entry>
    

    <Entry title="Empty keyword">
        <Desc>
The <code>empty</code> keyword indicates that an element has no content.
        </Desc>
        <Example type="pre"><span style="font-weight:bold">Empty</span></Example>
    </Entry>
    
</HowToRead>
