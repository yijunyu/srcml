<DocConfig title="C++ srcML" lang="C++" outputFile="cpp_srcML.html">

    <Category title="Statements">
        <DocEntry title="if statement" shortTitle="if">
            <Elements>
                <Element name="if" />
                <Subelement name="condition" />
                <Subelement name="then" />
                <Subelement name="else" />
                <Subelement name="elseif" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:if">
                    <Desc>Find all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:condition">
                    <Desc>Find all conditions of all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:then">
                    <Desc>Find all then statements</Desc>
                </XPath>
                <XPath path="//src:if/src:else">
                    <Desc>Find all else statements</Desc>
                </XPath>
                <XPath path="//src:if[count(src:else) = 0]">
                    <Desc>Find all if statements without an else statement</Desc>
                </XPath>
                <XPath path="//src:if//src:if">
                    <Desc>Find all nested if statements</Desc>
                </XPath>
                <XPath path="//src:elseif">
                    <Desc>Find all else-if statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-if-1.c" />
            <Example file="../C/C-if-2.c" />
            <Example file="../C/C-if-3.c" />
            <Example file="../C/C-if-4.c" />
            <Example file="../C/C-if-5.c" />
            <Example file="../C/C-if-6.c" />
        </DocEntry>

        <DocEntry title="while statement" shortTitle="while">
            <Elements>
                <Element name="while" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:while">
                    <Desc>Find all while loops</Desc>
                </XPath>
                <XPath path="//src:while/src:condition">
                    <Desc>Find the conditions of all while loops</Desc>
                </XPath>
                <XPath path="//src:while[src:condition//src:name = 'i']">
                    <Desc>Find all while loops which have a condition containing the variable <code class="inline">i</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-while-1.c" />
        </DocEntry>

        <DocEntry title="for statement" shortTitle="for">
            <Elements>
                <Element name="for" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:for">
                    <Desc>Find all for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:init">
                    <Desc>Find all initialization statements from within the control of all for loops</Desc>
                </XPath>
                <XPath path="//src:for[string-length(src:control/src:init/src:decl/src:name) = 1]">
                    <Desc>Find all for loops which declare a variable with a single character name (e.g. <code class="inline">x</code>, <code class="inline">i</code> or <code class="inline">y</code>)</Desc>
                </XPath>
                <XPath path="//src:for[src:control/src:incr/src:expr//node()/following-sibling::src:operator[.= '++']]">
                    <Desc>Find all for loops which use post decrement as part of the increment expression</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:incr">
                    <Desc>Find the increment expressions from every for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:condition">
                    <Desc>Find the conditions of all for loops</Desc>
                </XPath>
                <XPath path="//src:for[src:control//src:range]">
                    <Desc>Find all range based for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-for-1.c" />
            <Example file="../C/C-for-2.c" />
            <Example file="../C/C-for-3.c" />
            <Example file="CPP-range-for-1.cpp" />
        </DocEntry>

        <DocEntry title="do statement" shortTitle="do">
            <Elements>
                <Element name="do" />
                <Subelement name="block" />
                <Subelement name="condition" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:do">
                    <Desc>Find all do-while loops</Desc>
                </XPath>
                <XPath path="//src:do[src:condition//src:name = 'counter']">
                    <Desc>Find all do-while loops which have a condition containing the variable <code class="inline">counter</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-do-while-1.c" />
            <Example file="../C/C-do-while-2.c" />
        </DocEntry>

        <DocEntry title="break statement" shortTitle="break">
            <Elements>
                <Element name="break" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:break">
                    <Desc>Find all break statements</Desc>
                </XPath>
                <XPath path="//src:break[ancestor::src:for]">
                    <Desc>Find all break statements within for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-break.c" />
        </DocEntry>

        <DocEntry title="continue statement" shortTitle="continue">
            <Elements>
                <Element name="continue" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:continue">
                    <Desc>Find all continue statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-continue.c" />
        </DocEntry>

        <DocEntry shortTitle="return" title="return statement">
            <Elements>
                <Element name="return" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:return">
                    <Desc>Find all return statements</Desc>
                </XPath>
                <XPath path="//src:function[ count(.//src:return) &gt; 1]">
                    <Desc>Find all functions with more then one return</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-return-1.c" />
            <Example file="../C/C-return-2.c" />
        </DocEntry>

        <DocEntry title="switch statement" shortTitle="switch">
            <Elements>
                <Element name="switch" />
                <Subelement name="condition" />
                <Subelement name="case" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:switch">
                    <Desc>Find all switch statements</Desc>
                </XPath>
                <XPath path="//src:switch/src:condition">
                    <Desc>Find all of the conditions of all switch statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-switch-1.c" />
            <Example file="../C/C-switch-2.c" />
        </DocEntry>

        <DocEntry shortTitle="case" title="case statement">
            <Elements>
                <Element name="case" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:case">
                    <Desc>Find all case labels</Desc>
                </XPath>
                <XPath path="//src:case[.//src:name = 'SATURDAY']">
                    <Desc>Find all case labels which use <code class="inline">SATURDAY</code></Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:case[.//src:name = 'SATURDAY']]">
                    <Desc>Find all switch statements that have a case that uses <code class="inline">SATURDAY</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-case-1.c" />
        </DocEntry>

        <DocEntry shortTitle="default" title="default statement">
            <Elements>
                <Element name="default" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default">
                    <Desc>Find all default labels</Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:default]">
                    <Desc>Find all switch statements which have a default label</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-default-1.c"/>
        </DocEntry>

        <DocEntry title="block">
            <Elements>
                <Element name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:block">
                    <Desc>Find all blocks</Desc>
                </XPath>
                <XPath path="//src:block/src:decl_stmt">
                    <Desc>Find all variable declaration within a block</Desc>
                </XPath>
            </XPathQueries>	
            <Example file="../C/C-compound-block.c" />
        </DocEntry>

        <DocEntry title="label">
            <Elements>
                <Element name="label" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:label">
                    <Desc>Find all labels</Desc>
                </XPath>
                <XPath path="//src:label[not(src:name[. = //src:goto/src:name])]">
                    <Desc>Find all labels without a goto statement</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-label.c" />
        </DocEntry>

        <DocEntry shortTitle="goto" title="goto statement">
            <Elements>
                <Element name="goto" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:goto">
                    <Desc>Find all goto statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-goto.c" />
        </DocEntry>

        <DocEntry title="empty statement">
            <Elements>
                <Element name="empty_stmt" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:empty_stmt">
                    <Desc>Find all empty statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-empty-stmt.c" />
        </DocEntry>
    </Category>


    <Category title="Specifiers">
        <DocEntry title="const">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='const']]">
                    <Desc>Find all const variables</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:specifier [.='const']]">
                    <Desc>Find all const function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:type/src:specifier [.='const']]">
                    <Desc>Find all function declarations with a const return type</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-const-variable-1.c" />
            <Example file="../C/C-const-variable-2.c" />
            <Example file="CPP-const-func-1.cpp" />
        </DocEntry>

        <DocEntry title="static">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='static']]">
                    <Desc>Find all static function declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:type/src:specifier [.='static']]">
                    <Desc>Find all static variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-static-1.c" />
            <Example file="../C/C-static-2.c" />
        </DocEntry>

        <DocEntry title="inline">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='inline']]">
                    <Desc>Find all inline function declarations</Desc>
                </XPath>
                <XPath path="//src:namespace[src:specifier [.='inline']]">
                    <Desc>Find all inline namespace declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-inline.c" />
            <Example file="CPP-inline-1.cpp" />
        </DocEntry>



        <DocEntry title="volatile">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='volatile']]">
                    <Desc>Find all volatile variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-volatile.c" />
        </DocEntry>

        <DocEntry title="restrict">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='restrict']]">
                    <Desc>Find all variables declared with the restrict specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-restrict.c" />
        </DocEntry>

        <DocEntry title="auto specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='auto']]">
                    <Desc>Find all auto variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-auto.c" />
        </DocEntry>

        <DocEntry title="auto type">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:name [.='auto']]">
                    <Desc>Find all variables declared with auto as their type</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-auto-1.cpp" />
            <Example file="CPP-auto-2.cpp" />
        </DocEntry>

        <DocEntry title="register">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='register']]">
                    <Desc>Find all variables declared with the register specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-register.c" />
        </DocEntry>

        <DocEntry title="extern block">
            <Elements>
                <Element name="extern" />
                <Subelement name="literal"/>
                <Subelement name="function_decl"/>
                <Subelement name="decl_stmt"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:extern">
                    <Desc>Find all extern blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example title="external function with linkage specifier" file="../C/C-extern-linkage-1.c" />
            <Example title="extern structure with linkage specifier" file="../C/C-extern-linkage-2.c" />
            <Example title="extern variable with linkage specifier" file="../C/C-extern-linkage-3.c" />
            <Example title="extern block with linkage specifier" file="../C/C-extern-linkage-block.c" />
        </DocEntry>

        <DocEntry title="extern specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                    <XPath path="//src:decl[src:type/src:specifier [.='extern']]">
                    <Desc>Find all extern variables</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:type/src:specifier [.='extern']]">
                    <Desc>Find all extern function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example title="external variable" file="../C/C-extern-1.c" />
            <Example title="external structure" file="../C/C-extern-2.c" />
            <Example title="external function" file="../C/C-extern-3.c" />
        </DocEntry>

        <DocEntry title="mutable">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='mutable']]">
                    <Desc>Find all mutable variable declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-mutable-1.cpp" />
        </DocEntry>

        <DocEntry title="thread_local">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="/src:decl[src:type/src:specifier [.='thread_local']]">
                    <Desc>Find all thread_local variable declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-thread_local-1.cpp" />
        </DocEntry>

        <DocEntry title="constexpr">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:specifier [.='constexpr']]">
                    <Desc>Find all constexpr variables</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:specifier [.='constexpr']]">
                    <Desc>Find all constexpr functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-constexpr-1.cpp" />
            <Example file="CPP-constexpr-2.cpp" />
        </DocEntry>

        <DocEntry title="final">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='final']]">
                    <Desc>Find all final function declarations</Desc>
                </XPath>
                <XPath path="//src:class[src:specifier [.='final']]">
                    <Desc>Find all final class definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-final-1.cpp" />
            <Example file="CPP-final-2.cpp" />
        </DocEntry>

        <DocEntry title="override">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='override']]">
                    <Desc>Find all overridden function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-override-1.cpp" />
        </DocEntry>

        <DocEntry title="friend">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:friend[src:function_decl]">
                    <Desc>Find all friend function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-friend-1.cpp" />
        </DocEntry>

        <DocEntry title="virtual">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:type/src:specifier [.='virtual']]">
                    <Desc>Find all virtual function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-virtual-1.cpp" />
        </DocEntry>

        <DocEntry title="delete specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:specifier [.='delete']]">
                    <Desc>Find all deleted function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-deleted-func.cpp" />
        </DocEntry>

        <DocEntry title="default specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor_decl[src:specifier [.='default']]">
                    <Desc>Find all constructors which explicitly use the compiler's provided implementation</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:specifier [.='default']]">
                    <Desc>Find all functions which explicitly use the compiler's provided implementation</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-default-func.cpp" />
        </DocEntry>

        <DocEntry title="explicit">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor_decl[src:specifier [.='explicit']]">
                    <Desc>Find all explicit constructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-explicit-1.cpp" />
        </DocEntry>

        <DocEntry title="template specifier">
            <Elements>
                <Element name="specifier" />
                <Subelement name="parameter_list" />
                <Subelement name="parameter" />
                <Subelement name="typename" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[src:name/src:specifier[.='template']]">
                    <Desc>Find all names which contain a template specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example title="template used as a specifier" file="CPP-template-3.cpp" />
        </DocEntry>
    </Category>

    <Category title="Declarations, Definitions and Initializations">
        <DocEntry title="variable declaration statement">
            <Desc>
            The difference between a declaration statement and a declaration,
            is that a declaration statement is a statement (ends with a
            semi-colon) and contains a declaration. Declarations are not a statement
            but instead contain the type, variable name, and optional initialization.
            </Desc>
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt">
                    <Desc>Find all declaration statements</Desc>
                </XPath>
                <XPath path="//src:decl_stmt/src:decl[src:type[contains(., 'union')]]">
                    <Desc>Find all variable declaration statements with the union qualifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-variable-declaration-1.c" />
            <Example title="struct declarations" file="../C/C-variable-declaration-2.c" />
            <Example title="template variable" file="CPP-template-variable-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="init">
                	<Desc>Only used when variable is initialized at declaration. See initialization examples for more details.</Desc>
                </Subelement>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl">
                    <Desc>Find all variable declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:init]">
                    <Desc>Find all variable declarations which also initialize the variable</Desc>
                </XPath>
                <XPath path="//src:decl[src:type[contains(., 'struct')]]">
                    <Desc>Find all variable declarations with the struct qualifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-variable-declaration-1.c" />
            <Example title="struct declarations" file="../C/C-variable-declaration-2.c" />
        </DocEntry>
        
        <DocEntry title="function declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl">
                    <Desc>Find all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:type">
                    <Desc>Find all return types from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function declarations with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:name">
                    <Desc>Find the names of all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list/src:parameter/src:decl/src:type/src:modifier[.='...']]">
                    <Desc>Find all function declarations that have variadic arguments</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-function-decl-1.c" />
            <Example file="../C/C-function-decl-2.c" />
            <Example file="../C/C-function-decl-3.c" />
            <Example file="../C/C-function-decl-4.c" />
            <Example file="../C/C-function-decl-5.c" />
            <Example file="CPP-function-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="function definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function">
                    <Desc>Find all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:type">
                    <Desc>Find all return types from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function definitions with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function/src:name">
                    <Desc>Find the names of all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:modifier[.='...']]">
                    <Desc>Find all function definitions that have variadic arguments</Desc>
                </XPath>
                <XPath path="//src:function[src:decl_stmt]">
                    <Desc>Find all K &amp; R function definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-function-def-1.c" />
            <Example file="../C/C-function-def-2.c" />
            <Example file="../C/C-function-def-3.c" />
            <Example file="../C/C-function-def-4.c" />
            <Example file="../C/C-function-def-5.c" />
            <Example file="../C/C-function-decl-5.c" />
            <Example file="CPP-auto-1.cpp" />
        </DocEntry>

        <DocEntry title="default function arguments">
            <Elements>
                <Element name="init" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:parameter_list/src:parameter/src:decl/src:init]">
                    <Desc>Find all function declarations with default parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-default-func-args-1.cpp" />
        </DocEntry>

        <DocEntry title="abstract function declaration">
            <Elements>
                <Element name="literal">
                	<AttribStr>type="number"</AttribStr>
                </Element>
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[src:literal[.= 0]]">
                    <Desc>Find all abstract function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-abstract-func-1.cpp" />
        </DocEntry>

        <DocEntry title="lambda functions">
            <Elements>
                <Element name="lambda" />
                <Subelement name="parameter_list" />
                <Subelement name="capture" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:lambda">
                    <Desc>Find all lambda functions</Desc>
                </XPath>
                <XPath path="//src:lambda[not(src:type)]">
                    <Desc>Find all lambda functions without a specified return type</Desc>
                </XPath>
                <XPath path="//src:lambda[src:type/src:name[.='int']]">
                    <Desc>Find all lambdas which have a the return type of int</Desc>
                </XPath>
                <XPath path="//src:lambda[count(src:capture/src:argument/src:modifier[. != '=' and . != '&amp;']) = 1]">
                    <Desc>Find all lambda functions which explicitly capture one variable.</Desc>
                </XPath>
                <XPath path="//src:lambda[src:capture/src:argument/src:modifier[.='&amp;'] and count(src:capture/src:argument)] = 1">
                    <Desc>Find all lambda functions which capture all variables by reference.</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-lambda-1.cpp" />
            <Example file="CPP-lambda-2.cpp" />
            <Example file="CPP-lambda-3.cpp" />
            <Example file="CPP-lambda-4.cpp" />
            <Example file="CPP-lambda-5.cpp" />
            <Example file="CPP-lambda-6.cpp" />
            <Example file="CPP-lambda-7.cpp" />
            <Example file="CPP-lambda-8.cpp" />
        </DocEntry>


        <DocEntry title="namespace">
            <Elements>
                <Element name="namespace" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:namespace">
                    <Desc>Find all namespaces</Desc>
                </XPath>
                <XPath path="//src:namespace[src:specifier[.='inline']]">
                    <Desc>Find all inline namespaces</Desc>
                </XPath>
                <XPath path="//src:using[src:namespace]">
                    <Desc>Find all using namespace declarations</Desc>
                </XPath>
                <XPath path="//src:namespace[count(src:name) > 1]">
                    <Desc>Find all namespace assignments</Desc>
                </XPath>
                <XPath path="//src:namespace[not(src:name)]">
                    <Desc>Find all anonymous namespace declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-namespace-1.cpp" />
            <Example file="CPP-namespace-2.cpp" />
            <Example file="CPP-namespace-3.cpp" />
            <Example file="CPP-namespace-4.cpp" />
            <Example file="CPP-namespace-5.cpp" />
            <Example file="CPP-namespace-6.cpp" />
        </DocEntry>

        <DocEntry title="using">
            <Elements>
                <Element name="using" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:using">
                    <Desc>Find all using declarations</Desc>
                </XPath>
                <XPath path="//src:using[src:namespace]">
                    <Desc>Find all using namespace declarations</Desc>
                </XPath>
                <XPath path="//src:using[not(src:namespace) and not(src:template)]">
                    <Desc>Find all using declarations that import a single item which isn't a namespace</Desc>
                </XPath>
                <XPath path="//src:using[src:template]">
                    <Desc>Find all templated using declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-using-1.cpp" />
            <Example file="CPP-using-2.cpp" />
            <Example title="type aliasing" file="CPP-type-alias-1.cpp" />
        </DocEntry>

        <DocEntry title="typedef">
            <Elements>
                <Element name="typedef" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="function_decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:typedef">
                    <Desc>Find all typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef/src:type">
                    <Desc>Find all types within typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef/src:name">
                    <Desc>Find all names for all typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef[src:type/src:struct]">
                    <Desc>Find all typedefs that are used to define a struct</Desc>
                </XPath>
                <XPath path="//src:typedef[src:function_decl]">
                    <Desc>Find all typedefs that declare a function type</Desc>
                </XPath>
                <XPath path="//src:typedef[src:function_decl[contains(., ')')]]">
                    <Desc>Find all typedefs of a function pointers</Desc>
                </XPath>
                <XPath path="//src:typedef/src:function_decl[contains(., ')')]/src:name">
                    <Desc>Find all names from all typedefs of function pointers</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-typedef-1.c" />
            <Example file="../C/C-typedef-2.c" />
            <Example file="../C/C-typedef-3.c" />
            <Example file="../C/C-typedef-4.c" />
        </DocEntry>

        <DocEntry title="pointer declaration" cat="decl">
            <Elements>
                <Element name="modifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='*']]">
                    <Desc>Find all of the declarations of pointers</Desc>
                </XPath>
                <XPath path="//src:function_decl[contains(., ')')]">
                    <Desc>Find all function pointers</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-pointer-declaration-1.c" />
            <Example file="../C/C-pointer-declaration-2.c" />
            <Example file="../C/C-pointer-declaration-3.c" />
            <Example file="../C/C-pointer-declaration-4.c" />
            <Example file="../C/C-pointer-declaration-5.c" />
            <Example file="../C/C-cv-ptr-decl-1.c" />
            <Example file="../C/C-cv-ptr-decl-2.c" />
        </DocEntry>

         <DocEntry title="reference declaration" cat="decl">
            <Elements>
                <Element name="modifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='&amp;']]">
                    <Desc>Find all reference variable declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-reference-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="rvalue Reference">
            <Elements>
                <Element name="modifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='&amp;&amp;']]">
                    <Desc>Find all rvalue reference variable declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-rvalue-1.cpp" />
        </DocEntry>

        <DocEntry title="array declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:name/src:index]">
                    <Desc>Find all array declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:name/src:index/src:literal[number(.) &lt; 50]]">
                    <Desc>Find all array declarations where the number of elements is less then 50</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-array-declaration-1.c" />
            <Example file="../C/C-array-declaration-2.c" />
            <Example file="../C/C-array-declaration-3.c" />
            <Example file="../C/C-array-declaration-4.c" />
        </DocEntry>

        <DocEntry title="array initialization">
            <Elements>
                <Element name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:name/src:index][src:init]">
                    <Desc>Find all array declarations which initialize the array at the same time</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-array-initialization-1.c" />
            <Example file="../C/C-array-initialization-2.c" />
        </DocEntry>

        <DocEntry title="bitfield">
            <Elements>
                <Element name="range" />
                <Subelement name="literal"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:range]">
                    <Desc>Find all bitfield declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-bitfields.c" />
        </DocEntry>

        <DocEntry title="Uniform initialization syntax">
            <Elements>
                <Element name="call" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt[src:decl/src:argument_list[contains(., '{')]]">
                    <Desc>Find all declaration statements that use the uniform initialization syntax</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-block-init-ctor-syntax-1.cpp" />
        </DocEntry>

        <DocEntry title="operator overloading declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[@type='operator'] ">
                    <Desc>Find all operator declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-op-decl-2.cpp" />
        </DocEntry>

        <DocEntry title="operator overloading definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator']">
                    <Desc>Find all operator overload definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-op-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="implicit conversion operator declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[@type='operator'][not(src:type)]">
                    <Desc>Find all implicit conversion operator overload declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-implicit-conv-2.cpp" />
        </DocEntry>

        <DocEntry title="implicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][not(src:type)]">
                    <Desc>Find all implicit conversion operator overload definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-implicit-conv-1.cpp" />
        </DocEntry>

        <DocEntry title="explicit conversion operator declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl[@type='operator'][src:type/src:specifier[.='explicit']]">
                    <Desc>Find all explicit conversion operator declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-explicit-conv-1.cpp" />
        </DocEntry>

        <DocEntry title="explicit conversion operator definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function[@type='operator'][src:type/src:specifier[.='explicit']]">
                    <Desc>Find all explicit conversion operator overloads</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-explicit-conv-2.cpp" />
        </DocEntry>
    </Category>

    <Category title="Classes, Structs, Unions and Enums">
        <DocEntry title="class">
            <Elements>
                <Element name="class" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class">
                    <Desc>Find all class definitions</Desc>
                </XPath>
                <XPath path="//src:class[src:name[.='foo']]">
                    <Desc>Find all classes with the name <code class="inline">foo</code></Desc>
                </XPath>
                <XPath path="//src:function[ancestor::src:class]">
                    <Desc>Find all functions within classes</Desc>
                </XPath>
                <XPath path="//src:function_decl[ancestor::src:class]">
                    <Desc>Find all function declarations within classes</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-class-1.cpp" />
            <Example file="CPP-class-3.cpp" />
            <Example file="CPP-class-5.cpp" />
            <Example file="CPP-class-6.cpp" />
            <Example file="CPP-class-7.cpp" />
            <Example file="CPP-class-8.cpp" />
        </DocEntry>

        <DocEntry title="class declaration">
            <Elements>
                <Element name="class_decl" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class_decl">
                    <Desc>Find all class declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-class-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="inheritance list">
            <Elements>
                <Element name="super" />
                <Subelement name="specifier" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super]">
                    <Desc>Find all classes with at least one super class</Desc>
                </XPath>
                <XPath path="//src:class[src:super/src:name[. = 'bar']]">
                    <Desc>Find all classes that inherit from <code class="inline">bar</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-inherit-1.cpp" />
        </DocEntry>

        <DocEntry title="default public visibility">
            <Elements>
                <Element name="public">
                    <AttribStr>type="default"</AttribStr>                
                </Element>
            </Elements>
            <XPathQueries>
                <XPath path="//src:public[@type='default']/src:function_decl">
                    <Desc>Find all functions declared within the default public area of a struct</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-public-1.cpp" />
        </DocEntry>

        <DocEntry title="public visibility">
            <Elements>
                <Element name="public"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:public/src:function_decl">
                    <Desc>Find all public functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-public-2.cpp" />
        </DocEntry>

        <DocEntry title="default private visibility">
            <Elements>
                <Element name="private">
                    <AttribStr>type="default"</AttribStr>                
                </Element>
            </Elements>
            <XPathQueries>
                <XPath path="//src:private[@type='default']/src:function_decl">
                    <Desc>Find all of the functions declared within the default private area of a class</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-private-1.cpp" />
        </DocEntry>

        <DocEntry title="private visibility">
            <Elements>
                <Element name="private"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:private/src:decl_stmt">
                    <Desc>Find all private members</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-private-2.cpp" />
        </DocEntry>

        <DocEntry title="protected visibility">
            <Elements>
                <Element name="protected"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:protected/src:function_decl">
                    <Desc>Find all protected function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-protected-1.cpp" />
        </DocEntry>

        <DocEntry title="protected inheritance specifier">
            <Elements>
                <Element name="specifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super/src:specifier[.='protected']]">
                    <Desc>Find all class which use protected inheritance</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-protected-inheritance-specifier-1.cpp" />
        </DocEntry>

        <DocEntry title="private inheritance specifier">
            <Elements>
                <Element name="specifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super/src:specifier[.='private']]">
                    <Desc>Find all classes that use private inheritance</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-private-inheritance-specifier-1.cpp" />
        </DocEntry>

        <DocEntry title="public inheritance specifier">
            <Elements>
                <Element name="specifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:super/src:specifier[.='public']]">
                    <Desc>Find all classes that use private inheritance</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-public-inheritance-specifier-1.cpp" />
        </DocEntry>


        <DocEntry title="constructor">
            <Elements>
                <Element name="constructor" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="member_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constuctor">
                    <Desc>Find all constructors</Desc>
                </XPath>
                <XPath path="//src:constuctor[src:parameter_list[not(src:parameter)]]">
                    <Desc>Find all constructors with no parameters</Desc>
                </XPath>
                <XPath path="//src:constructor[src:parameter_list[not(src:parameter)] or (count(src:parameter_list/src:parameter) = count(src:parameter_list/src:parameter/src:decl/src:init))]">
                    <Desc>Find all possible default constructors, including constructors with all default parameters</Desc>
                </XPath>
                <XPath path="//src:constructor[ (src:name | src:name/src:name[last()]) = (src:parameter_list/src:parameter[1]/src:decl/src:type/src:name | src:parameter_list/src:parameter[1]/src:decl/src:type/src:name[last()])] [( (count(src:parameter_list/src:parameter) - 1) = count(src:parameter_list/src:parameter/src:decl/src:init))]">
                    <Desc>Find all possible copy constructors, including those which are not defined with the body of class and those with default parameters</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-ctor-1.cpp" />
            <Example file="CPP-ctor-2.cpp" />
            <Example file="CPP-ctor-3.cpp" />
            <Example file="CPP-ctor-4.cpp" />
        </DocEntry>

        <DocEntry title="constructor declaration">
            <Elements>
                <Element name="constructor_decl" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:constructor_decl">
                    <Desc>Find all constructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-ctor-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="destructor">
            <Elements>
                <Element name="destructor" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:destructor">
                    <Desc>Find all destructors</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-dtor-1.cpp" />
            <Example file="CPP-dtor-2.cpp" />
        </DocEntry>

        <DocEntry title="destructor declaration">
            <Elements>
                <Element name="destructor_decl" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:destructor_decl">
                    <Desc>Find all destructor declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-dtor-decl-1.cpp" />
        </DocEntry>

        <DocEntry title="struct declaration">
            <Elements>
                <Element name="struct_decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct_decl">
                    <Desc>Find all of the forward declarations for all structs</Desc>
                </XPath>
            </XPathQueries>
            <Example title="forward declaration" file="../C/C-struct-declaration-3.c" />
        </DocEntry>

        <DocEntry title="struct definition">
        	<Desc>See class for more examples.</Desc>
            <Elements>
                <Element name="struct" />
                <Subelement name="name" />
                <Subelement name="super" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct">
                    <Desc>Find the definition of all structs</Desc>
                </XPath>
                <XPath path="//src:struct/src:block/src:specifier/src:decl_stmt">
                    <Desc>Find the members from all structs</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-struct-declaration-1.c" />
            <Example title="variable of an anonymous struct type" file="../C/C-struct-declaration-2.c" />
            <Example title="declaring a struct and instance" file="../C/C-struct-declaration-4.c" />
        </DocEntry>

        <DocEntry title="struct initialization">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
                <Subelement name="init" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:init/src:expr/src:block]">
                    <Desc>Find all declaration of structs which also initialize it</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-struct-initialization-1.c" />
            <Example file="../C/C-struct-initialization-2.c" />
            <Example file="../C/C-struct-initialization-3.c" />
        </DocEntry>

        <DocEntry title="union declaration">
            <Elements>
                <Element name="union_decl" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:union_decl">
                    <Desc>Find all of the forward declarations for all unions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-union-declaration-2.c" />
        </DocEntry>

        <DocEntry title="union definition">
            <Elements>
                <Element name="union" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:union">
                    <Desc>Find all definitions of all unions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-union-declaration-1.c" />
        </DocEntry>

        <DocEntry title="enum definition">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum">
                    <Desc>Find all enum definitions</Desc>
                </XPath>
                <XPath path="//src:enum/src:block/src:decl/src:name">
                    <Desc>Find the names of all members of all enums</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-enum-declaration-1.c" />
            <Example file="../C/C-enum-declaration-3.c" />
        </DocEntry>

        <DocEntry title="enum declaration">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum_decl">
                    <Desc>Find all enum declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-enum-declaration-2.c"/>
        </DocEntry>

        <DocEntry title="enum class">
            <Elements>
                <Element name="enum" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum[@type='class']">
                    <Desc>Find all enum class definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-enum-class-1.cpp" />
        </DocEntry>
    </Category>


    <Category title="Expressions">
        <DocEntry title="function call">
            <Elements>
                <Element name="call"/>
                <Subelement name="name" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:call">
                    <Desc>Find all function calls</Desc>
                </XPath>
            </XPathQueries>
            <Example title="typical function call" file="../C/C-call.c" />
            <Example title="explicit operator call" file="CPP-new-6.cpp" />
        </DocEntry>

         <DocEntry title="new">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:operator[.='new']]">
                    <Desc>Find all expressions which call new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::src:name/src:index]">
                    <Desc>Find all expressions which call array new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::src:name[src:name[.='nothrow']]]">
                    <Desc>Find all expressions which call no throw new</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='new']/following-sibling::node()[2]/self::src:operator[.='(']/following-sibling::node()[not(self::src:name[src:name[ .!= 'nothrow']])]]">
                    <Desc>Find all expressions which call placement new</Desc>
                </XPath>
            </XPathQueries>
            <Example title="regular new" file="CPP-new-1.cpp" />
            <Example title="array new 1" file="CPP-new-2.cpp" />
            <Example title="array new 2" file="CPP-new-3.cpp" />
            <Example title="std::nothrow new" file="CPP-new-4.cpp" />
            <Example title="placement new" file="CPP-new-5.cpp" />
        </DocEntry>

        <DocEntry title="delete" cat="expr">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:operator[.='delete']]">
                    <Desc>Find all expressions which call delete</Desc>
                </XPath>
                <XPath path="//src:expr[src:operator[.='delete']][src:index]">
                    <Desc>Find all expressions which call array delete</Desc>
                </XPath>
            </XPathQueries> 
            <Example title="Regular delete" file="CPP-delete-1.cpp" />
            <Example title="Array delete" file="CPP-delete-2.cpp" />
        </DocEntry>

        <DocEntry title="array indexing">
            <Elements>
                <Element name="name"/>
                <Subelement name="name" />
                <Subelement name="index" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr[src:name/src:index/node()]">
                    <Desc>Find all array indexings</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-array-access.c" />
        </DocEntry>
        
        <DocEntry title="ternary operator">
            <Elements>
                <Element name="ternary" />
                <Subelement name="condition" />
                <Subelement name="then"/>
                <Subelement name="else"/>
            </Elements>
            <Example file="../C/C-ternary-operator.c"/>
            <XPathQueries>
                <XPath path="//src:ternary">
                    <Desc>Find all uses of the ternary operator</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="dereference member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='-&gt;']">
                    <Desc>Find all uses of the -&gt; operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-deref-member-access.c" />
        </DocEntry>

        <DocEntry title="member access">
            <Elements>
                <Element name="expr"/>
                <Subelement name="name" />
                <Subelement name="operator" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:operator[.='.']">
                    <Desc>Find all uses of the . operator</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-member-access.c" />
        </DocEntry>

        <DocEntry title="this">
            <Elements>
                <Element name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:name[.='this']">
                    <Desc>Find all uses of this</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-this-1.cpp" />
        </DocEntry>

	    <OperatorEntry title="pre/post increment" op="++" example="../C/C-Operator-pre_increment.c" />
	    <OperatorEntry title="pre/post decrement" op="--" example="../C/C-Operator-pre_decrement.c" />
	    <OperatorEntry title="address of" op="&amp;" example="../C/C-Operator-address_of.c" />
	    <OperatorEntry title="dereference" op="*" example="../C/C-Operator-deref.c" />
	    <OperatorEntry title="unary minus" op="-" example="../C/C-Operator-unary-minus.c" />
	    <OperatorEntry title="unary plus" op="+" example="../C/C-Operator-unary-plus.c" />
	    <OperatorEntry title="logical not" op="!" example="../C/C-Operator-logical-not.c" />
	    <OperatorEntry title="multiplication" op="*" example="../C/C-Operator-multiplication.c" />
	    <OperatorEntry title="division" op="/" example="../C/C-Operator-divide.c" />
	    <OperatorEntry title="modulus" op="%" example="../C/C-Operator-modulus.c" />
	    <OperatorEntry title="addition" op="+" example="../C/C-Operator-addition.c" />
	    <OperatorEntry title="subtraction" op="-" example="../C/C-Operator-subtraction.c" />
	    <OperatorEntry title="left shift" op="&lt;&lt;" example="../C/C-Operator-left-shift.c" />
	    <OperatorEntry title="right shift" op="&gt;&gt;" example="../C/C-Operator-right-shift.c" />
	    <OperatorEntry title="less then" op="&lt;" example="../C/C-Operator-less-then.c" />
	    <OperatorEntry title="greater then" op="&gt;" example="../C/C-Operator-greater-then.c" />
	    <OperatorEntry title="less then or equal to" op="&lt;=" example="../C/C-Operator-less-equal.c" />
	    <OperatorEntry title="greater then or equal to" op="&gt;=" example="../C/C-Operator-greater-equal.c" />
	    <OperatorEntry title="equals" op="==" example="../C/C-Operator-equal.c" />
	    <OperatorEntry title="not equal" op="!=" example="../C/C-Operator-not-equal.c" />
	    <OperatorEntry title="bitwise not" op="~" example="../C/C-Operator-bitwise-not.c" />
	    <OperatorEntry title="bitwise and" op="&amp;" example="../C/C-Operator-bitwise-and.c" />
	    <OperatorEntry title="bitwise xor" op="^" example="../C/C-Operator-bitwise-xor.c" />
	    <OperatorEntry title="bitwise or" op="|" example="../C/C-Operator-bitwise-or.c" />
	    <OperatorEntry title="logical and" op="&amp;&amp;" example="../C/C-Operator-logical-and.c" />
	    <OperatorEntry title="logical or" op="||" example="../C/C-Operator-logical-or.c" />
	    <OperatorEntry title="assignment" op="=" example="../C/C-Operator-assignment.c" />
	    <OperatorEntry title="multiply assign" op="*=" example="../C/C-Operator-multiply-assign.c" />
	    <OperatorEntry title="divide assign" op="/=" example="../C/C-Operator-divide-assign.c" />
	    <OperatorEntry title="modulus assign" op="%=" example="../C/C-Operator-modulus-assign.c" />
	    <OperatorEntry title="add assign" op="+=" example="../C/C-Operator-addition-assign.c" />
	    <OperatorEntry title="subtract assign" op="-=" example="../C/C-Operator-sub-assign.c" />
	    <OperatorEntry title="left shift assign" op="&lt;&lt;=" example="../C/C-Operator-left-shift-assign.c" />
	    <OperatorEntry title="right shift assign" op="&gt;&gt;=" example="../C/C-Operator-right-shift-assign.c" />
	    <OperatorEntry title="bitwise and assign" op="&amp;=" example="../C/C-Operator-bitwise-and-assign.c" />
	    <OperatorEntry title="bitwise xor assign" op="^=" example="../C/C-Operator-bitwise-xor-assign.c" />
	    <OperatorEntry title="bitwise or assign" op="|=" example="../C/C-Operator-bitwise-or-assign.c" />
	    <OperatorEntry title="scope" op="::" example="CPP-Operator-scope.cpp" />
	    <OperatorEntry title="pointer to member" op=".*" example="CPP-Operator-member-ptr.cpp" />
	    <OperatorEntry title="dereference pointer to member" op="->*" example="CPP-Operator-deref-member-ptr.cpp" />
	    <OperatorEntry title="comma" op="," example="../C/C-Operator-comma.c" />
        <OperatorEntry title="dot" op="." example="../C/C-member-access.c" />
        <OperatorEntry title="arrow" op="-&gt;" example="../C/C-deref-member-access.c" />
    </Category>

    <Category title="Other">
     	<DocEntry title="static_cast">
            <Elements>
                <Element name="cast" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast[@type='static']">
                    <Desc>Find all uses of static_cast</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-static_cast-1.cpp" />
        </DocEntry>

        <DocEntry title="dynamic_cast">
            <Elements>
                <Element name="cast" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast[@type='dynamic']">
                    <Desc>Find all uses of dynamic_cast</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-dynamic_cast-1.cpp" />
        </DocEntry>

        <DocEntry title="reinterpret_cast">
            <Elements>
                <Element name="cast" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast[@type='reinterpret']">
                    <Desc>Find all uses of reinterpret_cast</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-reinterpret_cast-1.cpp" />
        </DocEntry>

        <DocEntry title="const_cast">
            <Elements>
                <Element name="cast" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast[@type='const']">
                    <Desc>Find all uses of const_cast</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-const_cast-1.cpp" />
        </DocEntry>

        <DocEntry title="c-style cast">
            <Elements>
                <Element name="operator"/>
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast[not(@type)]">
                    <Desc>Find all C-style casts</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-c-style-cast.c" />
        </DocEntry>

        <DocEntry title="static_assert">
            <Elements>
            	<Element name="assert"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:assert[@type='static']">
                    <Desc>Find all uses of static_assert</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-static_assert-1.cpp" />
        </DocEntry>

        <DocEntry title="sizeof">
            <Elements>
                <Element name="sizeof"/>
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:sizeof">
                    <Desc>Find all uses of sizeof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../C/C-sizeof.c" />
            <Example file="CPP-sizeof-1.cpp" />
        </DocEntry>

        <DocEntry title="typeid">
            <Elements>
                <Element name="typeid" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:typeid">
                    <Desc>Find all uses of typeid</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-typeid-1.cpp" />
        </DocEntry>

        <DocEntry title="noexcept">
            <Elements>
                <Element name="noexcept" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:noexcept">
                    <Desc>Find all uses of noexcept</Desc>
                </XPath>
                <XPath path="//src:function[src:noexcept]">
                    <Desc>Find all noexcept functions</Desc>
                </XPath>

            </XPathQueries>
            <Example file="CPP-noexcept-1.cpp" />
            <Example file="CPP-noexcept-2.cpp" />
        </DocEntry>

        <DocEntry title="alignof">
            <Elements>
                <Element name="alignof" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:alignof">
                    <Desc>Find all uses of alignof</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-alignof-1.cpp" />
        </DocEntry>

        <DocEntry title="alignas">
            <Elements>
                <Element name="alignas" />
                <Subelement name="argument_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:alignas">
                    <Desc>Find all uses of alignas</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-alignas-1.cpp" />
        </DocEntry>

        <DocEntry title="decltype">
            <Elements>
                <Element name="decltype" />
                <Subelement name="argument_list"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decltype">
                    <Desc>Find all uses of decltype</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-decltype-1.cpp" />
            <Example file="CPP-decltype-2.cpp" />
        </DocEntry>

        <DocEntry title="attributes">
            <Elements>
                <Element name="attribute" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:attribute">
                    <Desc>Find all attributes</Desc>
                </XPath>
                <XPath path="//src:function[src:type/src:attribute/src:expr/src:name[.='noreturn']]">
                    <Desc>Find all noreturn functions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-attribute-1.cpp" />
            <Example file="CPP-attribute-2.cpp" />
        </DocEntry>

        <DocEntry title="asm">
            <Elements>
                <Element name="asm" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:asm">
                    <Desc>Find all uses of asm</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-asm-1.cpp" />
            <Example file="CPP-asm-2.cpp" />
            <Example file="CPP-asm-3.cpp" />
        </DocEntry>

    </Category>

    <Category title="Templates">
        <DocEntry title="template">
            <Elements>
                <Element name="template" />
                <Subelement name="parameter_list" />
                <Subelement name="parameter" />
                <Subelement name="typename" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:template]">
                    <Desc>Find all class templates</Desc>
                </XPath>
                <XPath path="//src:function[src:template]">
                    <Desc>Find all function templates</Desc>
                </XPath>
                <!--<XPath path="//src:function[count(src:template) &gt;= 2]">
                    <Desc>Find all template member functions of templated classes/structs/unions that are defined outside of a class/struct/union</Desc>
                </XPath>-->
            </XPathQueries>
            <Example title="templated class" file="CPP-template-1.cpp" />
            <Example title="templated function" file="CPP-template-2.cpp" />
            <Example title="partial template specialization" file="CPP-template-4.cpp" />
            <Example title="template member function template" file="CPP-template-5.cpp" />
            <Example file="CPP-template-6.cpp" />
        </DocEntry>

        <DocEntry title="template parameters">
            <Elements>
                <Element name="parameter_list" />
                <Subelement name="param" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:template/src:parameter_list/src:parameter">
                    <Desc>Find all template parameters</Desc>
                </XPath>
                <XPath path="//src:class[src:template/src:parameter_list/src:parameter/src:type/src:template]">
                    <Desc>Find all class templates which use a template template parameter</Desc>
                </XPath>
            </XPathQueries>
            <Example title="typename parameter" file="CPP-template-param-1.cpp" />
            <Example title="class parameter" file="CPP-template-param-2.cpp" />
            <Example title="default template parameter" file="CPP-template-param-3.cpp" />
            <Example title="template parameter pack" file="CPP-template-param-4.cpp" />
            <Example title="template template parameter" file="CPP-template-param-5.cpp" />
        </DocEntry>

        <DocEntry title="typename">
            <Elements>
                <Element name="typename" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:template/src:parameter_list/src:parameter/src:type/src:typename]">
                    <Desc>Find all class templates which use typename as part of its parameter list</Desc>
                </XPath>
            </XPathQueries>
            <Example title="typename parameter" file="CPP-template-param-1.cpp" />
        </DocEntry>

        <DocEntry title="class type specifier">
            <Elements>
                <Element name="typename" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:template/src:parameter_list/src:parameter/src:type/src:name[.='class']]">
                    <Desc>Find all classes which use class within instead of typename in at least one template parameter</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-class-template-specifier-1.cpp" />
        </DocEntry>

        <DocEntry title="template parameter pack">
            <Elements>
                <Element name="modifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:class[src:template/src:parameter_list/src:parameter/src:type/src:modifier[.='...']]">
                    <Desc>Find all class templates that use a template parameter pack</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-var-type-mod-1.cpp" />
        </DocEntry>
    </Category>

    <Category title="Exceptions">
        <DocEntry title="throw">
            <Elements>
                <Element name="throw" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:throw">
                    <Desc>Find all uses of throw</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-throw-1.cpp" />
            <Example file="CPP-throw-2.cpp" />
            <Example file="CPP-throw-3.cpp" />
        </DocEntry>

        <DocEntry title="try">
            <Elements>
                <Element name="try" />
                <Subelement name="block" />
                <Subelement name="catch" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:try">
                    <Desc>Find all try block</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-try-1.cpp" />
        </DocEntry>

        <DocEntry title="catch">
            <Elements>
                <Element name="catch" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:catch">
                    <Desc>Find all catch blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-catch-1.cpp" />
            <Example file="CPP-catch-2.cpp" />
        </DocEntry>

        <DocEntry title="function try-catch">
            <Elements>
                <Element name="try" />
                <Subelement name="catch" />
                <Subelement name="block" />
                <Subelement name="member_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:try[count(src:catch) >= 2]">
                    <Desc>Find all try blocks with at least two catch blocks.</Desc>
                </XPath>
            </XPathQueries>
            <Example file="CPP-func-try-catch-1.cpp" />
            <Example file="CPP-func-try-catch-2.cpp" />
        </DocEntry>
    </Category>

</DocConfig>
