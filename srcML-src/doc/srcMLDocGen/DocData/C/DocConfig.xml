<DocConfig lang="C" outputFile="c_srcML.html" title="C srcML">
    <Category title="Statements">
        <DocEntry shortTitle="if" title="if statement">
            <Elements>
                <Element name="if" />
                <Subelement name="condition" />
                <Subelement name="then" />
                <Subelement name="else" />
                <Subelement name="elseif" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:if">
                    <Desc>Find all if statements</Desc>
                </XPath>
                <XPath path="//src:if/src:condition">
                    <Desc>Find all conditions of all if statements</Desc>
                </XPath>
                <XPath path="//src:then">
                    <Desc>Find all then statements</Desc>
                </XPath>
                <XPath path="//src:else">
                    <Desc>Find all else statements</Desc>
                </XPath>
                <XPath path="//src:if[count(src:else) = 0]">
                    <Desc>Find all if statements without an else, this doesn't exclude else if statements</Desc>
                </XPath>
                <XPath path="//src:if//src:if">
                    <Desc>Find all nested if statements</Desc>
                </XPath>
                <XPath path="//src:elseif">
                    <Desc>Find all else-if statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-if-1.c" validator="if.rng" />
            <Example file="C-if-2.c"/>
            <Example file="C-if-3.c"/>
            <Example file="C-if-4.c"/>
            <Example file="C-if-5.c"/>
            <Example file="C-if-6.c"/>
            <Example file="C-if-7.c"/>
        </DocEntry>

        <DocEntry shortTitle="while" title="while statement">
            <Elements>
                <Element name="while" />
                <Subelement name="condition" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:while">
                    <Desc>Find all while statements</Desc>
                </XPath>
                <XPath path="//src:while/src:condition">
                    <Desc>Find all of the conditions of all while statements</Desc>
                </XPath>
                <XPath path="//src:while[src:condition//src:name = 'X']">
                    <Desc>Find all while statements which have a condition containing the variable 'i'</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-while-1.c" />
        </DocEntry>

        <DocEntry shortTitle="for" title="for statement">
            <Elements>
                <Element name="for" />
                <Subelement name="control" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:for">
                    <Desc>Find all for statements</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:init">
                    <Desc>Find all initialization statements from within the control of all for loops</Desc>
                </XPath>
                <XPath path="//src:for[string-length(src:control/src:init/src:decl/src:name) = 1]">
                    <Desc>Find all for loops which declare a variable with a single character name (e.g. <code class="inline">x</code>, <code class="inline">i</code> or <code class="inline">y</code>)</Desc>
                </XPath>
                <XPath path="//src:for[src:control/src:incr/src:expr//node()/following-sibling::src:operator[.= '++']]">
                    <Desc>Find all for loops which use post increment as part of the increment expression</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:incr">
                    <Desc>Find all of the increments expression of all for loops</Desc>
                </XPath>
                <XPath path="//src:for/src:control/src:condition">
                    <Desc>Find all of the conditions of all for loops</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-for-1.c"/>
            <Example file="C-for-2.c"/>
            <Example file="C-for-3.c"/>
        </DocEntry>

        <DocEntry shortTitle="do" title="do while statement">
            <Elements>
                <Element name="do" />
                <Subelement name="block" />
                <Subelement name="condition" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:do">
                    <Desc>Find all do statements</Desc>
                </XPath>
                <XPath path="//src:do[src:condition//src:name = 'x']">
                    <Desc>Find all do while statements which have a condition containing the variable <code class="inline">'x'</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-do-while-1.c"/>
            <Example file="C-do-while-2.c" />
        </DocEntry>

        <DocEntry shortTitle="break" title="break statement">
            <Elements>
                <Element name="break" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:break">
                    <Desc>Find all break statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-break.c"/>
        </DocEntry>

        <DocEntry shortTitle="continue" title="continue statement">
            <Elements>
                <Element name="continue" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:continue">
                    <Desc>Find all continue statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-continue.c"/>
        </DocEntry>

        <DocEntry shortTitle="return" title="return statement">
            <Elements>
                <Element name="return" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:return">
                    <Desc>Find all return statements</Desc>
                </XPath>
                <XPath path="//src:function[ count(.//src:return) &gt; 1]">
                    <Desc>Find all functions with more than one return</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-return-1.c"/>
            <Example file="C-return-2.c" />
        </DocEntry>

        <DocEntry shortTitle="switch" title="switch statement">
            <Elements>
                <Element name="switch" />
                <Subelement name="condition" />
                <Subelement name="case" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:switch">
                    <Desc>Find all switch statements</Desc>
                </XPath>
                <XPath path="//src:switch/src:condition">
                    <Desc>Find all of the conditions of all switch statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-switch-1.c"/>
            <Example file="C-switch-2.c" />
        </DocEntry>

        <DocEntry shortTitle="case" title="case statement">
            <Elements>
                <Element name="case" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:case">
                    <Desc>Find all case labels</Desc>
                </XPath>
                <XPath path="//src:case[.//src:name = 'SATURDAY']">
                    <Desc>Find all case labels which use <code class="inline">SATURDAY</code></Desc>
                </XPath>
                <XPath path="//src:switch[src:block/src:case[.//src:name = 'SATURDAY']]">
                    <Desc>Find all switch statements which have a case that uses <code class="inline">SATURDAY</code></Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-case-1.c"/>
        </DocEntry>

        <DocEntry shortTitle="default" title="default statement">
            <Elements>
                <Element name="default" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:default">
                    <Desc>Find all default labels</Desc>
                </XPath>
                <XPath path="//src:label[src:name[. != //src:goto/src:name or not(//src:goto/src:name)]]">
                    <Desc>Find all switch statements which have a default label</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-default-1.c"/>
        </DocEntry>

        <DocEntry shortTitle="block" title="block statement">
            <Elements>
                <Element name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:block">
                    <Desc>Find all blocks</Desc>
                </XPath>
                <XPath path="//src:block/src:decl_stmt">
                    <Desc>Find all variable declaration within a block</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-compound-block.c" />
        </DocEntry>

        <DocEntry title="label">
            <Elements>
                <Element name="label" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:label">
                    <Desc>Find all labels</Desc>
                </XPath>
                <XPath path="//src:label[src:name[. != //src:goto/src:name]]">
                    <Desc>Find all labels without goto statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-label.c"/>
        </DocEntry>

        <DocEntry shortTitle="goto" title="goto statement">
            <Elements>
                <Element name="goto" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:goto">
                    <Desc>Find all goto statements</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-goto.c"/>
        </DocEntry>

        <DocEntry title="empty statement">
            <Elements>
                <Element name="empty_stmt" />
            </Elements>
            <Example file="C-empty-stmt.c"/>
            <XPathQueries>
                <XPath path="//src:empty_stmt">
                    <Desc>Find all empty statements</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>
    </Category>


    <Category title="Specifiers">

        <DocEntry title="const">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-const-variable-1.c"/>
            <Example file="C-const-variable-2.c" />
            <XPathQueries>
                <XPath path="//src:decl/src:type/src:specifier [.='const']">
                    <Desc>Find all const variables</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="volatile">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl/src:type/src:specifier [.='volatile']">
                    <Desc>Find all volatile variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-volatile.c"/>
        </DocEntry>

        <DocEntry title="restrict">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl/src:type/src:specifier [.='restrict']">
                    <Desc>Find all variables declared with the restrict specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-restrict.c"/>
        </DocEntry>

        <DocEntry title="auto">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl/src:type/src:specifier [.='auto']">
                    <Desc>Find all auto variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-auto.c" />
        </DocEntry>

        <DocEntry title="register">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl/src:type/src:specifier [.='register']">
                    <Desc>Find all variables declared with the register specifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-register.c"/>
        </DocEntry>

        <DocEntry title="extern linkage">
            <Elements>
                <Element name="extern" />
                <Subelement name="literal"/>
                <Subelement name="function_decl"/>
                <Subelement name="decl_stmt"/>
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:extern">
                    <Desc>Find all extern blocks</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-extern-linkage-1.c" title="external function with Linkage specifier"/>
            <Example file="C-extern-linkage-2.c" title="extern structure with linkage specifier" />
            <Example file="C-extern-linkage-3.c" title="extern variable with linkage specifier" />
            <Example file="C-extern-linkage-block.c" title="extern block with linkage specifier" />
        </DocEntry>

        <DocEntry title="extern specifier">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                    <XPath path="//src:decl/src:type/src:specifier [.='extern']">
                    <Desc>Find all extern variables</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:type/src:specifier [.='extern']">
                    <Desc>Find all extern functions declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-extern-1.c" title="external variable"/>
            <Example file="C-extern-2.c" title="external structure" />
            <Example file="C-extern-3.c" title="external function" />
        </DocEntry>

        <DocEntry title="static">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl/src:type/src:specifier [.='static']">
                    <Desc>Find all static functions</Desc>
                </XPath>
                <XPath path="//src:decl/src:type/src:specifier [.='static']">
                    <Desc>Find all static variables</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-static-1.c" />
            <Example file="C-static-2.c" />
        </DocEntry>

        <DocEntry title="inline">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl/src:type/src:specifier [.='inline']">
                    <Desc>Find all inline function declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-inline.c" />
        </DocEntry>
    </Category>


    <Category title="Declarations/Definitions">

        <DocEntry title="variable declaration statement">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl_stmt">
                    <Desc>Find all declaration statements</Desc>
                </XPath>
                <XPath path="//src:decl_stmt/src:decl[src:type[contains(., 'union')]]">
                    <Desc>Find all variable declaration statements with the union qualifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-variable-declaration-1.c"/>
            <Example file="C-variable-declaration-2.c" title="struct declarations"/>
        </DocEntry>

        <DocEntry title="variable declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
                <Subelement name="init"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl">
                    <Desc>Find all variable declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:init]">
                    <Desc>Find all variable declarations which also initialize the variable</Desc>
                </XPath>
                <XPath path="//src:decl[src:type/src:name/src:name = 'struct']">
                    <Desc>Find all variable declarations with the struct qualifier</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-variable-declaration-1.c" />
            <Example file="C-variable-declaration-2.c" title="struct declarations"/>
        </DocEntry>

        <DocEntry title="function declaration">
            <Elements>
                <Element name="function_decl" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function_decl">
                    <Desc>Find all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:type">
                    <Desc>Find all return types from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function declarations with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function_decl/src:name">
                    <Desc>Find the names of all function declarations</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:parameter_list/src:parameter/src:decl/src:type/src:modifier[.='...']]">
                    <Desc>Find all function declarations that have variadic arguments</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-function-decl-1.c"/>
            <Example file="C-function-decl-2.c"/>
            <Example file="C-function-decl-3.c"/>
            <Example file="C-function-decl-4.c"/>
        </DocEntry>

        <DocEntry title="function definition">
            <Elements>
                <Element name="function" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="parameter_list" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:function">
                    <Desc>Find all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:type">
                    <Desc>Find all return types from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function/src:parameter_list/src:parameter">
                    <Desc>Find all parameters from all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list[count(src:parameter) = 2]]">
                    <Desc>Find all function definitions with only two parameters</Desc>
                </XPath>
                <XPath path="//src:function/src:name">
                    <Desc>Find the names of all function definitions</Desc>
                </XPath>
                <XPath path="//src:function[src:parameter_list/src:parameter/src:decl/src:type/src:modifier[.='...']]">
                    <Desc>Find all function definitions that have variadic arguments</Desc>
                </XPath>
                <XPath path="//src:function[src:decl_stmt]">
                    <Desc>Find all K &amp; R function definitions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-function-def-1.c"/>
            <Example file="C-function-def-2.c"/>
            <Example file="C-function-def-3.c"/>
            <Example file="C-function-def-4.c"/>
            <Example file="C-function-def-5.c"/>
            <Example file="C-function-decl-5.c"/>
        </DocEntry>

        <DocEntry title="pointer declaration">
            <Elements>
                <Element name="modifier"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:type/src:modifier[.='*']]">
                    <Desc>Find all of the declarations of pointers</Desc>
                </XPath>
                <XPath path="//src:function_decl[src:modifier ='*']">
                    <Desc>Find all function pointers</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-pointer-declaration-1.c"/>
            <Example file="C-pointer-declaration-2.c"/>
            <Example file="C-pointer-declaration-3.c"/>
            <Example file="C-pointer-declaration-4.c"/>
            <Example file="C-pointer-declaration-5.c"/>
            <Example file="C-cv-ptr-decl-1.c" />
            <Example file="C-cv-ptr-decl-2.c" />
        </DocEntry>

        <DocEntry title="typedef">
            <Elements>
                <Element name="typedef" />
                <Subelement name="type" />
                <Subelement name="name" />
                <Subelement name="function_decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:typedef">
                    <Desc>Find all typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef/src:type">
                    <Desc>Find all types within typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef/src:name">
                    <Desc>Find all names for all typedefs</Desc>
                </XPath>
                <XPath path="//src:typedef[src:type/src:struct]">
                    <Desc>Find all typedefs that are used to define a struct</Desc>
                </XPath>
                <XPath path="//src:typedef[src:function_decl]">
                    <Desc>Find all typedefs that declare a function type</Desc>
                </XPath>
                <XPath path="//src:typedef[src:function_decl/src:modifier= '*']">
                    <Desc>Find all typedefs of a function pointers</Desc>
                </XPath>
                <XPath path="//src:typedef/src:function_decl/src:modifier[.='*']/src:name">
                    <Desc>Find all names from all typedefs of function pointers</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-typedef-1.c"/>
            <Example file="C-typedef-2.c"/>
            <Example file="C-typedef-3.c"/>
            <Example file="C-typedef-4.c"/>
        </DocEntry>

        <DocEntry title="array declaration">
            <Elements>
                <Element name="decl" />
                <Subelement name="name" />
            </Elements>
            <Example file="C-array-declaration-1.c"/>
            <Example file="C-array-declaration-2.c" />
            <Example file="C-array-declaration-3.c" />
            <Example file="C-array-declaration-4.c" />
            <XPathQueries>
                <XPath path="//src:decl[src:name/src:index]">
                    <Desc>Find all array declarations</Desc>
                </XPath>
                <XPath path="//src:decl[src:name/src:index/src:expr/src:literal[number(.) &lt; 50]]">
                    <Desc>Find all array declarations where the number of elements is less than 50</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="array initialization">
            <Elements>
                <Element name="init" />
                <Subelement name="block" />
            </Elements>
            <Example file="C-array-initialization-1.c"/>
            <Example file="C-array-initialization-2.c" />
            <XPathQueries>
                <XPath path="//src:decl[src:name/src:index][src:init]">
                    <Desc>Find all array declarations which initialize the array at the same time</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="bitfield">
            <Elements>
                <Element name="range" />
                <Subelement name="expr" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:range]">
                    <Desc>Find all bitfield declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-bitfields.c"/>
        </DocEntry>
    </Category>


    <Category title="Struct, Union and Enum">
        <DocEntry title="struct declaration">
            <Elements>
                <Element name="struct_decl" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct_decl">
                    <Desc>Find all of the forward declarations for all structs</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-struct-declaration-3.c" title="forward declaration"/>
        </DocEntry>

        <DocEntry title="struct definition">
            <Elements>
                <Element name="struct" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:struct">
                    <Desc>Find the definition of all structs</Desc>
                </XPath>
                <XPath path="//src:struct/src:block/src:decl_stmt">
                    <Desc>Find the members from all structs</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-struct-declaration-1.c"/>
            <Example file="C-struct-declaration-2.c" title="variable of an anonymous struct type" />
            <Example file="C-struct-declaration-4.c" title="declaring a struct and instance" />
        </DocEntry>

        <DocEntry title="struct initialization">
            <Elements>
                <Element name="decl_stmt" />
                <Subelement name="decl" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:decl[src:init/src:expr/src:block]">
                    <Desc>Find all of declaration of structs which also initialize it</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-struct-initialization-1.c"/>
            <Example file="C-struct-initialization-2.c" />
            <Example file="C-struct-initialization-3.c" />
        </DocEntry>

        <DocEntry title="union declaration">
            <Elements>
                <Element name="union_decl" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:union_decl">
                    <Desc>Find all of the forward declarations for all unions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-union-declaration-2.c"/>
        </DocEntry>

        <DocEntry title="union definition">
            <Elements>
                <Element name="union" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:union">
                    <Desc>Find all definitions of all unions</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-union-declaration-1.c"/>
        </DocEntry>

        <DocEntry title="enum definition">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
                <Subelement name="block" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum">
                    <Desc>Find all enum definitions</Desc>
                </XPath>
                <XPath path="//src:enum/src:block/src:decl/src:name">
                    <Desc>Find the names of all members of all enums</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-enum-declaration-1.c"/>
            <Example file="C-enum-declaration-3.c"/>
        </DocEntry>
        
        <DocEntry title="enum declaration">
            <Elements>
                <Element name="enum" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:enum_decl">
                    <Desc>Find all enum declarations</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-enum-declaration-2.c"/>
        </DocEntry>
    </Category>
    
    

    <Category title="Expressions">
        <DocEntry title="function call">
            <Elements>
                <Element name="call" />
                <Subelement name="name" />
                <Subelement name="argument_list" />
                <Subelement name="argument" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:call">
                    <Desc>Find all function calls</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-function-call.c"/>
        </DocEntry>

        <DocEntry title="array indexing">
            <Elements>
                <Element name="name" />
                <Subelement name="name" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:expr/src:name[src:index/node()]">
                    <Desc>Find all array indexings</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-array-access.c" />
        </DocEntry>

        <DocEntry title="ternary operator">
            <Elements>
                <Element name="ternary" />
                <Subelement name="condition" />
                <Subelement name="then"/>
                <Subelement name="else"/>
            </Elements>
            <Example file="C-ternary-operator.c"/>
            <XPathQueries>
                <XPath path="//src:ternary">
                    <Desc>Find all uses of the ternary operator</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>


        <DocEntry title="dereference member access">
            <Elements>
                <Element name="expr" />
                <Subelement name="name" />
                <Subelement name="operator"/>
            </Elements>
            <Example file="C-deref-member-access.c"/>
            <XPathQueries>
                <XPath path="//src:operator[.='-&gt;']">
                    <Desc>Find all uses of the -&gt; operator</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="member access">
            <Elements>
                <Element name="expr" />
                <Subelement name="name" />
                <Subelement name="operator"/>
            </Elements>
            <Example file="C-member-access.c"/>
            <XPathQueries>
                <XPath path="//src:operator[.='.']">
                    <Desc>Find all uses of the . operator</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

	    <OperatorEntry example="C-Operator-pre_increment.c" op="++" title="pre/post increment" />
	    <OperatorEntry example="C-Operator-pre_decrement.c" op="--" title="pre/post decrement" />
	    <OperatorEntry example="C-Operator-address_of.c" op="&amp;" title="address of" />
	    <OperatorEntry example="C-Operator-deref.c" op="*" title="dereference" />
	    <OperatorEntry example="C-Operator-unary-minus.c" op="-" title="unary minus" />
	    <OperatorEntry example="C-Operator-unary-plus.c" op="+" title="unary plus" />
	    <OperatorEntry example="C-Operator-logical-not.c" op="!" title="logical not" />
	    <OperatorEntry example="C-Operator-multiplication.c" op="*" title="multiplication" />
	    <OperatorEntry example="C-Operator-divide.c" op="/" title="division" />
	    <OperatorEntry example="C-Operator-modulus.c" op="%" title="modulus" />
	    <OperatorEntry example="C-Operator-addition.c" op="+" title="addition" />
	    <OperatorEntry example="C-Operator-subtraction.c" op="-" title="subtraction" />
	    <OperatorEntry example="C-Operator-left-shift.c" op="&lt;&lt;" title="left shift" />
	    <OperatorEntry example="C-Operator-right-shift.c" op="&gt;&gt;" title="right shift" />
	    <OperatorEntry example="C-Operator-less-then.c" op="&lt;" title="less then" />
	    <OperatorEntry example="C-Operator-greater-then.c" op="&gt;" title="greater then" />
	    <OperatorEntry example="C-Operator-less-equal.c" op="&lt;=" title="less then or equal to" />
	    <OperatorEntry example="C-Operator-greater-equal.c" op="&gt;=" title="greater then or equal to" />
	    <OperatorEntry example="C-Operator-equal.c" op="==" title="equals" />
	    <OperatorEntry example="C-Operator-not-equal.c" op="!=" title="not equal" />
	    <OperatorEntry example="C-Operator-bitwise-not.c" op="~" title="bitwise not" />
	    <OperatorEntry example="C-Operator-bitwise-and.c" op="&amp;" title="bitwise and" />
	    <OperatorEntry example="C-Operator-bitwise-xor.c" op="^" title="bitwise xor" />
	    <OperatorEntry example="C-Operator-bitwise-or.c" op="|" title="bitwise or" />
	    <OperatorEntry example="C-Operator-logical-and.c" op="&amp;&amp;" title="logical and" />
	    <OperatorEntry example="C-Operator-logical-or.c" op="||" title="logical or" />
	    <OperatorEntry example="C-Operator-assignment.c" op="=" title="assignment" />
	    <OperatorEntry example="C-Operator-multiply-assign.c" op="*=" title="multiply assign" />
	    <OperatorEntry example="C-Operator-divide-assign.c" op="/=" title="divide assign" />
	    <OperatorEntry example="C-Operator-modulus-assign.c" op="%=" title="modulus assign" />
	    <OperatorEntry example="C-Operator-addition-assign.c" op="+=" title="add assign" />
	    <OperatorEntry example="C-Operator-sub-assign.c" op="-=" title="subtract assign" />
	    <OperatorEntry example="C-Operator-left-shift-assign.c" op="&lt;&lt;=" title="left shift assign" />
	    <OperatorEntry example="C-Operator-right-shift-assign.c" op="&gt;&gt;=" title="right shift assign" />
	    <OperatorEntry example="C-Operator-bitwise-and-assign.c" op="&amp;=" title="bitwise and assign" />
	    <OperatorEntry example="C-Operator-bitwise-xor-assign.c" op="^=" title="bitwise xor assign" />
	    <OperatorEntry example="C-Operator-bitwise-or-assign.c" op="|=" title="bitwise or assign" />
	    <OperatorEntry example="C-Operator-comma.c" op="," title="comma" />
        <OperatorEntry example="C-member-access.c" op="." title="dot" />
        <OperatorEntry example="C-deref-member-access.c" op="-&gt;" title="arrow" />
    </Category>

    <Category title="Other">
        <DocEntry title="cast">
            <Elements>
                <Element name="operator"/>
            </Elements>
            <XPathQueries>
                <XPath path="//src:cast">
                    <Desc>Find all casts</Desc>
                </XPath>
            </XPathQueries>
            <Example file="C-c-style-cast.c" />
        </DocEntry>

        <DocEntry title="sizeof">
            <Elements>
                <Element name="sizeof" />
                <Subelement name="argument_list" />
            </Elements>
            <Example file="C-sizeof.c"/>
            <XPathQueries>
                <XPath path="//src:sizeof">
                    <Desc>Find all uses of sizeof</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="_Alignas">
            <Elements>
                <Element name="alignas" />
                <Subelement name="argument_list" />
            </Elements>
            <Example file="C-_Alignas-1.c"/>
            <Example file="C-_Alignas-2.c" />
            <XPathQueries>
                <XPath path="//src:alignas">
                    <Desc>Find all uses of _Alignas</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="_Alignof">
            <Elements>
                <Element name="alignof" />
                <Subelement name="argument_list" />
            </Elements>
            <Example file="C-_Alignof.c"/>
            <XPathQueries>
                <XPath path="//src:alignof">
                    <Desc>Find all uses of _Alignof</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="_Atomic">
            <Elements>
                <Element name="atomic" />
                <Subelement name="argument_list" />
            </Elements>
            <Example file="C-_Atomic-1.c"/>
            <Example file="C-_Atomic-2.c"/>
            <Example file="C-_Atomic-3.c"/>
            <XPathQueries>
                <XPath path="//src:atomic">
                    <Desc>Find all uses of _Atomic</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>
        
        <DocEntry title="_Generic">
            <Desc>The only use case for this keyword is within a macro, in which case srcML will not mark it up.</Desc>
            <Elements>
                <Element name="generic_selection" />
                <Subelement name="selector" />
                <Subelement name="association_list" />
            </Elements>
            <Example file="C-_Generic.c"/>
            <XPathQueries>
                <XPath path="//src:generic_selection">
                    <Desc>Find all uses of _Generic</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>
        
        <DocEntry title="_Noreturn">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-_Noreturn.c"/>
            <XPathQueries>
                <XPath path="//src:specifier[.='_Noreturn']">
                    <Desc>Find all uses of _Noreturn</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="_Static_assert">
            <Elements>
                <Element name="assert">
                    <AttribStr>type="static"</AttribStr>
                </Element>
                <Subelement name="argument_list" />
            </Elements>
            <Example file="C-_Static_assert.c"/>
            <XPathQueries>
                <XPath path="//src:assert[@type ='static']">
                    <Desc>Find all uses of _Static_assert</Desc>
                </XPath>
            </XPathQueries>
        </DocEntry>

        <DocEntry title="_Thread_local">
            <Elements>
                <Element name="specifier" />
            </Elements>
            <Example file="C-_Thread_local.c"/>
            <XPathQueries>
                <XPath path="//src:specifier[.='_Thread_local']">
                    <Desc>Find all uses of _Thread_local</Desc>
                </XPath>                
            </XPathQueries>
        </DocEntry>

        <DocEntry title="asm">
            <Elements>
                <Element name="asm" />
            </Elements>
            <XPathQueries>
                <XPath path="//src:asm">
                    <Desc>Find all uses of asm</Desc>
                </XPath>
            </XPathQueries>
            <Example file="../CPlusPlus/CPP-asm-1.cpp" />
            <Example file="../CPlusPlus/CPP-asm-2.cpp" />
            <Example file="../CPlusPlus/CPP-asm-3.cpp" />
        </DocEntry>

    </Category>
</DocConfig>
