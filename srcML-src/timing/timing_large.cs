#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Reflection;
using System.Resources;

[assembly: AssemblyCompany("Subtext")]
[assembly: AssemblyProduct("Subtext Blog Engine")]
[assembly: AssemblyCopyright("Copyright © Phil Haack. 2005-2010 - BSD License")]
[assembly: AssemblyInformationalVersion("2.5.2.0")]
[assembly: AssemblyDelaySign(false)]
[assembly: NeutralResourcesLanguage("en-US")]using System;
using System.Net;
using System.Windows.Forms;

namespace Subtext.Akismet.Tester
{
	public partial class frmMain : Form
	{
		AkismetClient client;
		public frmMain()
		{
			InitializeComponent();
		}

		private void btnInsertSpamAuthor_Click(object sender, EventArgs e)
		{
			txtAuthor.Text = "viagra-test-123";
		}

		private void btnVerify_Click(object sender, EventArgs e)
		{
			try
			{
				client = new AkismetClient(this.txtApiKey.Text, new Uri(this.txtBlogUrl.Text));
				this.txtResponse.Text = client.VerifyApiKey().ToString();
			}
			catch(Exception exc)
			{
				this.txtResponse.Text = exc.Message;
			}
		}

		private void btnCheck_Click(object sender, EventArgs e)
		{
			try
			{
				if (CheckVerification())
				{
					this.txtResponse.Text = client.CheckCommentForSpam(GetComment()).ToString();
				}
			}
			catch (Exception exc)
			{
				this.txtResponse.Text = exc.Message;
			}
		}

		private void btnSpam_Click(object sender, EventArgs e)
		{
			try
			{
				client.SubmitSpam(GetComment());
			}
			catch (Exception exc)
			{
				this.txtResponse.Text = exc.Message;
			}
		}

		private void btnHam_Click(object sender, EventArgs e)
		{
			try
			{
				client.SubmitHam(GetComment());
			}
			catch (Exception exc)
			{
				this.txtResponse.Text = exc.Message;
			}
		}

		private bool CheckVerification()
		{
			if (this.client == null)
			{
				this.txtResponse.Text = "Please verify Akismet first.";
				return false;
			}
			return true;
		}
		
		private IComment GetComment()
		{
			Comment comment = new Comment(IPAddress.Parse(this.txtIP.Text), txtUserAgent.Text);

			comment.CommentType = txtCommentType.Text;
			comment.Author = txtAuthor.Text;
			comment.Content = txtContent.Text;
			
			return comment;
		}
	}
}namespace Subtext.Akismet.Tester
{
	partial class frmMain
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing && (components != null))
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.grpAkismet = new System.Windows.Forms.GroupBox();
			this.btnVerify = new System.Windows.Forms.Button();
			this.txtBlogUrl = new System.Windows.Forms.TextBox();
			this.label1 = new System.Windows.Forms.Label();
			this.txtApiKey = new System.Windows.Forms.TextBox();
			this.lblKey = new System.Windows.Forms.Label();
			this.label2 = new System.Windows.Forms.Label();
			this.txtCommentType = new System.Windows.Forms.TextBox();
			this.lblAuthor = new System.Windows.Forms.Label();
			this.txtAuthor = new System.Windows.Forms.TextBox();
			this.btnInsertSpamAuthor = new System.Windows.Forms.Button();
			this.grpComment = new System.Windows.Forms.GroupBox();
			this.btnHam = new System.Windows.Forms.Button();
			this.btnSpam = new System.Windows.Forms.Button();
			this.btnCheck = new System.Windows.Forms.Button();
			this.txtUserAgent = new System.Windows.Forms.TextBox();
			this.txtContent = new System.Windows.Forms.TextBox();
			this.label5 = new System.Windows.Forms.Label();
			this.label3 = new System.Windows.Forms.Label();
			this.txtIP = new System.Windows.Forms.TextBox();
			this.label4 = new System.Windows.Forms.Label();
			this.txtResponse = new System.Windows.Forms.TextBox();
			this.label6 = new System.Windows.Forms.Label();
			this.grpAkismet.SuspendLayout();
			this.grpComment.SuspendLayout();
			this.SuspendLayout();
			// 
			// grpAkismet
			// 
			this.grpAkismet.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
						| System.Windows.Forms.AnchorStyles.Right)));
			this.grpAkismet.Controls.Add(this.btnVerify);
			this.grpAkismet.Controls.Add(this.txtBlogUrl);
			this.grpAkismet.Controls.Add(this.label1);
			this.grpAkismet.Controls.Add(this.txtApiKey);
			this.grpAkismet.Controls.Add(this.lblKey);
			this.grpAkismet.Location = new System.Drawing.Point(3, 50);
			this.grpAkismet.Name = "grpAkismet";
			this.grpAkismet.Size = new System.Drawing.Size(404, 82);
			this.grpAkismet.TabIndex = 1;
			this.grpAkismet.TabStop = false;
			this.grpAkismet.Text = "Akismet";
			// 
			// btnVerify
			// 
			this.btnVerify.Location = new System.Drawing.Point(303, 44);
			this.btnVerify.Name = "btnVerify";
			this.btnVerify.Size = new System.Drawing.Size(75, 23);
			this.btnVerify.TabIndex = 4;
			this.btnVerify.Text = "Verify";
			this.btnVerify.UseVisualStyleBackColor = true;
			this.btnVerify.Click += new System.EventHandler(this.btnVerify_Click);
			// 
			// txtBlogUrl
			// 
			this.txtBlogUrl.Location = new System.Drawing.Point(67, 51);
			this.txtBlogUrl.Name = "txtBlogUrl";
			this.txtBlogUrl.Size = new System.Drawing.Size(220, 20);
			this.txtBlogUrl.TabIndex = 3;
			// 
			// label1
			// 
			this.label1.AutoSize = true;
			this.label1.Location = new System.Drawing.Point(6, 54);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(44, 13);
			this.label1.TabIndex = 2;
			this.label1.Text = "Blog Url";
			// 
			// txtApiKey
			// 
			this.txtApiKey.Location = new System.Drawing.Point(67, 25);
			this.txtApiKey.Name = "txtApiKey";
			this.txtApiKey.Size = new System.Drawing.Size(220, 20);
			this.txtApiKey.TabIndex = 1;
			// 
			// lblKey
			// 
			this.lblKey.AutoSize = true;
			this.lblKey.Location = new System.Drawing.Point(6, 28);
			this.lblKey.Name = "lblKey";
			this.lblKey.Size = new System.Drawing.Size(45, 13);
			this.lblKey.TabIndex = 0;
			this.lblKey.Text = "API Key";
			// 
			// label2
			// 
			this.label2.AutoSize = true;
			this.label2.Location = new System.Drawing.Point(6, 22);
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(31, 13);
			this.label2.TabIndex = 2;
			this.label2.Text = "Type";
			// 
			// txtCommentType
			// 
			this.txtCommentType.Location = new System.Drawing.Point(67, 19);
			this.txtCommentType.Name = "txtCommentType";
			this.txtCommentType.Size = new System.Drawing.Size(210, 20);
			this.txtCommentType.TabIndex = 3;
			this.txtCommentType.Text = "comment";
			// 
			// lblAuthor
			// 
			this.lblAuthor.AutoSize = true;
			this.lblAuthor.Location = new System.Drawing.Point(6, 48);
			this.lblAuthor.Name = "lblAuthor";
			this.lblAuthor.Size = new System.Drawing.Size(38, 13);
			this.lblAuthor.TabIndex = 4;
			this.lblAuthor.Text = "Author";
			// 
			// txtAuthor
			// 
			this.txtAuthor.Location = new System.Drawing.Point(67, 45);
			this.txtAuthor.Name = "txtAuthor";
			this.txtAuthor.Size = new System.Drawing.Size(210, 20);
			this.txtAuthor.TabIndex = 5;
			// 
			// btnInsertSpamAuthor
			// 
			this.btnInsertSpamAuthor.Location = new System.Drawing.Point(283, 41);
			this.btnInsertSpamAuthor.Name = "btnInsertSpamAuthor";
			this.btnInsertSpamAuthor.Size = new System.Drawing.Size(115, 23);
			this.btnInsertSpamAuthor.TabIndex = 6;
			this.btnInsertSpamAuthor.Text = "<< Test Author";
			this.btnInsertSpamAuthor.UseVisualStyleBackColor = true;
			this.btnInsertSpamAuthor.Click += new System.EventHandler(this.btnInsertSpamAuthor_Click);
			// 
			// grpComment
			// 
			this.grpComment.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
						| System.Windows.Forms.AnchorStyles.Right)));
			this.grpComment.Controls.Add(this.btnHam);
			this.grpComment.Controls.Add(this.btnSpam);
			this.grpComment.Controls.Add(this.btnCheck);
			this.grpComment.Controls.Add(this.txtUserAgent);
			this.grpComment.Controls.Add(this.txtContent);
			this.grpComment.Controls.Add(this.label5);
			this.grpComment.Controls.Add(this.label3);
			this.grpComment.Controls.Add(this.txtIP);
			this.grpComment.Controls.Add(this.btnInsertSpamAuthor);
			this.grpComment.Controls.Add(this.label4);
			this.grpComment.Controls.Add(this.txtAuthor);
			this.grpComment.Controls.Add(this.lblAuthor);
			this.grpComment.Controls.Add(this.txtCommentType);
			this.grpComment.Controls.Add(this.label2);
			this.grpComment.Location = new System.Drawing.Point(3, 138);
			this.grpComment.Name = "grpComment";
			this.grpComment.Size = new System.Drawing.Size(404, 319);
			this.grpComment.TabIndex = 0;
			this.grpComment.TabStop = false;
			this.grpComment.Text = "Comment";
			// 
			// btnHam
			// 
			this.btnHam.Location = new System.Drawing.Point(323, 289);
			this.btnHam.Name = "btnHam";
			this.btnHam.Size = new System.Drawing.Size(75, 23);
			this.btnHam.TabIndex = 11;
			this.btnHam.Text = "Ham";
			this.btnHam.UseVisualStyleBackColor = true;
			this.btnHam.Click += new System.EventHandler(this.btnHam_Click);
			// 
			// btnSpam
			// 
			this.btnSpam.Location = new System.Drawing.Point(242, 289);
			this.btnSpam.Name = "btnSpam";
			this.btnSpam.Size = new System.Drawing.Size(75, 23);
			this.btnSpam.TabIndex = 10;
			this.btnSpam.Text = "Spam";
			this.btnSpam.UseVisualStyleBackColor = true;
			this.btnSpam.Click += new System.EventHandler(this.btnSpam_Click);
			// 
			// btnCheck
			// 
			this.btnCheck.Location = new System.Drawing.Point(161, 289);
			this.btnCheck.Name = "btnCheck";
			this.btnCheck.Size = new System.Drawing.Size(75, 23);
			this.btnCheck.TabIndex = 9;
			this.btnCheck.Text = "Check";
			this.btnCheck.UseVisualStyleBackColor = true;
			this.btnCheck.Click += new System.EventHandler(this.btnCheck_Click);
			// 
			// txtUserAgent
			// 
			this.txtUserAgent.Location = new System.Drawing.Point(67, 262);
			this.txtUserAgent.Name = "txtUserAgent";
			this.txtUserAgent.Size = new System.Drawing.Size(220, 20);
			this.txtUserAgent.TabIndex = 8;
			this.txtUserAgent.Text = "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.7) Gecko/20060909 Firefo" +
				"x/1.5.0.7";
			// 
			// txtContent
			// 
			this.txtContent.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
						| System.Windows.Forms.AnchorStyles.Right)));
			this.txtContent.Location = new System.Drawing.Point(67, 72);
			this.txtContent.Multiline = true;
			this.txtContent.Name = "txtContent";
			this.txtContent.Size = new System.Drawing.Size(331, 158);
			this.txtContent.TabIndex = 8;
			// 
			// label5
			// 
			this.label5.AutoSize = true;
			this.label5.Location = new System.Drawing.Point(6, 265);
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(60, 13);
			this.label5.TabIndex = 7;
			this.label5.Text = "User Agent";
			// 
			// label3
			// 
			this.label3.AutoSize = true;
			this.label3.Location = new System.Drawing.Point(6, 75);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(31, 13);
			this.label3.TabIndex = 7;
			this.label3.Text = "Body";
			// 
			// txtIP
			// 
			this.txtIP.Location = new System.Drawing.Point(67, 236);
			this.txtIP.Name = "txtIP";
			this.txtIP.Size = new System.Drawing.Size(220, 20);
			this.txtIP.TabIndex = 6;
			this.txtIP.Text = "24.126.150.127";
			// 
			// label4
			// 
			this.label4.AutoSize = true;
			this.label4.Location = new System.Drawing.Point(6, 239);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(58, 13);
			this.label4.TabIndex = 5;
			this.label4.Text = "IP Address";
			// 
			// txtResponse
			// 
			this.txtResponse.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
						| System.Windows.Forms.AnchorStyles.Left)
						| System.Windows.Forms.AnchorStyles.Right)));
			this.txtResponse.Location = new System.Drawing.Point(12, 485);
			this.txtResponse.Multiline = true;
			this.txtResponse.Name = "txtResponse";
			this.txtResponse.Size = new System.Drawing.Size(395, 82);
			this.txtResponse.TabIndex = 2;
			// 
			// label6
			// 
			this.label6.AutoSize = true;
			this.label6.Location = new System.Drawing.Point(9, 469);
			this.label6.Name = "label6";
			this.label6.Size = new System.Drawing.Size(55, 13);
			this.label6.TabIndex = 3;
			this.label6.Text = "Response";
			// 
			// frmMain
			// 
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.ClientSize = new System.Drawing.Size(414, 581);
			this.Controls.Add(this.label6);
			this.Controls.Add(this.txtResponse);
			this.Controls.Add(this.grpAkismet);
			this.Controls.Add(this.grpComment);
			this.Name = "frmMain";
			this.Text = "Subtext Akismet Tester";
			this.grpAkismet.ResumeLayout(false);
			this.grpAkismet.PerformLayout();
			this.grpComment.ResumeLayout(false);
			this.grpComment.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private System.Windows.Forms.GroupBox grpAkismet;
		private System.Windows.Forms.Button btnVerify;
		private System.Windows.Forms.TextBox txtBlogUrl;
		private System.Windows.Forms.Label label1;
		private System.Windows.Forms.TextBox txtApiKey;
		private System.Windows.Forms.Label lblKey;
		private System.Windows.Forms.Label label2;
		private System.Windows.Forms.TextBox txtCommentType;
		private System.Windows.Forms.Label lblAuthor;
		private System.Windows.Forms.TextBox txtAuthor;
		private System.Windows.Forms.Button btnInsertSpamAuthor;
		private System.Windows.Forms.GroupBox grpComment;
		private System.Windows.Forms.TextBox txtContent;
		private System.Windows.Forms.Label label3;
		private System.Windows.Forms.Button btnHam;
		private System.Windows.Forms.Button btnSpam;
		private System.Windows.Forms.Button btnCheck;
		private System.Windows.Forms.TextBox txtUserAgent;
		private System.Windows.Forms.Label label5;
		private System.Windows.Forms.TextBox txtIP;
		private System.Windows.Forms.Label label4;
		private System.Windows.Forms.TextBox txtResponse;
		private System.Windows.Forms.Label label6;
	}
}

using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace Subtext.Akismet.Tester
{
	static class Program
	{
		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main()
		{
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			Application.Run(new frmMain());
		}
	}
}ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Subtext.Akismet.Tester")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("VelocIT")]
[assembly: AssemblyProduct("Subtext.Akismet.Tester")]
[assembly: AssemblyCopyright("Copyright Â© VelocIT 2006")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("9a98130d-e2e0-4c92-8ed0-0e0a96ab7f5c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Akismet.Tester.Properties
{


	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	internal class Resources
	{

		private static global::System.Resources.ResourceManager resourceMan;

		private static global::System.Globalization.CultureInfo resourceCulture;

		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources()
		{
		}

		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager
		{
			get
			{
				if ((resourceMan == null))
				{
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Subtext.Akismet.Tester.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}

		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture
		{
			get
			{
				return resourceCulture;
			}
			set
			{
				resourceCulture = value;
			}
		}
	}
}
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Akismet.Tester.Properties
{


	[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "8.0.0.0")]
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
	{

		private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

		public static Settings Default
		{
			get
			{
				return defaultInstance;
			}
		}
	}
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//

[assembly: AssemblyTitle("Subtext.Extensibility")]
[assembly: AssemblyDescription("Contains base providers and interfaces referenced to extend Subtext.")]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(false)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, Execution = true)]using System;
using System.Diagnostics.CodeAnalysis;

[SuppressMessage("Microsoft.Design", "CA1050:DeclareTypesInNamespaces")]
[AttributeUsage(AttributeTargets.All)]
public sealed class CoverageExcludeAttribute : Attribute
{
}// This file is used by Code Analysis to maintain SuppressMessage 
// attributes that are applied to this project. 
// Project-level suppressions either have no target or are given 
// a specific target and scoped to a namespace, type, member, etc. 
//
// To add a suppression to this file, right-click the message in the 
// Error List, point to "Suppress Message(s)", and click 
// "In Project Suppression File". 
// You do not need to add suppressions to this file manually. 

using System.Diagnostics.CodeAnalysis;

[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Extensibility")]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Extensibility.Collections")]
[assembly:
    SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Plugins",
        Scope = "namespace", Target = "Subtext.Extensibility.Plugins")]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Extensibility.Web")]
[assembly: SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")]#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

// This file contains documentation for the various Namespaces within this assembly.
// These classes are only used by NDoc to generate namespace documentation.
// They should all be internal sealed classes with private constructors.
//
// http://ndoc.sourceforge.net/reference/NDoc.Core.Reflection.BaseReflectionDocumenterConfig.UseNamespaceDocSummaries.html



#if DOCUMENTATION
namespace Subtext.Extensibility
{
	/// <summary>
	/// Contains base interface and abstract classes used to extend 
	/// Subtext.
	/// </summary>
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}

namespace Subtext.Extensibility.Providers
{
	/// <summary>
	/// Contains the base provider definitions for Subtext.
	/// </summary>
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}
#endif#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Provides general information about the module
	/// </summary>
	public interface IImplementationInfo
	{
		/// <summary>
		/// Name of the implementation
		/// </summary>
		string Name {get;}

		/// <summary>
		/// Name of the author
		/// </summary>
		string Author {get;}

		/// <summary>
		/// Company name
		/// </summary>
		string Company {get;}

		/// <summary>
		/// Copyright information
		/// </summary>
		string Copyright {get;}

		/// <summary>
		/// Homepage Url
		/// </summary>
		Uri HomepageUrl {get;}

		/// <summary>
		/// Version information
		/// </summary>
		Version Version {get;}
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for IModuleIdentifier.
	/// </summary>
	public interface IModuleIdentifier
	{
		string Name {get;}
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// This is the starting point for the plug-in architecture.  
	/// Someone want to run with this?
	/// </summary>
	public interface IPlugin
	{
		/// <summary>
		/// Identifier of the plugin. This value has to be unique. For instance, full type name may be used.
		/// </summary>
		IPluginIdentifier Id {get;}

		/// <summary>
		/// All targets for which this implementation is intended
		/// </summary>
		ITargetIdentifierCollection Targets {get;}

		/// <summary>
		/// Information about plugin implementation
		/// </summary>
		IImplementationInfo Info {get;}
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using System.Web;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for IModuleContext.
	/// </summary>
	public interface IPluginContext
	{
		HttpContext HttpContext {get;}
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for IPluginFactory.
	/// </summary>
	public interface IPluginFactory : IPlugin
	{
		IPluginIdentifierCollection PluginIdentifiers {get;}
		IPlugin CreatePluginInstance(IPluginIdentifier pluginId, IPluginContext context);
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for IPluginIdentifier.
	/// </summary>
	public interface IPluginIdentifier : IModuleIdentifier
	{
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using System.Collections;
using System.Collections.Generic;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for IPluginIdentifierCollection.
	/// </summary>
	public interface IPluginIdentifierCollection : ICollection<IPluginIdentifier>
	{
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for ITarget.
	/// </summary>
	public interface ITarget
	{
		ITargetIdentifier Id {get;}
	}
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using Subtext.Extensibility.Plugins;

namespace Subtext.Extensibility.Plugins
{
    /// <summary>
    /// Summary description for ITargetIdentifier.
    /// </summary>
    public interface ITargetIdentifier : IModuleIdentifier
    {
    }
}#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext-devs@lists.sourceforge.net 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using System.Collections;
using System.Collections.Generic;

namespace Subtext.Extensibility.Plugins
{
	/// <summary>
	/// Summary description for ITargetIdentifierCollection.
	/// </summary>
	public interface ITargetIdentifierCollection : ICollection<ITargetIdentifier>
	{
	}
}
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Extensibility.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Subtext.Extensibility.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid provider type.
        /// </summary>
        public static string Argument_InvalidProviderType {
            get {
                return ResourceManager.GetString("Argument_InvalidProviderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot iterate a page of size zero or less.
        /// </summary>
        public static string InvalidOperation_PageSizeLessThanZero {
            get {
                return ResourceManager.GetString("InvalidOperation_PageSizeLessThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Connection String &apos;{0}&apos; was not found in the ConnectionStrings section..
        /// </summary>
        public static string InvalidOperationException_ConnectionStringNotFound {
            get {
                return ResourceManager.GetString("InvalidOperationException_ConnectionStringNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load default &apos;{0}&apos; provider.
        /// </summary>
        public static string Provider_UnableToLoadDefaultProvider {
            get {
                return ResourceManager.GetString("Provider_UnableToLoadDefaultProvider", resourceCulture);
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration.Provider;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Extensibility.Providers
{
    /// <summary>
    /// Provider for classes that implement the rich text editor 
    /// to edit text visually.
    /// </summary>
    public abstract class BlogEntryEditorProvider : ProviderBase
    {
        private static readonly GenericProviderCollection<BlogEntryEditorProvider> providers =
            ProviderConfigurationHelper.LoadProviderCollection("BlogEntryEditor", out _provider);

        private static BlogEntryEditorProvider _provider;

        protected BlogEntryEditorProvider()
        {
            Height = Unit.Empty;
            Width = Unit.Empty;
        }

        /// <summary>
        /// Returns all the configured Email Providers.
        /// </summary>
        public static GenericProviderCollection<BlogEntryEditorProvider> Providers
        {
            get { return providers; }
        }


        /// <summary>
        /// Id of the control
        /// </summary>
        public virtual string ControlId { get; set; }

        /// <summary>
        /// Width of the editor
        /// </summary>
        public Unit Width { get; set; }

        /// <summary>
        /// Height of the editor
        /// </summary>
        public Unit Height { get; set; }

        /// <summary>
        /// The content of the area
        /// </summary>
        public abstract String Text { get; set; }

        /// <summary>
        /// The content of the area, but XHTML converted
        /// </summary>
        public abstract String Xhtml { get; }

        /// <summary>
        /// Return the RichTextEditorControl to be displayed inside the page
        /// </summary>
        public abstract Control RichTextEditorControl { get; }

        /// <summary>
        /// Returns the default instance of this provider.
        /// </summary>
        /// <returns></returns>
        public static BlogEntryEditorProvider Instance()
        {
            return _provider;
        }

        public override void Initialize(string name, NameValueCollection configValue)
        {
            if(configValue["Width"] != null)
            {
                Width = ParseUnit(configValue["Width"]);
            }

            if(configValue["Height"] != null)
            {
                Height = ParseUnit(configValue["Height"]);
            }

            base.Initialize(name, configValue);
        }

        protected Unit ParseUnit(string s)
        {
            try
            {
                return Unit.Parse(s);
            }
            catch(Exception)
            {
            }
            return Unit.Empty;
        }

        /// <summary>
        /// Initializes the Control to be displayed
        /// </summary>
        public abstract void InitializeControl(object subtextContext);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Specialized;
using System.Configuration.Provider;

namespace Subtext.Extensibility.Providers
{
    /// <summary>
    /// Provides a class used to handle email.
    /// </summary>
    public abstract class EmailProvider : ProviderBase
    {
        private const int DefaultSmtpPort = 25;

        private static readonly GenericProviderCollection<EmailProvider> providers =
            ProviderConfigurationHelper.LoadProviderCollection("Email", out _provider);

        private static EmailProvider _provider;
        private string _name;
        private string _smtpServer = "localhost";

        protected EmailProvider()
        {
            Port = DefaultSmtpPort;
        }

        /// <summary>
        /// Returns all the configured Email Providers.
        /// </summary>
        public static GenericProviderCollection<EmailProvider> Providers
        {
            get { return providers; }
        }

        /// <summary>
        /// Gets or sets the admin email.  This is the email address that 
        /// emails sent to a blog owner appears to be from.  It represents 
        /// the system and might not be a real address.
        /// </summary>
        /// <value></value>
        public string AdminEmail { get; set; }

        /// <summary>
        /// Gets or sets the SMTP server.  If not specified, 
        /// defaults to "localhost";
        /// </summary>
        /// <value></value>
        public string SmtpServer
        {
            get
            {
                if(string.IsNullOrEmpty(_smtpServer))
                {
                    _smtpServer = "localhost";
                }
                return _smtpServer;
            }
            set { _smtpServer = value; }
        }


        /// <summary>
        /// Gets and sets the port.
        /// </summary>
        /// <value>The port.</value>
        public int Port { get; set; }

        /// <summary>
        /// Gets and sets the SSL protocol enable.
        /// </summary>
        /// <value>true or false.</value>
        public bool SslEnabled { get; set; }

        /// <summary>
        /// Gets and sets whether to use the Commenter's email as email notification's From address
        /// </summary>
        /// <value>true or false.</value>
        public bool UseCommentersEmailAsFromAddress { get; set; }


        /// <summary>
        /// Gets or sets the password used for SMTP servers that 
        /// require authentication.
        /// </summary>
        /// <value></value>
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the name of the user for smpt servers that require authentication.
        /// </summary>
        /// <value></value>
        public string UserName { get; set; }


        /// <summary>
        /// Returns the friendly name of the provider when the provider is initialized.
        /// </summary>
        /// <value></value>
        public override string Name
        {
            get { return _name; }
        }

        /// <summary>
        /// Initializes the specified provider.
        /// </summary>
        /// <param name="name">Friendly Name of the provider.</param>
        /// <param name="configValue">Config value.</param>
        public override void Initialize(string name, NameValueCollection configValue)
        {
            _name = name;
            AdminEmail = configValue["adminEmail"];
            SmtpServer = configValue["smtpServer"];
            Password = configValue["password"];
            UserName = configValue["username"];
            if(configValue["port"] != null)
            {
                int port;
                Port = int.TryParse(configValue["port"], out port) ? port : DefaultSmtpPort;
            }

            SslEnabled = GetBoolean(configValue, "sslEnabled", true /* defaultValue */);

            UseCommentersEmailAsFromAddress = GetBoolean(configValue, "commentersEmailAsFromAddress", true
                /* defaultValue */);
        }

        /// <summary>
        /// Returns the currently configured Email Provider.
        /// </summary>
        /// <returns></returns>
        public static EmailProvider Instance()
        {
            return _provider;
        }

        private static bool GetBoolean(NameValueCollection source, string name, bool defaultValue)
        {
            if(source[name] != null)
            {
                bool result;
                if(bool.TryParse(source[name], out result))
                {
                    return result;
                }
            }
            return defaultValue;
        }

        /// <summary>
        /// Sends an email.
        /// </summary>
        /// <param name="to"></param>
        /// <param name="from"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public abstract void Send(string to, string from, string subject, string message);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration.Provider;
using Subtext.Extensibility.Properties;

namespace Subtext.Extensibility.Providers
{
    /// <summary>
    /// Generic collection of Providers.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class GenericProviderCollection<T> : ProviderCollection where T : ProviderBase
    {
        /// <summary>
        /// Returns a provider by the specified section key.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public new T this[string name]
        {
            get { return (T)base[name]; }
        }

        /// <summary>
        /// Adds a new provider to the collection.
        /// </summary>
        /// <param name="provider"></param>
        public override void Add(ProviderBase provider)
        {
            if(provider == null)
            {
                throw new ArgumentNullException("provider");
            }

            if(!(provider is T))
            {
                throw new ArgumentException(Resources.Argument_InvalidProviderType, "provider");
            }

            base.Add(provider);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Configuration.Provider;
using System.Web.Configuration;
using Subtext.Extensibility.Properties;

namespace Subtext.Extensibility.Providers
{
    public static class ProviderConfigurationHelper
    {
        /// <summary>
        /// Helper method for populating a provider collection 
        /// from a Provider section handler.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public static GenericProviderCollection<T> LoadProviderCollection<T>(string sectionName, out T provider)
            where T : ProviderBase
        {
            // Get a reference to the provider section
            var section = (ProviderSectionHandler)WebConfigurationManager.GetSection(sectionName);

            // Load registered providers and point _provider
            // to the default provider
            var providers = new GenericProviderCollection<T>();
            ProvidersHelper.InstantiateProviders(section.Providers, providers, typeof(T));

            provider = providers[section.DefaultProvider];
            if(provider == null)
            {
                throw new ProviderException(string.Format(Resources.Provider_UnableToLoadDefaultProvider, sectionName));
            }

            return providers;
        }

        /// <summary>
        /// Gets the setting value for the specfied setting name and configValue dictionary.
        /// </summary>
        /// <param name="settingKey">Setting Name.</param>
        /// <param name="configValue">Config value.</param>
        /// <returns></returns>
        public static string GetConnectionStringSettingValue(string settingKey, NameValueCollection configValue)
        {
            if(settingKey == null)
            {
                throw new ArgumentNullException("settingKey");
            }

            if(configValue == null)
            {
                throw new ArgumentNullException("configValue");
            }

            string settingValue = configValue[settingKey];

            if(settingKey == "connectionStringName")
            {
                if(String.IsNullOrEmpty(settingValue))
                {
                    settingValue = ConfigurationManager.AppSettings["connectionStringName"];
                }
                ConnectionStringSettings setting = ConfigurationManager.ConnectionStrings[settingValue];
                if(setting == null)
                {
                    throw new ArgumentException(Resources.InvalidOperationException_ConnectionStringNotFound,
                                                "settingKey");
                }

                return setting.ConnectionString;
            }
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Configuration;

namespace Subtext.Extensibility.Providers
{
    /// <summary>
    /// Configuration Section Handler for providers.
    /// </summary>
    public class ProviderSectionHandler : ConfigurationSection
    {
        [ConfigurationProperty("providers")]
        public ProviderSettingsCollection Providers
        {
            get { return (ProviderSettingsCollection)base["providers"]; }
        }

        [ConfigurationProperty("defaultProvider")]
        public string DefaultProvider
        {
            get { return (string)base["defaultProvider"]; }
            set { base["defaultProvider"] = value; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework
{
    /// <summary>
    /// Static class used to get collections of archived posts 
    /// (by month and year and category) from the data provider.
    /// </summary>
    public static class Archives
    {
        /// <summary>
        /// Gets archived posts by month.
        /// </summary>
        /// <returns></returns>
        public static ICollection<ArchiveCount> GetPostCountByMonth()
        {
            return ObjectProvider.Instance().GetPostCountsByMonth();
        }

        /// <summary>
        /// Gets archived posts by year.
        /// </summary>
        /// <returns></returns>
        public static ICollection<ArchiveCount> GetPostCountByYear()
        {
            return ObjectProvider.Instance().GetPostCountsByYear();
        }

        /// <summary>
        /// Gets archived posts by category.
        /// </summary>
        /// <returns></returns>
        public static ICollection<ArchiveCount> GetPostCountByCategory()
        {
            return ObjectProvider.Instance().GetPostCountsByCategory();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;

[assembly: AssemblyTitle("Subtext.Framework")]
[assembly: AssemblyDescription("Contains the core business logic for Subtext.")]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(false)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, Execution = true)]#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Ninject;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;
using Subtext.Framework.Util;
using Subtext.Framework.Web;
using Subtext.Infrastructure;

namespace Subtext.Framework
{
    /// <summary>
    /// Represents an instance of a blog.  This was formerly known as the BlogConfig class. 
    /// We are attempting to distinguish this from settings stored in web.config. This class 
    /// is persisted via a <see cref="ObjectProvider"/>.
    /// </summary>
    [Serializable]
    public class Blog
    {
        const string DefaultLanguage = "en-US";
        const int DefaultRecentCommentsLength = 50;
        private int _categoryListPostCount = 10;
        int _commentDelayInMinutes;
        string _feedbackSpamServiceKey;
        private string _host;
        private string _language = DefaultLanguage;
        string _languageCode;
        int _numberOfRecentComments;
        private string _password;
        int _recentCommentsLength;
        string _rssProxyUrl;
        private string _subfolder;
        ITimeZone _timeZone;
        string _timeZoneId;
        private string _username;

        [Inject]
        public Blog()
        {
            Id = NullValue.NullInt32;
            ItemCount = 25;
            Author = "Subtext Weblog";
            Flag = ConfigurationFlags.None;
            DaysTillCommentsClose = Int32.MaxValue;
        }

        public Blog(bool isAggregateBlog) : this()
        {
            IsAggregateBlog = isAggregateBlog;
        }

        public bool IsAggregateBlog { get; private set; }

        /// <summary>
        /// Gets or sets the date that the blog's configuration 
        /// was last updated.
        /// </summary>
        /// <value></value>
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Gets or sets the ID of the blog.  This is the 
        /// primary key in the blog_config table.
        /// </summary>
        /// <value></value>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the option to show the blog owners email address in rss feeds.
        /// </summary>
        public bool ShowEmailAddressInRss
        {
            get { return FlagPropertyCheck(ConfigurationFlags.ShowAuthorEmailAddressinRss); }
            set { FlagSetter(ConfigurationFlags.ShowAuthorEmailAddressinRss, value); }
        }

        /// <summary>
        /// Gets the time zone.
        /// </summary>
        /// <value>The time zone.</value>
        public virtual ITimeZone TimeZone
        {
            get
            {
                if(_timeZone == null)
                {
                    TimeZoneInfo timeZone = TimeZones.GetTimeZones().GetById(TimeZoneId) ?? TimeZoneInfo.Local;
                    _timeZone = new TimeZoneWrapper(timeZone);
                }
                return _timeZone;
            }
        }

        /// <summary>
        /// Gets or sets the time zone for the blogger.  
        /// </summary>
        /// <value></value>
        public string TimeZoneId
        {
            get { return _timeZoneId; }
            set
            {
                if(_timeZoneId != value)
                {
                    _timeZone = null;
                    _timeZoneId = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets the count of posts displayed on the front page 
        /// of the blog.
        /// </summary>
        /// <value></value>
        public int ItemCount { get; set; }

        /// <summary>
        /// Gets or sets the count of posts displayed on the category pages. 
        /// </summary>
        /// <value></value>
        public int CategoryListPostCount
        {
            get { return _categoryListPostCount; }
            set
            {
                if(value < 0)
                {
                    value = 0;
                    //needed when upgrading from versions that did not have this column ("CategoryListPostCount") in the subtext_Config table.
                }
                _categoryListPostCount = value;
            }
        }

        /// <summary>
        /// Gets or sets the story count.
        /// </summary>
        /// <value></value>
        public int StoryCount { get; set; }

        /// <summary>
        /// Gets or sets the language the blog is in..
        /// </summary>
        /// <value></value>
        public string Language
        {
            get { return _language; }
            set
            {
                _language = value ?? DefaultLanguage;
                _languageCode = null;
            }
        }

        /// <summary>
        /// Gets the two (or three) letter language without the culture code.
        /// </summary>
        /// <value>The language sans culture.</value>
        public string LanguageCode
        {
            get
            {
                if(string.IsNullOrEmpty(_languageCode))
                {
                    //Just being paranoid in making this check.
                    if(_language == null)
                    {
                        _language = "en-US";
                    }
                    _languageCode = StringHelper.LeftBefore(_language, "-");
                }
                return _languageCode;
            }
        }

        /// <summary>
        /// Gets or sets the email of the blog owner.
        /// </summary>
        /// <value></value>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the host for the blog.  For 
        /// example, www.haacked.com might be a host.
        /// </summary>
        /// <value></value>
        public string Host
        {
            get { return _host; }
            set { _host = StripPortFromHost(value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this site can 
        /// be accessed via MetaBlogAPI, XML Web Services, etc..
        /// </summary>
        /// <value>
        /// 	<c>true</c> if the blog allow service access; otherwise, <c>false</c>.
        /// </value>
        public bool AllowServiceAccess
        {
            get { return FlagPropertyCheck(ConfigurationFlags.EnableServiceAccess); }
            set { FlagSetter(ConfigurationFlags.EnableServiceAccess, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether passwords are 
        /// stored in the database as cleartext or hashed.  If true, 
        /// passwords are hashed before storage.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if passwords are hashed; otherwise, <c>false</c>.
        /// </value>
        public bool IsPasswordHashed
        {
            get { return FlagPropertyCheck(ConfigurationFlags.IsPasswordHashed); }
            set { FlagSetter(ConfigurationFlags.IsPasswordHashed, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether syndicated feeds (such as 
        /// RSS or ATOM) are compressed.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if using compression, otherwise, <c>false</c>.
        /// </value>
        public bool UseSyndicationCompression
        {
            get { return FlagPropertyCheck(ConfigurationFlags.CompressSyndicatedFeed); }
            set { FlagSetter(ConfigurationFlags.CompressSyndicatedFeed, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this blog 
        /// contains some sort of feed (such as RSS or ATOM).
        /// </summary>
        /// <value>
        /// 	<c>true</c> if it is aggregated; otherwise, <c>false</c>.
        /// </value>
        public bool IsAggregated
        {
            get { return FlagPropertyCheck(ConfigurationFlags.IsAggregated); }
            set { FlagSetter(ConfigurationFlags.IsAggregated, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether comments are enabled.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if comments are enabled, otherwise, <c>false</c>.
        /// </value>
        public bool CommentsEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.CommentsEnabled); }
            set { FlagSetter(ConfigurationFlags.CommentsEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether comments are enabled.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if comments are enabled, otherwise, <c>false</c>.
        /// </value>
        public bool CoCommentsEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.CoCommentEnabled); }
            set { FlagSetter(ConfigurationFlags.CoCommentEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether blog posts and articles 
        /// have a friendly URL generated automatically from the title.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if comments are enabled, otherwise, <c>false</c>.
        /// </value>
        public bool AutoFriendlyUrlEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.AutoFriendlyUrlEnabled); }
            set { FlagSetter(ConfigurationFlags.AutoFriendlyUrlEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether trackbacks and pingbacks are enabled.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if comments are enabled, otherwise, <c>false</c>.
        /// </value>
        public bool TrackbacksEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.TrackbacksEnabled); }
            set { FlagSetter(ConfigurationFlags.TrackbacksEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether duplicate comments are enabled.  
        /// If not, duplicate comments are not allowed.
        /// </summary>
        /// <remarks>
        /// This may cause a problem with "me too!" comments.  
        /// If that is an issue, we can tweak this to only check 
        /// comments that are larger than a certain size.
        /// </remarks>
        /// <value>
        /// 	<c>true</c> if comments are enabled, otherwise, <c>false</c>.
        /// </value>
        public bool DuplicateCommentsEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.DuplicateCommentsEnabled); }
            set { FlagSetter(ConfigurationFlags.DuplicateCommentsEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether 
        /// <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html">RFC3229 for feeds</see> 
        /// delta encoding is enabled.
        /// </summary>
        /// <remarks>
        /// This can reduce bandwidth usage for RSS feeds.  When clients request a 
        /// feed using this protocol, only items that have not been sent to the client 
        /// already are sent.
        /// </remarks>
        /// <value>
        /// 	<c>true</c> if RFC3229 delta encoding is enabled.; otherwise, <c>false</c>.
        /// </value>
        public bool RFC3229DeltaEncodingEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.RFC3229DeltaEncodingEnabled); }
            set { FlagSetter(ConfigurationFlags.RFC3229DeltaEncodingEnabled, value); }
        }

        /// <summary>
        /// Gets or sets the days till comments close on a post.  
        /// The count starts when a post is created.
        /// </summary>
        /// <value></value>
        public int DaysTillCommentsClose { get; set; }

        /// <summary>
        /// Gets or sets the delay in minutes, between any two successive comments from 
        /// the same IP address.  This helps prevents comment bombing attacks.
        /// </summary>
        /// <value></value>
        public int CommentDelayInMinutes
        {
            get
            {
                if(_commentDelayInMinutes < 0 || _commentDelayInMinutes == int.MaxValue)
                {
                    return 0;
                }
                return _commentDelayInMinutes;
            }
            set { _commentDelayInMinutes = value; }
        }

        /// <summary>
        /// Gets or sets the number of recent comments to display in 
        /// the RecentComments control.
        /// </summary>
        /// <value></value>
        public int NumberOfRecentComments
        {
            get
            {
                if(_numberOfRecentComments < 0 || _numberOfRecentComments == int.MaxValue)
                {
                    return 0;
                }
                return _numberOfRecentComments;
            }
            set { _numberOfRecentComments = value; }
        }

        /// <summary>
        /// Gets or sets the number of characters to use to display recent comments  
        /// in the RecentComments control.
        /// </summary>
        /// <value></value>
        public int RecentCommentsLength
        {
            get
            {
                if(_recentCommentsLength < 0 || _recentCommentsLength == int.MaxValue)
                {
                    return DefaultRecentCommentsLength;
                }
                return _recentCommentsLength;
            }
            set { _recentCommentsLength = value; }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this blog is active.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if it is active; otherwise, <c>false</c>.
        /// </value>
        public bool IsActive
        {
            get { return FlagPropertyCheck(ConfigurationFlags.IsActive); }
            set { FlagSetter(ConfigurationFlags.IsActive, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether or not comments are moderated
        /// </summary>
        /// <value>
        /// 	<c>true</c> if it is active; otherwise, <c>false</c>.
        /// </value>
        public bool ModerationEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.CommentModerationEnabled); }
            set { FlagSetter(ConfigurationFlags.CommentModerationEnabled, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether captcha is enabled.
        /// </summary>
        /// <value><c>true</c> if captcha is enabled; otherwise, <c>false</c>.</value>
        public bool CaptchaEnabled
        {
            get { return FlagPropertyCheck(ConfigurationFlags.CaptchaEnabled); }
            set { FlagSetter(ConfigurationFlags.CaptchaEnabled, value); }
        }

        /// <summary>
        /// Gets or sets the _subfolder the blog lives in.
        /// </summary>
        /// <value></value>
        public string Subfolder
        {
            get { return _subfolder ?? string.Empty; }
            set
            {
                if(!String.IsNullOrEmpty(value))
                {
                    value = HttpHelper.StripSurroundingSlashes(value);
                }

                _subfolder = value;
            }
        }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value></value>
        public string Password
        {
            get { return _password; }
            set { _password = value ?? string.Empty; }
        }

        /// <summary>
        /// Gets or sets the OpenIdUrl.
        /// </summary>
        /// <value></value>
        public string OpenIdUrl
        {
            get
            {
                return _openIdUrl;
            } 
            set
            {
                if(value != null)
                {
                    if(!value.StartsWith("http://") && !value.StartsWith("https://"))
                    {
                        _openIdUrl = "http://" + value;
                    }
                    else
                    {
                        _openIdUrl = value;
                    }
                }
                else
                {
                    _openIdUrl = null;
                }
            }
        }

        string _openIdUrl;

        /// <summary>
        /// Gets or sets the OpenIdServer.
        /// </summary>
        public string OpenIdServer { get; set; }

        /// <summary>
        /// Gets or sets the OpenIdDelegate.
        /// </summary>
        public string OpenIdDelegate { get; set; }

        /// <summary>
        /// Gets or sets the CardSpaceHash.
        /// </summary>
        /// <value></value>
        public string CardSpaceHash { get; set; }

        /// <summary>
        /// Gets or sets the user name for the owner of the blog.
        /// </summary>
        /// <value></value>
        public string UserName
        {
            get { return _username; }
            set { _username = value ?? string.Empty; }
        }

        /// <summary>
        /// Gets or sets the title of the blog.
        /// </summary>
        /// <value></value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the sub title of the blog.
        /// </summary>
        /// <value></value>
        public string SubTitle { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="SkinConfig"/> instance 
        /// which contains information about the specified skin.
        /// </summary>
        /// <value></value>
        public SkinConfig Skin { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="SkinConfig"/> instance 
        /// which contains information about the specified skin.
        /// </summary>
        /// <value></value>
        public SkinConfig MobileSkin { get; set; }

        /// <summary>
        /// Gets a value indicating whether the blog has news. 
        /// News can be entered in the Admin section.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if the blog has news; otherwise, <c>false</c>.
        /// </value>
        public bool HasNews
        {
            get { return News != null && News.Trim().Length > 0; }
        }

        /// <summary>
        /// Gets or sets the news.
        /// </summary>
        /// <value></value>
        public string News { get; set; }

        /// <summary>
        /// Gets or sets the author of the blog.
        /// </summary>
        /// <value></value>
        public string Author { get; set; }

        /// <summary>
        /// Gets or sets blog tracking code.
        /// </summary>
        /// <value></value>
        public string TrackingCode { get; set; }

        /// <summary>
        /// Gets or sets the Blog Group ID
        /// </summary>
        /// <value></value>
        public int BlogGroupId { get; set; }

        /// <summary>
        /// Gets or sets the Blog Group Title
        /// </summary>
        /// <value></value>
        public string BlogGroupTitle { get; set; }

        /// <summary>
        /// Gets or sets the license URL.  This is used to 
        /// Used to specify a license within a syndicated feed. 
        /// Does not have to be a creative commons license. 
        /// <see href="http://backend.userland.com/creativeCommonsRssModule" />
        /// </summary>
        /// <value></value>
        public string LicenseUrl { get; set; }

        /// <summary>
        /// Gets or sets the Comment Service API key. This is for a comment spam filtering 
        /// service such as http://akismet.com/
        /// </summary>
        /// <value>The akismet API key.</value>
        public string FeedbackSpamServiceKey
        {
            get { return _feedbackSpamServiceKey ?? String.Empty; }
            set { _feedbackSpamServiceKey = (value ?? string.Empty); }
        }

        /// <summary>
        /// Gets a value indicating whether [akismet enabled].
        /// </summary>
        /// <value><c>true</c> if [akismet enabled]; otherwise, <c>false</c>.</value>
        public bool FeedbackSpamServiceEnabled
        {
            get { return !String.IsNullOrEmpty(_feedbackSpamServiceKey); }
        }

        /// <summary>
        /// Gets a value indicating whether an RSS Proxy such as FeedBurner is enabled.
        /// </summary>
        public bool RssProxyEnabled
        {
            get { return !String.IsNullOrEmpty(_rssProxyUrl); }
        }

        /// <summary>
        /// Gets or sets the name of the feedburner account. This is the portion of the 
        /// feedburner URL after: http://feedproxy.google.com/ You can also specify a 
        /// full URL
        /// </summary>
        /// <value>The name of the feed burner.</value>
        public string RssProxyUrl
        {
            get { return _rssProxyUrl; }
            set
            {
                if(!String.IsNullOrEmpty(value))
                {
                    if(value.Contains("\\"))
                    {
                        throw new InvalidOperationException(Resources.InvalidOperation_BackslashesInRssProxyName);
                    }
                }
                _rssProxyUrl = value;
            }
        }

        /// <summary>
        /// Gets or sets the flags pertaining to this blog.  
        /// This is a bitmask of <see cref="ConfigurationFlags"/>s.
        /// </summary>
        /// <value></value>
        public ConfigurationFlags Flag { get; set; }

        /// <summary>
        /// Gets or sets the total number of posts.
        /// </summary>
        /// <value></value>
        public int PostCount { get; set; }

        /// <summary>
        /// Gets or sets the comment count.
        /// </summary>
        /// <value></value>
        public int CommentCount { get; set; }

        /// <summary>
        /// Gets or sets the ping track count.
        /// </summary>
        /// <value></value>
        public int PingTrackCount { get; set; }

        /// <summary>
        /// Strips the port number from the host name.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <returns></returns>
        public static string StripPortFromHost(string host)
        {
            if(String.IsNullOrEmpty(host))
            {
                throw new ArgumentNullException("host");
            }

            return host.LeftBefore(":", StringComparison.Ordinal);
        }

        /// <summary>
        /// Strips www prefix from host name.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <returns></returns>
        public static string StripWwwPrefixFromHost(string host)
        {
            if(String.IsNullOrEmpty(host))
            {
                throw new ArgumentNullException("host");
            }

            return host.RightAfter("www.", StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Gets the active blog count by host.
        /// </summary>
        /// <param name="host">The host.</param>
        /// <returns></returns>
        /// <param name="pageIndex">Zero based index of the page to retrieve.</param>
        /// <param name="pageSize">Number of records to display on the page.</param>
        /// <param name="flags">Configuration flags to filter blogs retrieved.</param>
        public static IPagedCollection<Blog> GetBlogsByHost(string host, int pageIndex, int pageSize,
                                                            ConfigurationFlags flags)
        {
            if(String.IsNullOrEmpty(host))
            {
                throw new ArgumentNullException("host");
            }

            return ObjectProvider.Instance().GetPagedBlogs(host, pageIndex, pageSize, flags);
        }

        public IPagedCollection<BlogAlias> GetBlogAliases(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetPagedBlogDomainAlias(this, pageIndex, pageSize);
        }

        /// <summary>
        /// Returns a <see cref="IList{T}"/> containing ACTIVE the <see cref="Blog"/> 
        /// instances within the specified range.
        /// </summary>
        /// <param name="pageIndex">Page index.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="flags"></param>
        /// <returns></returns>
        public static IPagedCollection<Blog> GetBlogs(int pageIndex, int pageSize, ConfigurationFlags flags)
        {
            return ObjectProvider.Instance().GetPagedBlogs(null, pageIndex, pageSize, flags);
        }

        /// <summary>
        /// Adds or removes a <see cref="ConfigurationFlags"/> to the 
        /// flags set for this blog via bitmask operations.
        /// </summary>
        /// <param name="cf">Cf.</param>
        /// <param name="select">Select.</param>
        protected void FlagSetter(ConfigurationFlags cf, bool select)
        {
            if(select)
            {
                Flag = Flag | cf;
            }
            else
            {
                Flag = Flag & ~cf;
            }
        }

        /// <summary>
        /// Checks to see if the specified <see cref="ConfigurationFlags"/> 
        /// matches a flag set for this blog.
        /// </summary>
        /// <param name="cf">Cf.</param>
        /// <returns></returns>
        protected bool FlagPropertyCheck(ConfigurationFlags cf)
        {
            return (Flag & cf) == cf;
        }

        /// <summary>
        /// Returns true if the two instances are equal
        /// </summary>
        /// <param name="obj">Obj.</param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if(obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return ((Blog)obj).Id == Id;
        }

        /// <summary>
        /// Serves as the hash function for the type <see cref="Blog" />, 
        /// suitable for use in hashing functions.
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return (Host ?? string.Empty).GetHashCode() ^ (Subfolder ?? string.Empty).GetHashCode() ^ Id.GetHashCode();
        }

        public static void ClearBlogContent(int blogId)
        {
            ObjectProvider.Instance().ClearBlogContent(blogId);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework
{
    public class BlogAlias
    {
        public BlogAlias()
        {
            Id = NullValue.NullInt32;

            BlogId = NullValue.NullInt32;
            Subfolder = string.Empty;
            Host = string.Empty;
            IsActive = true;
        }

        public int Id { get; set; }

        public bool IsActive { get; set; }

        public string Host { get; set; }

        public string Subfolder { get; set; }

        public int BlogId { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

namespace Subtext.Framework
{
    public static class CollectionExtensions
    {
        public static bool IsNullOrEmpty<T>(this IEnumerable<T> items)
        {
            return items == null || !items.Any();
        }

        public static void AddRange<T>(this ICollection<T> source, IEnumerable<T> elements)
        {
            elements.ForEach(source.Add);
        }

        public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
        {
            foreach(T item in source)
            {
                action(item);
            }
        }

        public static bool GetBoolean(this NameValueCollection source, string name)
        {
            bool result;
            return bool.TryParse(source[name], out result) && result;
        }

        public static TEnumType GetEnum<TEnumType>(this NameValueCollection source, string name)
        {
            return (TEnumType)Enum.Parse(typeof(TEnumType), source[name], true /* ignoreCase */);
        }

        public static void Accumulate<TContainer, TKey, TItem>(this IEnumerable<TContainer> containers, IEnumerable<TItem> items, Func<TContainer, TKey> keySelector, Func<TItem, TKey> itemKeySelector, Action<TContainer, TItem> accumulator)
        {
            // Assumes that items are sorted by item key in the order corresponding to container key
            var groupedItems = from item in items
                               group item by itemKeySelector(item) into groupedByKey
                               select groupedByKey;

            foreach(var itemGroup in groupedItems)
            {
                foreach(var container in containers)
                {
                    if(!keySelector(container).Equals(itemGroup.Key))
                    {
                        continue;
                    }
                    foreach(var item in itemGroup)
                    {
                        accumulator(container, item);
                    }
                }
            }
        }

    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using Subtext.Extensibility.Interfaces;
using Subtext.Extensibility.Properties;

namespace Subtext.Extensibility.Collections
{
    public class CollectionBook<T> : ICollectionBook<T>
    {
        readonly int _pageSize;
        readonly Func<int, int, IPagedCollection<T>> _pageSource;

        public CollectionBook(Func<int, int, IPagedCollection<T>> pageSource, int pageSize)
        {
            _pageSource = pageSource;
            _pageSize = pageSize;
        }

        public IEnumerator<IPagedCollection<T>> GetEnumerator()
        {
            if(_pageSize <= 0)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_PageSizeLessThanZero);
            }

            int pageIndex = 0;
            int pageCount = 0;

            if(pageCount == 0)
            {
                IPagedCollection<T> page = _pageSource(pageIndex, _pageSize);
                pageCount = (int)Math.Ceiling((double)page.MaxItems / _pageSize);
                yield return page;
            }

            //We've already yielded page 0, so start at 1
            while(++pageIndex < pageCount)
            {
                yield return _pageSource(pageIndex, _pageSize);
            }
        }

        ///<summary>
        ///Returns an enumerator that iterates through a collection.
        ///</summary>
        ///<returns>
        ///An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
        ///</returns>
        ///<filterpriority>2</filterpriority>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public IEnumerable<T> AsFlattenedEnumerable()
        {
            foreach(var page in this)
            {
                foreach(var item in page)
                {
                    yield return item;
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;

namespace Subtext.Extensibility.Interfaces
{
    public interface ICollectionBook<T> : IEnumerable<IPagedCollection<T>>
    {
        IEnumerable<T> AsFlattenedEnumerable();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;

namespace Subtext.Extensibility.Interfaces
{
    /// <summary>
    /// Base interface for generic paged collections.
    /// </summary>
    public interface IPagedCollection<T> : IList<T>
    {
        int MaxItems { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework.Components;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Infrastructure;

namespace Subtext.Framework
{
    /// <summary>
    /// Class used to filter incoming comments.  This will get replaced 
    /// with a plugin once the plugin architecture is complete, but the 
    /// logic will probably get ported.
    /// </summary>
    public class CommentFilter : ICommentFilter
    {
        private const string FilterCacheKey = "COMMENT FILTER:";

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentFilter"/> class.
        /// </summary>
        public CommentFilter(ISubtextContext context, ICommentSpamService spamService)
        {
            SubtextContext = context;
            SpamService = spamService;
            Blog = context.Blog;
            Cache = context.Cache;
        }

        public ISubtextContext SubtextContext { get; private set; }

        protected ICommentSpamService SpamService { get; private set; }

        protected Blog Blog { get; private set; }

        protected ICache Cache { get; private set; }

        #region ICommentFilter Members

        /// <summary>
        /// Validates the feedback before it has been persisted.
        /// </summary>
        /// <param name="feedback"></param>
        /// <exception type="CommentFrequencyException">Thrown if too many comments are received from the same source in a short period.</exception>
        /// <exception type="CommentDuplicateException">Thrown if the blog does not allow duplicate comments and too many are received in a short period of time.</exception>
        public void FilterBeforePersist(FeedbackItem feedback)
        {
            if(!SubtextContext.User.IsAdministrator())
            {
                if(!SourceFrequencyIsValid(feedback))
                {
                    throw new CommentFrequencyException(Blog.CommentDelayInMinutes);
                }

                if(!Blog.DuplicateCommentsEnabled && IsDuplicateComment(feedback))
                {
                    throw new CommentDuplicateException();
                }
            }
        }

        /// <summary>
        /// Filters the comment. Throws an exception should the comment not be allowed. 
        /// Otherwise returns true.  This interface may be changed.
        /// </summary>
        /// <remarks>
        /// <p>
        /// The first filter examines whether comments are coming in too quickly 
        /// from the same SourceUrl.  Looks at the Blog.CommentDelayInMinutes.
        /// </p>
        /// <p>
        /// The second filter checks for duplicate comments. It only looks at the body 
        /// of the comment.
        /// </p>
        /// </remarks>
        /// <param name="feedbackItem">Entry.</param>
        public void FilterAfterPersist(FeedbackItem feedbackItem)
        {
            if(!SubtextContext.User.IsAdministrator())
            {
                if(!Blog.ModerationEnabled)
                {
                    //Akismet Check...
                    if(Blog.FeedbackSpamServiceEnabled && SpamService != null)
                    {
                        if(SpamService.IsSpam(feedbackItem))
                        {
                            FlagAsSpam(feedbackItem);
                            return;
                        }
                    }
                    //Note, we need to explicitely set the status flag here.
                    //Just setting Approved = true would not reset any other bits in the flag that may be set.
                    feedbackItem.Status = FeedbackStatusFlag.Approved;
                }
                else //Moderated!
                {
                    //Note, we need to explicitely set the status flag here.
                    //Just setting NeedsModeration = true would not reset any other bits in the flag that may be set.
                    feedbackItem.Status = FeedbackStatusFlag.NeedsModeration;
                }
            }
            else
            {
                //Note, we need to explicitely set the status flag here.
                //Just setting Approved = true would not reset any other bits in the flag that may be set.
                feedbackItem.Status = FeedbackStatusFlag.Approved;
            }
            feedbackItem.DateModified = Blog.TimeZone.Now;
            SubtextContext.Repository.Update(feedbackItem);
        }

        #endregion

        private void FlagAsSpam(FeedbackItem feedbackItem)
        {
            feedbackItem.FlaggedAsSpam = true;
            feedbackItem.Approved = false;
            feedbackItem.DateModified = Blog.TimeZone.Now;
            SubtextContext.Repository.Update(feedbackItem);
        }

        // Returns true if the source of the entry is not 
        // posting too many.
        bool SourceFrequencyIsValid(FeedbackItem feedbackItem)
        {
            if(Blog.CommentDelayInMinutes <= 0)
            {
                return true;
            }

            object lastComment = Cache[FilterCacheKey + feedbackItem.IpAddress];

            if(lastComment != null)
            {
                //Comment was made too frequently.
                return false;
            }

            //Add to cache.
            Cache.Insert(FilterCacheKey + feedbackItem.IpAddress, string.Empty, null,
                         DateTime.Now.AddMinutes(Blog.CommentDelayInMinutes), TimeSpan.Zero);
            return true;
        }

        // Returns true if this entry is a duplicate.
        bool IsDuplicateComment(FeedbackItem feedbackItem)
        {
            const int recentEntryCapacity = 10;

            if(Cache == null)
            {
                return false;
            }

            // Check the cache for the last 10 comments
            // Chances are, if a spam attack is occurring, then 
            // this entry will be a duplicate of a recent entry.
            // This checks in memory before going to the database (or other persistent store).
            var recentCommentChecksums = Cache[FilterCacheKey + ".RECENT_COMMENTS"] as Queue<string>;
            if(recentCommentChecksums != null)
            {
                if(recentCommentChecksums.Contains(feedbackItem.ChecksumHash))
                {
                    return true;
                }
            }
            else
            {
                recentCommentChecksums = new Queue<string>(recentEntryCapacity);
                Cache[FilterCacheKey + ".RECENT_COMMENTS"] = recentCommentChecksums;
            }

            // Check the database
            FeedbackItem duplicate = SubtextContext.Repository.GetFeedbackByChecksumHash(feedbackItem.ChecksumHash);
            if(duplicate != null)
            {
                return true;
            }

            //Ok, this is not a duplicate... Update recent comments.
            if(recentCommentChecksums.Count == recentEntryCapacity)
            {
                recentCommentChecksums.Dequeue();
            }

            recentCommentChecksums.Enqueue(feedbackItem.ChecksumHash);
            return false;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// DTO style class for representing a count of archived posts.
    /// </summary>
    [Serializable]
    public class ArchiveCount
    {
        public String Title { get; set; }

        public int Id { get; set; }

        public DateTime Date { get; set; }

        public int Count { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for BlogGroup.
    /// </summary>
    [Serializable]
    public class BlogGroup
    {
        /// <summary>
        /// Creates a new <see cref="BlogGroup"/> instance.
        /// </summary>
        public BlogGroup()
        {
        }

        /// <summary>
        /// Creates a new <see cref="BlogGroup"/> instance.
        /// </summary>
        /// <param name="id">Blog Group ID.</param>
        /// <param name="title">Title.</param>
        public BlogGroup(int id, string title)
        {
            Title = title;
            Id = id;
        }

        public string Title { get; set; }

        public bool HasDescription
        {
            get { return Description != null && Description.Trim().Length > 0; }
        }

        public string Description { get; set; }


        public int DisplayOrder { get; set; }

        [XmlAttribute("BlogGroupID")]
        public int Id { get; set; }

        public bool IsActive { get; set; }

        public ICollection<Blog> Blogs { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Components
{
    public class BlogStatistics
    {
        public int ActivePostCount { get; set; }
        public int DraftPostCount { get; set; }
        public int ActiveArticleCount { get; set; }
        public int DraftArticleCount { get; set; }
        public int FeedbackCount { get; set; }
        public int ApprovedFeedbackCount { get; set; }
        public int ApprovedTrackbackCount { get; set; }
        public int SpamFalsePositiveFeedbackCount { get; set; }
        public int SpamFalsePositiveTrackbackCount { get; set; }
        public int AwaitingModerationFeedbackCount { get; set; }
        public int AwaitingModerationTrackbackCount { get; set; }
        public int FlaggedAsSpamFeedbackCount { get; set; }
        public int FlaggedAsSpamTrackbackCount { get; set; }
        public int DeletedFeedbackCount { get; set; }
        public int DeletedTrackbackCount { get; set; }
        public int DeletedSpamFeedbackCount { get; set; }
        public int DeletedSpamTrackbackCount { get; set; }
        public int AverageCommentsPerPost { get; set; }
        public int AveragePostsPerMonth { get; set; }
        public int AveragePostsPerWeek { get; set; }
        public int AverageCommentsPerMonth { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml.Serialization;
using Subtext.Extensibility.Interfaces;

namespace Subtext.Framework.Components
{
    public class Category : IIdentifiable
    {
        public string Title { get; set; }

        public int BlogId { get; set; }

        #region IIdentifiable Members

        [XmlAttribute("CategoryId")]
        public int Id { get; set; }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Components
{
    public enum CategoryType : byte
    {
        None = 0,
        PostCollection = 1,
        StoryCollection = 2,
        ImageCollection = 3,
        ArchiveMonthCollection = 4,
        LinkCollection = 5,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Components
{
    [XmlRoot("Enclosure", Namespace = "urn-Subtext")]
    public class Enclosure
    {
        public string Url { get; set; }

        public string Title { get; set; }

        public long Size { get; set; }

        public string MimeType { get; set; }

        public int Id { get; set; }

        public int EntryId { get; set; }

        public bool AddToFeed { get; set; }

        public bool ShowWithPost { get; set; }

        public string FormattedSize
        {
            get
            {
                if(Size < 1024)
                {
                    return Size + " bytes";
                }
                if(Size < 1024 * 1024)
                {
                    return Math.Round(((double)Size / 1024), 2) + " KB";
                }
                if(Size < 1024 * 1024 * 1024)
                {
                    return Math.Round(((double)Size / (1024 * 1024)), 2) + " MB";
                }

                return Math.Round(((double)Size / (1024 * 1024 * 1024)), 2) + " GB";
            }
        }

        public bool IsValid
        {
            get
            {
                if(EntryId == 0)
                {
                    ValidationMessage = Resources.Enclosure_NeedsAnEntry;
                    return false;
                }

                if(string.IsNullOrEmpty(Url))
                {
                    ValidationMessage = Resources.Enclosure_UrlRequired;
                    return false;
                }

                if(string.IsNullOrEmpty(MimeType))
                {
                    ValidationMessage = Resources.Enclosure_MimeTypeRequired;
                    return false;
                }

                if(Size == 0)
                {
                    ValidationMessage = Resources.Enclosure_SizeGreaterThanZero;
                    return false;
                }

                ValidationMessage = null;
                return true;
            }
        }

        public string ValidationMessage { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Configuration;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for Entry.
    /// </summary>
    [Serializable]
    public class Entry : IEntryIdentity
    {
        DateTime _dateSyndicated = NullValue.NullDateTime;

        public Entry(PostType postType, Blog blog)
        {
            Categories = new List<string>();
            PostConfig = PostConfig.None;
            DateModified = NullValue.NullDateTime;
            DateCreated = NullValue.NullDateTime;
            PostType = postType;
            Blog = blog;
            Id = NullValue.NullInt32;
        }

        public Entry(PostType postType)
            : this(postType, Config.CurrentBlog)
        {
        }

        /// <summary>
        /// Gets or sets the blog ID.
        /// </summary>
        /// <value>The blog ID.</value>
        public int BlogId { get; set; }

        public Blog Blog { get; set; }

        /// <summary>
        /// Gets a value indicating whether this instance has description.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance has description; otherwise, <c>false</c>.
        /// </value>
        public bool HasDescription
        {
            get { return !String.IsNullOrEmpty(Description); }
        }

        /// <summary>
        /// Gets or sets the description or excerpt for this blog post. 
        /// Some blogs like to sydicate description only.
        /// </summary>
        /// <value>The description.</value>
        public string Description
        { //todo: let's rename this property to excerpt.
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this instance has entry name.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance has entry name; otherwise, <c>false</c>.
        /// </value>
        public bool HasEntryName
        {
            get { return EntryName != null && EntryName.Trim().Length > 0; }
        }

        /// <summary>
        /// Gets or sets the title of this post.
        /// </summary>
        /// <value>The title.</value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the body of the Entry.  This is the 
        /// main content of the entry.
        /// </summary>
        /// <value></value>
        public string Body { get; set; }

        /// <summary>
        /// Gets or sets the author name of the entry.  
        /// For comments, this is the name given by the commenter. 
        /// </summary>
        /// <value>The author.</value>
        public string Author { get; set; }

        /// <summary>
        /// Gets or sets the email of the author.
        /// </summary>
        /// <value>The email.</value>
        public string Email { get; set; }


        /// <summary>
        /// Gets or sets the date this entry was last updated.
        /// </summary>
        /// <value></value>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets the date the item was published.
        /// </summary>
        /// <value></value>
        public DateTime DateSyndicated
        {
            get { return _dateSyndicated; }
            set
            {
                if(NullValue.IsNull(value))
                {
                    IncludeInMainSyndication = false;
                }
                _dateSyndicated = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this entry is active.
        /// </summary>
        /// <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        public bool IsActive
        {
            get { return EntryPropertyCheck(PostConfig.IsActive); }
            set { PostConfigSetter(PostConfig.IsActive, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this entry allows comments.
        /// </summary>
        /// <value><c>true</c> if [allows comments]; otherwise, <c>false</c>.</value>
        public bool AllowComments
        {
            get { return EntryPropertyCheck(PostConfig.AllowComments); }
            set { PostConfigSetter(PostConfig.AllowComments, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this entry is displayed on the home page.
        /// </summary>
        /// <value><c>true</c> if [display on home page]; otherwise, <c>false</c>.</value>
        public bool DisplayOnHomePage
        {
            get { return EntryPropertyCheck(PostConfig.DisplayOnHomepage); }
            set { PostConfigSetter(PostConfig.DisplayOnHomepage, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the description only should be syndicated.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [syndicate description only]; otherwise, <c>false</c>.
        /// </value>
        public bool SyndicateDescriptionOnly
        {
            get { return EntryPropertyCheck(PostConfig.SyndicateDescriptionOnly); }
            set { PostConfigSetter(PostConfig.SyndicateDescriptionOnly, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether [include in main syndication].
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [include in main syndication]; otherwise, <c>false</c>.
        /// </value>
        public bool IncludeInMainSyndication
        {
            get
            {
                return EntryPropertyCheck(PostConfig.IncludeInMainSyndication);
            }
            set
            {
                PostConfigSetter(PostConfig.IncludeInMainSyndication, value);
            }
        }

        /// <summary>
        /// Whether or not this entry is aggregated.
        /// </summary>
        public bool IsAggregated
        {
            get { return EntryPropertyCheck(PostConfig.IsAggregated); }
            set { PostConfigSetter(PostConfig.IsAggregated, value); }
        }

        /// <summary>
        /// True if comments have been closed. Otherwise false.  Comments are closed 
        /// either explicitly or after by global age setting which overrides explicit settings
        /// </summary>
        public bool CommentingClosed
        {
            get
            {
                return (CommentingClosedByAge || EntryPropertyCheck(PostConfig.CommentsClosed));
            }
            set
            {
                // Closing By Age overrides explicit closing
                if(!CommentingClosedByAge)
                {
                    PostConfigSetter(PostConfig.CommentsClosed, value);
                }
            }
        }

        /// <summary>
        /// Returns true if the comments for this entry are closed due 
        /// to the age of the entry.  This is related to the DaysTillCommentsClose setting.
        /// </summary>
        public bool CommentingClosedByAge
        {
            get
            {
                if(Blog.DaysTillCommentsClose == int.MaxValue)
                {
                    return false;
                }

                return Blog.TimeZone.Now > DateSyndicated.AddDays(Blog.DaysTillCommentsClose);
            }
        }

        public int FeedBackCount { get; set; }

        public PostConfig PostConfig { get; set; }

        /// <summary>
        /// Returns the categories for this entry.
        /// </summary>
        public ICollection<string> Categories { get; private set; }

        /// <summary>
        /// Gets and sets the enclosure for the entry.
        /// </summary>
        public Enclosure Enclosure { get; set; }

        /// <summary>
        /// Gets or sets the entry ID.
        /// </summary>
        /// <value>The entry ID.</value>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the type of the post.
        /// </summary>
        /// <value>The type of the post.</value>
        public PostType PostType { get; set; }

        /// <summary>
        /// Gets or sets the name of the entry.  This is used 
        /// to create a friendly URL for this entry.
        /// </summary>
        /// <value>The name of the entry.</value>
        public string EntryName { get; set; }

        /// <summary>
        /// Gets or sets the date this item was created.
        /// </summary>
        /// <value></value>
        public DateTime DateCreated { get; set; }

        protected bool EntryPropertyCheck(PostConfig ep)
        {
            return (PostConfig & ep) == ep;
        }

        protected void PostConfigSetter(PostConfig ep, bool select)
        {
            if(select)
            {
                PostConfig = PostConfig | ep;
            }
            else
            {
                PostConfig = PostConfig & ~ep;
            }
        }

        /// <summary>
        /// Calculates a simple checksum of the specified text.  
        /// This is used for comment filtering purposes. 
        /// Once deployed, this algorithm shouldn't change.
        /// </summary>
        /// <param name="text">Text.</param>
        /// <returns></returns>
        public static int CalculateChecksum(string text)
        {
            if(text == null)
            {
                throw new ArgumentNullException("text");
            }
            int checksum = 0;
            foreach(char c in text)
            {
                checksum += c;
            }
            return checksum;
        }

        public ICollection<FeedbackItem> Comments
        {
            get
            {
                if(_comments == null)
                {
                    _comments = new List<FeedbackItem>();
                }
                return _comments;
            }
        }

        List<FeedbackItem> _comments;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Represents a collection of <see cref="Entry">Entry</see> Components.
    /// </summary>
    public class EntryDay : Collection<Entry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntryDay">EntryDay</see> class.
        /// </summary>
        public EntryDay(DateTime day)
        {
            BlogDay = day.Date;
        }

        public EntryDay(DateTime day, IList<Entry> entries) : base(entries)
        {
            BlogDay = day.Date;
        }

        public DateTime BlogDay { get; set; }

        public string Link { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for EntryStatsView.
    /// </summary>
    public class EntryStatsView : Entry
    {
        /// <summary>
        /// Creates a new <see cref="EntryStatsView"/> instance.
        /// </summary>
        public EntryStatsView() : base(PostType.None)
        {
        }

        public int WebCount { get; set; }

        public int AggCount { get; set; }

        public DateTime WebLastUpdated { get; set; }

        public DateTime AggLastUpdated { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;

namespace Subtext.Framework.Components
{
    public class EntrySummary : IEntryIdentity
    {
        public int ViewCount { get; set; }

        public string Title { get; set; }

        public int Id { get; set; }

        public string EntryName { get; set; }

        public DateTime DateSyndicated { get; set; }

        public PostType PostType
        {
            get { return PostType.BlogPost; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Represents the stats for one view of an entry.
    /// </summary>
    [Serializable]
    public class EntryView
    {
        public EntryView()
        {
            BlogId = NullValue.NullInt32;
            EntryId = NullValue.NullInt32;
        }

        public int BlogId { get; set; }

        public int EntryId { get; set; }

        public string ReferralUrl { get; set; }

        public PageViewType PageViewType { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Net;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Security;
using Subtext.Framework.Services;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for Entry.
    /// </summary>
    [Serializable]
    public class FeedbackItem : IIdentifiable
    {
        private string _body;
        private string _email;
        string _feedbackChecksumHash = string.Empty;
        private Entry _entry;
        DateTime _parentDateCreated = NullValue.NullDateTime;
        string _parentEntryName;
        string _referrer;
        string _userAgent;

        /// <summary>
        /// Ctor. Creates a new <see cref="FeedbackItem"/> instance.
        /// </summary>
        /// <param name="type">Ptype.</param>
        public FeedbackItem(FeedbackType type)
        {
            Id = NullValue.NullInt32;
            EntryId = NullValue.NullInt32;
            FeedbackType = type;
            Status = FeedbackStatusFlag.None;
            DateCreated = NullValue.NullDateTime;
            DateModified = NullValue.NullDateTime;
            Author = string.Empty;
        }

        /// <summary>
        /// Gets or sets the blog id for this feedback item.
        /// You can usually get this via the entry, but not 
        /// for a comment left in the contact page.
        /// </summary>
        /// <value>The blog id.</value>
        public int BlogId { get; set; }

        /// <summary>
        /// Gets or sets the parent entry ID. Feedback must be associated with an entry, 
        /// except for Contact page inquiries.
        /// </summary>
        /// <value>The parent ID.</value>
        public int EntryId { get; set; }

        /// <summary>
        /// The Entry.
        /// </summary>
        public Entry Entry
        {
            get
            {
                if(_entry == null && EntryId != NullValue.NullInt32)
                {
                    _entry = new Entry(PostType.BlogPost)
                    {
                        Id = EntryId,
                        EntryName = _parentEntryName,
                        DateCreated = _parentDateCreated,
                        DateSyndicated = _parentDateSyndicated
                    };
                }
                return _entry;
            }
            set
            {
                _entry = value;
                if(value != null)
                {
                    EntryId = value.Id;
                }
            }
        }

        /// <summary>
        /// Gets or sets the type of the post.
        /// </summary>
        /// <value>The type of the post.</value>
        public FeedbackType FeedbackType { get; set; }

        /// <summary>
        /// Gets or sets the status of this feedback item.
        /// </summary>
        /// <value>The type of the post.</value>
        public FeedbackStatusFlag Status { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this feedback was created via the CommentAPI.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [created via comment API]; otherwise, <c>false</c>.
        /// </value>
        public bool CreatedViaCommentApi { get; set; }

        /// <summary>
        /// Gets or sets the title of the feedback.
        /// </summary>
        /// <value>The title.</value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the body of the Feedback.  This is the 
        /// main content of the entry.
        /// </summary>
        /// <value></value>
        public string Body
        {
            get { return _body; }
            set
            {
                _body = value;
                _feedbackChecksumHash = string.Empty;
            }
        }

        /// <summary>
        /// Gets or sets the source URL.  For comments, this is the URL 
        /// to the comment form used if any. For trackbacks, this is the 
        /// url of the site making the trackback.
        /// the 
        /// </summary>
        /// <value>The source URL.</value>
        public Uri SourceUrl { get; set; }

        /// <summary>
        /// Gets or sets the author name of the entry.  
        /// For comments, this is the name given by the commenter. 
        /// </summary>
        /// <value>The author.</value>
        public string Author { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this feedback was left by an author of the blog.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this feedback was left by a blog author; otherwise, <c>false</c>.
        /// </value>
        public bool IsBlogAuthor { get; set; }

        public string Email
        {
            get { return _email ?? string.Empty; }
            set { _email = value; }
        }

        public string Referrer
        {
            get { return _referrer ?? string.Empty; }
            set { _referrer = value; }
        }

        public IPAddress IpAddress { get; set; }

        public string UserAgent
        {
            get { return _userAgent ?? string.Empty; }
            set { _userAgent = value; }
        }

        /// <summary>
        /// Gets or sets the date this item was created.
        /// </summary>
        /// <value></value>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the date this entry was last updated.
        /// </summary>
        /// <value></value>
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this feedback is approved for display.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is approved; otherwise, <c>false</c>.
        /// </value>
        public bool Approved
        {
            get { return IsStatusSet(FeedbackStatusFlag.Approved); }
            set { SetStatus(FeedbackStatusFlag.Approved, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this feedback is approved for display.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is approved; otherwise, <c>false</c>.
        /// </value>
        public bool FlaggedAsSpam
        {
            get { return IsStatusSet(FeedbackStatusFlag.FlaggedAsSpam); }
            set { SetStatus(FeedbackStatusFlag.FlaggedAsSpam, value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this feedback is approved for display.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is approved; otherwise, <c>false</c>.
        /// </value>
        public bool ConfirmedSpam
        {
            get { return IsStatusSet(FeedbackStatusFlag.ConfirmedSpam); }
            set { SetStatus(FeedbackStatusFlag.ConfirmedSpam, value); }
        }

        /// <summary>
        /// Whether or not this entry needs moderator approval.
        /// </summary>
        public bool NeedsModeratorApproval
        {
            get { return FeedbackStatusFlag.NeedsModeration == Status; }
            set { SetStatus(FeedbackStatusFlag.NeedsModeration, value); }
        }

        /// <summary>
        /// Whether or not this entry is deleted (ie in the trash can).
        /// </summary>
        public bool Deleted
        {
            get { return IsStatusSet(FeedbackStatusFlag.Deleted); }
            set { SetStatus(FeedbackStatusFlag.Deleted, value); }
        }

        /// <summary>
        /// Gets a value indicating whether this comment was approved by moderator.  
        /// </summary>
        /// <remarks>
        /// If ApprovedByModerator is true, then Approved must also be true.
        /// </remarks>
        /// <value><c>true</c> if [approved by moderator]; otherwise, <c>false</c>.</value>
        public bool ApprovedByModerator
        {
            get { return IsStatusSet(FeedbackStatusFlag.ApprovedByModerator); }
        }

        /// <summary>
        /// This is a checksum of the entry text combined with 
        /// a hash of the text like so "####.HASH". 
        /// </summary>
        /// <value></value>
        public string ChecksumHash
        {
            get
            {
                if(String.IsNullOrEmpty(_feedbackChecksumHash))
                {
                    _feedbackChecksumHash = string.Format("{0}.{1}", CalculateChecksum(Body), SecurityHelper.HashPassword(Body));
                }
                return _feedbackChecksumHash;
            }
            set { _feedbackChecksumHash = value; }
        }

        /// <summary>
        /// Gets or sets the name of the parent entry.
        /// </summary>
        /// <value>The name of the parent entry.</value>
        public string ParentEntryName
        {
            get
            {
                if(_parentEntryName == null)
                {
                    _parentEntryName = Entry != null ? Entry.EntryName : string.Empty;
                }
                return _parentEntryName;
            }
            set { _parentEntryName = value; }
        }

        /// <summary>
        /// Gets or sets the parent entry date created.
        /// </summary>
        /// <value>The parent date created.</value>
        public DateTime ParentDateCreated
        {
            get
            {
                if(_parentDateCreated == NullValue.NullDateTime)
                {
                    _parentDateCreated = Entry != null ? Entry.DateCreated : DateTime.MinValue;
                }
                return _parentDateCreated;
            }
            set { _parentDateCreated = value; }
        }

        /// <summary>
        /// Gets or sets the parent entry date created.
        /// </summary>
        /// <value>The parent date created.</value>
        public DateTime ParentDateSyndicated
        {
            get
            {
                if(_parentDateSyndicated == NullValue.NullDateTime)
                {
                    _parentDateSyndicated = Entry != null ? Entry.DateSyndicated : DateTime.MinValue;
                }
                return _parentDateSyndicated;
            }
            set { _parentDateSyndicated = value; }
        }

        DateTime _parentDateSyndicated;

        /// <summary>
        /// Gets or sets the ID for this feedback item.
        /// </summary>
        /// <value>The feedback ID.</value>
        public int Id { get; set; }

        /// <summary>
        /// Gets the specified feedback by id.
        /// </summary>
        /// <param name="feedbackId">The feedback id.</param>
        /// <returns></returns>
        public static FeedbackItem Get(int feedbackId)
        {
            return ObjectProvider.Instance().GetFeedback(feedbackId);
        }

        /// <summary>
        /// Gets the feedback counts for the various top level statuses.
        /// </summary>
        public static FeedbackCounts GetFeedbackCounts()
        {
            FeedbackCounts counts;
            ObjectProvider.Instance().GetFeedbackCounts(out counts.ApprovedCount, out counts.NeedsModerationCount,
                                                        out counts.FlaggedAsSpamCount, out counts.DeletedCount);
            return counts;
        }

        /// <summary>
        /// Returns the itemCount most recent active comments.
        /// </summary>
        /// <param name="itemCount"></param>
        /// <returns></returns>
        public static ICollection<FeedbackItem> GetRecentComments(int itemCount)
        {
            return ObjectProvider.Instance().GetPagedFeedback(0, itemCount, FeedbackStatusFlag.Approved,
                                                              FeedbackStatusFlag.None, FeedbackType.Comment);
        }

        /// <summary>
        /// Updates the specified entry in the data provider.
        /// </summary>
        /// <param name="feedbackItem">Entry.</param>
        /// <returns></returns>
        public static bool Update(FeedbackItem feedbackItem)
        {
            if(feedbackItem == null)
            {
                throw new ArgumentNullException("feedbackItem");
            }

            feedbackItem.DateModified = Config.CurrentBlog.TimeZone.Now;
            return ObjectProvider.Instance().Update(feedbackItem);
        }

        /// <summary>
        /// Approves the comment, and removes it from the SPAM folder or from the 
        /// Trash folder.
        /// </summary>
        /// <param name="feedback"></param>
        /// <param name="spamService"></param>
        /// <returns></returns>
        public static void Approve(FeedbackItem feedback, ICommentSpamService spamService)
        {
            if(feedback == null)
            {
                throw new ArgumentNullException("feedback");
            }

            feedback.SetStatus(FeedbackStatusFlag.Approved, true);
            feedback.SetStatus(FeedbackStatusFlag.Deleted, false);
            if(spamService != null)
            {
                spamService.SubmitGoodFeedback(feedback);
            }

            Update(feedback);
        }

        /// <summary>
        /// Confirms the feedback as spam and moves it to the trash.
        /// </summary>
        /// <param name="feedback">The feedback.</param>
        /// <param name="spamService"></param>
        public static void ConfirmSpam(FeedbackItem feedback, ICommentSpamService spamService)
        {
            if(feedback == null)
            {
                throw new ArgumentNullException("feedback");
            }

            feedback.SetStatus(FeedbackStatusFlag.Approved, false);
            feedback.SetStatus(FeedbackStatusFlag.ConfirmedSpam, true);

            if(spamService != null)
            {
                spamService.SubmitGoodFeedback(feedback);
            }

            Update(feedback);
        }

        /// <summary>
        /// Confirms the feedback as spam and moves it to the trash.
        /// </summary>
        /// <param name="feedback">The feedback.</param>
        public static void Delete(FeedbackItem feedback)
        {
            if(feedback == null)
            {
                throw new ArgumentNullException("feedback");
            }

            feedback.SetStatus(FeedbackStatusFlag.Approved, false);
            feedback.SetStatus(FeedbackStatusFlag.Deleted, true);

            Update(feedback);
        }


        /// <summary>
        /// Destroys all non-active emails that meet the status.
        /// </summary>
        /// <param name="feedbackStatus">The feedback.</param>
        public static void Destroy(FeedbackStatusFlag feedbackStatus)
        {
            if((feedbackStatus & FeedbackStatusFlag.Approved) == FeedbackStatusFlag.Approved)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_DestroyActiveComment);
            }

            ObjectProvider.Instance().DestroyFeedback(feedbackStatus);
        }

        /// <summary>
        /// Checks to see if the specified status bit is set.
        /// </summary>
        /// <param name="status">The status.</param>
        /// <returns></returns>
        protected bool IsStatusSet(FeedbackStatusFlag status)
        {
            return (Status & status) == status;
        }

        /// <summary>
        /// Turns the specified status bit on or off depending on the setOn value.
        /// </summary>
        /// <param name="status"></param>
        /// <param name="setOn"></param>
        protected void SetStatus(FeedbackStatusFlag status, bool setOn)
        {
            if(setOn)
            {
                Status = Status | status;
            }
            else
            {
                Status = Status & ~status;
            }
        }

        /// <summary>
        /// Calculates a simple checksum of the specified text.  
        /// This is used for comment filtering purposes. 
        /// Once deployed, this algorithm shouldn't change.
        /// </summary>
        /// <param name="text">Text.</param>
        /// <returns></returns>
        public static int CalculateChecksum(string text)
        {
            if(text == null)
            {
                throw new ArgumentNullException("text");
            }
            int checksum = 0;
            foreach(char c in text)
            {
                checksum += c;
            }
            return checksum;
        }
    }

    public struct FeedbackCounts
    {
        public int ApprovedCount;
        public int DeletedCount;
        public int FlaggedAsSpamCount;
        public int NeedsModerationCount;
    }

    /// <summary>
    /// Specifies the current status of a piece of feedback.
    /// </summary>
    [Flags]
    public enum FeedbackStatusFlag
    {
        None = 0,
        Approved = 1,
        NeedsModeration = 2,
        ApprovedByModerator = Approved | NeedsModeration,
        FlaggedAsSpam = 4,
        FalsePositive = FlaggedAsSpam | Approved,
        Deleted = 8,
        ConfirmedSpam = FlaggedAsSpam | Deleted,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Components
{
    public class HostStats
    {
        public int BlogCount { get; set; }
        public int PostCount { get; set; }
        public int CommentCount { get; set; }
        public int StoryCount { get; set; }
        public int PingTrackCount { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Extensibility.Interfaces
{
    public interface IEntryIdentity : IIdentifiable
    {
        string EntryName { get; }
        DateTime DateSyndicated { get; }
        PostType PostType { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Extensibility.Interfaces
{
    /// <summary>
    /// Interface for classes that can be identified by an integer ID.
    /// </summary>
    public interface IIdentifiable
    {
        int Id { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using System.Xml.Serialization;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for Link.
    /// </summary>
    [Serializable]
    public class Image
    {
        private string _localDirectoryPath;
        public int BlogId { get; set; }

        public Blog Blog { get; set; }

        [XmlAttribute]
        public int ImageID { get; set; }

        public int CategoryID { get; set; }

        //TODO: This is pure laziness and a band-aid for 
        //      aggregate blogs. Will fix later.
        public string CategoryTitle { get; set; }

        public bool IsActive { get; set; }

        public string FileName { get; set; }

        /// <summary>
        /// Gets the filepath on the local server.
        /// </summary>
        public virtual string FilePath
        {
            get { return Path.Combine(LocalDirectoryPath, FileName); }
        }

        /// <summary>
        /// The directory on the local server where the image will be saved.
        /// </summary>
        /// <remarks>
        /// Assumes the specified path is a directory path!
        /// </remarks>
        public virtual string LocalDirectoryPath
        {
            get
            {
                if(_localDirectoryPath == null)
                {
                    throw new InvalidOperationException(Resources.InvalidOperation_LocalDirectoryPathNotSet);
                }

                return _localDirectoryPath;
            }
            set
            {
                if(value != null)
                {
                    value = Path.GetFullPath(value);
                }
                _localDirectoryPath = value;
            }
        }

        public string Title { get; set; }

        public int Width { get; set; }

        public int Height { get; set; }

        public string Url { get; set; }

        public string OriginalFile
        {
            get { return string.Format("o_{0}", FileName); }
        }

        public string ThumbNailFile
        {
            get { return string.Format("t_{0}", FileName); }
        }

        public string ResizedFile
        {
            get { return string.Format("r_{0}", FileName); }
        }

        public string OriginalFilePath
        {
            get { return Path.Combine(LocalDirectoryPath, OriginalFile); }
        }

        public string ThumbNailFilePath
        {
            get { return Path.Combine(LocalDirectoryPath, ThumbNailFile); }
        }

        public string ResizedFilePath
        {
            get { return Path.Combine(LocalDirectoryPath, ResizedFile); }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.ObjectModel;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Represents a collection of <see cref="Image">Image</see> Components.
    /// </summary>
    [Serializable]
    public class ImageCollection : Collection<Image>
    {
        /// <summary>
        /// The link category for this image.
        /// </summary>
        public LinkCategory Category { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Xml.Serialization;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for KeyWord.
    /// </summary>
    [Serializable]
    public class KeyWord
    {
        private string _format;

        /// <summary>
        /// Gets or sets the word or words to look for. Could also be short hand. ie, ScottW would end up <a href = "http://scottwater.com/blog">Scott Watermasysk</a>
        /// </summary>
        public string Word { get; set; }

        /// <summary>
        /// The text value of an anchor tag: <a href="#">TEXT</a>
        /// </summary>
        public string Text { get; set; }

        public bool ReplaceFirstTimeOnly { get; set; }

        public bool CaseSensitive { get; set; }

        public bool OpenInNewWindow { get; set; }

        public string Url { get; set; }

        public string Title { get; set; }

        /// <summary>
        /// Rel entries for a keyword. For instance, you could add "Friend" to a keyword, and XFN would pick it up as a Friend link
        /// </summary>
        public string Rel { get; set; }

        public int BlogId { get; set; }

        [XmlAttribute]
        public int Id { get; set; }

        public string GetFormat
        {
            get
            {
                if(_format == null)
                {
                    ProcessFormat();
                }

                return _format;
            }
        }

        private void ProcessFormat()
        {
            _format = string.Format(CultureInfo.InvariantCulture, "<a href=\"{1}\"{0}{2}{3}>{4}</a>",
                                    Title != null ? string.Format(" title=\"{0}\"", Title) : String.Empty, Url,
                                    Rel != null ? string.Format(" rel=\"{0}\"", Rel) : string.Empty,
                                    OpenInNewWindow ? " target=\"_blank\"" : string.Empty, Text);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for Link.
    /// </summary>
    [Serializable]
    public class Link
    {
        public Link()
        {
            PostId = NullValue.NullInt32;
        }

        public int BlogId { get; set; }

        [XmlAttribute("LinkID")]
        public int Id { get; set; }

        public int PostId { get; set; }

        public int CategoryId { get; set; }

        public bool IsActive { get; set; }

        public bool NewWindow { get; set; }

        public string Url { get; set; }

        public string Rss { get; set; }

        public string Title { get; set; }

        public string Relation { get; set; }

        public bool HasRss
        {
            get { return (Rss != null && Rss.Trim().Length > 0); }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for LinkCategory.
    /// </summary>
    [Serializable]
    public class LinkCategory : Category
    {
        ICollection<Link> _links;

        /// <summary>
        /// Creates a new <see cref="LinkCategory"/> instance.
        /// </summary>
        public LinkCategory()
        {
            CategoryType = CategoryType.LinkCollection;
        }

        /// <summary>
        /// Creates a new <see cref="LinkCategory"/> instance.
        /// </summary>
        /// <param name="categoryId"></param>
        /// <param name="title">Title.</param>
        public LinkCategory(int categoryId, string title) : this()
        {
            Title = title;
            Id = categoryId;
        }

        public bool HasDescription
        {
            get { return !String.IsNullOrEmpty(Description); }
        }

        public string Description { get; set; }


        public CategoryType CategoryType { get; set; }

        public bool IsActive { get; set; }

        public ICollection<Link> Links
        {
            get
            {
                _links = _links ?? new List<Link>();
                return _links;
            }
        }

        public ICollection<Image> Images { get; set; }

        public bool HasLinks
        {
            get { return Links.Count > 0; }
        }

        public bool HasImages
        {
            get { return Images != null; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Components
{
    [Serializable]
    public class MetaTag
    {
        public MetaTag()
        {
        }

        public MetaTag(string content)
        {
            Content = content;
        }

        public int Id { get; set; }

        public string Content { get; set; }

        public string Name { get; set; }

        public string HttpEquiv { get; set; }

        public int BlogId { get; set; }

        public int? EntryId { get; set; }

        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Validates that this MetaTag is Valid:
        /// - Content must not be null nor empty
        /// - Must have either a name or http-equiv, but not both
        /// </summary>
        public bool IsValid
        {
            get
            {
                if(string.IsNullOrEmpty(Content))
                {
                    ValidationMessage = "Meta Tag requires Content.";
                    return false;
                }

                // to be valid, a MetaTag requires etiher the Name or HttpEquiv attribute, but never both.
                if(string.IsNullOrEmpty(Name) && string.IsNullOrEmpty(HttpEquiv))
                {
                    ValidationMessage = "Meta Tag requires either a Name or Http-Equiv value.";
                    return false;
                }

                if(!string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(HttpEquiv))
                {
                    ValidationMessage = "Meta Tag can not have both a Name and Http-Equiv value.";
                    return false;
                }

                ValidationMessage = null;
                return true;
            }
        }

        public string ValidationMessage { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using Subtext.Extensibility.Interfaces;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Concrete generic base class for paged collections.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class PagedCollection<T> : List<T>, IPagedCollection<T>
    {
        public PagedCollection()
        {
        }

        public PagedCollection(IEnumerable<T> collection) : base(collection)
        {
        }

        /// <summary>
        /// Returns the max number of items to display on a page.
        /// </summary>
        public int MaxItems { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for PageType.
    /// </summary>
    public enum PageType
    {
        //0 = HomePage, 1 = RSS, 2 = Date,3 = Post, 4 = Story, 5 = Other
        HomePage = 0,
        RSS = 1,
        Date = 2,
        Post = 3,
        Story = 4,
        Other = 5,
        ImagePage = 6,
        NotSpecified = NullValue.NullInt32
    } ;
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Components
{
    public enum PageViewType : byte
    {
        AggView = 0,
        WebView = 1
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for Referrer.
    /// </summary>
    [Serializable]
    public class Referrer
    {
        private string _referrerUrl;

        public string ReferrerUrl
        {
            get
            {
                if(!_referrerUrl.StartsWith("http://"))
                {
                    return string.Format("http://{0}", _referrerUrl);
                }
                return _referrerUrl;
            }
            set { _referrerUrl = value; }
        }

        public int Count { get; set; }

        public int EntryId { get; set; }

        public string PostTitle { get; set; }

        public DateTime LastReferDate { get; set; }

        public int BlogId { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Util;

namespace Subtext.Framework.Components
{
    [Serializable]
    public class ServerTimeZoneInfo
    {
        public ServerTimeZoneInfo()
        {
        }

        public ServerTimeZoneInfo(string timeZoneText)
            : this(TimeZones.GetTimeZones().GetById(timeZoneText), TimeZoneInfo.Local, DateTime.Now, DateTime.UtcNow)
        {
        }

        public ServerTimeZoneInfo(TimeZoneInfo timeZone, TimeZoneInfo localTimeZone, DateTime now, DateTime utcNow)
        {
            ServerTimeZone = string.Format(CultureInfo.InvariantCulture, "{0} ({1})",
                                           localTimeZone.StandardName,
                                           localTimeZone.GetUtcOffset(now));
            ServerTime = now.ToString("yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture);
            ServerUtcTime = utcNow.ToString("yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture);
            CurrentTime = TimeZoneInfo.ConvertTimeFromUtc(utcNow, timeZone).ToString("yyyy/MM/dd hh:mm tt",
                                                                                     CultureInfo.InvariantCulture);
        }

        public string ServerTimeZone { get; set; }

        public string ServerTime { get; set; }

        public string ServerUtcTime { get; set; }

        public string CurrentTime { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace Subtext.Framework.Components
{
    [Serializable]
    public class Tag
    {
        public Tag(KeyValuePair<string, int> tag)
        {
            TagName = tag.Key;
            Count = tag.Value;
        }

        public string TagName { get; set; }

        public int Count { get; set; }

        public int Weight { get; set; }

        public double Factor { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Represents a trackback within this system. This is essentially 
    /// a comment created via the Trackback/Pingback API.
    /// </summary>
    public class Trackback : FeedbackItem
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trackback"/> class.
        /// </summary>
        /// <param name="entryId">The parent id.</param>
        /// <param name="title">The title.</param>
        /// <param name="sourceUrl">The title URL.</param>
        /// <param name="author">The author.</param>
        /// <param name="body">The body.</param>
        /// <param name="dateCreated">The date created.</param>
        public Trackback(int entryId, string title, Uri sourceUrl, string author, string body, DateTime dateCreated)
            : base(FeedbackType.PingTrack)
        {
            EntryId = entryId;
            Title = title;
            SourceUrl = sourceUrl;
            Author = author;
            Body = body;

            Approved = true;
            DateCreated = DateModified = dateCreated;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Components
{
    /// <summary>
    /// Summary description for ViewStat.
    /// </summary>
    [Serializable]
    public class ViewStat
    {
        public ViewStat()
        {
            PageType = PageType.NotSpecified;
        }

        public string PageTitle { get; set; }

        public int ViewCount { get; set; }

        public DateTime ViewDate { get; set; }

        public PageType PageType { get; set; }

        public int BlogId { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Xml.Serialization;

namespace Subtext.Framework.Configuration
{
    /// <summary>
    /// Contains various configuration settings stored in the 
    /// web.config file.
    /// </summary>
    [Serializable]
    public class BlogConfigurationSettings
    {
        private Tracking _tracking;
        private NameValueCollection _allowedHtmlTags;

        public BlogConfigurationSettings()
        {
            QueuedThreads = 5;
            ItemCount = 15;
            CategoryListPostCount = 10;
            ServerTimeZone = -2037797565; //PST
            GalleryImageMaxWidth = 640;
            GalleryImageMaxHeight = 480;
            GalleryImageThumbnailHeight = 120;
            GalleryImageThumbnailWidth = 120;
        }

        public Tracking Tracking
        {
            get
            {
                _tracking = _tracking ?? new Tracking();
                return _tracking;
            }
            set { _tracking = value; }
        }

        public bool UseWww { get; set; }

        public int QueuedThreads { get; set; }

        public bool AllowServiceAccess { get; set; }

        public bool AllowScriptsInPosts { get; set; }

        public bool UseHashedPasswords { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not to allow images.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [allow images]; otherwise, <c>false</c>.
        /// </value>
        public bool AllowImages { get; set; }

        /// <summary>
        /// Gets or sets the default number of items to display 
        /// for syndication feeds.
        /// </summary>
        /// <value></value>
        public int ItemCount { get; set; }

        /// <summary>
        /// Gets or sets the number of posts to display 
        /// on the category list pages.
        /// </summary>
        /// <value></value>
        public int CategoryListPostCount { get; set; }

        /// <summary>
        /// Gets or sets the server time zone.
        /// </summary>
        /// <value></value>
        public int ServerTimeZone { get; set; }

        public int GalleryImageMaxWidth { get; set; }
        public int GalleryImageMaxHeight { get; set; }
        public int GalleryImageThumbnailWidth { get; set; }
        public int GalleryImageThumbnailHeight { get; set; }

        /// <summary>
        /// Gets a value indicating whether invisible captcha enabled.  This is 
        /// configured within the "InvisibleCaptchaEnabled" app setting. It is not 
        /// set per blog, but system-wide. This gives hosters a way to opt-out of 
        /// this feature in case it ends up being problematci.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [invisible captcha enabled]; otherwise, <c>false</c>.
        /// </value>
        public bool InvisibleCaptchaEnabled
        {
            get
            {
                if(String.IsNullOrEmpty(ConfigurationManager.AppSettings["InvisibleCaptchaEnabled"]))
                {
                    return true;
                }

                bool enabled;
                if(bool.TryParse(ConfigurationManager.AppSettings["InvisibleCaptchaEnabled"], out enabled))
                {
                    return enabled;
                }
                return true;
            }
        }

        /// <summary>
        /// Returns a <see cref="NameValueCollection"/> containing the allowed 
        /// HTML tags within a user comment.  The value contains a comma 
        /// separated list of allowed attributes.
        /// </summary>
        /// <value>The allowed HTML tags.</value>
        [XmlIgnore]
        public NameValueCollection AllowedHtmlTags
        {
            get
            {
                if(_allowedHtmlTags == null)
                {
                    _allowedHtmlTags = ((NameValueCollection)(ConfigurationManager.GetSection("AllowableCommentHtml")));
                }
                return _allowedHtmlTags;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Security;
using Subtext.Framework.Web;
using Subtext.Framework.Web.HttpModules;
using Subtext.Scripting;

namespace Subtext.Framework.Configuration
{
    /// <summary>
    /// Static helper class used to access various configuration 
    /// settings.
    /// </summary>
    public static class Config
    {
        private static readonly string[] InvalidSubfolders = {
                                                                  "Tags", "Admin", "aspx", "bin", "ExternalDependencies",
                                                                  "HostAdmin", "Images", "Install", "Properties",
                                                                  "Providers", "Pages", "Scripts", "Skins", 
                                                                  "SystemMessages", "UI", "Modules", "Services", 
                                                                  "Category", "Archive", "Archives", "Comments",
                                                                  "Articles", "Posts", "Story", "Stories", "Gallery",
                                                                  "aggbug", "Sitemap", "Account"
                                                              };

        static ConnectionString _connectionString;

        /// <summary>
        /// Returns an instance of <see cref="BlogConfigurationSettings"/> which 
        /// are configured within web.config as a custom config section.
        /// </summary>
        /// <value></value>
        public static BlogConfigurationSettings Settings
        {
            get { return ((BlogConfigurationSettings)ConfigurationManager.GetSection("BlogConfigurationSettings")); }
        }

        /// <summary>
        /// Returns the Subtext connection string.
        /// </summary>
        /// <remarks>
        /// The connectionStrings section may contain multiple connection strings. 
        /// The AppSetting "connectionStringName" points to which of those strings 
        /// is the one in use.
        /// </remarks>
        public static ConnectionString ConnectionString
        {
            get
            {
                if(_connectionString == null)
                {
                    string connectionStringName = ConfigurationManager.AppSettings["connectionStringName"];
                    if(ConfigurationManager.ConnectionStrings[connectionStringName] == null)
                    {
                        throw new ConfigurationErrorsException(String.Format(CultureInfo.InvariantCulture,
                                                                             Resources.
                                                                                 ConfigurationErrros_NoConnectionString,
                                                                             connectionStringName));
                    }
                    string connectionStringText =
                        ConfigurationManager.ConnectionStrings[connectionStringName].ConnectionString;
                    _connectionString = ConnectionString.Parse(connectionStringText);
                }
                return _connectionString;
            }
        }

        /// <summary>
        /// Returns a <see cref="Blog"/> instance containing 
        /// the configuration settings for the current blog.
        /// </summary>
        /// <remarks>
        ///	<para>This property may throw an exception in a couple of cases. The reason for 
        /// this is that there are a couple different reasons why the Current Blog might 
        /// not exist and we handle those situations differently in the UI. Returning 
        /// NULL does not give us enough information.
        /// </para>
        /// </remarks>
        /// <exception type="BlogDoesNotExistException">Thrown if the blog does not exist</exception>
        /// <exception type="BlogInactiveException">Thrown if the blog is no longer active</exception>
        /// <returns>The current blog</returns>
        public static Blog CurrentBlog
        {
            get
            {
                if(HttpContext.Current == null)
                {
                    return null;
                }
                BlogRequest blogRequest = BlogRequest.Current;
                if(blogRequest == null || blogRequest.IsHostAdminRequest)
                {
                    return null;
                }

                Blog currentBlog = BlogRequest.Current.Blog;
                return currentBlog;
            }
        }

        /// <summary>
        /// Gets the count of active blogs.
        /// </summary>
        /// <value></value>
        public static int ActiveBlogCount
        {
            get
            {
                IPagedCollection<Blog> blogs = Blog.GetBlogs(1, 1, ConfigurationFlags.IsActive);
                return blogs.MaxItems;
            }
        }

        /// <summary>
        /// Gets the total blog count in the system, active or not.
        /// </summary>
        /// <value></value>
        public static int BlogCount
        {
            get
            {
                IPagedCollection<Blog> blogs = Blog.GetBlogs(1, 1, ConfigurationFlags.None);
                return blogs.MaxItems;
            }
        }

        /// <summary>
        /// Gets the file not found page from web.config.
        /// </summary>
        /// <returns></returns>
        public static string GetFileNotFoundPage()
        {
            var errorsSection =
                WebConfigurationManager.GetWebApplicationSection("system.web/customErrors") as CustomErrorsSection;
            if(errorsSection != null)
            {
                CustomError fileNotFoundError = errorsSection.Errors["404"];
                if(fileNotFoundError != null)
                {
                    return fileNotFoundError.Redirect;
                }
            }
            return null;
        }

        /// <summary>
        /// Returns a <see cref="Blog"/> instance containing 
        /// the configuration settings for the blog specified by the 
        /// Hostname and Application.
        /// </summary>
        /// <remarks>
        /// Until Subtext supports multiple blogs again (if ever), 
        /// this will always return the same instance.
        /// </remarks>
        public static Blog GetBlog(string hostName, string subfolder)
        {
            hostName = Blog.StripPortFromHost(hostName);
            return ObjectProvider.Instance().GetBlog(hostName, subfolder);
        }

        /// <summary>
        /// Creates an initial blog.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title">Title of the blog</param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="subfolder"></param>
        /// <param name="host"></param>
        /// <returns></returns>
        public static int CreateBlog(string title, string userName, string password, string host, string subfolder)
        {
            return CreateBlog(title, userName, password, host, subfolder, 1, false);
        }

        /// <summary>
        /// Creates an initial blog.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title">Title of the blog</param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="subfolder"></param>
        /// <param name="groupId"></param>
        /// <param name="host"></param>
        /// <returns></returns>
        public static int CreateBlog(string title, string userName, string password, string host, string subfolder,
                                     int groupId)
        {
            return CreateBlog(title, userName, password, host, subfolder, groupId, false);
        }


        /// <summary>
        /// Creates an initial blog.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title">Title of the blog.</param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="subfolder"></param>
        /// <param name="host"></param>
        /// <param name="passwordAlreadyHashed">If true, the password has already been hashed.</param>
        /// <returns></returns>
        public static int CreateBlog(string title, string userName, string password, string host, string subfolder,
                                     bool passwordAlreadyHashed)
        {
            return CreateBlog(title, userName, password, host, subfolder, 1, passwordAlreadyHashed);
        }

        /// <summary>
        /// Creates an initial blog.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title">Title of the blog.</param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="subfolder"></param>
        /// <param name="host"></param>
        /// <param name="blogGroupId"></param>
        /// <param name="passwordAlreadyHashed">If true, the password has already been hashed.</param>
        /// <returns></returns>
        public static int CreateBlog(string title, string userName, string password, string host, string subfolder,
                                     int blogGroupId, bool passwordAlreadyHashed)
        {
            if(subfolder != null && subfolder.EndsWith("."))
            {
                throw new InvalidSubfolderNameException(subfolder);
            }

            host = Blog.StripPortFromHost(host);

            //Check for duplicate
            Blog potentialDuplicate = GetBlog(host, subfolder);
            if(potentialDuplicate != null)
            {
                //we found a duplicate!
                throw new BlogDuplicationException(potentialDuplicate);
            }

            //If the subfolder is null, this next check is redundant as it is 
            //equivalent to the check we just made.
            if(!string.IsNullOrEmpty(subfolder))
            {
                //Check to see if we're going to end up hiding another blog.
                Blog potentialHidden = GetBlog(host, string.Empty);
                if(potentialHidden != null)
                {
                    //We found a blog that would be hidden by this one.
                    throw new BlogHiddenException(potentialHidden);
                }
            }

            subfolder = HttpHelper.StripSurroundingSlashes(subfolder);

            if(string.IsNullOrEmpty(subfolder))
            {
                //Check to see if this blog requires a Subfolder value
                //This would occur if another blog has the same host already.
                int activeBlogWithHostCount = Blog.GetBlogsByHost(host, 0, 1, ConfigurationFlags.IsActive).Count;
                if(activeBlogWithHostCount > 0)
                {
                    throw new BlogRequiresSubfolderException(host, activeBlogWithHostCount);
                }
            }
            else
            {
                if(!IsValidSubfolderName(subfolder))
                {
                    throw new InvalidSubfolderNameException(subfolder);
                }
            }

            if(!passwordAlreadyHashed && Settings.UseHashedPasswords)
            {
                password = SecurityHelper.HashPassword(password);
            }

            return (ObjectProvider.Instance().CreateBlog(title, userName, password, host, subfolder, blogGroupId));
        }

        /// <summary>
        /// Updates the database with the configuration data within 
        /// the specified <see cref="Blog"/> instance.
        /// </summary>
        public static void UpdateConfigData(this ObjectProvider repository, Blog info)
        {
            //Check for duplicate
            Blog potentialDuplicate = GetBlog(info.Host, info.Subfolder);
            if(potentialDuplicate != null && !potentialDuplicate.Equals(info))
            {
                //we found a duplicate!
                throw new BlogDuplicationException(potentialDuplicate);
            }

            //Check to see if we're going to end up hiding another blog.
            Blog potentialHidden = GetBlog(info.Host, string.Empty);
            if(potentialHidden != null && !potentialHidden.Equals(info) && potentialHidden.IsActive)
            {
                //We found a blog that would be hidden by this one.
                throw new BlogHiddenException(potentialHidden);
            }

            string subfolderName = info.Subfolder == null
                                       ? string.Empty
                                       : HttpHelper.StripSurroundingSlashes(info.Subfolder);

            if(subfolderName.Length == 0)
            {
                //Check to see if this blog requires a Subfolder value
                //This would occur if another blog has the same host already.
                IPagedCollection<Blog> blogsWithHost = Blog.GetBlogsByHost(info.Host, 0, 1, ConfigurationFlags.IsActive);
                if(blogsWithHost.Count > 0)
                {
                    if(blogsWithHost.Count > 1 || !blogsWithHost.First().Equals(info))
                    {
                        throw new BlogRequiresSubfolderException(info.Host, blogsWithHost.Count);
                    }
                }
            }
            else
            {
                if(!IsValidSubfolderName(subfolderName))
                {
                    throw new InvalidSubfolderNameException(subfolderName);
                }
            }

            info.IsPasswordHashed = Settings.UseHashedPasswords;
            info.AllowServiceAccess = Settings.AllowServiceAccess;

            repository.UpdateBlog(info);
        }

        /// <summary>
        /// Returns true if the specified subfolder name has a 
        /// valid format. It may not start, nor end with ".".  It 
        /// may not contain any of the following invalid characters 
        /// {}[]/\ @!#$%:^&*()?+|"='<>;,
        /// </summary>
        /// <param name="subfolder">subfolder.</param>
        /// <returns></returns>
        public static bool IsValidSubfolderName(string subfolder)
        {
            if(subfolder == null)
            {
                throw new ArgumentNullException("subfolder");
            }

            if(subfolder.EndsWith("."))
            {
                return false;
            }

            const string invalidChars = @"{}[]/\ @!#$%:^&*()?+|""='<>;,";

            foreach(char c in invalidChars)
            {
                if(subfolder.IndexOf(c) > -1)
                {
                    return false;
                }
            }

            foreach(string invalidSubFolder in InvalidSubfolders)
            {
                if(String.Equals(invalidSubFolder, subfolder, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// Adds the blog alias to the system.
        /// </summary>
        /// <param name="alias">The alias.</param>
        /// <returns></returns>
        public static bool AddBlogAlias(BlogAlias alias)
        {
            return ObjectProvider.Instance().CreateBlogAlias(alias);
        }

        /// <summary>
        /// Updates the blog alias.
        /// </summary>
        /// <param name="alias">The alias.</param>
        /// <returns></returns>
        public static bool UpdateBlogAlias(BlogAlias alias)
        {
            return ObjectProvider.Instance().UpdateBlogAlias(alias);
        }

        /// <summary>
        /// Deletes the blog alias.
        /// </summary>
        /// <param name="alias">The alias.</param>
        /// <returns></returns>
        public static bool DeleteBlogAlias(BlogAlias alias)
        {
            return ObjectProvider.Instance().DeleteBlogAlias(alias);
        }

        /// <summary>
        /// Gets the blog alias.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public static BlogAlias GetBlogAlias(int id)
        {
            return ObjectProvider.Instance().GetBlogAliasById(id);
        }

        /// <summary>
        /// Gets the blog group by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public static BlogGroup GetBlogGroup(int id, bool activeOnly)
        {
            return ObjectProvider.Instance().GetBlogGroup(id, activeOnly);
        }

        /// <summary>
        /// Lists the blog groups in this installation.
        /// </summary>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public static ICollection<BlogGroup> ListBlogGroups(bool activeOnly)
        {
            return ObjectProvider.Instance().ListBlogGroups(activeOnly);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Configuration
{
    /// <summary>
    /// <p>Bitmask enumeration used to specify the several properties in one 
    /// value within the database.</p>
    /// </list>
    /// </summary>
    [Flags]
    public enum ConfigurationFlags
    {
        /// <summary>Nothing is set</summary>
        None = 0,
        /// <summary>The Blog is Active</summary>
        IsActive = 1,
        /// <summary>The Blog has a syndicated feed (RSS or ATOM)</summary>
        IsAggregated = 2,
        /// <summary>The Blog can be accessed via XML over HTTP APIs</summary>
        EnableServiceAccess = 4,
        /// <summary>Whether or not the password is hashed.</summary>
        IsPasswordHashed = 8,
        /// <summary>Whether or not Comments are enabled.</summary>
        CommentsEnabled = 16,
        /// <summary>Whether or not trackbacks and pingbacks are enabled.</summary>
        TrackbacksEnabled = 32,
        /// <summary>The Blog compresses its syndicated feeds.</summary>
        CompressSyndicatedFeed = 64,
        /// <summary>Whether or not duplicate comments are allowed.</summary>
        DuplicateCommentsEnabled = 128,
        /// <summary>
        /// Whether or not <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html">RFC3229 for feeds</see>
        /// is enabled. Enabling this can save on bandwidth by providing just updated posts in the 
        /// RSS feed.
        /// </summary>
        RFC3229DeltaEncodingEnabled = 256,
        /// <summary>
        /// Whether or not titles of blog posts and articles automatically have a friendly url generated.
        /// </summary>
        AutoFriendlyUrlEnabled = 512,
        /// <summary>Whether or not coComment is enabled</summary>
        CoCommentEnabled = 1024,
        /// <summary>The blog allows for comment moderation.</summary>
        CommentModerationEnabled = 2048,
        /// <summary>CAPTCHA is enabled on comment forms.</summary>
        CaptchaEnabled = 4096,
        /// <summary>Comment notification mails are enabled.</summary>
        CommentNotificationEnabled = 8192,
        /// <summary>Trackback notification mails are enabled.</summary>
        TrackbackNotificationEnabled = 16384,
        /// <summary>Show blog author email address in rss feed</summary>
        ShowAuthorEmailAddressinRss = 32768,
    } ;
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.Globalization;
using log4net;
using Subtext.Framework.Logging;

namespace Subtext.Configuration
{
    /// <summary>
    /// Encapsulates settings for friendly URL generation.
    /// </summary>
    public sealed class FriendlyUrlSettings
    {
        private readonly static ILog Log = new Log();

        public static readonly FriendlyUrlSettings Settings =
            new FriendlyUrlSettings((NameValueCollection)ConfigurationManager.GetSection("FriendlyUrlSettings"));

        /// <summary>
        /// Initializes a new instance of the <see cref="FriendlyUrlSettings"/> class.
        /// </summary>
        /// <param name="config">The config.</param>
        public FriendlyUrlSettings(NameValueCollection config)
        {
            if(config == null)
            {
                return;
            }
            TextTransformation = ParseTextTransform(config["textTransform"]);
            SeparatingCharacter = config["separatingCharacter"];
            string wordCountLimitText = config["limitWordCount"];
            if(!String.IsNullOrEmpty(wordCountLimitText))
            {
                int wordCountLimit;
                int.TryParse(wordCountLimitText, out wordCountLimit);
                WordCountLimit = wordCountLimit;
            }
            Enabled = true;
        }

        public bool Enabled { get; private set; }

        /// <summary>
        /// The type of transformation to apply on the URL such 
        /// as LowerCase, UpperCase, or None.
        /// </summary>
        public TextTransform TextTransformation { get; private set; }

        /// <summary>
        /// The character used to separate words in the URL.
        /// </summary>
        public string SeparatingCharacter { get; private set; }

        public int WordCountLimit { get; private set; }

        static TextTransform ParseTextTransform(string enumValue)
        {
            if(String.IsNullOrEmpty(enumValue))
            {
                return TextTransform.None;
            }
            try
            {
                return (TextTransform)Enum.Parse(typeof(TextTransform), enumValue);
            }
            catch(FormatException)
            {
                Log.Warn(
                    "The 'textTransform' setting in the FriendlyUrlSettings section of Web.config has an incorrect value. It should be 'None', 'LowerCase', or 'UpperCase'");
                return TextTransform.None;
            }
        }

        public static string TransformString(string s, TextTransform textTransform)
        {
            switch(textTransform)
            {
                case TextTransform.None:
                    break;

                case TextTransform.LowerCase:
                    return s.ToLower(CultureInfo.InvariantCulture);

                case TextTransform.UpperCase:
                    return s.ToUpper(CultureInfo.InvariantCulture);
            }
            return s;
        }
    }

    public enum TextTransform
    {
        None,
        LowerCase,
        UpperCase
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Web;
using System.Xml.Serialization;
using Lucene.Net.Analysis;

namespace Subtext.Framework.Configuration
{
    public class FullTextSearchEngineSettings
    {
        public static readonly FullTextSearchEngineSettings Settings = (FullTextSearchEngineSettings)ConfigurationManager.GetSection("FullTextSearchEngineSettings");

        private string _stopWordsString;

        public FullTextSearchEngineSettings()
        {
            Language = "English";
            StopWords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;
            Parameters = new TuningParameters();
            MinimumScore = 0.1f;
            IndexFolderLocation = "~/App_Data";
            IsEnabled = true;
        }

        public string Language { get; set; }
        public string IndexFolderLocation { get; set; }
        public bool IsEnabled { get; set; }
        public TuningParameters Parameters { get; set; }
        [XmlElement("StopWords")]
        public string StopWordsString
        {
            set 
            { 
                _stopWordsString = value;
                String[] stopWords = _stopWordsString.Split(',');

                var stopSet = new CharArraySet(stopWords, false);
                StopWords = CharArraySet.UnmodifiableSet(stopSet);
            }
        }
        [XmlIgnore]
        public Hashtable StopWords { get; private set; }

        public float MinimumScore { get; set; }

    }

    public class TuningParameters
    {

        public TuningParameters()
        {
            TitleBoost = 2f;
            TagsBoost = 4f;
            BodyBoost = 1f;
            EntryNameBoost = 1f;
            MoreLikeThisBoost = true;
            MinimumDocumentFrequency = 5;
            MinimumTermFrequency = 2;
         }

        /// <summary>
        /// Boost to apply to the title of an entry. Default is 2.
        /// </summary>
        public Single TitleBoost { get; set; }
        /// <summary>
        /// Boost to apply to the tags of an entry. Default is 4.
        /// </summary>
        public Single TagsBoost { get; set; }
        /// <summary>
        /// Boost to apply to the body of an entry. Default is 1.
        /// </summary>
        public Single BodyBoost { get; set; }
        /// <summary>
        /// Boost to apply to the name of an entry. Default is 1.
        /// </summary>
        public Single EntryNameBoost { get; set; }
        /// <summary>
        /// Boost terms in query based on score.
        /// </summary>
        public Boolean MoreLikeThisBoost { get; set; }
        /// <summary>
        /// The frequency at which words will be ignored which do not occur in at least this
        /// many docs. Default is 5.
        /// </summary>
        public int MinimumDocumentFrequency { get; set; }
        /// <summary>
        /// The frequency below which terms will be ignored in the source doc.
        /// Default is 2.
        /// </summary>
        public int MinimumTermFrequency { get; set; }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;

namespace Subtext.Framework.Configuration
{
    public class MimeTypesMapper
    {
        public static readonly MimeTypesMapper Mappings =
            new MimeTypesMapper((NameValueCollection)ConfigurationManager.GetSection("EnclosureMimetypes"));

        public MimeTypesMapper(NameValueCollection config)
        {
            if(config == null)
            {
                throw new ArgumentNullException("config");
            }
            List = config;
            Count = config.Keys.Count;
        }

        public int Count { get; private set; }

        public NameValueCollection List { get; private set; }

        /// <summary>
        /// Returns the mimetype that corresponds to a file extension.
        /// </summary>
        /// <param name="ext">Extension of a file.</param>
        /// <returns>The MimeType</returns>
        public string GetMimeType(string ext)
        {
            if(ext == null)
            {
                throw new ArgumentNullException("ext");
            }
            if(List[ext] != null)
            {
                return List[ext];
            }
            return null;
        }

        /// <summary>
        /// Detect the mimetype of the url of a file.
        /// </summary>
        /// <param name="url">Url of the file</param>
        /// <returns>The MimeType.</returns>
        public string ParseUrl(string url)
        {
            if(url == null)
            {
                throw new ArgumentNullException("url");
            }
            Uri uri;

            if(!Uri.TryCreate(url, UriKind.Absolute, out uri))
            {
                throw new ArgumentException("Url not valid.", "url");
            }

            string path = uri.GetComponents(UriComponents.Path, UriFormat.SafeUnescaped);

            string ext = Path.GetExtension(path);

            return GetMimeType(ext);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework.Services;

namespace Subtext.Framework.Configuration
{
    /// <summary>
    /// Summary description for SkinConfig.
    /// </summary>
    [Serializable]
    public class SkinConfig
    {
        public static readonly SkinConfig DefaultSkin = CreateDefaultSkin();

        /// <summary>
        /// This is the skin template folder. Note that multiple "Skins" can 
        /// share the same template folder. The template folder contains the 
        /// *.ascx files for the skins.
        /// </summary>
        public string TemplateFolder { get; set; }

        /// <summary>
        /// Gets or sets the skin's primary CSS file, if any.  
        /// Some Skins have multiple flavors based on different CSS files.  
        /// For example, Redbook, Bluebook, and Greenbook are all variations 
        /// of the skin Redbook.  They vary by the skin css file.
        /// </summary>
        /// <value>The skin CSS file.</value>
        public string SkinStyleSheet { get; set; }

        /// <summary>
        /// This is CSS text that is entered within the admin section.
        /// </summary>
        public string CustomCssText { get; set; }

        /// <summary>
        /// Returns true if the skin has a skin specific css file 
        /// that is applied after style.css (there is one style.css 
        /// per template folder).
        /// </summary>
        public bool HasStyleSheet
        {
            get { return SkinStyleSheet != null && SkinStyleSheet.Trim().Length > 0; }
        }

        /// <summary>
        /// Returns true if the user specified some custom CSS in the admin section.
        /// </summary>
        public bool HasCustomCssText
        {
            get { return CustomCssText != null && CustomCssText.Trim().Length > 0; }
        }

        /// <summary>
        /// A lookup key for a skin.
        /// </summary>
        public string SkinKey
        {
            get
            {
                if(HasStyleSheet)
                {
                    return string.Format("{0}-{1}", TemplateFolder, SkinStyleSheet);
                }
                return TemplateFolder;
            }
        }

        /// <summary>
        /// Creates the default skin to be used if none is specified.
        /// </summary>
        /// <returns></returns>
        static SkinConfig CreateDefaultSkin()
        {
            var defaultSkin = new SkinConfig {TemplateFolder = "RedBook", SkinStyleSheet = "Blue.css"};
            return defaultSkin;
        }

        /// <summary>
        /// Returns the current skin for the current context.
        /// </summary>
        /// <returns></returns>
        public static SkinConfig GetCurrentSkin(Blog blog, HttpContextBase context)
        {
            var service = new BrowserDetectionService();
            BrowserInfo capabilities = service.DetectBrowserCapabilities(context.Request);

            bool isMobile = capabilities.Mobile;

            SkinConfig skin;
            if(isMobile)
            {
                skin = blog.MobileSkin;
                if(skin.TemplateFolder != null)
                {
                    return skin;
                }
            }

            skin = blog.Skin;

            if(skin.TemplateFolder == null)
            {
                skin = DefaultSkin;
            }
            return skin;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;

namespace Subtext.Framework.Configuration
{
    /// <summary>
    /// Class used to manage the settings for various tracking systems 
    /// such as TrackBacks, PingBacks and Weblogs Pings.
    /// </summary>
    [Serializable]
    public class Tracking
    {
        public Tracking()
        {
            QueueStatsCount = 25;
            QueueStats = true;
        }

        /// <summary>
        /// Gets a value indicating whether tracking services 
        /// are being used such as Weblogs Ping, Pingbacks, and Trackbacks.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if using tracking services; otherwise, <c>false</c>.
        /// </value>
        public bool UseTrackingServices
        {
            get { return PingWeblogs || EnablePingBacks || EnableTrackBacks; }
        }

        /// <summary>
        /// Gets or sets the queue stats count. This is the number of 
        /// tracking operations that are currently in the queue.
        /// </summary>
        /// <value></value>
        [XmlAttribute("queueStatsCount")]
        public int QueueStatsCount { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not to queue stats. 
        /// This simply indicates whether trackbacks and pings are queued 
        /// to occur asynchronously or immediately.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if queueing stats asynchronously; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("queueStats")]
        public bool QueueStats { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether trackbaks are enabled.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if track backs are enabled; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("enableTrackBacks")]
        public bool EnableTrackBacks { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether ping backs are enabled.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if ping backs are enabled; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("enablePingBacks")]
        public bool EnablePingBacks { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to ping weblogs.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if weblogs are pinged; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("pingWeblogs")]
        public bool PingWeblogs { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable web stats in general.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if web stats are enabled; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("enableWebStats")]
        public bool EnableWebStats { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether aggregator bugs are enabled. 
        /// These are 1pixel images used to track the number of users who 
        /// read a particular entry in an aggregator.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if agg bugs are enabled; otherwise, <c>false</c>.
        /// </value>
        [XmlAttribute("enableAggBugs")]
        public bool EnableAggBugs { get; set; }
    }
}using System.Collections.Generic;
using System.Data;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Text;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        /// <summary>
        /// Gets the blog by id.
        /// </summary>
        /// <param name="blogId">Blog id.</param>
        /// <returns></returns>
        public override Blog GetBlogById(int blogId)
        {
            using(IDataReader reader = _procedures.GetBlogById(blogId))
            {
                if(reader.Read())
                {
                    Blog info = reader.ReadBlog();
                    return info;
                }
            }
            return null;
        }

        /// <summary>
        /// Returns a <see cref="Blog"/> instance containing 
        /// the configuration settings for the blog specified by the 
        /// Hostname and Application.
        /// </summary>
        /// <remarks>
        /// Until Subtext supports multiple blogs again (if ever), 
        /// this will always return the same instance.
        /// </remarks>
        /// <param name="hostname">Hostname.</param>
        /// <param name="subfolder">Subfolder.</param>
        /// <returns></returns>
        public override Blog GetBlog(string hostname, string subfolder)
        {
            using(IDataReader reader = _procedures.GetConfig(hostname, subfolder ?? string.Empty))
            {
                Blog info = null;
                while(reader.Read())
                {
                    info = reader.ReadBlog();
                    break;
                }
                return info;
            }
        }

        public override BlogAlias GetBlogAliasById(int aliasId)
        {
            BlogAlias alias = null;
            using(IDataReader reader = _procedures.GetDomainAliasById(aliasId))
            {
                if(reader.Read())
                {
                    alias = reader.ReadObject<BlogAlias>();
                }
                reader.Close();
            }
            return alias;
        }

        public override Blog GetBlogByDomainAlias(string host, string subfolder, bool strict)
        {
            using(IDataReader reader = _procedures.GetBlogByDomainAlias(host, subfolder, strict))
            {
                if(reader.Read())
                {
                    return reader.ReadBlog();
                }
            }
            return null;
        }

        public override BlogStatistics GetBlogStatistics(int blogId)
        {
            BlogStatistics stats = null;
            using(IDataReader reader = _procedures.GetBlogStats(blogId))
            {
                if(reader.Read())
                {
                    stats = reader.ReadObject<BlogStatistics>();
                }
            }
            return stats;
        }

        /// <summary>
        /// Gets a pageable Collection of <see cref="Blog"/> instances.
        /// </summary>
        /// <param name="host">The host filter. Set to null to return all blogs.</param>
        /// <param name="pageIndex">Page index.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        /// <param name="flags"></param>
        public override IPagedCollection<Blog> GetPagedBlogs(string host, int pageIndex, int pageSize, ConfigurationFlags flags)
        {
            using(IDataReader reader = _procedures.GetPagedBlogs(host, pageIndex, pageSize, flags))
            {
                return reader.ReadPagedCollection(r => r.ReadBlog());
            }
        }

        public override IPagedCollection<BlogAlias> GetPagedBlogDomainAlias(Blog blog, int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetPageableDomainAliases(pageIndex, pageSize, blog.Id))
            {
                return reader.ReadPagedCollection(r => r.ReadObject<BlogAlias>());
            }
        }

        /// <summary>
        /// Adds the initial blog configuration.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="host"></param>
        /// <param name="subfolder"></param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <returns></returns>
        public override int CreateBlog(string title, string userName, string password, string host, string subfolder)
        {
            return CreateBlog(title, userName, password, host, subfolder, 1 /* blogGroupId */);
        }

        /// <summary>
        /// Adds the initial blog configuration.  This is a convenience method for
        /// allowing a user with a freshly installed blog to immediately gain access
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="host"></param>
        /// <param name="subfolder"></param>
        /// <param name="blogGroupId"></param>
        /// <returns></returns>
        public override int CreateBlog(string title, string userName, string password, string host, string subfolder, int blogGroupId)
        {
            const ConfigurationFlags flag = ConfigurationFlags.IsActive
                                            | ConfigurationFlags.CommentsEnabled
                                            | ConfigurationFlags.CompressSyndicatedFeed
                                            | ConfigurationFlags.IsAggregated
                                            | ConfigurationFlags.IsPasswordHashed
                                            | ConfigurationFlags.AutoFriendlyUrlEnabled
                                            | ConfigurationFlags.CommentNotificationEnabled
                                            | ConfigurationFlags.RFC3229DeltaEncodingEnabled
                                            | ConfigurationFlags.CaptchaEnabled;

            return _procedures.UTILITYAddBlog(title, userName, password, string.Empty, host, subfolder ?? string.Empty, (int)flag, blogGroupId);
        }

        public override bool UpdateBlog(Blog info)
        {
            int? daysTillCommentsClose = null;
            if(info.DaysTillCommentsClose > -1 && info.DaysTillCommentsClose < int.MaxValue)
            {
                daysTillCommentsClose = info.DaysTillCommentsClose;
            }

            int? commentDelayInMinutes = null;
            if(info.CommentDelayInMinutes > 0 && info.CommentDelayInMinutes < int.MaxValue)
            {
                commentDelayInMinutes = info.CommentDelayInMinutes;
            }

            int? numberOfRecentComments = null;
            if(info.NumberOfRecentComments > 0 && info.NumberOfRecentComments < int.MaxValue)
            {
                numberOfRecentComments = info.NumberOfRecentComments;
            }

            int? recentCommentsLength = null;
            if(info.RecentCommentsLength > 0 && info.RecentCommentsLength < int.MaxValue)
            {
                recentCommentsLength = info.RecentCommentsLength;
            }

            return _procedures.UpdateConfig(info.UserName,
                info.Password,
                info.Email,
                info.Title,
                info.SubTitle,
                info.Skin.TemplateFolder,
                info.Subfolder,
                info.Host,
                info.Author,
                info.Language,
                info.TimeZoneId,
                info.ItemCount,
                info.CategoryListPostCount,
                info.News.NullIfEmpty(),
                info.TrackingCode.NullIfEmpty(),
                info.LastUpdated /*null*/,
                info.Skin.CustomCssText.NullIfEmpty(),
                info.Skin.SkinStyleSheet.NullIfEmpty(),
                (int)info.Flag,
                info.Id,
                info.LicenseUrl,
                daysTillCommentsClose,
                commentDelayInMinutes,
                numberOfRecentComments,
                recentCommentsLength,
                info.FeedbackSpamServiceKey.NullIfEmpty(),
                info.RssProxyUrl.NullIfEmpty(),
                info.BlogGroupId,
                info.MobileSkin.TemplateFolder.NullIfEmpty(),
                info.MobileSkin.SkinStyleSheet.NullIfEmpty(),
                info.OpenIdUrl,
                info.CardSpaceHash,
                info.OpenIdServer,
                info.OpenIdDelegate);
        }

        public override bool CreateBlogAlias(BlogAlias alias)
        {
            int aliasId = _procedures.CreateDomainAlias(alias.BlogId, alias.Host, alias.Subfolder, alias.IsActive);
            alias.Id = aliasId;
            return true;
        }

        public override bool UpdateBlogAlias(BlogAlias alias)
        {
            return _procedures.UpdateDomainAlias(alias.Id, alias.BlogId, alias.Host, alias.Subfolder, alias.IsActive);
        }

        public override bool DeleteBlogAlias(BlogAlias alias)
        {
            return _procedures.DeleteDomainAlias(alias.Id);
        }

        /// <summary>
        /// Gets the blog group.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public override BlogGroup GetBlogGroup(int id, bool activeOnly)
        {
            BlogGroup group;
            using(IDataReader reader = _procedures.GetBlogGroup(id, activeOnly))
            {
                if(!reader.Read())
                    return null;

                group = reader.ReadObject<BlogGroup>();
            }

            if(group != null)
            {
                //TODO: Make this more efficient.
                IPagedCollection<Blog> blogs =
                    Blog.GetBlogs(0, int.MaxValue, activeOnly ? ConfigurationFlags.IsActive : ConfigurationFlags.None);
                group.Blogs = new List<Blog>();
                foreach(Blog blog in blogs)
                {
                    if(blog.BlogGroupId == group.Id)
                        group.Blogs.Add(blog);
                }
            }
            return group;
        }

        /// <summary>
        /// Lists the blog groups.
        /// </summary>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public override ICollection<BlogGroup> ListBlogGroups(bool activeOnly)
        {
            using(IDataReader reader = _procedures.ListBlogGroups(activeOnly))
            {
                return reader.ReadCollection<BlogGroup>();
            }
        }

        public override ICollection<EntrySummary> GetTopEntrySummaries(int blogId, int rowCount)
        {
            using(IDataReader reader = _procedures.GetTopEntries(blogId, rowCount))
            {
                return reader.ReadCollection<EntrySummary>();
            }
        }

        public override ICollection<EntrySummary> GetRelatedEntries(int blogId, int entryId, int rowCount)
        {
            using(IDataReader reader = _procedures.GetRelatedEntries(blogId, entryId, rowCount))
            {
                return reader.ReadCollection<EntrySummary>();
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using System.Web.Caching;
using Subtext.Configuration;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using Subtext.Framework.Util;
using Subtext.Infrastructure;
using Subtext.Framework.Web;
using Subtext.Extensibility;

namespace Subtext.Framework.Data
{
    //TODO: Refactor. Static classes like this are a pain!
    /// <summary>
    /// Encapsulates obtaining content from the cache.
    /// </summary>
    public static class Cacher
    {
        private const string EntriesByCategoryKey = "EC:Count{0}Category{1}BlogId{2}";
        private const string EntryKeyId = "Entry{0}BlogId{1}";
        private const string EntryKeyName = "EntryName{0}BlogId{1}";
        public const int LongDuration = 600;
        public const int MediumDuration = 20;
        public const int ShortDuration = 10;
        private const string EntryDayKey = "EntryDay:Date{0:yyyyMMdd}Blog{1}";
        private const string EntryMonthKey = "EntryMonth:Date{0:yyyyMM}Blog{1}";
        private const string EntriesByTagKey = "ET:Count{0}Tag{1}BlogId{2}";
        private const string CategoryKey = "LC{0}BlogId{1}";
        private const string ParentCommentEntryKey = "ParentEntry:Comments:EntryId{0}:BlogId{1}";
        private const string TagsKey = "TagsCount{0}BlogId{1}";

        public static T GetOrInsert<T>(this ICache cache, string key, Func<T> retrievalFunction, int duration, CacheDependency cacheDependency)
        {
            var item = cache[key];
            if(item == null)
            {
                item = retrievalFunction();
                if(item != null)
                {
                    cache.InsertDuration(key, item, duration, cacheDependency);
                }
            }
            return (T)item;
        }

        public static T GetOrInsertSliding<T>(this ICache cache, string key, Func<T> retrievalFunction, CacheDependency cacheDependency, int slidingDuration)
        {
            var item = cache[key];
            if(item == null)
            {
                item = retrievalFunction();
                if(item != null)
                {
                    cache.InsertDurationSliding(key, item, cacheDependency, slidingDuration);
                }
            }
            return (T)item;
        }

        public static T GetOrInsert<T>(this ICache cache, string key, Func<T> retrievalFunction, int duration)
        {
            return cache.GetOrInsert(key, retrievalFunction, duration, null);
        }
        
        public static T GetOrInsert<T>(this ICache cache, string key, Func<T> retrievalFunction)
        {
            return cache.GetOrInsert(key, retrievalFunction, ShortDuration, null);
        }

        /// <summary>
        /// Gets the entries for the specified month.
        /// </summary>
        public static ICollection<Entry> GetEntriesForMonth(DateTime dateTime, ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, EntryMonthKey, dateTime, context.Blog.Id);
            return context.Cache.GetOrInsert(key, () => context.Repository.GetPostsByMonth(dateTime.Month, dateTime.Year), LongDuration);
        }

        public static EntryDay GetEntriesForDay(DateTime day, ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, EntryDayKey, day, context.Blog.Id);
            return context.Cache.GetOrInsert(key, () => context.Repository.GetEntryDay(day), LongDuration);
        }

        public static ICollection<Entry> GetEntriesByCategory(int count, int categoryId, ISubtextContext context)
        {
            string key = string.Format(EntriesByCategoryKey, count, categoryId, context.Blog.Id);
            return context.Cache.GetOrInsert(key, () => context.Repository.GetEntriesByCategory(count, categoryId, true /* activeOnly */));
        }

        public static ICollection<Entry> GetEntriesByTag(int count, string tag, ISubtextContext context)
        {
            string key = string.Format(EntriesByTagKey, count, tag, context.Blog.Id);
            return context.Cache.GetOrInsert(key, () => context.Repository.GetEntriesByTag(count, tag));
        }

        /// <summary>
        /// Returns a LinkCategory for a single category based on the request url.
        /// </summary>
        public static LinkCategory SingleCategory(ISubtextContext context)
        {
            if(context == null)
            {
                throw new ArgumentNullException("context");
            }

            string categorySlug = context.RequestContext.GetSlugFromRequest();
            if(categorySlug.IsNumeric())
            {
                int categoryId = Int32.Parse(categorySlug, CultureInfo.InvariantCulture);
                return SingleCategory(categoryId, true, context);
            }
            return SingleCategory(categorySlug, true, context);
        }

        public static LinkCategory SingleCategory(int categoryId, bool isActive, ISubtextContext context)
        {
            return SingleCategory(() => context.Repository.GetLinkCategory(categoryId, isActive), categoryId, context);
        }

        public static LinkCategory SingleCategory(string categoryName, bool isActive, ISubtextContext context)
        {
            string singleCategoryName = categoryName;
            LinkCategory category = SingleCategory(() => context.Repository.GetLinkCategory(singleCategoryName, isActive),
                                                   categoryName, context);
            if(category != null)
            {
                return category;
            }

            if(context.Blog.AutoFriendlyUrlEnabled)
            {
                string theCategoryName = categoryName;
                categoryName = categoryName.Replace(FriendlyUrlSettings.Settings.SeparatingCharacter, " ");
                return SingleCategory(() => context.Repository.GetLinkCategory(theCategoryName, isActive), categoryName,
                                      context);
            }

            return null; //couldn't find category
        }

        private static LinkCategory SingleCategory<T>(Func<LinkCategory> retrievalDelegate, T categoryKey,
                                                      ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, CategoryKey, categoryKey, context.Blog.Id);
            return context.Cache.GetOrInsert(key, retrievalDelegate);
        }

        public static ICollection<EntrySummary> GetPreviousNextEntry(int entryId, PostType postType, ISubtextContext context)
        {
            string cacheKey = string.Format("PrevNext:{0}:{1}", entryId, postType);
            return context.Cache.GetOrInsertSliding(cacheKey, () => context.Repository.GetPreviousAndNextEntries(entryId, postType), null, LongDuration);
        }

        //TODO: This should only be called in one place total. And it needs to be tested.
        public static Entry GetEntryFromRequest(bool allowRedirectToEntryName, ISubtextContext context)
        {
            string slug = context.RequestContext.GetSlugFromRequest();
            if(!String.IsNullOrEmpty(slug))
            {
                return GetEntry(slug, context);
            }

            int? id = context.RequestContext.GetIdFromRequest();
            if(id != null)
            {
                Entry entry = GetEntry(id.Value, context);
                if(entry == null)
                {
                    return null;
                }

                //TODO: Violation of SRP here!
                //Second condition avoids infinite redirect loop. Should never happen.
                if(allowRedirectToEntryName && entry.HasEntryName && !entry.EntryName.IsNumeric())
                {
                    HttpResponseBase response = context.HttpContext.Response;
                    response.RedirectPermanent(context.UrlHelper.EntryUrl(entry).ToFullyQualifiedUrl(context.Blog).ToString());
                }
                return entry;
            }

            return null;
        }

        /// <summary>
        /// Retrieves a single entry from the cache by the entry name.  
        /// If it is not in the cache, gets it from the database and 
        /// inserts it into the cache.
        /// </summary>
        public static Entry GetEntry(string entryName, ISubtextContext context)
        {
            Blog blog = context.Blog;
            string key = string.Format(CultureInfo.InvariantCulture, EntryKeyName, entryName, blog.Id);

            Func<Entry> retrieval = () => context.Repository.GetEntry(entryName, true /* activeOnly */, true /* includeCategories */);
            var cachedEntry = context.Cache.GetOrInsert(key, retrieval, MediumDuration);
            if(cachedEntry == null)
            {
                return null;
            }
            cachedEntry.Blog = blog;
            return cachedEntry.DateSyndicated > blog.TimeZone.Now ? null : cachedEntry;
        }

        /// <summary>
        /// Retrieves a single entry from the cache by the id.
        /// If it is not in the cache, gets it from the database and
        /// inserts it into the cache.
        /// </summary>
        public static Entry GetEntry(int entryId, ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, EntryKeyId, entryId, context.Blog.Id);
            var entry = context.Cache.GetOrInsert(key, () => context.Repository.GetEntry(entryId, true /* activeOnly */, true /* includeCategories */));
            if(entry == null)
            {
                return null;
            }
            entry.Blog = context.Blog;
            return entry;
        }

        /// <summary>
        /// Retrieves the current tags from the cache based on the ItemCount and
        /// Blog Id. If it is not in the cache, it gets it from the database and 
        /// inserts it into the cache.
        /// </summary>
        public static IEnumerable<Tag> GetTopTags(int itemCount, ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, TagsKey, itemCount, context.Blog.Id);
            return context.Cache.GetOrInsert(key, () => context.Repository.GetMostUsedTags(itemCount), LongDuration);
        }

        /// <summary>
        /// Clears the comment cache.
        /// </summary>
        public static void ClearCommentCache(int entryId, ISubtextContext context)
        {
            string key = string.Format(CultureInfo.InvariantCulture, ParentCommentEntryKey, entryId, context.Blog.Id);
            context.Cache.Remove(key);
        }

        /// <summary>
        /// Returns all the feedback for the specified entry. Checks the cache first.
        /// </summary>
        public static ICollection<FeedbackItem> GetFeedback(Entry parentEntry, ISubtextContext context)
        {
            string key = GetFeedbackCacheKey(parentEntry, context);
            return context.Cache.GetOrInsertSliding(key, () => context.Repository.GetFeedbackForEntry(parentEntry), null, LongDuration);
        }

        private static string GetFeedbackCacheKey(IIdentifiable parentEntry, ISubtextContext context)
        {
            return string.Format(CultureInfo.InvariantCulture, ParentCommentEntryKey, parentEntry.Id, context.Blog.Id);
        }

        public static void InvalidateFeedback(IIdentifiable parentEntry, ISubtextContext context)
        {
            string key = GetFeedbackCacheKey(parentEntry, context);
            context.Cache.Remove(key);
        }

        public static void InsertDuration(this ICache cache, string key, object value, int duration, CacheDependency cacheDependency)
        {
            cache.Insert(key, value, cacheDependency, DateTime.Now.AddSeconds(duration), TimeSpan.Zero, CacheItemPriority.Normal, null);
        }

        public static void InsertDurationSliding(this ICache cache, string key, object value, CacheDependency cacheDependency, int slidingExpiration)
        {
            cache.Insert(key, value, cacheDependency, DateTime.MaxValue, TimeSpan.FromSeconds(slidingExpiration), CacheItemPriority.Normal, null);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data;
using System.Data.SqlClient;

namespace Subtext.Framework.Data
{
    public partial class StoredProcedures
    {
        public IDataReader GetRecentImages(string host, int? groupId, int rowCount)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@GroupID", groupId),
                                   DataHelper.MakeInParam("@rowCount", rowCount),
                               };

            return GetReader("DNW_GetRecentImages", p);
        }

        public IDataReader GetRecentPosts(string host, int? groupId, DateTime currentDateTime, int? rowCount)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@GroupID", groupId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                                   DataHelper.MakeInParam("@RowCount", rowCount),
                               };

            return GetReader("DNW_GetRecentPosts", p);
        }

        public IDataReader Stats(string host, int? groupId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@GroupID", groupId),
                               };

            return GetReader("DNW_Stats", p);
        }

        public IDataReader TotalStats(string host, int? groupId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@GroupID", groupId),
                               };

            return GetReader("DNW_Total_Stats", p);
        }

        public bool AddLogEntry(DateTime date, int? blogId, string thread, string context, string level, string logger,
                                string message, string exception, string url)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Date", date),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Thread", thread),
                                   DataHelper.MakeInParam("@Context", context),
                                   DataHelper.MakeInParam("@Level", level),
                                   DataHelper.MakeInParam("@Logger", logger),
                                   DataHelper.MakeInParam("@Message", message),
                                   DataHelper.MakeInParam("@Exception", exception),
                                   DataHelper.MakeInParam("@Url", url),
                               };


            return NonQueryBool("subtext_AddLogEntry", p);
        }

        public bool ClearBlogContent(int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_ClearBlogContent", p);
        }

        public int CreateDomainAlias(int blogId, string host, string application, bool? active)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Application", application),
                                   DataHelper.MakeInParam("@Active", active),
                                   outParam0,
                               };

            NonQueryInt("subtext_CreateDomainAlias", p);
            return (int)outParam0.Value;
        }

        public bool DeleteBlogGroup(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };


            return NonQueryBool("subtext_DeleteBlogGroup", p);
        }

        public bool DeleteCategory(int categoryId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_DeleteCategory", p);
        }

        public bool DeleteDomainAlias(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };


            return NonQueryBool("subtext_DeleteDomainAlias", p);
        }

        public bool DeleteEnclosure(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };


            return NonQueryBool("subtext_DeleteEnclosure", p);
        }

        public bool DeleteFeedback(int id, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_DeleteFeedback", p);
        }

        public bool DeleteFeedbackByStatus(int blogId, int statusFlag)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@StatusFlag", statusFlag),
                               };


            return NonQueryBool("subtext_DeleteFeedbackByStatus", p);
        }

        public bool DeleteImage(int blogId, int imageId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@ImageId", imageId),
                               };


            return NonQueryBool("subtext_DeleteImage", p);
        }

        public bool DeleteImageCategory(int categoryId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_DeleteImageCategory", p);
        }

        public bool DeleteKeyWord(int keyWordId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@KeyWordID", keyWordId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_DeleteKeyWord", p);
        }

        public bool DeleteLink(int linkId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@LinkID", linkId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_DeleteLink", p);
        }

        public bool DeleteLinksByPostID(int postId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@PostId", postId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_DeleteLinksByPostID", p);
        }

        public bool DeleteMetaTag(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };


            return NonQueryBool("subtext_DeleteMetaTag", p);
        }

        public bool DeletePost(int id, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ID", id),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_DeletePost", p);
        }

        public IDataReader GetActiveCategoriesWithLinkCollection(int? blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetActiveCategoriesWithLinkCollection", p);
        }

        public IDataReader GetBlogByDomainAlias(string host, string application, bool? strict)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Application", application),
                                   DataHelper.MakeInParam("@Strict", strict),
                               };

            return GetReader("subtext_GetBlogByDomainAlias", p);
        }

        public IDataReader GetBlogById(int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetBlogById", p);
        }

        public IDataReader GetBlogGroup(int id, bool active)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                                   DataHelper.MakeInParam("@Active", active),
                               };

            return GetReader("subtext_GetBlogGroup", p);
        }

        public IDataReader GetBlogKeyWords(int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetBlogKeyWords", p);
        }

        public IDataReader GetBlogStats(int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetBlogStats", p);
        }

        public IDataReader GetCategory(string categoryName, int? categoryId, bool isActive, int? blogId,
                                       int? categoryType)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryName", categoryName),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CategoryType", categoryType),
                               };

            return GetReader("subtext_GetCategory", p);
        }

        public IDataReader GetCommentByChecksumHash(string feedbackChecksumHash, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@FeedbackChecksumHash", feedbackChecksumHash),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetCommentByChecksumHash", p);
        }

        public IDataReader GetConditionalEntries(int itemCount, int postType, int postConfig, int? blogId,
                                                 bool includeCategories, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ItemCount", itemCount),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@PostConfig", postConfig),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@IncludeCategories", includeCategories),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetConditionalEntries", p);
        }

        public IDataReader GetConfig(string host, string application)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Application", application),
                               };

            return GetReader("subtext_GetConfig", p);
        }

        public IDataReader GetDomainAliasById(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };

            return GetReader("subtext_GetDomainAliasById", p);
        }

        public IDataReader GetEntriesByDayRange(DateTime startDate, DateTime stopDate, int postType, bool isActive,
                                                int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@StartDate", startDate),
                                   DataHelper.MakeInParam("@StopDate", stopDate),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetEntriesByDayRange", p);
        }

        public IDataReader GetEntriesForExport(int blogId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetEntriesForExport", p);
        }

        public IDataReader GetEntryPreviousNext(int id, int postType, int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ID", id),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetEntry_PreviousNext", p);
        }

        public IDataReader GetFeedback(int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                               };

            return GetReader("subtext_GetFeedback", p);
        }

        public IDataReader GetFeedbackCollection(int entryId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@EntryId", entryId),
                               };

            return GetReader("subtext_GetFeedbackCollection", p);
        }

        public void GetFeedbackCountsByStatus(int blogId, out int approvedCount, out int needsModerationCount,
                                              out int flaggedSpam, out int deleted)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@ApprovedCount", SqlDbType.Int, 4);
            SqlParameter outParam1 = DataHelper.MakeOutParam("@NeedsModerationCount", SqlDbType.Int, 4);
            SqlParameter outParam2 = DataHelper.MakeOutParam("@FlaggedSpam", SqlDbType.Int, 4);
            SqlParameter outParam3 = DataHelper.MakeOutParam("@Deleted", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   outParam0,
                                   outParam1,
                                   outParam2,
                                   outParam3,
                               };

            NonQueryBool("subtext_GetFeedbackCountsByStatus", p);
            approvedCount = (int)outParam0.Value;
            needsModerationCount = (int)outParam1.Value;
            flaggedSpam = (int)outParam2.Value;
            deleted = (int)outParam3.Value;
        }

        public IDataReader GetHost()
        {
            return GetReader("subtext_GetHost");
        }

        public IDataReader GetImageCategory(int categoryId, bool isActive, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetImageCategory", p);
        }

        public IDataReader GetKeyWord(int keyWordId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@KeyWordID", keyWordId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetKeyWord", p);
        }

        public IDataReader GetLinkCollectionByPostID(int? postId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@PostId", postId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetLinkCollectionByPostID", p);
        }

        public IDataReader GetLinksByCategoryID(int categoryId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetLinksByCategoryID", p);
        }

        public IDataReader GetMetaTags(int blogId, int? entryId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetMetaTags", p);
        }

        public IDataReader GetPageableBlogs(int pageIndex, int pageSize, string host, int configurationFlags)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@ConfigurationFlags", configurationFlags),
                               };

            return GetReader("subtext_GetPageableBlogs", p);
        }

        public IDataReader GetPageableDomainAliases(int pageIndex, int pageSize, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetPageableDomainAliases", p);
        }
      
        public IDataReader GetEntries(int blogId, int? categoryId, int pageIndex, int pageSize,
                                                          int postType)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                                   DataHelper.MakeInParam("@PostType", postType),
                               };

            return GetReader("subtext_GetEntries", p);
        }

        public IDataReader GetPageableFeedback(int blogId, int pageIndex, int pageSize, int statusFlag,
                                               int? excludeFeedbackStatusMask, int? feedbackType)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                                   DataHelper.MakeInParam("@StatusFlag", statusFlag),
                                   DataHelper.MakeInParam("@ExcludeFeedbackStatusMask", excludeFeedbackStatusMask),
                                   DataHelper.MakeInParam("@FeedbackType", feedbackType),
                               };

            return GetReader("subtext_GetPageableFeedback", p);
        }

        public IDataReader GetPageableKeyWords(int blogId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetPageableKeyWords", p);
        }

        public IDataReader GetPageableLinks(int blogId, int? categoryId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetPageableLinks", p);
        }

        public bool GetPageableLinksByCategoryID(int blogId, int? categoryId, int pageIndex, int pageSize, bool sortDesc)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                                   DataHelper.MakeInParam("@SortDesc", sortDesc),
                               };


            return NonQueryBool("subtext_GetPageableLinksByCategoryID", p);
        }

        public IDataReader GetPageableLogEntries(int? blogId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetPageableLogEntries", p);
        }

        public IDataReader GetPageableReferrers(int blogId, int? entryId, int pageIndex, int pageSize)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@PageIndex", pageIndex),
                                   DataHelper.MakeInParam("@PageSize", pageSize),
                               };

            return GetReader("subtext_GetPageableReferrers", p);
        }

        public IDataReader GetPopularPosts(int blogId, DateTime? minDate)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@MinDate", minDate),
                               };

            return GetReader("subtext_GetPopularPosts", p);
        }

        public IDataReader GetPostsByCategoriesArchive(int? blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetPostsByCategoriesArchive", p);
        }

        public IDataReader GetPostsByCategoryID(int itemCount, int categoryId, bool isActive, int blogId,
                                                DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ItemCount", itemCount),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetPostsByCategoryID", p);
        }

        public IDataReader GetPostsByDayRange(DateTime startDate, DateTime stopDate, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@StartDate", startDate),
                                   DataHelper.MakeInParam("@StopDate", stopDate),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetPostsByDayRange", p);
        }

        public IDataReader GetPostsByMonth(int month, int year, int? blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Month", month),
                                   DataHelper.MakeInParam("@Year", year),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetPostsByMonth", p);
        }

        public IDataReader GetPostsByMonthArchive(int? blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetPostsByMonthArchive", p);
        }

        public IDataReader GetPostsByTag(int itemCount, string tag, int blogId, bool? isActive, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ItemCount", itemCount),
                                   DataHelper.MakeInParam("@Tag", tag),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetPostsByTag", p);
        }

        public IDataReader GetPostsByYearArchive(int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_GetPostsByYearArchive", p);
        }

        public IDataReader GetRelatedEntries(int blogId, int entryId, int rowCount)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@RowCount", rowCount),
                               };

            return GetReader("subtext_GetRelatedEntries", p);
        }
      
        public IDataReader GetSingleEntry(int? id, string entryName, bool isActive, int? blogId, bool includeCategories)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ID", id),
                                   DataHelper.MakeInParam("@EntryName", entryName),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@IncludeCategories", includeCategories),
                               };

            return GetReader("subtext_GetSingleEntry", p);
        }

        public IDataReader GetSingleImage(int imageId, bool isActive, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ImageId", imageId),
                                   DataHelper.MakeInParam("@IsActive", isActive),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetSingleImage", p);
        }

        public IDataReader GetSingleLink(int linkId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@LinkID", linkId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetSingleLink", p);
        }

        public IDataReader GetTopEntries(int blogId, int rowCount)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@RowCount", rowCount),
                               };

            return GetReader("subtext_GetTopEntries", p);
        }

        public IDataReader GetTopTags(int itemCount, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ItemCount", itemCount),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_GetTopTags", p);
        }

        public int GetUrlID(string url)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@UrlID", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Url", url),
                                   outParam0,
                               };

            NonQueryInt("subtext_GetUrlID", p);
            return (int)outParam0.Value;
        }

        public int InsertBlogGroup(string title, bool active, int? displayOrder, string description)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@DisplayOrder", displayOrder),
                                   DataHelper.MakeInParam("@Description", description),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertBlogGroup", p);
            return (int)outParam0.Value;
        }

        public int InsertCategory(string title, bool active, int blogId, int categoryType, string description)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@CategoryId", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CategoryType", categoryType),
                                   DataHelper.MakeInParam("@Description", description),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertCategory", p);
            return (int)outParam0.Value;
        }

        public int InsertEnclosure(string title, string url, string mimeType, long size, bool addToFeed,
                                   bool showWithPost, int entryId)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@MimeType", mimeType),
                                   DataHelper.MakeInParam("@Size", size),
                                   DataHelper.MakeInParam("@AddToFeed", addToFeed),
                                   DataHelper.MakeInParam("@ShowWithPost", showWithPost),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertEnclosure", p);
            return (int)outParam0.Value;
        }

        public int InsertEntry(string title, string text, int postType, string author, string email, string description,
                               int blogId, DateTime dateCreated, int postConfig, string entryName,
                               DateTime? dateSyndicated, DateTime currentDateTime)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@ID", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Text", text),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Description", description),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@DateCreated", dateCreated),
                                   DataHelper.MakeInParam("@PostConfig", postConfig),
                                   DataHelper.MakeInParam("@EntryName", entryName),
                                   DataHelper.MakeInParam("@DateSyndicated", dateSyndicated),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertEntry", p);
            return (int)outParam0.Value;
        }

        public bool InsertEntryTagList(int entryId, int blogId, string tagList)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@TagList", tagList),
                               };


            return NonQueryBool("subtext_InsertEntryTagList", p);
        }

        public int InsertFeedback(string title, string body, int blogId, int? entryId, string author, bool isBlogAuthor,
                                  string email, string url, int feedbackType, int statusFlag, bool commentAPI,
                                  string referrer, string ipAddress, string userAgent, string feedbackChecksumHash,
                                  DateTime dateCreated, DateTime? dateModified, DateTime currentDateTime)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Body", body),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@IsBlogAuthor", isBlogAuthor),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@FeedbackType", feedbackType),
                                   DataHelper.MakeInParam("@StatusFlag", statusFlag),
                                   DataHelper.MakeInParam("@CommentAPI", commentAPI),
                                   DataHelper.MakeInParam("@Referrer", referrer),
                                   DataHelper.MakeInParam("@IpAddress", ipAddress),
                                   DataHelper.MakeInParam("@UserAgent", userAgent),
                                   DataHelper.MakeInParam("@FeedbackChecksumHash", feedbackChecksumHash),
                                   DataHelper.MakeInParam("@DateCreated", dateCreated),
                                   DataHelper.MakeInParam("@DateModified", dateModified),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertFeedback", p);
            return (int)outParam0.Value;
        }

        public int InsertImage(string title, int categoryId, int width, int height, string file, bool active, int blogId,
                               string url)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@ImageId", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@Width", width),
                                   DataHelper.MakeInParam("@Height", height),
                                   DataHelper.MakeInParam("@File", file),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Url", url),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertImage", p);
            return (int)outParam0.Value;
        }

        public int InsertKeyWord(string word, string rel, string text, bool replaceFirstTimeOnly, bool openInNewWindow,
                                 bool caseSensitive, string url, string title, int blogId)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@KeyWordID", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Word", word),
                                   DataHelper.MakeInParam("@Rel", rel),
                                   DataHelper.MakeInParam("@Text", text),
                                   DataHelper.MakeInParam("@ReplaceFirstTimeOnly", replaceFirstTimeOnly),
                                   DataHelper.MakeInParam("@OpenInNewWindow", openInNewWindow),
                                   DataHelper.MakeInParam("@CaseSensitive", caseSensitive),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertKeyWord", p);
            return (int)outParam0.Value;
        }

        public int InsertLink(string title, string url, string rss, bool active, bool newWindow, int categoryId,
                              int? postId, int blogId, string rel)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@LinkID", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@Rss", rss),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@NewWindow", newWindow),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@PostId", postId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Rel", rel),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertLink", p);
            return (int)outParam0.Value;
        }

        public bool InsertLinkCategoryList(string categoryList, int postId, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryList", categoryList),
                                   DataHelper.MakeInParam("@PostId", postId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_InsertLinkCategoryList", p);
        }

        public int InsertMetaTag(string content, string name, string httpEquiv, int blogId, int? entryId,
                                 DateTime? dateCreated)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Content", content),
                                   DataHelper.MakeInParam("@Name", name),
                                   DataHelper.MakeInParam("@HttpEquiv", httpEquiv),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@DateCreated", dateCreated),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertMetaTag", p);
            return (int)outParam0.Value;
        }

        public int InsertPingTrackEntry(string title, string titleUrl, string text, string sourceUrl, int postType,
                                        string author, string email, string sourceName, string description, int blogId,
                                        DateTime dateAdded, int? parentId, int postConfig, string entryName,
                                        string contentChecksumHash)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@ID", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@TitleUrl", titleUrl),
                                   DataHelper.MakeInParam("@Text", text),
                                   DataHelper.MakeInParam("@SourceUrl", sourceUrl),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@SourceName", sourceName),
                                   DataHelper.MakeInParam("@Description", description),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@DateAdded", dateAdded),
                                   DataHelper.MakeInParam("@ParentID", parentId),
                                   DataHelper.MakeInParam("@PostConfig", postConfig),
                                   DataHelper.MakeInParam("@EntryName", entryName),
                                   DataHelper.MakeInParam("@ContentChecksumHash", contentChecksumHash),
                                   outParam0,
                               };

            NonQueryInt("subtext_InsertPingTrackEntry", p);
            return (int)outParam0.Value;
        }

        public bool InsertReferral(int entryId, int blogId, string url)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Url", url),
                               };


            return NonQueryBool("subtext_InsertReferral", p);
        }

        public IDataReader InsertViewStats(int blogId, int pageType, int postId, DateTime day, string url)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@PageType", pageType),
                                   DataHelper.MakeInParam("@PostId", postId),
                                   DataHelper.MakeInParam("@Day", day),
                                   DataHelper.MakeInParam("@Url", url),
                               };

            return GetReader("subtext_InsertViewStats", p);
        }

        public IDataReader ListBlogGroups(bool active)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Active", active),
                               };

            return GetReader("subtext_ListBlogGroups", p);
        }

        public bool LogClear(int? blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_LogClear", p);
        }

        public bool Maintenance()
        {
            return NonQueryBool("subtext_Maintenance", null);
        }

        public bool RefererCleanup()
        {
            return NonQueryBool("subtext_RefererCleanup", null);
        }

        public IDataReader SearchEntries(int blogId, string searchStr, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@SearchStr", searchStr),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };

            return GetReader("subtext_SearchEntries", p);
        }

        public IDataReader StatsSummary(int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };

            return GetReader("subtext_StatsSummary", p);
        }

        public bool TrackEntry(int entryId, int blogId, string url, bool isWeb)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@IsWeb", isWeb),
                               };

            return NonQueryBool("subtext_TrackEntry", p);
        }

        public bool UpdateBlogGroup(int id, string title, bool active, string description, int? displayOrder)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@Description", description),
                                   DataHelper.MakeInParam("@DisplayOrder", displayOrder),
                               };


            return NonQueryBool("subtext_UpdateBlogGroup", p);
        }

        public bool UpdateBlogStats(int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_UpdateBlogStats", p);
        }

        public bool UpdateCategory(int categoryId, string title, bool active, int categoryType, string description,
                                   int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@CategoryType", categoryType),
                                   DataHelper.MakeInParam("@Description", description),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_UpdateCategory", p);
        }

        public bool UpdateConfig(string userName, string password, string email, string title, string subTitle,
                                 string skin, string application, string host, string author, string language,
                                 string timeZoneId, int itemCount, int categoryListPostCount, string news,
                                 string trackingCode, DateTime? lastUpdated, string secondaryCss, string skinCssFile,
                                 int? flag, int blogId, string licenseUrl, int? daysTillCommentsClose,
                                 int? commentDelayInMinutes, int? numberOfRecentComments, int? recentCommentsLength,
                                 string akismetAPIKey, string feedBurnerName, int blogGroupId, string mobileSkin,
                                 string mobileSkinCssFile, string openIDUrl, string cardSpaceHash, string openIDServer,
                                 string openIDDelegate)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@UserName", userName),
                                   DataHelper.MakeInParam("@Password", password),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@SubTitle", subTitle),
                                   DataHelper.MakeInParam("@Skin", skin),
                                   DataHelper.MakeInParam("@Application", application),
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@Language", language),
                                   DataHelper.MakeInParam("@TimeZoneId", timeZoneId),
                                   DataHelper.MakeInParam("@ItemCount", itemCount),
                                   DataHelper.MakeInParam("@CategoryListPostCount", categoryListPostCount),
                                   DataHelper.MakeInParam("@News", news),
                                   DataHelper.MakeInParam("@TrackingCode", trackingCode),
                                   DataHelper.MakeInParam("@LastUpdated", lastUpdated),
                                   DataHelper.MakeInParam("@SecondaryCss", secondaryCss),
                                   DataHelper.MakeInParam("@SkinCssFile", skinCssFile),
                                   DataHelper.MakeInParam("@Flag", flag),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@LicenseUrl", licenseUrl),
                                   DataHelper.MakeInParam("@DaysTillCommentsClose", daysTillCommentsClose),
                                   DataHelper.MakeInParam("@CommentDelayInMinutes", commentDelayInMinutes),
                                   DataHelper.MakeInParam("@NumberOfRecentComments", numberOfRecentComments),
                                   DataHelper.MakeInParam("@RecentCommentsLength", recentCommentsLength),
                                   DataHelper.MakeInParam("@AkismetAPIKey", akismetAPIKey),
                                   DataHelper.MakeInParam("@FeedBurnerName", feedBurnerName),
                                   DataHelper.MakeInParam("@BlogGroupId", blogGroupId),
                                   DataHelper.MakeInParam("@MobileSkin", mobileSkin),
                                   DataHelper.MakeInParam("@MobileSkinCssFile", mobileSkinCssFile),
                                   DataHelper.MakeInParam("@OpenIdUrl", openIDUrl),
                                   DataHelper.MakeInParam("@CardSpaceHash", cardSpaceHash),
                                   DataHelper.MakeInParam("@OpenIdServer", openIDServer),
                                   DataHelper.MakeInParam("@OpenIdDelegate", openIDDelegate),
                               };


            return NonQueryBool("subtext_UpdateConfig", p);
        }

        public bool UpdateConfigUpdateTime(int blogId, DateTime lastUpdated)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@LastUpdated", lastUpdated),
                               };


            return NonQueryBool("subtext_UpdateConfigUpdateTime", p);
        }

        public bool UpdateDomainAlias(int id, int blogId, string host, string application, bool? active)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Application", application),
                                   DataHelper.MakeInParam("@Active", active),
                               };


            return NonQueryBool("subtext_UpdateDomainAlias", p);
        }

        public bool UpdateEnclosure(string title, string url, string mimeType, long size, bool addToFeed,
                                    bool showWithPost, int entryId, int id)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@MimeType", mimeType),
                                   DataHelper.MakeInParam("@Size", size),
                                   DataHelper.MakeInParam("@AddToFeed", addToFeed),
                                   DataHelper.MakeInParam("@ShowWithPost", showWithPost),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@Id", id),
                               };


            return NonQueryBool("subtext_UpdateEnclosure", p);
        }

        public bool UpdateEntry(int id, string title, string text, int postType, string author, string email,
                                string description, DateTime? dateUpdated, int postConfig, string entryName,
                                DateTime? dateSyndicated, int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ID", id),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Text", text),
                                   DataHelper.MakeInParam("@PostType", postType),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Description", description),
                                   DataHelper.MakeInParam("@DateUpdated", dateUpdated),
                                   DataHelper.MakeInParam("@PostConfig", postConfig),
                                   DataHelper.MakeInParam("@EntryName", entryName),
                                   DataHelper.MakeInParam("@DateSyndicated", dateSyndicated),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_UpdateEntry", p);
        }

        public bool UpdateFeedback(int id, string title, string body, string author, string email, string url,
                                   int statusFlag, string feedbackChecksumHash, DateTime dateModified,
                                   DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@ID", id),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Body", body),
                                   DataHelper.MakeInParam("@Author", author),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@StatusFlag", statusFlag),
                                   DataHelper.MakeInParam("@FeedbackChecksumHash", feedbackChecksumHash),
                                   DataHelper.MakeInParam("@DateModified", dateModified),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_UpdateFeedback", p);
        }

        public bool UpdateFeedbackCount(int blogId, int entryId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_UpdateFeedbackCount", p);
        }

        public bool UpdateFeedbackStats(int blogId, DateTime currentDateTime)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@CurrentDateTime", currentDateTime),
                               };


            return NonQueryBool("subtext_UpdateFeedbackStats", p);
        }

        public bool UpdateHost(string hostUserName, string password, string salt, string email)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@HostUserName", hostUserName),
                                   DataHelper.MakeInParam("@Password", password),
                                   DataHelper.MakeInParam("@Salt", salt),
                                   DataHelper.MakeInParam("@Email", email),
                               };


            return NonQueryBool("subtext_UpdateHost", p);
        }

        public bool UpdateImage(string title, int categoryId, int width, int height, string file, bool active,
                                int blogId, int imageId, string url)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@Width", width),
                                   DataHelper.MakeInParam("@Height", height),
                                   DataHelper.MakeInParam("@File", file),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@ImageId", imageId),
                               };


            return NonQueryBool("subtext_UpdateImage", p);
        }

        public bool UpdateKeyWord(int keyWordId, string word, string rel, string text, bool replaceFirstTimeOnly,
                                  bool openInNewWindow, bool caseSensitive, string url, string title, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@KeyWordID", keyWordId),
                                   DataHelper.MakeInParam("@Word", word),
                                   DataHelper.MakeInParam("@Rel", rel),
                                   DataHelper.MakeInParam("@Text", text),
                                   DataHelper.MakeInParam("@ReplaceFirstTimeOnly", replaceFirstTimeOnly),
                                   DataHelper.MakeInParam("@OpenInNewWindow", openInNewWindow),
                                   DataHelper.MakeInParam("@CaseSensitive", caseSensitive),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_UpdateKeyWord", p);
        }

        public bool UpdateLink(int linkId, string title, string url, string rss, bool active, bool newWindow,
                               int categoryId, string rel, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@LinkID", linkId),
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@Url", url),
                                   DataHelper.MakeInParam("@Rss", rss),
                                   DataHelper.MakeInParam("@Active", active),
                                   DataHelper.MakeInParam("@NewWindow", newWindow),
                                   DataHelper.MakeInParam("@CategoryId", categoryId),
                                   DataHelper.MakeInParam("@Rel", rel),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_UpdateLink", p);
        }

        public bool UpdateMetaTag(int id, string content, string name, string httpEquiv, int blogId, int? entryId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Id", id),
                                   DataHelper.MakeInParam("@Content", content),
                                   DataHelper.MakeInParam("@Name", name),
                                   DataHelper.MakeInParam("@HttpEquiv", httpEquiv),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                                   DataHelper.MakeInParam("@EntryId", entryId),
                               };


            return NonQueryBool("subtext_UpdateMetaTag", p);
        }

        public int UTILITYAddBlog(string title, string userName, string password, string email, string host,
                                  string application, int flag, int blogGroupId)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Title", title),
                                   DataHelper.MakeInParam("@UserName", userName),
                                   DataHelper.MakeInParam("@Password", password),
                                   DataHelper.MakeInParam("@Email", email),
                                   DataHelper.MakeInParam("@Host", host),
                                   DataHelper.MakeInParam("@Application", application),
                                   DataHelper.MakeInParam("@Flag", flag),
                                   DataHelper.MakeInParam("@BlogGroupId", blogGroupId),
                                   outParam0,
                               };

            NonQueryInt("subtext_UTILITY_AddBlog", p);
            return (int)outParam0.Value;
        }

        public IDataReader UtilityGetUnHashedPasswords()
        {
            return GetReader("subtext_Utility_GetUnHashedPasswords");
        }

        public bool UtilityUpdateToHashedPassword(string password, int blogId)
        {
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Password", password),
                                   DataHelper.MakeInParam("@BlogId", blogId),
                               };


            return NonQueryBool("subtext_Utility_UpdateToHashedPassword", p);
        }

        public int? VersionAdd(int major, int minor, int build, DateTime? dateCreated)
        {
            SqlParameter outParam0 = DataHelper.MakeOutParam("@Id", SqlDbType.Int, 4);
            SqlParameter[] p = {
                                   DataHelper.MakeInParam("@Major", major),
                                   DataHelper.MakeInParam("@Minor", minor),
                                   DataHelper.MakeInParam("@Build", build),
                                   DataHelper.MakeInParam("@DateCreated", dateCreated),
                                   outParam0,
                               };

            NonQueryInt("subtext_VersionAdd", p);
            if(outParam0.Value == null)
            {
                return null;
            }
            return (int)outParam0.Value;
        }

        public IDataReader VersionGetCurrent()
        {
            return GetReader("subtext_VersionGetCurrent");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Data;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;
using Subtext.Framework.Util;
using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Data
{
    /// <summary>
    /// Concrete implementation of <see cref="ObjectProvider"/>. This 
    /// provides objects persisted to a database.
    /// </summary>
    public partial class DatabaseObjectProvider : ObjectProvider
    {
        readonly StoredProcedures _procedures = new StoredProcedures(Config.ConnectionString);

        public int BlogId
        {
            get
            {
                //Fix this up...
                return BlogRequest.Current.IsHostAdminRequest ? NullValue.NullInt32 : BlogRequest.Current.Blog.Id;
            }
        }

        public DateTime CurrentDateTime
        {
            get { return BlogRequest.Current.Blog.TimeZone.Now; }
        }

        private static void ValidateEntry(Entry e)
        {
            //TODO: The following doesn't belong here. It's verification code.
            if(!Config.Settings.AllowScriptsInPosts && HtmlHelper.HasIllegalContent(e.Body))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            //Never allow scripts in the title.
            if(HtmlHelper.HasIllegalContent(e.Title))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            if(!Config.Settings.AllowScriptsInPosts && HtmlHelper.HasIllegalContent(e.Description))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            //never allow scripts in the url.
            if(HtmlHelper.HasIllegalContent(e.EntryName))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }
        }

        public override bool TrackEntry(EntryView entryView)
        {
            return ThreadHelper.FireAndForget(o =>
                                              _procedures.TrackEntry(entryView.EntryId, entryView.BlogId, entryView.ReferralUrl,
                                                                     entryView.PageViewType == PageViewType.WebView), "Exception while tracking an entry");
        }

        public override ICollection<LinkCategory> GetActiveCategories()
        {
            using(IDataReader reader = _procedures.GetActiveCategoriesWithLinkCollection(BlogId.NullIfMinValue()))
            {
                return reader.ReadLinkCategories(true);
            }
        }

        public override IPagedCollection<Referrer> GetPagedReferrers(int pageIndex, int pageSize, int entryId)
        {
            using(
                IDataReader reader = _procedures.GetPageableReferrers(BlogId, entryId.NullIfMinValue(), pageIndex,
                                                                      pageSize))
            {
                return reader.ReadPagedCollection(r => DataHelper.ReadReferrer(r, Config.CurrentBlog));
            }
        }

        public override int Create(MetaTag metaTag)
        {
            return _procedures.InsertMetaTag(metaTag.Content,
                                             metaTag.Name.NullIfEmpty(),
                                             metaTag.HttpEquiv.NullIfEmpty(),
                                             BlogId,
                                             metaTag.EntryId,
                                             metaTag.DateCreated);
        }

        public override bool Update(MetaTag metaTag)
        {
            return _procedures.UpdateMetaTag(metaTag.Id,
                                             metaTag.Content,
                                             metaTag.Name.NullIfEmpty(),
                                             metaTag.HttpEquiv.NullIfEmpty(),
                                             BlogId,
                                             metaTag.EntryId);
        }

        public override IPagedCollection<MetaTag> GetMetaTagsForBlog(Blog blog, int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetMetaTags(blog.Id, null, pageIndex, pageSize))
            {
                return reader.ReadPagedCollection(r => r.ReadObject<MetaTag>());
            }
        }

        public override IPagedCollection<MetaTag> GetMetaTagsForEntry(Entry entry, int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetMetaTags(entry.BlogId, entry.Id, pageIndex, pageSize))
            {
                return reader.ReadPagedCollection(r => r.ReadObject<MetaTag>());
            }
        }

        public override bool DeleteMetaTag(int metaTagId)
        {
            return _procedures.DeleteMetaTag(metaTagId);
        }

        public override int Create(Enclosure enclosure)
        {
            return _procedures.InsertEnclosure(enclosure.Title ?? string.Empty,
                                               enclosure.Url,
                                               enclosure.MimeType,
                                               enclosure.Size,
                                               enclosure.AddToFeed,
                                               enclosure.ShowWithPost,
                                               enclosure.EntryId);
        }

        public override bool Update(Enclosure enclosure)
        {
            return _procedures.UpdateEnclosure(enclosure.Title,
                                               enclosure.Url,
                                               enclosure.MimeType,
                                               enclosure.Size,
                                               enclosure.AddToFeed,
                                               enclosure.ShowWithPost,
                                               enclosure.EntryId,
                                               enclosure.Id);
        }

        public override bool DeleteEnclosure(int enclosureId)
        {
            return _procedures.DeleteEnclosure(enclosureId);
        }

        public override KeyWord GetKeyWord(int keyWordId)
        {
            using(IDataReader reader = _procedures.GetKeyWord(keyWordId, BlogId))
            {
                KeyWord kw = null;
                while(reader.Read())
                {
                    kw = reader.ReadObject<KeyWord>();
                    break;
                }
                return kw;
            }
        }

        public override ICollection<KeyWord> GetKeyWords()
        {
            using(IDataReader reader = _procedures.GetBlogKeyWords(BlogId))
            {
                return reader.ReadCollection<KeyWord>();
            }
        }

        public override IPagedCollection<KeyWord> GetPagedKeyWords(int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetPageableKeyWords(BlogId, pageIndex, pageSize))
            {
                return reader.ReadPagedCollection(r => r.ReadObject<KeyWord>());
            }
        }

        public override bool UpdateKeyWord(KeyWord keyWord)
        {
            return _procedures.UpdateKeyWord(keyWord.Id,
                                             keyWord.Word,
                                             keyWord.Rel,
                                             keyWord.Text,
                                             keyWord.ReplaceFirstTimeOnly,
                                             keyWord.OpenInNewWindow,
                                             keyWord.CaseSensitive,
                                             keyWord.Url,
                                             keyWord.Title,
                                             BlogId);
        }

        public override int InsertKeyWord(KeyWord keyWord)
        {
            return _procedures.InsertKeyWord(keyWord.Word,
                                             keyWord.Rel,
                                             keyWord.Text,
                                             keyWord.ReplaceFirstTimeOnly,
                                             keyWord.OpenInNewWindow,
                                             keyWord.CaseSensitive,
                                             keyWord.Url,
                                             keyWord.Title,
                                             BlogId);
        }

        public override bool DeleteKeyWord(int id)
        {
            return _procedures.DeleteKeyWord(id, BlogId);
        }

        public override ImageCollection GetImagesByCategoryId(int categoryId, bool activeOnly)
        {
            using(IDataReader reader = _procedures.GetImageCategory(categoryId, activeOnly, BlogId))
            {
                var ic = new ImageCollection();
                while(reader.Read())
                {
                    ic.Category = reader.ReadLinkCategory();
                    break;
                }
                reader.NextResult();
                while(reader.Read())
                {
                    ic.Add(reader.ReadImage());
                }
                return ic;
            }
        }

        public override Image GetImage(int imageId, bool activeOnly)
        {
            using(IDataReader reader = _procedures.GetSingleImage(imageId, activeOnly, BlogId))
            {
                Image image = null;
                while(reader.Read())
                {
                    image = reader.ReadImage();
                }
                return image;
            }
        }

        public override int InsertImage(Image image)
        {
            return _procedures.InsertImage(image.Title,
                                           image.CategoryID,
                                           image.Width,
                                           image.Height,
                                           image.FileName,
                                           image.IsActive,
                                           BlogId,
                                           image.Url);
        }

        public override bool UpdateImage(Image image)
        {
            return _procedures.UpdateImage(image.Title,
                                           image.CategoryID,
                                           image.Width,
                                           image.Height,
                                           image.FileName,
                                           image.IsActive,
                                           BlogId,
                                           image.ImageID,
                                           image.Url);
        }

        public override bool DeleteImage(int imageId)
        {
            return _procedures.DeleteImage(BlogId, imageId);
        }

        private static LinkCategory ReadLinkCategory(IDataReader reader)
        {
            return !reader.Read() ? null : reader.ReadLinkCategory();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Net;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;

//Need to remove Global.X calls ...just seems unclean
//Maybe create a another class formatter ...Format.Entry(ref Entry entry) 
//or, Instead of Globals.PostUrl(int id) --> Globals.PostUrl(ref Entry entry)
//...

namespace Subtext.Framework.Data
{
    /// <summary>
    /// Contains helper methods for getting blog entries from the database 
    /// into objects such as <see cref="Entry" />
    /// </summary>
    public static class DataHelper
    {
        public static IEnumerable<T> ReadEnumerable<T>(this IDataReader reader, Func<IDataReader, T> map)
        {
            while(reader.Read())
            {
                yield return map(reader);
            }
        }

        public static IPagedCollection<T> ReadPagedCollection<T>(this IDataReader reader, Func<IDataReader, T> map)
        {
            var collection = new PagedCollection<T>(reader.ReadEnumerable(map).ToList());
            reader.NextResult();
            reader.Read();
            collection.MaxItems = reader.ReadValue<int>("TotalRecords");
            return collection;
        }

        public static T ReadObject<T>(this IDataReader reader, params string[] exclusionList) where T : new()
        {
            var item = new T();
            reader.ReadObject(item, exclusionList);
            return item;
        }

        public static T ReadObject<T>(this IDataReader reader, T item, params string[] exclusionList)
        {
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(item);
            foreach(PropertyDescriptor property in properties)
            {
                if(property.IsReadOnly)
                {
                    continue;
                }

                if(!property.PropertyType.IsReadablePropertyType())
                {
                    continue;
                }

                if(exclusionList != null && exclusionList.IsExcluded(property.Name))
                {
                    continue;
                }

                // We need to catch this exception in cases when we're upgrading and the column might not exist yet.
                // It'd be nice to have a cleaner way of doing this.
                try
                {
                    object value = reader[property.Name];
                    if(value != DBNull.Value)
                    {
                        if(property.PropertyType != typeof(Uri))
                        {
                            property.SetValue(item, value);    
                        }
                        else
                        {
                            var url = value as string;
                            if(!String.IsNullOrEmpty(url))
                            {
                                Uri uri;
                                if(Uri.TryCreate(url, UriKind.RelativeOrAbsolute, out uri))
                                {
                                    property.SetValue(item, uri);
                                }
                            }
                        }
                    }
                }
                catch(IndexOutOfRangeException)
                {
                    if(typeof(T) != typeof(HostInfo))
                    {
                        throw;
                    }
                }
            }
            return item;
        }

        public static T ReadValue<T>(this IDataReader reader, string columnName)
        {
            return reader.ReadValue(columnName, default(T));
        }

        public static T ReadValue<T>(this IDataReader reader, string columnName, T defaultValue)
        {
            return reader.ReadValue(columnName, value => (T)value, defaultValue);
        }

        public static T ReadValue<T>(this IDataReader reader, string columnName, Func<object, T> map, T defaultValue)
        {
            try
            {
                object value = reader[columnName];
                if(value != null && value != DBNull.Value)
                {
                    return map(value);
                }
                return defaultValue;
            }
            catch(FormatException)
            {
                return defaultValue;
            }
            catch(IndexOutOfRangeException)
            {
                return defaultValue;
            }
        }

        /// <summary>
        /// Checks the value type and returns null if the 
        /// value is "null-equivalent".
        /// </summary>
        public static int? NullIfMinValue(this int value)
        {
            if(NullValue.IsNull(value))
            {
                return null;
            }
            return value;
        }

        public static DateTime? NullIfEmpty(this DateTime dateTime)
        {
            if(NullValue.IsNull(dateTime))
            {
                return null;
            }
            return dateTime;
        }

        public static Referrer ReadReferrer(IDataReader reader, Blog blog)
        {
            var refer = reader.ReadObject<Referrer>();
            refer.BlogId = blog.Id;
            return refer;
        }

        internal static ICollection<Entry> ReadEntryCollection(this IDataReader reader)
        {
            return reader.ReadEntryCollection(true /* buildLinks */);
        }

        internal static ICollection<Entry> ReadEntryCollection(this IDataReader reader, bool buildLinks)
        {
            return reader.ReadEntryCollection<Entry, List<Entry>>(r => r.ReadEnumerable(innerReader => innerReader.ReadEntry(buildLinks)).ToList());
        }

        internal static TCollection ReadEntryCollection<TEntry, TCollection>(this IDataReader reader, Func<IDataReader, TCollection> collectionFunc) where TCollection : ICollection<TEntry> where TEntry : Entry
        {
            var entries = collectionFunc(reader);
            if(entries.Count > 0 && reader.NextResult())
            {
                var categories = reader.ReadEnumerable(r => new { EntryId = r.ReadValue<int>("PostId"), Title = r.ReadValue<string>("Title") });
                entries.Accumulate(categories, entry => entry.Id, category => category.EntryId, (entry, category) => entry.Categories.Add(category.Title));
            }
            return entries;
        }

        internal static ICollection<TItem> ReadCollection<TItem>(this IDataReader reader, Func<IDataReader, TItem> map)
        {
            return reader.ReadEnumerable(map).ToList();
        }

        internal static ICollection<TItem> ReadCollection<TItem>(this IDataReader reader) where TItem : new()
        {
            return reader.ReadCollection(r => r.ReadObject<TItem>());
        }

        //Crappy. Need to clean up all of the entry references
        public static EntryStatsView ReadEntryStatsView(this IDataReader reader)
        {
            var entry = new EntryStatsView
            {
                BlogId = reader.ReadValue("BlogId",0),
                PostType = ((PostType)reader.ReadValue<int>("PostType")),
                WebCount = reader.ReadValue("WebCount", 0),
                AggCount = reader.ReadValue("AggCount", 0),
                WebLastUpdated = reader.ReadValue<DateTime>("WebLastUpdated"),
                AggLastUpdated = reader.ReadValue<DateTime>("AggLastUpdated"),
                Author = reader.ReadValue<string>("Author"),
                Email = reader.ReadValue<string>("Email"),
                DateCreated = reader.ReadValue<DateTime>("DateCreated"),
                DateModified = reader.ReadValue<DateTime>("DateUpdated"),
                Id = reader.ReadValue<int>("ID"),
                Description = reader.ReadValue<string>("Description"),
                EntryName = reader.ReadValue<string>("EntryName"),
                FeedBackCount = reader.ReadValue<int>("FeedBackCount"),
                Body = reader.ReadValue<string>("Text"),
                Title = reader.ReadValue<string>("Title"),
                PostConfig = (PostConfig)(reader.ReadValue<int>("PostConfig")),
                DateSyndicated = reader.ReadValue<DateTime>("DateSyndicated")
            };

            return entry;
        }

        public static Entry ReadEntry(this IDataReader reader)
        {
            return ReadEntry(reader, true);
        }

        /// <summary>
        /// Only use this when loading a SINGLE entry from a reader.
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        public static Entry ReadEntryWithCategories(IDataReader reader)
        {
            Entry entry = reader.ReadEntry();
            if(reader.NextResult())
            {
                entry.Categories.AddRange(reader.ReadEnumerable(r => r.ReadValue<string>("Title")).Distinct(StringComparer.Ordinal));
            }
            return entry;
        }

        internal static FeedbackItem ReadFeedbackItem(this IDataReader reader, Entry entry)
        {
            var feedbackItem = new FeedbackItem((FeedbackType)reader.ReadValue<int>("FeedbackType"));
            ReadFeedbackItem(reader, feedbackItem);
            feedbackItem.Entry = entry;
            return feedbackItem;
        }

        internal static FeedbackItem ReadFeedbackItem(this IDataReader reader)
        {
            var feedbackItem = new FeedbackItem((FeedbackType)reader.ReadValue<int>("FeedbackType"));
            ReadFeedbackItem(reader, feedbackItem);
            return feedbackItem;
        }

        private static void ReadFeedbackItem(this IDataReader reader, FeedbackItem feedbackItem)
        {
            feedbackItem.Id = reader.ReadValue<int>("Id");
            feedbackItem.Title = reader.ReadValue<string>("Title");
            feedbackItem.Body = reader.ReadValue<string>("Body");
            feedbackItem.EntryId = reader.ReadValue<int>("EntryId");
            feedbackItem.Author = reader.ReadValue<string>("Author") ?? string.Empty;
            feedbackItem.IsBlogAuthor = reader.ReadValue<bool>("IsBlogAuthor");
            feedbackItem.Email = reader.ReadValue<string>("Email");
            feedbackItem.SourceUrl = ReadUri(reader, "Url");
            feedbackItem.FeedbackType = (FeedbackType)reader.ReadValue<int>("FeedbackType");
            feedbackItem.Status = (FeedbackStatusFlag)reader.ReadValue<int>("StatusFlag");
            feedbackItem.CreatedViaCommentApi = reader.ReadValue<bool>("CommentAPI");
            feedbackItem.Referrer = reader.ReadValue<string>("Referrer");
            feedbackItem.IpAddress = reader.ReadIpAddress("IpAddress");
            feedbackItem.UserAgent = reader.ReadValue<string>("UserAgent");
            feedbackItem.ChecksumHash = reader.ReadValue<string>("FeedbackChecksumHash");
            feedbackItem.DateCreated = reader.ReadValue<DateTime>("DateCreated");
            feedbackItem.DateModified = reader.ReadValue<DateTime>("DateModified");
            feedbackItem.ParentEntryName = reader.ReadValue<string>("ParentEntryName");
            feedbackItem.ParentDateCreated = reader.ReadValue<DateTime>("ParentEntryCreateDate");
            feedbackItem.ParentDateSyndicated = reader.ReadValue<DateTime>("ParentEntryDateSyndicated");
        }

        public static Entry ReadEntry(this IDataReader reader, bool buildLinks)
        {
            var entry = new Entry((PostType)reader.ReadValue<int>("PostType"), null);
            reader.ReadEntry(entry, buildLinks);
            return entry;
        }

        public static Entry ReadEntry(this IDataReader reader, Entry entry, bool buildLinks)
        {
            return reader.ReadEntry(entry, buildLinks, false);
        }

        public static Entry ReadEntry(this IDataReader reader, Entry entry, bool buildLinks, bool includeBlog)
        {
            entry.Author = reader.ReadValue<string>("Author");
            entry.Email = reader.ReadValue<string>("Email");
            entry.DateCreated = reader.ReadValue<DateTime>("DateCreated");
            entry.DateModified = reader.ReadValue<DateTime>("DateUpdated");

            entry.Id = reader.ReadValue<int>("ID");
            entry.Description = reader.ReadValue<string>("Description");
            entry.EntryName = reader.ReadValue<string>("EntryName");

            entry.FeedBackCount = reader.ReadValue("FeedBackCount", 0);
            entry.Body = reader.ReadValue<string>("Text");
            entry.Title = reader.ReadValue<string>("Title");
            entry.PostConfig = (PostConfig)(reader.ReadValue("PostConfig", (int)PostConfig.None));
            entry.DateSyndicated = reader.ReadValue<DateTime>("DateSyndicated");

            var withEnclosure = reader.ReadValue<bool>("EnclosureEnabled");
            if(withEnclosure)
            {
                entry.Enclosure = ReadEnclosure(reader);
            }

            if(includeBlog)
            {
                entry.Blog = ReadBlog(reader);
            }
            return entry;
        }

        public static Blog ReadBlog(this IDataReader reader)
        {
            return reader.ReadBlog(string.Empty);
        }

        public static Blog ReadBlog(this IDataReader reader, string prefix)
        {
            var info = new Blog
            {
                Author = reader.ReadValue<string>(prefix + "Author"),
                Id = reader.ReadValue<int>(prefix + "BlogId"),
                Email = reader.ReadValue<string>(prefix + "Email"),
                Password = reader.ReadValue<string>(prefix + "Password"),
                SubTitle = reader.ReadValue<string>(prefix + "SubTitle"),
                Title = reader.ReadValue<string>(prefix + "Title"),
                UserName = reader.ReadValue<string>(prefix + "UserName"),
                TimeZoneId = reader.ReadValue<string>(prefix + "TimeZoneId"),
                ItemCount = reader.ReadValue<int>(prefix + "ItemCount"),
                CategoryListPostCount = reader.ReadValue<int>(prefix + "CategoryListPostCount"),
                Language = reader.ReadValue<string>(prefix + "Language"),
                PostCount = reader.ReadValue<int>(prefix + "PostCount"),
                CommentCount = reader.ReadValue<int>(prefix + "CommentCount"),
                StoryCount = reader.ReadValue<int>(prefix + "StoryCount"),
                PingTrackCount = reader.ReadValue<int>(prefix + "PingTrackCount"),
                News = reader.ReadValue<string>(prefix + "News"),
                TrackingCode = reader.ReadValue<string>(prefix + "TrackingCode"),
                LastUpdated = reader.ReadValue(prefix + "LastUpdated", new DateTime(2003, 1, 1)),
                Host = reader.ReadValue<string>(prefix + "Host"),
                Subfolder = reader.ReadValue<string>(prefix + "Application"),
                Flag = (ConfigurationFlags)(reader.ReadValue<int>(prefix + "Flag")),
                Skin = new SkinConfig
                {
                    TemplateFolder = reader.ReadValue<string>(prefix + "Skin"),
                    SkinStyleSheet = reader.ReadValue<string>(prefix + "SkinCssFile"),
                    CustomCssText = reader.ReadValue<string>(prefix + "SecondaryCss")
                },
                MobileSkin = new SkinConfig
                {
                    TemplateFolder = reader.ReadValue<string>(prefix + "MobileSkin"),
                    SkinStyleSheet = reader.ReadValue<string>(prefix + "MobileSkinCssFile")
                },
                OpenIdUrl = reader.ReadValue<string>(prefix + "OpenIdUrl"),
                OpenIdServer = reader.ReadValue<string>(prefix + "OpenIdServer"),
                OpenIdDelegate = reader.ReadValue<string>(prefix + "OpenIdDelegate"),
                CardSpaceHash = reader.ReadValue<string>(prefix + "CardSpaceHash"),
                LicenseUrl = reader.ReadValue<string>(prefix + "LicenseUrl"),
                DaysTillCommentsClose = reader.ReadValue(prefix + "DaysTillCommentsClose", int.MaxValue),
                CommentDelayInMinutes = reader.ReadValue<int>(prefix + "CommentDelayInMinutes"),
                NumberOfRecentComments = reader.ReadValue<int>(prefix + "NumberOfRecentComments"),
                RecentCommentsLength = reader.ReadValue<int>(prefix + "RecentCommentsLength"),
                FeedbackSpamServiceKey = reader.ReadValue<string>(prefix + "AkismetAPIKey"),
                RssProxyUrl = reader.ReadValue<string>(prefix + "FeedBurnerName"),
                BlogGroupId = reader.ReadValue<int>(prefix + "BlogGroupId"),
                BlogGroupTitle = reader.ReadValue<string>(prefix + "BlogGroupTitle")
            };
            return info;
        }

        public static ICollection<ArchiveCount> ReadArchiveCount(IDataReader reader)
        {
            const string dateformat = "{0:00}/{1:00}/{2:0000}";
            var acc = new Collection<ArchiveCount>();
            while(reader.Read())
            {
                var ac = new ArchiveCount();
                string dt = string.Format(CultureInfo.InvariantCulture,
                                          dateformat,
                                          reader.ReadValue<int>("Month"),
                                          reader.ReadValue<int>("Day"),
                                          reader.ReadValue<int>("Year"));
                // FIX: BUG SF1423271 Archives Links
                DateTime parsedDate;
                if(
                    !DateTime.TryParseExact(dt, "MM/dd/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal,
                                            out parsedDate))
                {
                    break;
                }

                ac.Date = parsedDate;
                ac.Count = reader.ReadValue<int>("Count");
                //TODO: This broke the unit tests: ac.Title = reader.ReadValue<string>("Title");
                //TODO: This broke the unit tests: ac.Id = reader.ReadValue<int>("Id");
                acc.Add(ac);
            }
            return acc;
        }

        public static Image ReadImage(this IDataReader reader)
        {
            return ReadImage(reader, false, false);
        }

        public static Image ReadImage(this IDataReader reader, bool includeBlog, bool includeCategory)
        {
            var image = reader.ReadObject<Image>("CategoryTitle", "LocalDirectoryPath");

            if(includeBlog)
            {
                image.Blog = reader.ReadBlog("Blog.");
            }
            if(includeCategory)
            {
                image.CategoryTitle = reader.ReadValue<string>("Category.Title");
            }
            return image;
        }

        public static IDictionary<string, int> ReadTags(IDataReader reader)
        {
            var tags = new SortedDictionary<string, int>();
            while(reader.Read())
            {
                tags.Add(
                    reader.ReadValue<string>("Name"),
                    reader.ReadValue<int>("TagCount"));
            }
            return tags;
        }

        private static bool IsExcluded(this IEnumerable<string> exclusionList, string propertyName)
        {
            return exclusionList.Any(excludedProperty => excludedProperty == propertyName);
        }

        private static bool IsReadablePropertyType(this Type t)
        {
            bool isReadable = t.IsPrimitive ||
                              t == typeof(DateTime) ||
                              t == typeof(string) ||
                              t == typeof(Uri);

            if(!isReadable)
            {
                //Maybe it's a nullable.
                Type underlyingType = Nullable.GetUnderlyingType(t);
                if(underlyingType != null)
                {
                    return IsReadablePropertyType(underlyingType);
                }
            }
            return isReadable;
        }

        /// <summary>
        /// Reads the string.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="columnName">Name of the coumn.</param>
        /// <returns></returns>
        public static IPAddress ReadIpAddress(this IDataReader reader, string columnName)
        {
            return reader.ReadValue(columnName, value => IPAddress.Parse((string)value), IPAddress.None);
        }

        /// <summary>
        /// Reads an URI from the database.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="columnName"></param>
        /// <returns></returns>
        public static Uri ReadUri(this IDataReader reader, string columnName)
        {
            return reader.ReadValue(columnName, value => new Uri((string)value), null);
        }

        public static SqlParameter MakeInParam(string paramName, object value)
        {
            return new SqlParameter(paramName, value);
        }

        /// <summary>
        /// Make input param.
        /// </summary>
        public static SqlParameter MakeOutParam(string paramName, SqlDbType dbType, int size)
        {
            return MakeParam(paramName, dbType, size, ParameterDirection.Output, null);
        }

        /// <summary>
        /// Make stored procedure param.
        /// </summary>
        public static SqlParameter MakeParam(string paramName, SqlDbType dbType, Int32 size,
                                             ParameterDirection direction, object value)
        {
            SqlParameter param = size > 0 ? new SqlParameter(paramName, dbType, size) : new SqlParameter(paramName, dbType);

            param.Direction = direction;
            if(!(direction == ParameterDirection.Output && value == null))
            {
                param.Value = value;
            }

            return param;
        }

        // Expects that the caller will dispose of the reader.
        public static ICollection<LinkCategory> ReadLinkCategories(this IDataReader reader, bool includeLinks)
        {
            var categories = reader.ReadEnumerable(r => r.ReadLinkCategory()).ToList();
            
            if(includeLinks && reader.NextResult())
            {
                var links = reader.ReadEnumerable(r => r.ReadObject<Link>());
                categories.Accumulate(links, category => category.Id, link => link.CategoryId, (category, link) => category.Links.Add(link));
            }

            return categories;
        }

        public static LinkCategory ReadLinkCategory(this IDataReader reader)
        {
            var lc = new LinkCategory(reader.ReadValue<int>("CategoryId"), reader.ReadValue<string>("Title")) { IsActive = (bool)reader["Active"] };
            if(reader["CategoryType"] != DBNull.Value)
            {
                lc.CategoryType = (CategoryType)((byte)reader["CategoryType"]);
            }
            if(reader["Description"] != DBNull.Value)
            {
                lc.Description = reader.ReadValue<string>("Description");
            }
            lc.BlogId = reader["BlogId"] != DBNull.Value ? reader.ReadValue<int>("BlogId") : Config.CurrentBlog.Id;
            return lc;
        }

        public static Enclosure ReadEnclosure(this IDataReader reader)
        {
            var enclosure = new Enclosure
            {
                Id = reader.ReadValue<int>("EnclosureId"),
                Title = reader.ReadValue<string>("EnclosureTitle"),
                Url = reader.ReadValue<string>("EnclosureUrl"),
                MimeType = reader.ReadValue<string>("EnclosureMimeType"),
                Size = reader.ReadValue<long>("EnclosureSize"),
                EntryId = reader.ReadValue<int>("ID"),
                AddToFeed = reader.ReadValue<bool>("AddToFeed"),
                ShowWithPost = reader.ReadValue<bool>("ShowWithPost")
            };

            return enclosure;
        }
    }

    /// <summary>
    /// Sort direction.
    /// </summary>
    public enum SortDirection
    {
        None = 0,
        /// <summary>Sort ascending</summary>
        Ascending,
        /// <summary>Sort descending</summary>
        Descending
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Text;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        /// <summary>
        /// Returns a pageable collection of entries ordered by the id descending.
        /// This is used in the admin section.
        /// </summary>
        public override IPagedCollection<EntryStatsView> GetEntries(PostType postType, int? categoryId, int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetEntries(BlogId, categoryId, pageIndex, pageSize, (int)postType))
            {
                return reader.ReadPagedCollection(r => reader.ReadEntryStatsView());
            }
        }

        /// <summary>
        /// Gets the entries that meet the specific <see cref="PostType"/> 
        /// and the <see cref="PostConfig"/> flags.
        /// </summary>
        /// <remarks>
        /// This is called to get the main syndicated entries and supports MetaWeblog API.
        /// </remarks>
        /// <param name="itemCount">Item count.</param>
        /// <param name="postType">The type of post to retrieve.</param>
        /// <param name="postConfig">Post configuration options.</param>
        /// <param name="includeCategories">Whether or not to include categories</param>
        /// <returns></returns>
        public override ICollection<Entry> GetEntries(int itemCount, PostType postType, PostConfig postConfig, bool includeCategories)
        {
            using(IDataReader reader = _procedures.GetConditionalEntries(itemCount,
                (int)postType,
                (int)postConfig,
                BlogId,
                includeCategories,
                CurrentDateTime))
            {
                return reader.ReadEntryCollection();
            }
        }

        public override ICollection<Entry> GetEntriesByCategory(int itemCount, int categoryId, bool activeOnly)
        {
            using(IDataReader reader = _procedures.GetPostsByCategoryID(itemCount, categoryId, activeOnly, BlogId, CurrentDateTime))
            {
                return reader.ReadEntryCollection();
            }
        }

        public override ICollection<Entry> GetEntriesByTag(int itemCount, string tagName)
        {
            using(IDataReader reader = _procedures.GetPostsByTag(itemCount, tagName, BlogId, true, CurrentDateTime))
            {
                return reader.ReadEntryCollection();
            }
        }

        public override ICollection<EntryStatsView> GetPopularEntries(int blogId, DateFilter filter)
        {
            DateTime? minDate = null;
            if(filter == DateFilter.LastMonth)
            {
                minDate = CurrentDateTime.AddMonths(-1);
            }
            else if(filter == DateFilter.LastWeek)
            {
                minDate = CurrentDateTime.AddDays(-7);
            }
            else if (filter == DateFilter.LastYear)
            {
                minDate = CurrentDateTime.AddYears(-1);
            }

            using(IDataReader reader = _procedures.GetPopularPosts(BlogId, minDate))
            {
                return reader.ReadCollection(r =>
                    {
                        var entry = r.ReadEntryStatsView();
                        entry.PostType = PostType.BlogPost;
                        return entry;
                    });
            }
        }

        public override IPagedCollection<EntryStatsView> GetEntriesForExport(int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetEntriesForExport(BlogId, pageIndex, pageSize))
            {
                var entries = reader.ReadEntryCollection<EntryStatsView, IPagedCollection<EntryStatsView>>(r => r.ReadPagedCollection(innerReader => innerReader.ReadEntryStatsView()));
                if(reader.NextResult())
                {
                    var comments = reader.ReadEnumerable(r => r.ReadFeedbackItem());
                    entries.Accumulate(comments, entry => entry.Id, comment => comment.EntryId, 
                        (entry, comment) => { entry.Comments.Add(comment); comment.Entry = entry;});

                    if(reader.NextResult())
                    {
                        var trackBacks = reader.ReadEnumerable(r => r.ReadFeedbackItem());
                        entries.Accumulate(trackBacks, entry => entry.Id, trackback => trackback.EntryId,
                            (entry, trackback) => { entry.Comments.Add(trackback); trackback.Entry = entry; });
                    }
                }
                return entries;
            }
        }

        public override EntryDay GetEntryDay(DateTime dateTime)
        {
            using(IDataReader reader = _procedures.GetEntriesByDayRange(dateTime.Date, dateTime.Date.AddDays(1), (int)PostType.BlogPost, true, BlogId, CurrentDateTime))
            {
                var entryDay = new EntryDay(dateTime);
                while(reader.Read())
                {
                    entryDay.Add(reader.ReadEntry());
                }
                return entryDay;
            }
        }

        /// <summary>
        /// Returns the previous and next entry to the specified entry.
        /// </summary>
        /// <param name="entryId"></param>
        /// <returns></returns>
        /// <param name="postType"></param>
        public override ICollection<EntrySummary> GetPreviousAndNextEntries(int entryId, PostType postType)
        {
            using(IDataReader reader = _procedures.GetEntryPreviousNext(entryId, (int)postType, BlogId, CurrentDateTime))
            {
                return reader.ReadCollection<EntrySummary>();
            }
        }

        /// <summary>
        /// Returns the posts for the specified month for the Month Archive section.
        /// </summary>
        /// <param name="month"></param>
        /// <param name="year"></param>
        /// <returns></returns>
        public override ICollection<Entry> GetPostsByMonth(int month, int year)
        {
            using(IDataReader reader = _procedures.GetPostsByMonth(month, year, BlogId, CurrentDateTime))
            {
                return reader.ReadEntryCollection();
            }
        }

        public override ICollection<Entry> GetPostsByDayRange(DateTime start, DateTime stop, PostType postType, bool activeOnly)
        {
            DateTime min = start;
            DateTime max = stop;

            if(stop < start)
            {
                min = stop;
                max = start;
            }

            using(IDataReader reader = _procedures.GetEntriesByDayRange(min, max, (int)postType, activeOnly, BlogId, CurrentDateTime))
            {
                return reader.ReadEntryCollection();
            }
        }

        /// <summary>
        /// Returns an <see cref="Entry" /> with the specified id.
        /// </summary>
        /// <param name="id">Id of the entry</param>
        /// <param name="activeOnly">Whether or not to only return the entry if it is active.</param>
        /// <param name="includeCategories">Whether the entry should have its Categories property populated</param>
        /// <returns></returns>
        public override Entry GetEntry(int id, bool activeOnly, bool includeCategories)
        {
            using(IDataReader reader = _procedures.GetEntryReader(BlogId, id, activeOnly, includeCategories))
            {
                if(reader.Read())
                {
                    return DataHelper.ReadEntryWithCategories(reader);
                }
                return null;
            }
        }

        /// <summary>
        /// Returns an <see cref="Entry" /> with the specified entry name.
        /// </summary>
        /// <param name="entryName">Url friendly entry name.</param>
        /// <param name="activeOnly">Whether or not to only return the entry if it is active.</param>
        /// <param name="includeCategories">Whether the entry should have its Categories property populated</param>
        /// <returns></returns>
        public override Entry GetEntry(string entryName, bool activeOnly, bool includeCategories)
        {
            using(IDataReader reader = _procedures.GetEntryReader(BlogId,
                entryName,
                activeOnly,
                includeCategories))
            {
                if(reader.Read())
                {
                    return DataHelper.ReadEntryWithCategories(reader);
                }
                return null;
            }
        }

        /// <summary>
        /// Deletes the specified entry.
        /// </summary>
        /// <param name="entryId">The entry id.</param>
        /// <returns></returns>
        public override bool DeleteEntry(int entryId)
        {
            return _procedures.DeletePost(entryId, CurrentDateTime);
        }

        /// <summary>
        /// Creates the specified entry in the back end data store attaching 
        /// the specified category ids.
        /// </summary>
        /// <param name="entry">Entry.</param>
        /// <param name="categoryIds">Category I ds.</param>
        /// <returns></returns>
        public override int Create(Entry entry, IEnumerable<int> categoryIds)
        {
            ValidateEntry(entry);

            entry.Id = _procedures.InsertEntry(entry.Title
                , entry.Body.NullIfEmpty()
                , (int)entry.PostType
                , entry.Author.NullIfEmpty()
                , entry.Email.NullIfEmpty()
                , entry.Description.NullIfEmpty()
                , BlogId
                , entry.DateCreated
                , (int)entry.PostConfig
                , entry.EntryName.NullIfEmpty()
                , entry.DateSyndicated.NullIfEmpty()
                , CurrentDateTime);

            if(categoryIds != null)
            {
                SetEntryCategoryList(entry.Id, categoryIds);
            }

            if(entry.Id > -1)
            {
                Config.CurrentBlog.LastUpdated = entry.DateCreated;
            }

            return entry.Id;
        }

        /// <summary>
        /// Saves the categories for the specified post.
        /// </summary>
        public override bool SetEntryCategoryList(int entryId, IEnumerable<int> categoryIds)
        {
            if(categoryIds == null)
            {
                return _procedures.InsertLinkCategoryList(string.Empty, entryId, BlogId);
            }

            var idsAsStrings = categoryIds.Select(id => id.ToString(CultureInfo.InvariantCulture));
            string catList = string.Join(",", idsAsStrings.ToArray());

            return _procedures.InsertLinkCategoryList(catList, entryId, BlogId);
        }

        /// <summary>
        /// Saves the tags for the specified post
        /// </summary>
        /// <param name="postId">The EntryId for the post to update</param>
        /// <param name="tags">
        /// An array of tag strings for the associated post. If there are no tags
        /// associated with the post, pass tags with length zero to remove post tags
        /// if present.
        /// </param>
        /// <returns></returns>
        public override bool SetEntryTagList(int postId, IEnumerable<string> tags)
        {
            if(tags == null)
                throw new ArgumentNullException("tags");

            string tagList = "";
            foreach(string tag in tags)
            {
                tagList += tag + ",";
            }
            if(tagList.Length > 0)
                tagList = tagList.Substring(0, tagList.Length - 1);

            return _procedures.InsertEntryTagList(postId, BlogId, tagList);
        }

        /// <summary>
        /// Saves changes to the specified entry attaching the specified categories.
        /// </summary>
        /// <param name="entry">Entry.</param>
        /// <param name="categoryIds">Category Ids.</param>
        /// <returns></returns>
        public override bool Update(Entry entry, IEnumerable<int> categoryIds)
        {
            ValidateEntry(entry);

            if(entry.IsActive && NullValue.IsNull(entry.DateSyndicated))
            {
                entry.DateSyndicated = CurrentDateTime;
            }

            bool updated = _procedures.UpdateEntry(
                entry.Id
                , entry.Title ?? string.Empty
                , entry.Body.NullIfEmpty()
                , (int)entry.PostType
                , entry.Author.NullIfEmpty()
                , entry.Email.NullIfEmpty()
                , entry.Description.NullIfEmpty()
                , entry.DateModified
                , (int)entry.PostConfig
                , entry.EntryName.NullIfEmpty()
                , entry.DateSyndicated.NullIfEmpty()
                , BlogId
                , CurrentDateTime);

            if(!updated)
            {
                return false;
            }

            if(!categoryIds.IsNullOrEmpty())
            {
                SetEntryCategoryList(entry.Id, categoryIds);
            }

            if(Config.Settings.Tracking.UseTrackingServices)
            {
                if(entry.Id > -1)
                {
                    Config.CurrentBlog.LastUpdated = entry.DateModified;
                }
            }
            return true;
        }

        public override ICollection<ArchiveCount> GetPostCountsByMonth()
        {
            using(IDataReader reader = _procedures.GetPostsByMonthArchive(BlogId, CurrentDateTime))
            {
                ICollection<ArchiveCount> acc = DataHelper.ReadArchiveCount(reader);
                return acc;
            }
        }

        public override ICollection<ArchiveCount> GetPostCountsByYear()
        {
            using(IDataReader reader = _procedures.GetPostsByYearArchive(BlogId, CurrentDateTime))
            {
                ICollection<ArchiveCount> acc = DataHelper.ReadArchiveCount(reader);
                return acc;
            }
        }

        public override ICollection<ArchiveCount> GetPostCountsByCategory()
        {
            using(IDataReader reader = _procedures.GetPostsByCategoriesArchive(BlogId))
            {
                ICollection<ArchiveCount> acc = DataHelper.ReadArchiveCount(reader);
                return acc;
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Data;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Text;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        /// <summary>
        /// Returns the feedback by id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public override FeedbackItem GetFeedback(int id)
        {
            using (IDataReader reader = _procedures.GetFeedback(id))
            {
                if (reader.Read())
                {
                    return reader.ReadFeedbackItem();
                }
            }
            return null;
        }

        /// <summary>
        /// Gets the feedback counts for the various top level statuses.
        /// </summary>
        /// <param name="approved">The approved.</param>
        /// <param name="needsModeration">The needs moderation.</param>
        /// <param name="flaggedAsSpam">The flagged as spam.</param>
        /// <param name="deleted">The deleted.</param>
        public override void GetFeedbackCounts(out int approved, out int needsModeration, out int flaggedAsSpam, out int deleted)
        {
            _procedures.GetFeedbackCountsByStatus(BlogId, out approved, out needsModeration, out flaggedAsSpam, out deleted);
        }

        /// <summary>
        /// Gets the paged feedback.
        /// </summary>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="status">A flag for the status types to return.</param>
        /// <param name="excludeStatusMask">A flag for the statuses to exclude.</param>
        /// <param name="type">The type of feedback to return.</param>
        /// <returns></returns>
        public override IPagedCollection<FeedbackItem> GetPagedFeedback(int pageIndex, int pageSize, FeedbackStatusFlag status, FeedbackStatusFlag excludeStatusMask, FeedbackType type)
        {
            int? feedbackType = (type == FeedbackType.None ? null : (int?)type);
            int? excludeStatus = (excludeStatusMask == FeedbackStatusFlag.None ? null : (int?)excludeStatusMask);
            using (IDataReader reader = _procedures.GetPageableFeedback(BlogId, pageIndex, pageSize, (int)status, excludeStatus, feedbackType))
            {
                return reader.ReadPagedCollection(r => reader.ReadFeedbackItem());
            }
        }

        /// <summary>
        /// Returns all the active entries for the specified post.
        /// </summary>
        /// <param name="parentEntry"></param>
        /// <returns></returns>
        public override ICollection<FeedbackItem> GetFeedbackForEntry(Entry parentEntry)
        {
            using (IDataReader reader = _procedures.GetFeedbackCollection(parentEntry.Id))
            {
                return reader.ReadCollection(r => r.ReadFeedbackItem(parentEntry));
            }
        }

        /// <summary>
        /// Searches the data store for the first comment with a 
        /// matching checksum hash.
        /// </summary>
        /// <param name="checksumHash">Checksum hash.</param>
        /// <returns></returns>
        //TODO: This needs a unit test.
        public override FeedbackItem GetFeedbackByChecksumHash(string checksumHash)
        {
            using (IDataReader reader = _procedures.GetCommentByChecksumHash(checksumHash, BlogId))
            {
                if (reader.Read())
                {
                    return reader.ReadFeedbackItem();
                }
                return null;
            }
        }

        public override void DestroyFeedback(int id)
        {
            _procedures.DeleteFeedback(id, CurrentDateTime);
        }

        public override void DestroyFeedback(FeedbackStatusFlag status)
        {
            _procedures.DeleteFeedbackByStatus(BlogId, (int)status);
        }

        public override int Create(FeedbackItem feedbackItem)
        {
            if (feedbackItem == null)
                throw new ArgumentNullException("feedbackItem");

            string ipAddress = null;
            if (feedbackItem.IpAddress != null)
                ipAddress = feedbackItem.IpAddress.ToString();

            string sourceUrl = null;
            if (feedbackItem.SourceUrl != null)
                sourceUrl = feedbackItem.SourceUrl.ToString();

            return _procedures.InsertFeedback(feedbackItem.Title,
                feedbackItem.Body,
                BlogId,
                feedbackItem.EntryId.NullIfMinValue(),
                feedbackItem.Author,
                feedbackItem.IsBlogAuthor,
                feedbackItem.Email,
                sourceUrl,
                (int)feedbackItem.FeedbackType,
                (int)feedbackItem.Status,
                feedbackItem.CreatedViaCommentApi,
                feedbackItem.Referrer,
                ipAddress,
                feedbackItem.UserAgent,
                feedbackItem.ChecksumHash,
                feedbackItem.DateCreated,
                feedbackItem.DateModified,
                CurrentDateTime);
        }

        /// <summary>
        /// Saves changes to the specified feedback.
        /// </summary>
        /// <param name="feedbackItem">The feedback item.</param>
        /// <returns></returns>
        public override bool Update(FeedbackItem feedbackItem)
        {
            string sourceUrl = null;
            if (feedbackItem.SourceUrl != null)
                sourceUrl = feedbackItem.SourceUrl.ToString();

            return _procedures.UpdateFeedback(feedbackItem.Id,
                feedbackItem.Title,
                feedbackItem.Body.NullIfEmpty(),
                feedbackItem.Author.NullIfEmpty(),
                feedbackItem.Email.NullIfEmpty(),
                sourceUrl,
                (int)feedbackItem.Status,
                feedbackItem.ChecksumHash,
                CurrentDateTime,
                CurrentDateTime);
        }
    }
}
ï»¿#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Text;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        /// <summary>
        /// Returns the <see cref="HostInfo"/> for the Subtext installation.
        /// </summary>
        /// <returns>A <see cref="HostInfo"/> instance.</returns>
        public override HostInfo LoadHostInfo(HostInfo hostInfo)
        {
            try
            {
                using (IDataReader reader = _procedures.GetHost())
                {
                    if (reader.Read())
                    {
                        return reader.ReadObject(hostInfo);
                    }
                }
            }
            catch (IndexOutOfRangeException)
            {
                //When upgrading, this may occur because the old version of the 
                //database schema doesn't know about new properties.
                return new HostInfo();
            }
            return null;
        }

        /// <summary>
        /// Updates the <see cref="HostInfo"/> instance.  If the host record is not in the 
        /// database, one is created. There should only be one host record.
        /// </summary>
        /// <param name="host">The host information.</param>
        public override bool UpdateHost(HostInfo host)
        {
            return _procedures.UpdateHost(host.HostUserName, host.Password, host.Salt, host.Email);
        }

        /// <summary>
        /// Clears all content (Entries, Comments, Track/Ping-backs, Statistices, etc...) 
        /// for a the current blog (sans the Image Galleries).
        /// </summary>
        /// <returns>
        ///     TRUE - At least one unit of content was cleared.
        ///     FALSE - No content was cleared.
        /// </returns>
        public override void ClearBlogContent(int blogId)
        {
            _procedures.ClearBlogContent(blogId);
        }

        /// <summary>
        /// Inserts the blog group.
        /// </summary>
        /// <param name="blogGroup">The group to insert.</param>
        /// <returns>The blog group id</returns>
        public override int InsertBlogGroup(BlogGroup blogGroup)
        {
            return _procedures.InsertBlogGroup(blogGroup.Title,
                blogGroup.IsActive,
                blogGroup.DisplayOrder.NullIfMinValue(),
                blogGroup.Description.NullIfEmpty());
        }

        /// <summary>
        /// Inserts the blog group.
        /// </summary>
        /// <param name="blogGroup">The group to insert.</param>
        /// <returns>The blog group id</returns>
        public override bool UpdateBlogGroup(BlogGroup blogGroup)
        {
            return _procedures.UpdateBlogGroup(blogGroup.Id,
                blogGroup.Title,
                blogGroup.IsActive,
                blogGroup.Description.NullIfEmpty(),
                blogGroup.DisplayOrder.NullIfMinValue());
        }

        public override bool DeleteBlogGroup(int blogGroupId)
        {
            return _procedures.DeleteBlogGroup(blogGroupId);
        }

        public override ICollection<Blog> GetBlogsByGroup(string host, int? groupId)
        {
            using (var reader = _procedures.Stats(host, groupId))
            {
                return reader.ReadCollection(r => r.ReadBlog());
            }
        }

        /// <summary>
        /// Given a list of blogs, groups blogs
        /// </summary>
        /// <param name="blogs"></param>
        /// <returns></returns>
        public override ICollection<BlogGroup> GroupBlogs(IEnumerable<Blog> blogs)
        {
            return blogs.GroupBy(blog => blog.BlogGroupId,
                (blogGroupId, blogsInGroup) => new BlogGroup
                {
                    Blogs = blogsInGroup.ToList(),
                    Title = blogs.First(b => b.BlogGroupId == blogGroupId).BlogGroupTitle
                })
                .ToList();
        }

        public override HostStats GetTotalBlogStats(string host, int? groupId)
        {
            using (IDataReader reader = _procedures.TotalStats(host, groupId))
            {
                if (!reader.Read())
                {
                    return null;
                }
                return reader.ReadObject<HostStats>();
            }
        }

        public override ICollection<Entry> GetRecentEntries(string host, int? groupId, int rowCount)
        {
            using (IDataReader reader = _procedures.GetRecentPosts(host, groupId, CurrentDateTime, rowCount))
            {
                return reader.ReadCollection(r => r.ReadEntry(new Entry(PostType.BlogPost), false /* buildLinks */, true /* includeBlog */));
            }
        }

        public override ICollection<Image> GetImages(string host, int? groupId, int rowCount)
        {
            using (IDataReader reader = _procedures.GetRecentImages(host, groupId, rowCount))
            {
                return reader.ReadCollection(r => r.ReadImage(true /* includeBlog */, true/* includeCategory */));
            }
        }
    }
}
#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System.Collections.Generic;
using System.Data;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        public override IPagedCollection<Link> GetPagedLinks(int? categoryId, int pageIndex, int pageSize, bool sortDescending)
        {
            //TODO: Update proc to allow for sort parameter.
            using (IDataReader reader = _procedures.GetPageableLinks(BlogId, categoryId, pageIndex, pageSize))
            {
                return reader.ReadPagedCollection(r => reader.ReadObject<Link>());
            }
        }

        public override ICollection<Link> GetLinkCollectionByPostId(int postId)
        {
            using (IDataReader reader = _procedures.GetLinkCollectionByPostID(postId, BlogId))
            {
                return reader.ReadCollection<Link>();
            }
        }

        public override Link GetLink(int linkId)
        {
            using (IDataReader reader = _procedures.GetSingleLink(linkId, BlogId))
            {
                Link link = null;
                while (reader.Read())
                {
                    link = reader.ReadObject<Link>();
                    break;
                }
                return link;
            }
        }

        /// <summary>
        /// Gets the categories for the specified category type.
        /// </summary>
        /// <param name="catType">Type of the cat.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public override ICollection<LinkCategory> GetCategories(CategoryType catType, bool activeOnly)
        {
            using (IDataReader reader = _procedures.GetCategory(null, null, activeOnly, BlogId, (int)catType))
            {
                return reader.ReadCollection(r => r.ReadLinkCategory());
            }
        }

        /// <summary>
        /// Gets the link category for the specified category id.
        /// </summary>
        /// <param name="categoryId">The category id.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public override LinkCategory GetLinkCategory(int? categoryId, bool activeOnly)
        {
            using (IDataReader reader = _procedures.GetCategory(null, categoryId, activeOnly, BlogId, null))
            {
                return ReadLinkCategory(reader);
            }
        }

        /// <summary>
        /// Gets the link category for the specified category name.
        /// </summary>
        /// <param name="categoryName">The category name.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public override LinkCategory GetLinkCategory(string categoryName, bool activeOnly)
        {
            using (IDataReader reader = _procedures.GetCategory(categoryName, null, activeOnly, BlogId, null))
            {
                return ReadLinkCategory(reader);
            }
        }

        public override int CreateLink(Link link)
        {
            int linkId = _procedures.InsertLink(link.Title,
                link.Url,
                link.Rss ?? string.Empty,
                link.IsActive,
                link.NewWindow,
                link.CategoryId,
                link.PostId.NullIfMinValue(),
                BlogId,
                link.Relation);
            link.Id = linkId;
            return linkId;
        }

        public override bool UpdateLink(Link link)
        {
            return _procedures.UpdateLink(link.Id,
                link.Title,
                link.Url,
                link.Rss ?? string.Empty,
                link.IsActive,
                link.NewWindow,
                link.CategoryId,
                link.Relation,
                BlogId);
        }

        public override bool UpdateLinkCategory(LinkCategory category)
        {
            return _procedures.UpdateCategory(category.Id,
                category.Title,
                category.IsActive,
                (int)category.CategoryType,
                category.Description ?? string.Empty,
                BlogId);
        }

        public override int CreateLinkCategory(LinkCategory lc)
        {
            return _procedures.InsertCategory(lc.Title,
                lc.IsActive,
                BlogId,
                (int)lc.CategoryType,
                lc.Description ?? string.Empty);
        }

        public override bool DeleteLinkCategory(int categoryId)
        {
            return _procedures.DeleteCategory(categoryId, BlogId);
        }

        public override bool DeleteLink(int linkId)
        {
            return _procedures.DeleteLink(linkId, BlogId);
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Linq;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework.Data
{
    public static class RepositoryExtensions
    {
        public static IEnumerable<EntryDay> GetBlogPostsByCategoryGroupedByDay(this ObjectProvider repository, int itemCount, int categoryId)
        {
            return repository.GetEntriesByCategory(itemCount, categoryId, true /*activeOnly*/).GroupByDayUsingDateCreated();
        }

        public static IEnumerable<EntryDay> GetBlogPostsForHomePage(this ObjectProvider repository, int itemCount, PostConfig postConfig)
        {
            return repository.GetEntries(itemCount, PostType.BlogPost, postConfig, false /*includeCategories*/).GroupByDayUsingDateCreated();
        }

        public static IEnumerable<EntryDay> GroupByDayUsingDateCreated(this IEnumerable<Entry> entries)
        {
            var groupedEntries = 
                    from entry in entries
                    group entry by entry.DateCreated.Date
                    into entriesGroupedByDay
                        select entriesGroupedByDay;
            foreach(var group in groupedEntries)
            {
                yield return new EntryDay(group.Key, group.ToList());
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Data
{
    /// <summary>
    /// Provides constants for the common SQL messages as 
    /// listed in master.dbo.sysmessages.
    /// </summary>
    public enum SqlErrorMessage
    {
        /// <summary>
        /// Specified SQL server not found:
        /// </summary>
        SpecifiedSqlServerNotFound = 6,

        /// <summary>
        /// Sql Server does not exist or access denied.
        /// </summary>
        /// <remarks>
        /// Did not find this error in sysmessages, but did get it via 
        /// exception logging.
        /// </remarks>
        SqlServerDoesNotExistOrAccessDenied = 17,

        /// <summary>
        /// Permission is denied on an object.
        /// </summary>
        PermissionDeniedInOnObject = 229,

        /// <summary>
        /// Permission is denied on column.
        /// </summary>
        PermissionDeniedInOnColumn = 230,

        /// <summary>
        /// Permission is denied in the database.
        /// </summary>
        PermissionDeniedInDatabase = 262,

        /// <summary>
        /// Could not find the stored procedure.
        /// </summary>
        CouldNotFindStoredProcedure = 2812,

        /// <summary>
        /// User does not have permission to perform this operation on procedure.
        /// </summary>
        PermissionDeniedOnProcedure = 3704,

        /// <summary>
        /// Cannot open database requested in login '%.*ls'. Login fails.
        /// </summary>
        LoginFailsCannotOpenDatabase = 4060,

        /// <summary>
        /// Login failed for user '%ls'. Reason: Not defined as a valid user 
        /// of a trusted SQL Server connection.
        /// </summary>
        LoginFailedInvalidUserOfTrustedConnection = 18450,

        /// <summary>
        /// Login failed for user '%ls'. Reason: Not associated with a 
        /// trusted SQL Server connection.
        /// </summary>
        LoginFailedNotAssociatedWithTrustedConnection = 18452,

        /// <summary>
        /// Login failed for user '%ls'.
        /// </summary>
        LoginFailed = 18456,

        /// <summary>
        /// Login failed for user '%ls'. Reason: User name contains a 
        /// mapping character or is longer than 30 characters.
        /// </summary>
        LoginFailedUserNameInvalid = 18457,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using log4net;
using Microsoft.ApplicationBlocks.Data;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Data
{
    public partial class StoredProcedures
    {
        private readonly static ILog Log = new Log();
        
        public StoredProcedures(string connectionString)
        {
            ConnectionString = connectionString;
        }

        public StoredProcedures(SqlTransaction transaction)
        {
            _transaction = transaction;
        }

        private readonly SqlTransaction _transaction;

        private IDataReader GetReader(string sql)
        {
            return ExecuteQueryAndLogError((sqlStatement, sqlParams) =>
                SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, sqlStatement), sql, null);

        }

        private IDataReader GetReader(string sql, SqlParameter[] parameters)
        {
            return ExecuteQueryAndLogError((sqlStatement, sqlParams) => 
                SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, sqlStatement, sqlParams), sql, parameters);
        }

        private int NonQueryInt(string sql, SqlParameter[] parameters)
        {
            var transaction = _transaction;
            return ExecuteQueryAndLogError((sqlStatement, sqlParams) => 
            {
                if(transaction != null)
                {
                    return SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, sqlStatement, sqlParams);
                }
                return SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, sqlStatement, sqlParams);
            }, sql, parameters);
        }

        private static TResult ExecuteQueryAndLogError<TResult>(Func<string, SqlParameter[], TResult> query, string sql, SqlParameter[] parameters)
        {
            try
            {
                return query(sql, parameters);
            }
            catch(Exception)
            {
                LogSqlStatement(sql, parameters);
                throw; // Let the caller determine how to handle the exception.
            }
        }

        private static void LogSqlStatement(string sql, IEnumerable<SqlParameter> parameters)
        {
            string sqlStatement = sql;
            if(parameters != null)
            {
                sqlStatement += " ";
                foreach(var parameter in parameters)
                {
                    sqlStatement += parameter.ParameterName + "=" + parameter.Value + ", ";
                }
            }
            Log.Error("Error executing SQL: " + sqlStatement);
        }

        private bool NonQueryBool(string sql, SqlParameter[] p)
        {
            return NonQueryInt(sql, p) > 0;
        }

        /// <summary>
        /// Gets or sets the connection string.
        /// </summary>
        /// <value></value>
        protected string ConnectionString {
            get; 
            set;
        }

        /// <summary>
        /// Returns a Data Reader pointing to the entry specified by the entry name.
        /// Only returns entries for the current blog (Config.CurrentBlog).
        /// </summary>
        public virtual IDataReader GetEntryReader(int blogId, string entryName, bool activeOnly, bool includeCategories)
        {
            int? blogIdentifier = (blogId == NullValue.NullInt32 ? null : (int?)blogId);
            return GetSingleEntry(null, entryName, activeOnly, blogIdentifier, includeCategories);
        }

        /// <summary>
        /// Returns a Data Reader pointing to the entry specified by the entry id. 
        /// Only returns entries for the current blog (Config.CurrentBlog).
        /// </summary>
        public virtual IDataReader GetEntryReader(int blogId, int id, bool activeOnly, bool includeCategories)
        {
            int? blogIdentifier = (blogId == NullValue.NullInt32 ? null : (int?)blogId);
            return GetSingleEntry(id, null, activeOnly, blogIdentifier, includeCategories);
        }

        /// <summary>
        /// Returns a Data Reader pointing to the active entry specified by the entry id no matter 
        /// which blog it belongs to.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="includeCategories"></param>
        /// <returns></returns>
        public virtual IDataReader GetEntryReader(int id, bool includeCategories)
        {
            return GetSingleEntry(id, null, true, null, includeCategories);
        }

        /// <summary>
        /// Returns a list of all the blogs within the specified range.
        /// </summary>
        /// <param name="host">The hostname for this blog.</param>
        /// <param name="pageIndex">Page index.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="flags">Flags for type of retrieval.</param>
        /// <returns></returns>
        public virtual IDataReader GetPagedBlogs(string host, int pageIndex, int pageSize, ConfigurationFlags flags)
        {
            try
            {
                return GetPageableBlogs(pageIndex, pageSize, host, (int)flags);
            }
            catch(SqlException)
            {
                SqlParameter[] p = {
                                       DataHelper.MakeInParam("@PageIndex", pageIndex),
                                       DataHelper.MakeInParam("@PageSize", pageSize),
                                       DataHelper.MakeInParam("@SortDesc", 0),
                                   };
                return GetReader("subtext_GetPageableBlogs", p);
            }
        }
    }
}ï»¿#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System.Collections.Generic;
using System.Data;

namespace Subtext.Framework.Data
{
    public partial class DatabaseObjectProvider
    {
        public override IDictionary<string, int> GetTopTags(int itemCount)
        {
            using (IDataReader reader = _procedures.GetTopTags(itemCount, BlogId))
            {
                IDictionary<string, int> tags = DataHelper.ReadTags(reader);
                return tags;
            }
        }

    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Data
{
    /// <summary>
    /// Common Subtext object transformations
    /// </summary>
    public static class Transformer
    {
        /// <summary>
        /// Converts a LinkCategoryCollection into a single LinkCategory with its own LinkCollection.
        /// </summary>
        public static LinkCategory BuildLinks(string title, CategoryType catType, Blog blog, UrlHelper urlHelper)
        {
            ICollection<LinkCategory> links = ObjectProvider.Instance().GetCategories(catType, true /* activeOnly */);
            return MergeLinkCategoriesIntoSingleLinkCategory(title, catType, links, urlHelper, blog);
        }

        /// <summary>
        /// Converts a LinkCategoryCollection into a single LinkCategory with its own LinkCollection.
        /// </summary>
        public static LinkCategory MergeLinkCategoriesIntoSingleLinkCategory(string title, CategoryType catType,
                                                                             IEnumerable<LinkCategory> links,
                                                                             UrlHelper urlHelper, Blog blog)
        {
            if(!links.IsNullOrEmpty())
            {
                var mergedLinkCategory = new LinkCategory {Title = title};

                var merged = from linkCategory in links
                            select GetLinkFromLinkCategory(linkCategory, catType, urlHelper, blog);
                mergedLinkCategory.Links.AddRange(merged);
                return mergedLinkCategory;
            }

            return null;
        }

        private static Link GetLinkFromLinkCategory(LinkCategory linkCategory, CategoryType catType, UrlHelper urlHelper, Blog blog)
        {
            var link = new Link {Title = linkCategory.Title};

            switch(catType)
            {
                case CategoryType.StoryCollection:
                    link.Url = urlHelper.CategoryUrl(linkCategory).ToFullyQualifiedUrl(blog).ToString();
                    break;

                case CategoryType.PostCollection:
                    link.Url = urlHelper.CategoryUrl(linkCategory).ToFullyQualifiedUrl(blog).ToString();
                    link.Rss = urlHelper.CategoryRssUrl(linkCategory);
                    break;

                case CategoryType.ImageCollection:
                    link.Url = urlHelper.GalleryUrl(linkCategory.Id).ToFullyQualifiedUrl(blog).ToString();
                    break;
            }
            link.NewWindow = false;
            return link;
        }

        /// <summary>
        /// Will convert ArchiveCountCollection method from Archives.GetPostsByMonthArchive()
        /// into a <see cref="LinkCategory"/>. LinkCategory is a common item to databind to a web control.
        /// </summary>
        public static LinkCategory BuildMonthLinks(string title, UrlHelper urlHelper, Blog blog)
        {
            ICollection<ArchiveCount> archiveCounts = ObjectProvider.Instance().GetPostCountsByMonth();
            return MergeArchiveCountsIntoLinkCategory(title, archiveCounts, urlHelper, blog);
        }

        public static LinkCategory MergeArchiveCountsIntoLinkCategory(string title,
                                                                      IEnumerable<ArchiveCount> archiveCounts,
                                                                      UrlHelper urlHelper, Blog blog)
        {
            var linkCategory = new LinkCategory {Title = title};
            foreach(ArchiveCount archiveCount in archiveCounts)
            {
                var link = new Link
                {
                    NewWindow = false,
                    IsActive = true,
                    Title = archiveCount.Date.ToString("y") + " (" +
                            archiveCount.Count.ToString(CultureInfo.InvariantCulture) + ")",
                    Url = urlHelper.MonthUrl(archiveCount.Date)
                };

                linkCategory.Links.Add(link);
            }
            return linkCategory;
        }

        /// <summary>
        /// Will convert ArchiveCountCollection method from Archives.GetPostsByCategoryArchive()
        /// into a <see cref="LinkCategory"/>. LinkCategory is a common item to databind to a web control.
        /// </summary>
        public static LinkCategory BuildCategoriesArchiveLinks(string title, UrlHelper urlHelper)
        {
            ICollection<ArchiveCount> acc = Archives.GetPostCountByCategory();

            var category = new LinkCategory {Title = title};
            foreach(ArchiveCount ac in acc)
            {
                var link = new Link
                {
                    IsActive = true,
                    NewWindow = false,
                    Title = string.Format("{0} ({1})", ac.Title, ac.Count.ToString(CultureInfo.InvariantCulture)),
                    Url = urlHelper.CategoryUrl(new Category {Id = ac.Id, Title = ac.Title})
                };
                //Ugh, I hate how categories work in Subtext. So intertwined with links.

                category.Links.Add(link);
            }
            return category;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework
{
    public enum DateFilter
    {
        None = 0,
        LastWeek = 1,
        LastMonth = 2,
        LastYear = 3,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using Subtext.Framework.Properties;

namespace Subtext.Framework
{
    /// <summary>
    /// Class used for helping with date times.
    /// </summary>
    public static class DateTimeHelper
    {
        /// <summary>
        /// Tries to parse the date given in an unknown format. Returns 
        /// NullValue.NullDateTime if it cannot.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns></returns>
        public static DateTime ParseUnknownFormatUtc(string dateTime)
        {
            DateTime dt = NullValue.NullDateTime;
            try
            {
                return DateTime.Parse(dateTime, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            }
            catch(FormatException)
            {
            }

            string[] formats = {"r", "s", "u", "yyyyMMddTHHmmss"};

            foreach(string dateFormat in formats)
            {
                try
                {
                    return DateTime.ParseExact(dateTime, dateFormat, CultureInfo.InvariantCulture,
                                               DateTimeStyles.AdjustToUniversal);
                }
                catch(FormatException)
                {
                }
            }
            return dt;
        }

        /// <summary>
        /// Returns a <see cref="DateTime"/> instance parsed from the url.
        /// </summary>
        /// <param name="url">URL.</param>
        /// <returns></returns>
        public static DateTime DateFromUrl(string url)
        {
            string date = Path.GetFileNameWithoutExtension(url);
            var en = new CultureInfo("en-US");
            switch(date.Length)
            {
                case 8:
                    return DateTime.ParseExact(date, "MMddyyyy", en);
                case 6:
                    return DateTime.ParseExact(date, "MMyyyy", en);
                default:
                    throw new InvalidOperationException(Resources.InvalidOperation_InvalidDateFormat);
            }
        }
    }
}using System.Collections.Generic;

namespace Subtext.Framework
{
    public static class DictionaryExtensions
    {
        public static TValue ItemOrNull<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key)
        {
            TValue value;
            if(!dictionary.TryGetValue(key, out value))
            {
                return default(TValue);
            }
            return value;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework
{
    public static class Enclosures
    {
        public static int Create(Enclosure enclosure)
        {
            if(enclosure == null)
            {
                throw new ArgumentNullException("enclosure");
            }

            if(!enclosure.IsValid)
            {
                throw new ArgumentException(enclosure.ValidationMessage);
            }

            enclosure.Id = ObjectProvider.Instance().Create(enclosure);

            return enclosure.Id;
        }

        public static bool Update(Enclosure enclosure)
        {
            if(enclosure == null)
            {
                throw new ArgumentNullException("enclosure");
            }

            if(!enclosure.IsValid)
            {
                throw new ArgumentException(enclosure.ValidationMessage);
            }

            return ObjectProvider.Instance().Update(enclosure);
        }

        public static bool Delete(int enclosureId)
        {
            return ObjectProvider.Instance().DeleteEnclosure(enclosureId);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;

namespace Subtext.Framework
{
    /// <summary>
    /// Static class used to get entries (blog posts, comments, etc...) 
    /// from the data store.
    /// </summary>
    public static class Entries
    {
        public static void RebuildAllTags(this ObjectProvider repository)
        {
            foreach(var day in repository.GetBlogPostsForHomePage(0, PostConfig.None))
            {
                foreach(var entry in day)
                {
                    repository.SetEntryTagList(entry.Id, entry.Body.ParseTags());
                }
            }
        }

        /// <summary>
        /// Gets the main syndicated entries.
        /// </summary>
        public static ICollection<Entry> GetMainSyndicationEntries(this ObjectProvider repository, int itemCount)
        {
            return repository.GetEntries(itemCount, PostType.BlogPost, PostConfig.IncludeInMainSyndication | PostConfig.IsActive, true /* includeCategories */);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Base exception class for blog configuration errors.
    /// </summary>
    [Serializable]
    public abstract class BaseBlogConfigurationException : Exception
    {
        /// <summary>
        /// Creates a new <see cref="BaseBlogConfigurationException"/> instance.
        /// </summary>
        protected BaseBlogConfigurationException()
        {
        }

        /// <summary>
        /// Creates a new <see cref="BaseBlogConfigurationException"/> instance.
        /// </summary>
        /// <param name="innerException">Inner exception.</param>
        protected BaseBlogConfigurationException(Exception innerException) : base(null, innerException)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Base exception class for comment errors.
    /// </summary>
    [Serializable]
    public abstract class BaseCommentException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        protected BaseCommentException()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        protected BaseCommentException(string message) : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        protected BaseCommentException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when trying to add a blog that 
    /// duplicates another blog in both host and application.
    /// </summary>
    [Serializable]
    public class BlogDuplicationException : BaseBlogConfigurationException
    {
        readonly int _blogId = NullValue.NullInt32;

        readonly Blog _duplicateBlog;

        /// <summary>
        /// Creates a new <see cref="BlogDuplicationException"/> instance.
        /// </summary>
        /// <param name="duplicate">Duplicate.</param>
        public BlogDuplicationException(Blog duplicate) : this(duplicate, NullValue.NullInt32)
        {
        }

        /// <summary>
        /// Creates a new <see cref="BlogDuplicationException"/> instance.
        /// </summary>
        /// <param name="duplicate">Duplicate.</param>
        /// <param name="blogId">Blog id of the blog we were updating.  If this is .</param>
        public BlogDuplicationException(Blog duplicate, int blogId)
        {
            _duplicateBlog = duplicate;
            _blogId = blogId;
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                if(_blogId == NullValue.NullInt32)
                {
                    return string.Format("Oooh. A blog with the same host '{0}' and subfolder '{1}' already exists.", _duplicateBlog.Host, _duplicateBlog.Subfolder);
                }
                return string.Format("Sorry, but changing this blog to use that host '{0}' and subfolder '{1}' would conflict with another blog.", _duplicateBlog.Host, _duplicateBlog.Subfolder);
            }
        }

        /// <summary>
        /// Gets the duplicate blog.
        /// </summary>
        /// <value></value>
        public Blog DuplicateBlog
        {
            get { return _duplicateBlog; }
        }

        /// <summary>
        /// Id of the blog being updated that caused this exception.  This 
        /// would be populated if updating a blog to have the same host and 
        /// subfolder as another blog.  Otherwise this is equal to NullValue.NullInt32.
        /// </summary>
        /// <value></value>
        public int BlogId
        {
            get { return _blogId; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when creating or updating a blog that would cause 
    /// another blog to be hidden.  This should be a rare occurrence, but 
    /// entirely possible with multiple blogs.
    /// </summary>
    /// <remarks>
    /// <p>This exception occurs when adding a blog with the same hostname as another blog, 
    /// but the original blog does not have an subfolder name defined.</p>  
    /// <p>For example, if there exists a blog with the host "www.example.com" with no 
    /// subfolder defined, and the admin adds another blog with the host "www.example.com" 
    /// and subfolder as "MyBlog", this creates a multiple blog situation in the example.com 
    /// domain.  In that situation, each example.com blog MUST have an subfolder name defined. 
    /// The URL to the example.com with no subfolder becomes the aggregate blog.
    /// </p>
    /// </remarks>
    [Serializable]
    public class BlogHiddenException : BaseBlogConfigurationException
    {
        readonly int _blogId;
        readonly Blog _hiddenBlog;

        /// <summary>
        /// Creates a new <see cref="BlogHiddenException"/> instance.
        /// </summary>
        /// <param name="hidden">Hidden.</param>
        /// <param name="blogId"></param>
        public BlogHiddenException(Blog hidden, int blogId)
        {
            _hiddenBlog = hidden;
            _blogId = blogId;
        }

        /// <summary>
        /// Creates a new <see cref="BlogHiddenException"/> instance.
        /// </summary>
        /// <param name="hidden">Hidden.</param>
        public BlogHiddenException(Blog hidden) : this(hidden, NullValue.NullInt32)
        {
        }

        /// <summary>
        /// Gets the hidden blog.
        /// </summary>
        /// <value></value>
        public Blog HiddenBlog
        {
            get { return _hiddenBlog; }
        }

        /// <summary>
        /// Gets the blog id.
        /// </summary>
        /// <value></value>
        public int BlogId
        {
            get { return _blogId; }
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                //TODO: We need to move the message out of the exception class.

                string message = _blogId == NullValue.NullInt32 ? "<p>Creating/Activating this blog " : "<p>Sorry, but by changing this blog to use that host combination ";

                message += "would cause the blog entitled &#8220;" + _hiddenBlog.Title + "&#8221; to be hidden. "
                           + "by causing more than one blog to have the host &#8220;" + _hiddenBlog.Host +
                           "&#8221;.</p><p>"
                           + "When two or more blogs have the same host, they both need to have an subfolder defined. "
                           +
                           "The previously mentioned blog does not have a subfolder defined.  Please update it before ";

                if(_blogId == NullValue.NullInt32)
                {
                    message += "creating/activating this blog.</p>";
                }
                else
                {
                    message += "making this change.</p>";
                }
                return message;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when a blog Import fails. This could be caused by 
    /// a BlogML failure, or any other means of importing data into a 
    /// subText blog. NOTE: this exception may need refactored/renamed 
    /// so it can be used for both import & export failures.
    /// </summary>
    [Serializable]
    public class BlogImportException : Exception
    {
        readonly string _importMessage;

        /// <summary>
        /// Creates a new <see cref="BlogImportException"/> instance.
        /// </summary>
        /// <param name="importFailureReason">This is our best guess as to why the import failed
        /// and we threw the error. i.e.- Could not find the BlogML file, The BlogML file is not 
        /// valid, etc...</param>
        public BlogImportException(string importFailureReason)
        {
            _importMessage = importFailureReason;
        }

        /// <summary>
        /// Creates a new <see cref="BlogImportException"/> instance.
        /// </summary>
        /// <param name="importFailureReason">This is our best guess as to why the import failed
        /// and we threw the error. i.e.- Could not find the BlogML file, The BlogML file is not 
        /// valid, etc...</param>
        /// <param name="innerException"></param>
        public BlogImportException(string importFailureReason, Exception innerException) : base(null, innerException)
        {
            _importMessage = importFailureReason;
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                return string.Format(
                    CultureInfo.InvariantCulture,
                    "There was an error trying to import data into this blog. The issue is most likely due to the following: {0}",
                    ImportMessage);
            }
        }

        public string ImportMessage
        {
            get { return _importMessage; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when attempting to visit a blog that is no longer active.
    /// </summary>
    [Serializable]
    public class BlogInactiveException : BaseBlogConfigurationException
    {
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when creating a new blog, or changing an existing 
    /// blog, without a Subfolder value specified, when another blog 
    /// with the same Host name exists.
    /// </summary>
    /// <remarks>
    /// An example of this case is where a system has a blog with the host 
    /// "example.com" and the subfolder name "MyBlog".  Attempting to create 
    /// a new blog with the host name "example.com" and an empty subfolder 
    /// name will result in this exception being thrown.
    /// </remarks>
    [Serializable]
    public class BlogRequiresSubfolderException : BaseBlogConfigurationException
    {
        readonly string _host;

        /// <summary>
        /// Creates a new <see cref="BlogRequiresSubfolderException"/> instance.
        /// </summary>
        public BlogRequiresSubfolderException(string hostName, int blogsWithSameHostCount, int blogId)
        {
            _host = hostName;
            BlogsWithSameHostCount = blogsWithSameHostCount;
            BlogId = blogId;
        }

        /// <summary>
        /// Creates a new <see cref="BlogRequiresSubfolderException"/> instance.
        /// </summary>
        public BlogRequiresSubfolderException(string hostName, int blogsWithSameHostCount)
            : this(hostName, blogsWithSameHostCount, NullValue.NullInt32)
        {
        }

        /// <summary>
        /// Gets the blogs with same host count.
        /// </summary>
        /// <value></value>
        public int BlogsWithSameHostCount { get; private set; }

        /// <summary>
        /// Gets the blog id.
        /// </summary>
        /// <value></value>
        public int BlogId { get; private set; }

        /// <summary>
        /// Gets a message that describes the current exception.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                string blogCountClause = Resources.IsAnotherBlog;
                if(BlogsWithSameHostCount >= 1)
                {
                    blogCountClause = String.Format(CultureInfo.InvariantCulture, Resources.BlogCountClause,
                                                    BlogsWithSameHostCount);
                }

                return String.Format(CultureInfo.InvariantCulture,
                                     Resources.BlogRequiresSubfolder_ThereAreBlogsWithSameHostName, blogCountClause,
                                     _host);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when a duplicate comment occurs, but duplicates are not allowed.
    /// </summary>
    [Serializable]
    public class CommentDuplicateException : BaseCommentException
    {
        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get { return "Sorry, but this comment is a duplicate of another comment.  Duplicate comments are not allowed."; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Properties;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when comments are posted too frequently.
    /// </summary>
    public class CommentFrequencyException : BaseCommentException
    {
        public CommentFrequencyException(int commentDelayInMinutes)
        {
            CommentDelayInMinutes = commentDelayInMinutes;
        }

        public int CommentDelayInMinutes
        {
            get; 
            private set;
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                string minutesText = CommentDelayInMinutes > 1 ? Resources.Minutes_Plural : Resources.Minutes_Singular;
                string message = string.Format(Resources.CommentFrequencyException_Message, CommentDelayInMinutes + " " + minutesText);
                return message;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when a comment is identified as comment spam.
    /// </summary>
    /// <summary>
    /// Exception thrown when DESCRIPTION
    /// </summary>
    /// <remarks>
    /// Contains a custom property, thus it Implements ISerializable 
    /// and the special serialization constructor.
    /// </remarks>
    [Serializable]
    public sealed class CommentSpamException : BaseCommentException
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        public CommentSpamException()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public CommentSpamException(string message) : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        /// <param name="innerException">The inner exception.</param>
        public CommentSpamException(Exception innerException) : base(null, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommentSpamException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        public CommentSpamException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Subtext.Framework.Exceptions
{
    [Serializable]
    public class DeprecatedPhysicalPathsException : Exception
    {
        readonly string _message;

        public DeprecatedPhysicalPathsException(ReadOnlyCollection<string> physicalPaths)
        {
            InvalidPhysicalPaths = physicalPaths;
            _message = "In order to complete the upgrade, please delete the following directories/files." +
                      Environment.NewLine;
            foreach(string path in physicalPaths)
            {
                _message += " " + path + Environment.NewLine;
            }
        }

        public DeprecatedPhysicalPathsException(IEnumerable<string> physicalPaths)
            : this(new ReadOnlyCollection<string>(physicalPaths.ToList()))
        {
        }

        public override string Message
        {
            get { return _message; }
        }

        public ReadOnlyCollection<string> InvalidPhysicalPaths { get; private set; }
    }
}using System;

namespace Subtext.Framework.Exceptions
{
    [Serializable]
    public class DuplicateEntryException : Exception
    {
        public DuplicateEntryException(string message) : this(message, null)
        {
        }

        public DuplicateEntryException(string message, Exception inner) : base(message, inner)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when the HostInfo table (or other backing store 
    /// depending on the data provider) does not exist.
    /// </summary>
    [Serializable]
    public class HostDataDoesNotExistException : Exception
    {
        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get { return "The HostInfo table does not exist."; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Exceptions
{
    /// <summary>
    /// Exception thrown when creating an application
    /// </summary>
    [Serializable]
    public class InvalidSubfolderNameException : BaseBlogConfigurationException
    {
        readonly string _subfolder;

        /// <summary>
        /// Creates a new <see cref="InvalidSubfolderNameException"/> instance.
        /// </summary>
        /// <param name="subfolder">Subfolder.</param>
        public InvalidSubfolderNameException(string subfolder)
        {
            _subfolder = subfolder;
        }

        /// <summary>
        /// Gets the message.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                return "Sorry, but the subfolder name &#8220;" + _subfolder +
                       "&#8221; you&#8217;ve chosen is not allowed.";
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework
{
    [Serializable]
    public class IllegalPostCharactersException : Exception
    {
        public IllegalPostCharactersException(String s) : base(s)
        {
        }

        public IllegalPostCharactersException(String s, Exception inner) : base(s, inner)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Globalization;
using System.Text.RegularExpressions;
using Subtext.Framework.Web;

namespace Subtext.Framework.Format
{
    /// <summary>
    /// Default Implemenation of UrlFormats
    /// </summary>
    public class UrlFormats
    {
        /// <summary>
        /// Parses out the subfolder of the blog from the requested URL.  It 
        /// simply searches for the first "folder" after the host and 
        /// Request.ApplicationPath.
        /// </summary>
        /// <remarks>
        /// <p>
        /// For example, if a blog is hosted at the virtual directory http://localhost/Subtext.Web/ and 
        /// request is made for http://localhost/Subtext.Web/, the subfolder name is "" (empty string). 
        /// Howver, a request for http://localhost/Subtext.Web/MyBlog/ would return "MyBlog" as the 
        /// subfolder.
        /// </p>
        /// <p>
        /// Likewise, if a blog is hosted at http://localhost/, a request for http://localhost/MyBlog/ 
        /// would return "MyBlog" as the subfolder.
        /// </p>
        /// </remarks>
        /// <param name="rawUrl">The raw url.</param>
        /// <param name="applicationPath">The virtual application name as found in the Request.ApplicationName property.</param>
        /// <returns></returns>
        public static string GetBlogSubfolderFromRequest(string rawUrl, string applicationPath)
        {
            if(rawUrl == null)
            {
                throw new ArgumentNullException("rawUrl");
            }

            if(applicationPath == null)
            {
                throw new ArgumentNullException("applicationPath");
            }

            Debug.Assert(applicationPath.StartsWith("/"), "ApplicationPaths always start with a slash");

            if(!rawUrl.StartsWith(applicationPath, StringComparison.OrdinalIgnoreCase))
            {
                return string.Empty;
            }
            int appPathLength = applicationPath.Length;
            int startIndex = appPathLength; 
            if(appPathLength > 1)
            {
                startIndex++;
            } 
            if(startIndex > rawUrl.Length)
            {
                return string.Empty;
            }
            int endIndex = rawUrl.IndexOf('/', startIndex);
            if(endIndex < 0)
            {
                string path = rawUrl.Substring(startIndex);
                // Don't want to return default.aspx etc.
                return path.Contains(".") ? string.Empty : path;
            }
            return rawUrl.Substring(startIndex, endIndex - startIndex);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Security;

namespace Subtext.Framework
{
    /// <summary>
    /// Represents the system, and its settings, that hosts the blogs within this Subtext installation.
    /// </summary>
    public sealed class HostInfo
    {
        private static HostInfo _instance;

        /// <summary>
        /// Returns an instance of <see cref="HostInfo"/> used to 
        /// describe this installation of Subtext.
        /// </summary>
        /// <returns></returns>
        public static HostInfo Instance
        {
            get
            {
                // no lock singleton.
                HostInfo instance = _instance;
                if(instance == null)
                {
                    instance = LoadHost(true);
                    // the next line might overwrite a HostInfo created by another thread,
                    // but if it does, it'll only happen once and it's not so bad. I'll measure it to be sure. 
                    // -phil Jan 18, 2009
                    _instance = instance;
                }
                return _instance;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the HostInfo table exists.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if host info table exists; otherwise, <c>false</c>.
        /// </value>
        public static bool HostInfoTableExists
        {
            get
            {
                try
                {
                    LoadHost(false);
                    return true;
                }
                catch(HostDataDoesNotExistException)
                {
                    return false;
                }
            }
        }

        /// <summary>
        /// Gets or sets the name of the host user.
        /// </summary>
        /// <value></value>
        public string HostUserName { get; set; }

        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the host password.
        /// </summary>
        /// <value></value>
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the salt.
        /// </summary>
        /// <value></value>
        public string Salt { get; set; }

        /// <summary>
        /// Gets or sets the date this record was created. 
        /// This is essentially the date that Subtext was 
        /// installed.
        /// </summary>
        /// <value></value>
        public DateTime DateCreated { get; set; }

        public bool BlogAggregationEnabled { get; set; }

        public Blog AggregateBlog { get; set; }

        /// <summary>
        /// Loads the host from the Object Provider. This is provided for 
        /// those cases when we really need to hit the data strore. Calling this
        /// method will also reload the HostInfo.Instance from the data store.
        /// </summary>
        /// <param name="suppressException">If true, won't throw an exception.</param>
        /// <returns></returns>
        public static HostInfo LoadHost(bool suppressException)
        {
            try
            {
                _instance = ObjectProvider.Instance().LoadHostInfo(new HostInfo());
                if(_instance != null)
                {
                    _instance.BlogAggregationEnabled =
                        String.Equals(ConfigurationManager.AppSettings["AggregateEnabled"], "true",
                                      StringComparison.OrdinalIgnoreCase);
                    if(_instance.BlogAggregationEnabled)
                    {
                        InitAggregateBlog(_instance);
                    }
                }
                return _instance;
            }
            catch(SqlException e)
            {
                // LoadHostInfo now executes the stored proc subtext_GetHost, instead of checking the table subtext_Host 
                if(e.Message.IndexOf("Invalid object name 'subtext_Host'") >= 0 ||
                   e.Message.IndexOf("Could not find stored procedure 'subtext_GetHost'") >= 0)
                {
                    if(suppressException)
                    {
                        return null;
                    }
                    throw new HostDataDoesNotExistException();
                }
                throw;
            }
        }

        /// <summary>
        /// Updates the host in the persistent store.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <returns></returns>
        public static bool UpdateHost(HostInfo host)
        {
            if(ObjectProvider.Instance().UpdateHost(host))
            {
                _instance = host;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Creates the host in the persistent store.
        /// </summary>
        /// <returns></returns>
        public static bool CreateHost(string hostUserName, string hostPassword, string email)
        {
            if(Instance != null)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_HostRecordAlreadyExists);
            }

            var host = new HostInfo {HostUserName = hostUserName, Email = email};

            SetHostPassword(host, hostPassword);
            _instance = host;
            return UpdateHost(host);
        }

        public static void SetHostPassword(HostInfo host, string newPassword)
        {
            host.Salt = SecurityHelper.CreateRandomSalt();
            if(Config.Settings.UseHashedPasswords)
            {
                string hashedPassword = SecurityHelper.HashPassword(newPassword, host.Salt);
                host.Password = hashedPassword;
            }
            else
            {
                host.Password = newPassword;
            }
        }

        private static void InitAggregateBlog(HostInfo hostInfo)
        {
            string aggregateHost = ConfigurationManager.AppSettings["AggregateUrl"];
            if(aggregateHost == null)
            {
                return;
            }

            // validate host.
            var regex = new Regex(@"^(https?://)?(?<host>.+?)(/.*)?$", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Match match = regex.Match(aggregateHost);

            if(match.Success)
            {
                aggregateHost = match.Groups["host"].Value;
            }

            var blog = new Blog(true /*isAggregateBlog*/)
            {
                Title = ConfigurationManager.AppSettings["AggregateTitle"],
                Skin = SkinConfig.DefaultSkin,
                Host = aggregateHost,
                Subfolder = string.Empty,
                IsActive = true
            };
            //TODO: blog.MobileSkin = ...

            if(hostInfo != null)
            {
                blog.UserName = hostInfo.HostUserName;
                hostInfo.AggregateBlog = blog;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Util;
using Image=Subtext.Framework.Components.Image;
using Subtext.Framework.Configuration;

namespace Subtext.Framework
{
    public static class Images
    {
        /// <summary>
        /// Saves the image.
        /// </summary>
        /// <param name="buffer">The buffer.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <returns></returns>
        public static bool SaveImage(byte[] buffer, string fileName)
        {
            if(buffer == null)
            {
                throw new ArgumentNullException("buffer");
            }

            if(string.IsNullOrEmpty(fileName))
            {
                throw new ArgumentNullException("fileName");
            }

            if(FileHelper.IsValidImageFilePath(fileName))
            {
                FileHelper.EnsureDirectory(Path.GetDirectoryName(fileName));
                FileHelper.WriteBytesToFile(fileName, buffer);
                return true;
            }
            return false;
        }

        /// <summary>
        /// Saves two images. A normal image for the web site and then a thumbnail.
        /// </summary>
        /// <param name="image">Original image to process.</param>
        public static void MakeAlbumImages(Image image)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }

            // Indexed GIFs can cause issues.
            using(System.Drawing.Image originalImage = GraphicsHelper.FromFilePathAsUnindexedImage(image.OriginalFilePath))
            {
                var originalSize = new Size(originalImage.Width, originalImage.Height);

                /// TODO: make new sizes configurations. 
                // New Display Size
                Size displaySize = originalSize.ScaleToFit(Config.Settings.GalleryImageMaxWidth, Config.Settings.GalleryImageMaxHeight);
                image.Height = displaySize.Height;
                image.Width = displaySize.Width;
                using(System.Drawing.Image displayImage = originalImage.GetResizedImage(displaySize))
                {
                    displayImage.Save(image.ResizedFilePath, ImageFormat.Jpeg);
                }

                // smaller thumbnail
                Size thumbSize = originalSize.ScaleToFit(Config.Settings.GalleryImageThumbnailWidth, Config.Settings.GalleryImageThumbnailHeight);
                using(System.Drawing.Image thumbnailImage = originalImage.GetResizedImage(thumbSize))
                {
                    thumbnailImage.Save(image.ThumbNailFilePath, ImageFormat.Jpeg);
                }
            }
        }

        public static ImageCollection GetImagesByCategoryId(int categoryId, bool activeOnly)
        {
            return ObjectProvider.Instance().GetImagesByCategoryId(categoryId, activeOnly);
        }

        /// <summary>
        /// Inserts the image.
        /// </summary>
        /// <param name="image">The image.</param>
        /// <param name="buffer">The buffer.</param>
        /// <returns></returns>
        public static int InsertImage(Image image, byte[] buffer)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }

            if(!File.Exists(image.OriginalFilePath) && SaveImage(buffer, image.OriginalFilePath))
            {
                MakeAlbumImages(image);
                return ObjectProvider.Instance().InsertImage(image);
            }
            return NullValue.NullInt32;
        }

        /// <summary>
        /// Updates the image.
        /// </summary>
        /// <param name="image">The image.</param>
        public static void UpdateImage(Image image)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }
            ObjectProvider.Instance().UpdateImage(image);
        }

        // added
        public static void Update(Image image, byte[] buffer)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }

            if(buffer == null)
            {
                throw new ArgumentNullException("buffer");
            }

            if(SaveImage(buffer, image.OriginalFilePath))
            {
                MakeAlbumImages(image);
                UpdateImage(image);
            }
        }

        public static void DeleteImage(Image image)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }

            ObjectProvider.Instance().DeleteImage(image.ImageID);
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using BlogML;
using BlogML.Xml;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;

namespace Subtext.ImportExport
{
    public class BlogImportRepository : IBlogImportRepository
    {
        public BlogImportRepository(ISubtextContext context, ICommentService commentService, IEntryPublisher entryPublisher, IBlogMLImportMapper mapper)
        {
            SubtextContext = context;
            CommentService = commentService;
            EntryPublisher = entryPublisher;
            Mapper = mapper;
        }

        protected ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        public ISubtextContext SubtextContext { get; private set; }

        public IEntryPublisher EntryPublisher { get; private set; }

        public ICommentService CommentService { get; private set; }

        public IBlogMLImportMapper Mapper { get; private set; }

        public Blog Blog
        {
            get { return SubtextContext.Blog; }
        }

        protected UrlHelper Url
        {
            get { return SubtextContext.UrlHelper; }
        }

        public void CreateCategories(BlogMLBlog blog)
        {
            foreach(BlogMLCategory bmlCategory in blog.Categories)
            {
                LinkCategory category = Mapper.ConvertCategory(bmlCategory);
                Repository.CreateLinkCategory(category);
            }
        }

        public string CreateBlogPost(BlogMLBlog blog, BlogMLPost post)
        {
            Entry newEntry = Mapper.ConvertBlogPost(post, blog, Blog);
            newEntry.BlogId = Blog.Id;
            newEntry.Blog = Blog;
            var publisher = EntryPublisher as EntryPublisher;
            if(publisher != null)
            {
                var transform = publisher.Transformation as CompositeTextTransformation;
                if(transform != null)
                {
                    transform.Clear();
                }
            }

            return EntryPublisher.Publish(newEntry).ToString(CultureInfo.InvariantCulture);

        }

        public void CreateComment(BlogMLComment comment, string newPostId)
        {
            var newComment = Mapper.ConvertComment(comment, newPostId);
            CommentService.Create(newComment, false /*runfilters*/);
        }

        public void CreateTrackback(BlogMLTrackback trackback, string newPostId)
        {
            var pingTrack = Mapper.ConvertTrackback(trackback, newPostId);
            CommentService.Create(pingTrack, false /*runfilters*/);
        }

        public void SetExtendedProperties(BlogMLBlog.ExtendedPropertiesCollection extendedProperties)
        {
            if(extendedProperties != null && extendedProperties.Count > 0)
            {
                foreach(var extProp in extendedProperties)
                {
                    if(BlogMLBlogExtendedProperties.CommentModeration.Equals(extProp.Key))
                    {
                        bool modEnabled;

                        if(bool.TryParse(extProp.Value, out modEnabled))
                        {
                            Blog.ModerationEnabled = modEnabled;
                        }
                    }
                    else if(BlogMLBlogExtendedProperties.EnableSendingTrackbacks.Equals(extProp.Key))
                    {
                        bool tracksEnabled;

                        if(bool.TryParse(extProp.Value, out tracksEnabled))
                        {
                            Blog.TrackbacksEnabled = tracksEnabled;
                        }
                    }
                }

                Repository.UpdateBlog(Blog);
            }
        }

        public IDisposable SetupBlogForImport()
        {
            return new BlogImportSetup(Blog, Repository);
        }

        /// <summary>
        /// The physical path to the attachment directory.
        /// </summary>
        /// <remarks>
        /// The attachment is passed in to give the blog engine 
        /// the opportunity to use attachment specific directories 
        /// (ex. based on mime type) should it choose.
        /// </remarks>
        public string GetAttachmentDirectoryPath()
        {
            return Url.ImageDirectoryPath(Blog);
        }

        /// <summary>
        /// The url to the attachment directory
        /// </summary>
        /// <remarks>
        /// The attachment is passed in to give the blog engine 
        /// the opportunity to use attachment specific directories 
        /// (ex. based on mime type) should it choose.
        /// </remarks>
        public string GetAttachmentDirectoryUrl()
        {
            return Url.ImageDirectoryUrl(Blog);
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Web;
using BlogML;
using BlogML.Xml;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Framework.Properties;

namespace Subtext.ImportExport
{
    public class BlogImportService : IBlogImportService
    {
        private readonly static ILog Log = new Log();

        public BlogImportService(IBlogImportRepository repository)
        {
            Repository = repository;
        }

        public IBlogImportRepository Repository { get; private set; }

        public void ImportBlog(Stream stream)
        {
            var importedBlog = BlogMLSerializer.Deserialize(stream);
            ImportBlog(importedBlog);
        }

        public void ImportBlog(BlogMLBlog blog)
        {
            using(Repository.SetupBlogForImport())
            {
                Import(blog);
            }
        }

        public void Import(BlogMLBlog blog)
        {
            Repository.SetExtendedProperties(blog.ExtendedProperties);

            Repository.CreateCategories(blog);

            foreach(BlogMLPost bmlPost in blog.Posts)
            {
                ImportBlogPost(blog, bmlPost);
            }

        }

        private void ImportBlogPost(BlogMLBlog blog, BlogMLPost bmlPost)
        {
            if(bmlPost.Attachments.Count > 0)
            {
                //Updates the post content with new attachment urls.
                bmlPost.Content = BlogMLContent.Create(CreateFilesFromAttachments(bmlPost), ContentTypes.Base64);
            }

            string newEntryId = Repository.CreateBlogPost(blog, bmlPost);

            foreach(BlogMLComment bmlComment in bmlPost.Comments)
            {
                try
                {
                    Repository.CreateComment(bmlComment, newEntryId);
                }
                catch(Exception e)
                {
                    LogError(Resources.Import_ErrorWhileImportingComment, e);
                }
            }

            foreach(BlogMLTrackback bmlPingTrack in bmlPost.Trackbacks)
            {
                try
                {
                    Repository.CreateTrackback(bmlPingTrack, newEntryId);
                }
                catch(Exception e)
                {
                    LogError(Resources.Import_ErrorWhileImportingComment, e);
                }
            }
        }

        /// <summary>
        /// Lets the provider decide how to log errors.
        /// </summary>
        public void LogError(string message, Exception exception)
        {
            Log.Error(message, exception);
        }

        public string CreateFilesFromAttachments(BlogMLPost post)
        {
            string postContent = post.Content.UncodedText;
            foreach(BlogMLAttachment bmlAttachment in post.Attachments)
            {
                string assetDirPath = Repository.GetAttachmentDirectoryPath();
                string assetDirUrl = Repository.GetAttachmentDirectoryUrl();

                if(!String.IsNullOrEmpty(assetDirPath) && !String.IsNullOrEmpty(assetDirUrl))
                {
                    if(!Directory.Exists(assetDirPath))
                    {
                        Directory.CreateDirectory(assetDirPath);
                    }
                    postContent = CreateFileFromAttachment(bmlAttachment, assetDirPath, assetDirUrl, postContent);
                }
            }
            return postContent;
        }

        public static string CreateFileFromAttachment(BlogMLAttachment attachment, string attachmentDirectoryPath,
                                                       string attachmentDirectoryUrl, string postContent)
        {
            string fileName = Path.GetFileName(attachment.Url);
            string attachmentPath = HttpUtility.UrlDecode(Path.Combine(attachmentDirectoryPath, fileName));
            string newAttachmentUrl = attachmentDirectoryUrl + fileName;

            postContent = BlogMLWriterBase.SgmlUtil.CleanAttachmentUrls(
                postContent,
                attachment.Url,
                newAttachmentUrl);

            if(attachment.Embedded)
            {
                if(!File.Exists(attachmentPath))
                {
                    using(var fStream = new FileStream(attachmentPath, FileMode.CreateNew))
                    {
                        using(var writer = new BinaryWriter(fStream))
                        {
                            writer.Write(attachment.Data);
                        }
                    }
                }
            }
            return postContent;
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;
using Subtext.Framework.Providers;

namespace Subtext.ImportExport
{
    /// <summary>
    /// Sets up a blog for import. The Dispose method reverts blog back to its original state.
    /// </summary>
    public class BlogImportSetup : IDisposable
    {
        Action _revertAction;
        public BlogImportSetup(Blog blog, ObjectProvider repository)
        {
            Blog = blog;
            Repository = repository;
            SetupBlogForImport();
        }

        public Blog Blog
        {
            get; private set;
        }

        public ObjectProvider Repository
        {
            get; private set;
        }

        void SetupBlogForImport()
        {
            if(!Blog.DuplicateCommentsEnabled)
            {
                Blog.DuplicateCommentsEnabled = true;
                Repository.UpdateBlog(Blog);
                _revertAction = () =>
                    {
                        Blog.DuplicateCommentsEnabled = false;
                        Repository.UpdateBlog(Blog);
                    };
            }
        }

        public void Dispose()
        {
            Action revertAction = _revertAction;
            if(revertAction != null)
            {
                revertAction();
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using BlogML;
using BlogML.Xml;
using log4net;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Logging;
using Subtext.Framework.Properties;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.ImportExport
{
    public class BlogMLExportMapper : IBlogMLExportMapper
    {
        private readonly static ILog Log = new Log();

        public BlogMLExportMapper(ISubtextContext subtextContext)
        {
            SubtextContext = subtextContext;
            Blog = subtextContext.Blog;
            Url = subtextContext.UrlHelper;
        }

        protected ISubtextContext SubtextContext { get; private set; }
        protected Blog Blog { get; private set; }
        protected UrlHelper Url { get; private set; }

        public BlogMLBlog ConvertBlog(Blog blog)
        {
            var bmlBlog = new BlogMLBlog
            {
                Title = blog.Title,
                SubTitle = blog.SubTitle,
                RootUrl = Url.BlogUrl().ToFullyQualifiedUrl(blog).ToString(),
                DateCreated = blog.TimeZone.Now
            };

            PopulateAuthors(blog, bmlBlog);
            PopulateExtendedProperties(blog, bmlBlog);

            return bmlBlog;
        }

        public IEnumerable<BlogMLCategory> ConvertCategories(IEnumerable<LinkCategory> categories)
        {
            var blogCategories = from category in categories
                                 select new BlogMLCategory
                                 {
                                    Title = category.Title,
                                    Approved = category.IsActive,
                                    Description = category.Description,
                                    ID = category.Id.ToString(CultureInfo.InvariantCulture),
                                 };
            return blogCategories;
        }

        public BlogMLPost ConvertEntry(EntryStatsView entry, bool embedAttachments)
        {
            string postUrl = null;
            var entryVirtualPath = Url.EntryUrl(entry);
            if(entryVirtualPath != null)
            {
                postUrl = entryVirtualPath.ToFullyQualifiedUrl(Blog).ToString();
            }
            var post = new BlogMLPost
            {
                Title = entry.Title,
                PostUrl = postUrl,
                PostType = (entry.PostType == PostType.Story) ? BlogPostTypes.Article : BlogPostTypes.Normal,
                Approved = entry.IsActive,
                Content = BlogMLContent.Create(entry.Body ?? string.Empty, ContentTypes.Base64),
                HasExcerpt = entry.HasDescription,
                Excerpt = BlogMLContent.Create(entry.Description ?? string.Empty, ContentTypes.Base64),
                DateCreated = Blog.TimeZone.ToUtc(entry.DateCreated),
                DateModified = Blog.TimeZone.ToUtc(entry.IsActive ? entry.DateSyndicated : entry.DateModified),
                Views = (uint)entry.WebCount
            };

            if(entry.HasEntryName)
            {
                post.PostName = entry.EntryName;
            }
            
            // When we support multiple authors, this will have to change
            post.Authors.Add(Blog.Id.ToString(CultureInfo.InvariantCulture));
            post.Attachments.AddRange(GetPostAttachments(entry.Body, embedAttachments).ToArray());
            var comments = (from c in entry.Comments where c.FeedbackType == FeedbackType.Comment select ConvertComment(c)).ToList();
            if(comments.Count > 0)
            {
                post.Comments.AddRange(comments);
            }
            var trackbacks = (from c in entry.Comments where c.FeedbackType == FeedbackType.PingTrack select ConvertTrackback(c)).ToList();
            if(trackbacks.Count > 0)
            {
                post.Trackbacks.AddRange(trackbacks);
            }
            return post;
        }

        public IEnumerable<BlogMLAttachment> GetPostAttachments(string body, bool embedAttachments)
        {
            IEnumerable<string> attachmentUrls = body.GetAttributeValues("img", "src");

            foreach(string attachmentUrl in attachmentUrls)
            {
                string blogHostUrl = ("http://" + Blog.Host + "/").ToLowerInvariant();
                string attachmentUrlLowerCase = attachmentUrl.ToLowerInvariant();
                // If the URL for the attachment is local then we'll want to build a new BlogMLAttachment 
                // add add it to the list of attachments for this post.
                if(!attachmentUrlLowerCase.StartsWith("http") || attachmentUrlLowerCase.StartsWith(blogHostUrl))
                {
                    yield return GetAttachment(blogHostUrl, attachmentUrl, attachmentUrlLowerCase, embedAttachments);
                }
            }
        }

        private BlogMLAttachment GetAttachment(string blogHostUrl, string attachmentUrl, string attachmentUrlLowerCase, bool embed)
        {
            string attachVirtualPath = attachmentUrlLowerCase.Replace(blogHostUrl, "/");

            var attachment = new BlogMLAttachment
            {
                Embedded = embed,
                MimeType = attachmentUrl.GetMimeType(),
                Path = attachVirtualPath,
                Url = attachmentUrl
            };

            if(embed)
            {
                try
                {
                    SetAttachmentData(attachVirtualPath, attachment);
                }
                catch(FileNotFoundException e)
                {
                    Log.Error("The attachment we wish to embed was not found", e);
                    attachment.Embedded = false;
                }
            }
            return attachment;
        }

        private void SetAttachmentData(string attachVirtualPath, BlogMLAttachment attachment)
        {
            string attachPhysicalPath = HttpUtility.UrlDecode(SubtextContext.HttpContext.Server.MapPath(attachVirtualPath));

            using(FileStream attachStream = File.OpenRead(attachPhysicalPath))
            {
                using(var reader = new BinaryReader(attachStream))
                {
                    reader.BaseStream.Position = 0;
                    byte[] data = reader.ReadBytes((int)attachStream.Length);
                    attachment.Data = data;
                }
            }
        }

        private static void PopulateExtendedProperties(Blog blog, BlogMLBlog bmlBlog)
        {
            var bmlExtProp = new Pair<string, string>
            {
                Key = BlogMLBlogExtendedProperties.CommentModeration,
                Value = blog.ModerationEnabled
                            ? CommentModerationTypes.Enabled.ToString()
                            : CommentModerationTypes.Disabled.ToString()
            };
            bmlBlog.ExtendedProperties.Add(bmlExtProp);

            /* TODO: The blog.TrackbasksEnabled determines if Subtext will ACCEPT and SEND trackbacks.
             * Perhaps we should separate the two out?
             * For now, we'll assume that if a BlogML blog allows sending, it will also
             * allow receiving track/pingbacks.
             */
            bmlExtProp.Key = BlogMLBlogExtendedProperties.EnableSendingTrackbacks;
            bmlExtProp.Value = blog.TrackbacksEnabled
                                   ? SendTrackbackTypes.Yes.ToString()
                                   : SendTrackbackTypes.No.ToString();
        }

        private void PopulateAuthors(Blog blog, BlogMLBlog bmlBlog)
        {
            var bmlAuthor = new BlogMLAuthor
            {
                ID = blog.Id.ToString(CultureInfo.InvariantCulture),
                Title = blog.Author,
                Approved = true,
                Email = blog.Email,
                DateCreated = Blog.TimeZone.ToUtc(blog.LastUpdated),
                DateModified = Blog.TimeZone.ToUtc(blog.LastUpdated)
            };
            bmlBlog.Authors.Add(bmlAuthor);
        }


        public BlogMLComment ConvertComment(FeedbackItem feedbackItem)
        {
            if(feedbackItem == null)
            {
                throw new ArgumentNullException("feedbackItem");
            }
            if(feedbackItem.FeedbackType != FeedbackType.Comment)
            {
                throw new ArgumentException(String.Format(Resources.ArgumentException_CommentTypeMismatch, feedbackItem.FeedbackType, FeedbackType.Comment), "feedbackItem");
            }

            return new BlogMLComment
            {
                ID = feedbackItem.Id.ToString(CultureInfo.InvariantCulture),
                Title = feedbackItem.Title,
                UserUrl = feedbackItem.SourceUrl != null ? feedbackItem.SourceUrl.ToString() : null,
                UserEMail = feedbackItem.Email,
                UserName = feedbackItem.Author,
                Approved = feedbackItem.Approved,
                Content = BlogMLContent.Create(feedbackItem.Body ?? string.Empty, ContentTypes.Base64),
                DateCreated = Blog.TimeZone.ToUtc(feedbackItem.DateCreated),
                DateModified = Blog.TimeZone.ToUtc(feedbackItem.DateModified)
            };
        }

        public BlogMLTrackback ConvertTrackback(FeedbackItem trackback)
        {
            if(trackback == null)
            {
                throw new ArgumentNullException("trackback");
            }
            if(trackback.FeedbackType != FeedbackType.PingTrack)
            {
                throw new ArgumentException(String.Format(Resources.ArgumentException_CommentTypeMismatch, trackback.FeedbackType, FeedbackType.PingTrack), "trackback");
            }

            return new BlogMLTrackback
            {
                ID = trackback.Id.ToString(CultureInfo.InvariantCulture),
                Url = trackback.SourceUrl != null ? trackback.SourceUrl.ToString() : null,
                Title = trackback.Title,
                Approved = trackback.Approved,
                DateCreated = Blog.TimeZone.ToUtc(trackback.DateCreated),
                DateModified = Blog.TimeZone.ToUtc(trackback.DateModified)
            };
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using BlogML;
using BlogML.Xml;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Text;
using Subtext.Framework;

namespace Subtext.ImportExport
{
    public class BlogMLImportMapper : IBlogMLImportMapper
    {
        private const int MaxCategoryTitleLength = 150;
        private const int AuthorTitleMaxLength = 50;
        private const int BlogPostTitleMaxLength = 255;

        public Entry ConvertBlogPost(BlogMLPost post, BlogMLBlog blogMLBlog, Blog blog)
        {
            DateTime dateModified = blog != null ? blog.TimeZone.FromUtc(post.DateModified) : post.DateModified;
            DateTime dateCreated = blog != null ? blog.TimeZone.FromUtc(post.DateCreated) : post.DateCreated;

            var newEntry = new Entry((post.PostType == BlogPostTypes.Article) ? PostType.Story : PostType.BlogPost)
            {
                Title = GetTitleFromPost(post).Left(BlogPostTitleMaxLength),
                DateCreated = dateCreated,
                DateModified = dateModified,
                DateSyndicated = post.Approved ? dateModified : DateTime.MaxValue,
                Body = post.Content.UncodedText,
                IsActive = post.Approved,
                DisplayOnHomePage = post.Approved,
                IncludeInMainSyndication = post.Approved,
                IsAggregated = post.Approved,
                AllowComments = true,
                Description = post.HasExcerpt ? post.Excerpt.UncodedText: null
            };

            if(!string.IsNullOrEmpty(post.PostName))
            {
                newEntry.EntryName = post.PostName;
            }
            else
            {
                SetEntryNameForBlogspotImport(post, newEntry);
            }

            SetEntryAuthor(post, newEntry, blogMLBlog);

            SetEntryCategories(post, newEntry, blogMLBlog);
            return newEntry;
        }

        private void SetEntryCategories(BlogMLPost post, Entry newEntry, BlogMLBlog blog)
        {
            if(post.Categories.Count > 0)
            {
                foreach(BlogMLCategoryReference categoryRef in post.Categories)
                {
                    string categoryTitle = GetCategoryTitleById(categoryRef.Ref, blog.Categories);
                    if(categoryTitle != null)
                    {
                        newEntry.Categories.Add(categoryTitle);
                    }
                }
            }
        }

        private IDictionary<string, string> _categoryIdToTitleMap;
        private string GetCategoryTitleById(string categoryId, IEnumerable<BlogMLCategory> categories)
        {
            if(_categoryIdToTitleMap == null)
            {
                _categoryIdToTitleMap = new Dictionary<string, string>();
                foreach(var category in categories)
                {
                    _categoryIdToTitleMap.Add(category.ID, category.Title);
                }
            }

            string title;
            _categoryIdToTitleMap.TryGetValue(categoryId, out title);
            return title;
        }

        private static void SetEntryAuthor(BlogMLPost post, Entry newEntry, BlogMLBlog blog)
        {
            if(post.Authors.Count > 0)
            {
                foreach(BlogMLAuthor author in blog.Authors)
                {
                    if(author.ID != post.Authors[0].Ref)
                    {
                        continue;
                    }
                    newEntry.Author = author.Title.Left(AuthorTitleMaxLength);
                    newEntry.Email = author.Email;
                    break;
                }
            }
        }

        private static string GetTitleFromPost(BlogMLPost blogPost)
        {
            if(!String.IsNullOrEmpty(blogPost.Title))
            {
                return blogPost.Title;
            }
            if(!String.IsNullOrEmpty(blogPost.PostName))
            {
                return blogPost.PostName;
            }

            return "Post #" + blogPost.ID;
        }

        private static void SetEntryNameForBlogspotImport(BlogMLPost post, Entry newEntry)
        {
            if(!String.IsNullOrEmpty(post.PostUrl) &&
               post.PostUrl.Contains("blogspot.com/", StringComparison.OrdinalIgnoreCase))
            {
                Uri postUrl = post.PostUrl.ParseUri();
                string fileName = postUrl.Segments.Last();
                newEntry.EntryName = Path.GetFileNameWithoutExtension(fileName);
                if(String.IsNullOrEmpty(post.Title) && String.IsNullOrEmpty(post.PostName))
                {
                    newEntry.Title = newEntry.EntryName.Replace("-", " ").Replace("+", " ").Replace("_", " ");
                }
            }
        }

        public LinkCategory ConvertCategory(BlogMLCategory category)
        {
            return new LinkCategory
            {
                Title = category.Title.Left(MaxCategoryTitleLength),
                Description = category.Description,
                IsActive = category.Approved,
                CategoryType = CategoryType.PostCollection
            };
        }

        public FeedbackItem ConvertComment(BlogMLComment comment, string parentPostId)
        {
            var feedback = new FeedbackItem(FeedbackType.Comment)
            {
                EntryId = int.Parse(parentPostId, CultureInfo.InvariantCulture),
                Title = comment.Title ?? string.Empty,
                DateCreated = comment.DateCreated,
                DateModified = comment.DateModified,
                Body = comment.Content.UncodedText ?? string.Empty,
                Approved = comment.Approved,
                Author = comment.UserName ?? string.Empty,
                Email = comment.UserEMail,
                SourceUrl = !String.IsNullOrEmpty(comment.UserUrl) ? ConvertUri(comment.UserUrl) : null
            };
            if(!feedback.Approved)
            {
                // Have to assume it needs moderation since that's what it most likely means in other blog systems;
                feedback.Status = FeedbackStatusFlag.NeedsModeration;
            }
            return feedback;
        }

        public FeedbackItem ConvertTrackback(BlogMLTrackback trackback, string parentPostId)
        {
            string author = null;
            Uri sourceUri = ConvertUri(trackback.Url);
            if(sourceUri != null)
            {
                author = sourceUri.Host;
            }
            return new FeedbackItem(FeedbackType.PingTrack)
            {
                EntryId = int.Parse(parentPostId, CultureInfo.InvariantCulture),
                Title = trackback.Title,
                SourceUrl = sourceUri,
                Approved = trackback.Approved,
                DateCreated = trackback.DateCreated,
                DateModified = trackback.DateModified,
                Author = author ?? string.Empty,
                Body = string.Empty
            };
        }

        private static Uri ConvertUri(string uriText)
        {
            Uri uri;
            if(!Uri.TryCreate(uriText, UriKind.Absolute, out uri))
            {
                return null;
            }
            return uri;
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using BlogML.Xml;
using Subtext.Extensibility.Collections;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.ImportExport
{
    public class BlogMLSource : IBlogMLSource
    {
        public BlogMLSource(ISubtextContext context, IBlogMLExportMapper blogMLConverter)
        {
            SubtextContext = context;
            BlogMLConverter = blogMLConverter;
        }

        protected ISubtextContext SubtextContext
        {
            get; 
            private set;
        }

        protected IBlogMLExportMapper BlogMLConverter
        {
            get; 
            private set;
        }

        public BlogMLBlog GetBlog()
        {
            BlogMLBlog blog = BlogMLConverter.ConvertBlog(SubtextContext.Blog);
            blog.Categories.AddRange(Categories);
            return blog;
        }

        protected IList<BlogMLCategory> Categories
        { 
            get
            {
                if(_categories == null)
                {
                    
                    var categories = SubtextContext.Repository.GetCategories(CategoryType.PostCollection, false /*activeOnly*/);
                    if(categories != null && categories.Count > 0)
                    {
                        _categories = BlogMLConverter.ConvertCategories(categories).ToList();
                    }
                }
                _categories = _categories ?? new List<BlogMLCategory>();
                return _categories;
            }
        }

        IList<BlogMLCategory> _categories;
                
        protected Dictionary<string, BlogMLCategory> CategoryByTitleLookup
        {
            get
            {
                // We need to build this lookup dictionary because an Entry only contains a collection
                // of Category titles and not the actual categories. :(
                if(_categoryByTitleLookup == null)
                {
                    _categoryByTitleLookup = new Dictionary<string, BlogMLCategory>();
                    foreach(var category in Categories)
                    {
                        _categoryByTitleLookup.Add(category.Title, category);
                    }
                }
                return _categoryByTitleLookup;
            }
        }

        Dictionary<string, BlogMLCategory> _categoryByTitleLookup;

        public IEnumerable<BlogMLPost> GetBlogPosts(bool embedAttachments)
        {
            const int pageSize = 100;
            var collectionBook = new CollectionBook<EntryStatsView>((pageIndex, sizeOfPage) => SubtextContext.Repository.GetEntriesForExport(pageIndex, sizeOfPage), pageSize);
            foreach(var entry in collectionBook.AsFlattenedEnumerable())
            {
                var post = BlogMLConverter.ConvertEntry(entry, embedAttachments);
                foreach(var categoryTitle in entry.Categories)
                {
                    post.Categories.Add(CategoryByTitleLookup[categoryTitle].ID.ToString(CultureInfo.InvariantCulture));
                }
                yield return post;
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Xml;
using BlogML;
using BlogML.Xml;

namespace Subtext.ImportExport
{
    public class BlogMLWriter : BlogMLWriterBase, IBlogMLWriter
    {
        public BlogMLWriter(IBlogMLSource source, bool embedAttachments)
        {
            EmbedAttachments = embedAttachments;
            Source = source;
        }

        public IBlogMLSource Source
        {
            get;
            private set;
        }

        public bool EmbedAttachments
        {
            get;
            set;
        }

        protected override void InternalWriteBlog()
        {
            var blog = Source.GetBlog();
            WriteStartBlog(blog.Title, ContentTypes.Text, blog.SubTitle, ContentTypes.Text, blog.RootUrl, blog.DateCreated);

            WriteAuthors(blog.Authors);
            WriteExtendedProperties(blog.ExtendedProperties);
            WriteCategories(blog.Categories);
            WritePosts(Source.GetBlogPosts(EmbedAttachments));

            WriteEndElement();
            Writer.Flush();
        }

        void IBlogMLWriter.Write(XmlWriter writer)
        {
            Write(writer);
        }

        private void WriteAuthors(IEnumerable<BlogMLAuthor> authors)
        {
            WriteStartAuthors();
            foreach(BlogMLAuthor bmlAuthor in authors)
            {
                WriteAuthor(
                    bmlAuthor.ID,
                    bmlAuthor.Title,
                    bmlAuthor.Email,
                    bmlAuthor.DateCreated,
                    bmlAuthor.DateModified,
                    bmlAuthor.Approved);
            }
            WriteEndElement(); // </authors>
        }

        private void WriteExtendedProperties(ICollection<Pair<string, string>> extendedProperties)
        {
            if(extendedProperties.Count > 0)
            {
                WriteStartExtendedProperties();
                foreach(var extProp in extendedProperties)
                {
                    WriteExtendedProperty(extProp.Key, extProp.Value);
                }
                WriteEndElement();
            }
        }

        private void WriteCategories(IEnumerable<BlogMLCategory> categories)
        {
            WriteStartCategories();
            foreach(BlogMLCategory category in categories)
            {
                WriteCategory(category.ID, category.Title, ContentTypes.Text, category.DateCreated, category.DateModified, category.Approved, category.Description, category.ParentRef);
            }
            WriteEndElement();
        }

        private void WritePosts(IEnumerable<BlogMLPost> posts)
        {
            WriteStartPosts();
            foreach(var post in posts)
            {
                WriteStartBlogMLPost(post);
                WritePostCategories(post.Categories);
                WritePostComments(post.Comments);
                WritePostTrackbacks(post.Trackbacks);
                WritePostAttachments(post.Attachments);
                WritePostAuthors(post.Authors);

                WriteEndElement(); // </post>
                Writer.Flush();
            }
            WriteEndElement();
        }

        protected void WriteStartBlogMLPost(BlogMLPost post)
        {
            WriteStartElement("post");
            WriteNodeAttributes(post.ID, post.DateCreated, post.DateModified, post.Approved);
            WriteAttributeString("post-url", post.PostUrl);
            WriteAttributeStringRequired("type", "normal");
            WriteAttributeStringRequired("hasexcerpt", post.HasExcerpt.ToString().ToLowerInvariant());
            WriteAttributeStringRequired("views", post.Views.ToString());
            WriteContent("title", BlogMLContent.Create(post.Title, ContentTypes.Text));
            WriteBlogMLContent("content", post.Content);
            if(!String.IsNullOrEmpty(post.PostName))
            {
                WriteContent("post-name", BlogMLContent.Create(post.PostName, ContentTypes.Text));
            }
            if(post.HasExcerpt)
            {
                WriteBlogMLContent("excerpt", post.Excerpt);
            }
        }

        protected void WriteBlogMLContent(string elementName, BlogMLContent content)
        {
            WriteContent(elementName, content);
        }

        protected void WritePostCategories(BlogMLPost.CategoryReferenceCollection categoryRefs)
        {
            if(categoryRefs.Count > 0)
            {
                WriteStartCategories();
                foreach(BlogMLCategoryReference categoryRef in categoryRefs)
                {
                    WriteCategoryReference(categoryRef.Ref);
                }
                WriteEndElement();
            }
        }

        private void WritePostComments(BlogMLPost.CommentCollection comments)
        {
            if(comments.Count > 0)
            {
                WriteStartComments();
                foreach(BlogMLComment comment in comments)
                {
                    string userName = string.IsNullOrEmpty(comment.UserName) ? "Anonymous" : comment.UserName;
                    WriteComment(comment.ID, BlogMLContent.Create(comment.Title, ContentTypes.Text), comment.DateCreated, comment.DateModified,
                                 comment.Approved, userName, comment.UserEMail, comment.UserUrl,
                                 comment.Content);
                }
                WriteEndElement();
            }
        }

        private void WritePostTrackbacks(BlogMLPost.TrackbackCollection trackbacks)
        {
            if(trackbacks.Count > 0)
            {
                WriteStartTrackbacks();
                foreach(BlogMLTrackback trackback in trackbacks)
                {
                    if(!String.IsNullOrEmpty(trackback.Url))
                    {
                        WriteTrackback(trackback.ID, trackback.Title, ContentTypes.Text, trackback.DateCreated, trackback.DateModified, trackback.Approved, trackback.Url);
                    }
                }
                WriteEndElement();
            }
        }

        private void WritePostAttachments(BlogMLPost.AttachmentCollection attachments)
        {
            if(attachments.Count > 0)
            {
                WriteStartAttachments();
                foreach(BlogMLAttachment attachment in attachments)
                {
                    if(attachment.Embedded)
                    {
                        WriteAttachment(attachment.Url, attachment.Data.Length, attachment.MimeType, attachment.Path, attachment.Embedded, attachment.Data);
                    }
                    else
                    {
                        WriteAttachment(attachment.Path, attachment.MimeType, attachment.Url);
                    }
                }
                WriteEndElement(); // End Attachments Element
                Writer.Flush();
            }
        }

        private void WritePostAuthors(BlogMLPost.AuthorReferenceCollection authorsRefs)
        {
            if(authorsRefs.Count > 0)
            {
                WriteStartAuthors();
                foreach(BlogMLAuthorReference authorRef in authorsRefs)
                {
                    WriteAuthorReference(authorRef.Ref);
                }
                WriteEndElement();
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using BlogML.Xml;

namespace Subtext.ImportExport
{
    public interface IBlogImportRepository
    {
        /// <summary>
        /// Creates categories from the blog ml.
        /// </summary>
        /// <param name="blog"></param>
        void CreateCategories(BlogMLBlog blog);

        /// <summary>
        /// Creates a blog post and returns the id.
        /// </summary>
        string CreateBlogPost(BlogMLBlog blog, BlogMLPost post);

        /// <summary>
        /// Creates a comment in the system.
        /// </summary>
        void CreateComment(BlogMLComment comment, string newPostId);

        /// <summary>
        /// Creates a trackback for the post.
        /// </summary>
        void CreateTrackback(BlogMLTrackback trackback, string newPostId);

        /// <summary>
        /// Sets the extended properties stored in the BlogML that Subtext supports
        /// </summary>
        /// <param name="extendedProperties"></param>
        void SetExtendedProperties(BlogMLBlog.ExtendedPropertiesCollection extendedProperties);

        /// <summary>
        /// The physical path to the attachment directory.
        /// </summary>
        /// <remarks>
        /// The attachment is passed in to give the blog engine 
        /// the opportunity to use attachment specific directories 
        /// (ex. based on mime type) should it choose.
        /// </remarks>
        string GetAttachmentDirectoryPath();

        /// <summary>
        /// The url to the attachment directory
        /// </summary>
        /// <remarks>
        /// The attachment is passed in to give the blog engine 
        /// the opportunity to use attachment specific directories 
        /// (ex. based on mime type) should it choose.
        /// </remarks>
        string GetAttachmentDirectoryUrl();

        /// <summary>
        /// Sets up the blog for import by allowing duplicate comments, turning off moderation, etc...
        /// </summary>
        /// <returns></returns>
        IDisposable SetupBlogForImport();
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.IO;

namespace Subtext.ImportExport
{
    public interface IBlogImportService
    {
        void ImportBlog(Stream stream);
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using BlogML.Xml;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.ImportExport
{
    public interface IBlogMLExportMapper
    {
        BlogMLBlog ConvertBlog(Blog blog);
        IEnumerable<BlogMLCategory> ConvertCategories(IEnumerable<LinkCategory> categories);
        BlogMLPost ConvertEntry(EntryStatsView entry, bool embedAttachments);
        BlogMLComment ConvertComment(FeedbackItem comment);
        BlogMLTrackback ConvertTrackback(FeedbackItem trackback);
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using BlogML.Xml;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.ImportExport
{
    public interface IBlogMLImportMapper
    {
        Entry ConvertBlogPost(BlogMLPost post, BlogMLBlog blogMLBlog, Blog blog);
        LinkCategory ConvertCategory(BlogMLCategory category);
        FeedbackItem ConvertComment(BlogMLComment comment, string parentPostId);
        FeedbackItem ConvertTrackback(BlogMLTrackback trackback, string parentPostId);
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using BlogML.Xml;
using System.Collections.Generic;

namespace Subtext.ImportExport
{
    public interface IBlogMLSource
    {
        BlogMLBlog GetBlog();
        IEnumerable<BlogMLPost> GetBlogPosts(bool embedAttachments);
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml;

namespace Subtext.ImportExport
{
    public interface IBlogMLWriter
    {
        void Write(XmlWriter writer);
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Mvc;

namespace Subtext.Infrastructure.ActionResults
{
    /// <summary>
    /// Just like a FileContentResult, but allows for setting cache parameters.
    /// </summary>
    public class CacheableFileContentResult : FileContentResult
    {
        public CacheableFileContentResult(byte[] fileContents, string contentType, DateTime lastModifed,
                                          HttpCacheability cacheability)
            : base(fileContents, contentType)
        {
            LastModified = lastModifed;
            Cacheability = cacheability;
        }

        public DateTime LastModified { get; private set; }

        public HttpCacheability Cacheability { get; private set; }

        public override void ExecuteResult(ControllerContext context)
        {
            HttpCachePolicyBase cache = context.HttpContext.Response.Cache;
            cache.SetCacheability(Cacheability);
            cache.SetLastModified(LastModified);

            base.ExecuteResult(context);
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Threading;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using Subtext.ImportExport;
using System.IO;

namespace Subtext.Infrastructure.ActionResults
{
    public class ExportActionResult : FileResult
    {
        public ExportActionResult(IBlogMLWriter blogMLWriter, string fileName) : base("text/xml")
        {
            BlogMLWriter = blogMLWriter;
            FileDownloadName = fileName;
        }

        public IBlogMLWriter BlogMLWriter
        {
            get; 
            private set;
        }

        protected override void WriteFile(HttpResponseBase response)
        {
            var writer = new XmlTextWriter(response.Output);
            BlogMLWriter.Write(writer);
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Mvc;

namespace Subtext.Infrastructure.ActionResults
{
    public class NotModifiedResult : ActionResult
    {
        public override void ExecuteResult(ControllerContext context)
        {
            HttpResponseBase response = context.HttpContext.Response;
            response.StatusCode = 304;
            response.SuppressContent = true;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;
using Ninject;
using Ninject.Modules;

namespace Subtext.Infrastructure
{
    public static class Bootstrapper
    {
        public static IServiceLocator ServiceLocator { get; set; }

        public static RequestContext RequestContext
        {
            get
            {
                if(HttpContext.Current != null && HttpContext.Current.Items != null)
                {
                    return HttpContext.Current.Items["__Subtext_RequestContext"] as RequestContext;
                }
                return null;
            }
            set
            {
                if(HttpContext.Current != null && HttpContext.Current.Items != null)
                {
                    HttpContext.Current.Items["__Subtext_RequestContext"] = value;
                }
            }
        }

        public static void InitializeKernel(params INinjectModule[] modules)
        {
            var kernel = new StandardKernel(modules);
            ServiceLocator = kernel.Get<IServiceLocator>();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Web.Caching;

namespace Subtext.Infrastructure
{
    public interface ICache : IEnumerable
    {
        object this[string key] { get; set; }
        void Insert(string key, object value);
        void Insert(string key, object value, CacheDependency dependency);

        void Insert(string key, object value, CacheDependency dependency, DateTime absoluteExpiration,
                    TimeSpan slidingExpiration);

        void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration,
                    TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback);

        void Remove(string key);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Services;

namespace Subtext.Framework.Infrastructure.Installation
{
    public interface IInstallationManager
    {
        void Install(Version currentAssemblyVersion);
        void CreateWelcomeContent(ISubtextContext context, IEntryPublisher entryPublisher, Blog blog);
        void Upgrade(Version currentAssemblyVersion);
        bool InstallationActionRequired(Version assemblyVersion, Exception unhandledException);
        void ResetInstallationStatusCache();
        InstallationState GetInstallationStatus(Version currentAssemblyVersion);
        bool IsPermissionDeniedException(Exception exception);
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Infrastructure.Installation
{
    public interface IInstaller
    {
        void Install(Version assemblyVersion);

        /// <summary>
        /// Upgrades this instance. Returns true if it was successful.
        /// </summary>
        /// <returns></returns>
        void Upgrade(Version assemblyVersion);

        /// <summary>
        /// Gets the <see cref="Version"/> of the current Subtext data store (ie. SQL Server). 
        /// This is the value stored in the database. If it does not match the actual 
        /// assembly version, we may need to run an upgrade.
        /// </summary>
        /// <returns></returns>
        Version GetCurrentInstallationVersion();

        /// <summary>
        /// Gets a value indicating whether the subtext installation needs an upgrade 
        /// to occur.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [needs upgrade]; otherwise, <c>false</c>.
        /// </value>
        bool NeedsUpgrade(Version installationVersion, Version currentAssemblyVersion);
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Infrastructure;

namespace Subtext.Framework.Infrastructure.Installation
{
    /// <summary>
    /// Class used to help make determine whether an installation is required or not.
    /// </summary>
    public class InstallationManager : IInstallationManager
    {
        public InstallationManager(IInstaller installer, ICache cache)
        {
            Installer = installer;
            Cache = cache;
        }

        protected ICache Cache { get; set; }
        protected IInstaller Installer { get; set; }

        public void Install(Version assemblyVersion)
        {
            Installer.Install(assemblyVersion);
            ResetInstallationStatusCache();
        }

        public void CreateWelcomeContent(ISubtextContext context, IEntryPublisher entryPublisher, Blog blog)
        {
            var repository = context.Repository;
            CreateWelcomeCategories(repository, blog);

            var adminUrlHelper = new AdminUrlHelper(context.UrlHelper);
            Entry article = CreateWelcomeArticle(blog, entryPublisher, adminUrlHelper);
            Entry entry = CreateWelcomeBlogPost(context, blog, entryPublisher, adminUrlHelper, article);
            CreateWelcomeComment(repository, adminUrlHelper, entry);
            
        }

        private static void CreateWelcomeComment(ObjectProvider repository, AdminUrlHelper adminUrlHelper, Entry entry)
        {
            string commentBody = ScriptHelper.UnpackEmbeddedScriptAsString("WelcomeComment.htm");
            string feedbackUrl = adminUrlHelper.FeedbackList();
            commentBody = string.Format(commentBody, feedbackUrl);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                Title = "re: Welcome to Subtext!",
                Entry = entry,
                Author = "Subtext",
                DateCreated = DateTime.Now,
                DateModified = DateTime.Now,
                Approved = true,
                Body = commentBody
            };
            repository.Create(comment);
        }

        private static Entry CreateWelcomeBlogPost(ISubtextContext context, Blog blog, IEntryPublisher entryPublisher, AdminUrlHelper adminUrlHelper, IEntryIdentity article)
        {
            string body = ScriptHelper.UnpackEmbeddedScriptAsString("WelcomePost.htm");
            string articleUrl = context.UrlHelper.EntryUrl(article);
            body = String.Format(body, articleUrl, adminUrlHelper.Home(), context.UrlHelper.HostAdminUrl("default.aspx"));

            var entry = new Entry(PostType.BlogPost)
            {
                Title = "Welcome to Subtext!",
                EntryName = "welcome-to-subtext",
                BlogId = blog.Id,
                Author = blog.Author,
                Body = body,
                DateCreated = DateTime.Now,
                DateModified = DateTime.Now,
                DateSyndicated = DateTime.Now,
                IsActive = true,
                IncludeInMainSyndication = true,
                DisplayOnHomePage = true,
                AllowComments = true
            };

            entryPublisher.Publish(entry);
            return entry;
        }

        private static Entry CreateWelcomeArticle(Blog blog, IEntryPublisher entryPublisher, AdminUrlHelper adminUrlHelper)
        {
            string body = ScriptHelper.UnpackEmbeddedScriptAsString("WelcomeArticle.htm");
            body = String.Format(body, adminUrlHelper.ArticlesList());

            var article = new Entry(PostType.Story)
            {
                EntryName = "welcome-to-subtext-article",
                Title = "Welcome to Subtext!",
                BlogId = blog.Id,
                Author = blog.Author,
                Body = body,
                DateCreated = DateTime.Now,
                DateModified = DateTime.Now,
                IsActive = true,
            };

            entryPublisher.Publish(article);
            return article;
        }

        private static void CreateWelcomeCategories(ObjectProvider repository, Blog blog)
        {
            repository.CreateLinkCategory(new LinkCategory
            {
                Title = "Programming", 
                Description = "Blog posts related to programming", 
                BlogId = blog.Id, 
                IsActive = true, 
                CategoryType = CategoryType.PostCollection,
            });
            repository.CreateLinkCategory(new LinkCategory
            {
                Title = "Personal", 
                Description = "Personal musings, random thoughts.", 
                BlogId = blog.Id, 
                IsActive = true, 
                CategoryType = CategoryType.PostCollection
            });
        }

        public void Upgrade(Version currentAssemblyVersion)
        {
            Installer.Upgrade(currentAssemblyVersion);
            ResetInstallationStatusCache();
        }

        /// <summary>
        /// Determines whether an installation action is required by 
        /// examining the specified unhandled Exception.
        /// </summary>
        /// <param name="unhandledException">Unhandled exception.</param>
        /// <param name="assemblyVersion">The version of the currently installed assembly.</param>
        /// <returns>
        /// 	<c>true</c> if an installation action is required; otherwise, <c>false</c>.
        /// </returns>
        public bool InstallationActionRequired(Version assemblyVersion, Exception unhandledException)
        {
            if(unhandledException is HostDataDoesNotExistException)
            {
                return true;
            }

            if(IsInstallationException(unhandledException))
            {
                return true;
            }

            InstallationState status = GetInstallationStatus(assemblyVersion);
            switch(status)
            {
                case InstallationState.NeedsInstallation:
                case InstallationState.NeedsUpgrade:
                {
                    return true;
                }
            }

            return false;
        }

        private static bool IsInstallationException(Exception exception)
        {
            var tableRegex = new Regex("Invalid object name '.*?'", RegexOptions.IgnoreCase | RegexOptions.Compiled);
            bool isSqlException = exception is SqlException;

            if(isSqlException && tableRegex.IsMatch(exception.Message))
            {
                return true;
            }

            var spRegex = new Regex("'Could not find stored procedure '.*?'", RegexOptions.IgnoreCase | RegexOptions.Compiled);
            if(isSqlException && spRegex.IsMatch(exception.Message))
            {
                return true;
            }

            return false;
        }

        public virtual InstallationState GetInstallationStatus(Version currentAssemblyVersion)
        {
            object cachedInstallationState = Cache["NeedsInstallation"];
            if(cachedInstallationState != null)
            {
                return (InstallationState)cachedInstallationState;
            }

            var status = GetInstallationState(currentAssemblyVersion);
            Cache.Insert("NeedsInstallation", status);
            return status;
        }

        private InstallationState GetInstallationState(Version currentAssemblyVersion)
        {
            Version installationVersion = Installer.GetCurrentInstallationVersion();
            if(installationVersion == null)
            {
                return InstallationState.NeedsInstallation;
            }

            if(Installer.NeedsUpgrade(installationVersion, currentAssemblyVersion))
            {
                return InstallationState.NeedsUpgrade;
            }

            return InstallationState.Complete;
        }

        public bool InstallationActionRequired(InstallationState currentState)
        {
            bool needsUpgrade = (currentState == InstallationState.NeedsInstallation
                                 || currentState == InstallationState.NeedsUpgrade);

            return needsUpgrade;
        }

        public void ResetInstallationStatusCache()
        {
            object cachedInstallationState = Cache["NeedsInstallation"];
            if(cachedInstallationState != null)
            {
                Cache.Remove("NeedsInstallation");
            }
        }

        /// <summary>
        /// Determines whether the specified exception is due to a permission 
        /// denied error.
        /// </summary>
        /// <param name="exception"></param>
        /// <returns></returns>
        public bool IsPermissionDeniedException(Exception exception)
        {
            var sqlexc = exception.InnerException as SqlException;
            return sqlexc != null
                   &&
                   (
                       sqlexc.Number == (int)SqlErrorMessage.PermissionDeniedInDatabase
                       || sqlexc.Number == (int)SqlErrorMessage.PermissionDeniedOnProcedure
                       || sqlexc.Number == (int)SqlErrorMessage.PermissionDeniedInOnColumn
                       || sqlexc.Number == (int)SqlErrorMessage.PermissionDeniedInOnObject
                   );
        }

    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Text.RegularExpressions;

namespace Subtext.Framework.Infrastructure.Installation
{
    internal class InstallationScriptInfo
    {
        //Have the compiled regex as static to get the full benefit of compilation
        private static readonly Regex ScriptParseRegex =
            new Regex(@"(?<ScriptName>Installation\.(?<version>\d+\.\d+\.\d+)\.sql)$",
                      RegexOptions.Compiled | RegexOptions.IgnoreCase);

        private InstallationScriptInfo(string scriptName, Version version)
        {
            Version = version;
            ScriptName = scriptName;
        }

        public string ScriptName { get; set; }

        public Version Version { get; set; }

        internal static InstallationScriptInfo Parse(string resourceName)
        {
            Match match = ScriptParseRegex.Match(resourceName);
            if(!match.Success)
            {
                return null;
            }
            var version = new Version(match.Groups["version"].Value);
            string scriptName = match.Groups["ScriptName"].Value;
            return new InstallationScriptInfo(scriptName, version);
        }
    }

}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Infrastructure.Installation
{
    /// <summary>
    /// Returns the current state of the installation.
    /// </summary>
    public enum InstallationState
    {
        /// <summary>No information available</summary>
        None = 0,
        /// <summary>Subtext is installed, but needs to be upgraded.</summary>
        NeedsUpgrade = 1,
        /// <summary>Subtext needs to be installed.</summary>
        NeedsInstallation = 3,
        /// <summary>Subtext is installed and seems to be working properly.</summary>
        Complete = 4,
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Text;
using Subtext.Scripting;

namespace Subtext.Framework.Infrastructure.Installation
{
    /// <summary>
    /// Helper class used to execute SQL Scripts.
    /// </summary>
    public static class ScriptHelper
    {
        /// <summary>
        /// Executes the script.
        /// </summary>
        /// <remarks>
        /// Use script.Execute(transaction) to do the work. We will also pull the
        /// status of our script exection from here.
        /// </remarks>
        /// <param name="scriptName">Name of the script.</param>
        /// <param name="transaction">The current transaction.</param>
        public static void ExecuteScript(string scriptName, SqlTransaction transaction)
        {
            ExecuteScript(scriptName, transaction, null);
        }

        /// <summary>
        /// Executes the script.
        /// </summary>
        /// <remarks>
        /// Use script.Execute(transaction) to do the work. We will also pull the
        /// status of our script exection from here.
        /// </remarks>
        /// <param name="scriptName">Name of the script.</param>
        /// <param name="transaction">The current transaction.</param>
        /// <param name="dbUserName">Name of the DB owner.</param>
        public static void ExecuteScript(string scriptName, SqlTransaction transaction, string dbUserName)
        {
            var scriptRunner = new SqlScriptRunner(UnpackEmbeddedScript(scriptName), Encoding.UTF8);
            if(!string.IsNullOrEmpty(dbUserName))
            {
                scriptRunner.TemplateParameters.SetValue("dbUser", dbUserName);
            }
            scriptRunner.Execute(transaction);
        }

        /// <summary>
        /// Unpacks an embedded script into a string.
        /// </summary>
        /// <param name="scriptName">The file name of the script to run.</param>
        public static string UnpackEmbeddedScriptAsString(string scriptName)
        {
            Stream stream = UnpackEmbeddedScript(scriptName);
            using(var reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }

        /// <summary>
        /// Unpacks an embedded script into a Stream.
        /// </summary>
        /// <param name="scriptName">Name of the script.</param>
        public static Stream UnpackEmbeddedScript(string scriptName)
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            return assembly.GetManifestResourceStream(typeof(ScriptHelper), string.Format("Scripts.{0}", scriptName));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Text.RegularExpressions;

namespace Subtext.Scripting
{
    /// <summary>
    /// Class for parsing connection strings.  Will add the ability to 
    /// change connection string properties and have the full string work properly.
    /// </summary>
    [Serializable]
    public class ConnectionString
    {
        private static readonly ConnectionString EmptyConnectionString = new ConnectionString();

        //readonly string _connectionFormatString = "{0}={1};{2}={3};User ID={4};Password={5};{6}";
        //readonly string _trustedConnectionFormatString = "{0}={1};{2}={3};{4}";
        string _securityType;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionString"/> class.
        /// </summary>
        private ConnectionString()
        {
        }

        private ConnectionString(string connectionString)
        {
            RawOriginal = connectionString;
            ParseServer(connectionString);
            ParseDatabase(connectionString);
            ParseUserId(connectionString);
            ParsePassword(connectionString);
            ParseSecurityType(connectionString);
        }

        /// <summary>
        /// Return an empty instance of connection string
        /// </summary>
        public static ConnectionString Empty
        {
            get { return EmptyConnectionString; }
        }

        /// <summary>
        /// Gets the server.
        /// </summary>
        /// <value>The server.</value>
        public string Server { get; set; }


        /// <summary>
        /// Gets or sets the database this connection string connects to.
        /// </summary>
        /// <value>The database.</value>
        public string Database { get; set; }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>The user id.</value>
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>The password.</value>
        public string Password { get; set; }

        /// <summary>
        /// Gets a value indicating whether [trusted connection].
        /// </summary>
        /// <value><c>true</c> if [trusted connection]; otherwise, <c>false</c>.</value>
        public bool TrustedConnection
        {
            get
            {
                return String.Equals(_securityType, "sspi", StringComparison.OrdinalIgnoreCase)
                       || String.Equals(_securityType, "true", StringComparison.OrdinalIgnoreCase);
            }

            set {
                _securityType = value ? "true" : String.Empty;
            }
        }

        public string RawOriginal { get; private set; }

        /// <summary>
        /// Parses the specified connection string.
        /// </summary>
        /// <param name="connectionString">The connection string.</param>
        /// <returns></returns>
        public static ConnectionString Parse(string connectionString)
        {
            return new ConnectionString(connectionString);
        }

        public static implicit operator string(ConnectionString connectionString)
        {
            return connectionString.ToString();
        }

        /// <summary>
        /// Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
        /// </returns>
        public override string ToString()
        {
            return RawOriginal;
            //if(TrustedConnection)
            //    return string.Format(CultureInfo.InvariantCulture, _trustedConnectionFormatString, _serverFieldName, Server, _databaseFieldName, Database, _securityTypeText);
            //else
            //    return string.Format(CultureInfo.InvariantCulture, _connectionFormatString, _serverFieldName, Server, _databaseFieldName, Database, UserId, Password, _securityTypeText);
        }

        private void ParseServer(string connectionString)
        {
            var regex = new Regex(@"(?<serverField>Data\s+Source|Server)\s*=\s*(?<server>.*?)(;|$|\s)",
                                  RegexOptions.IgnoreCase);
            Match match = regex.Match(connectionString);
            if(match.Success)
            {
                Server = match.Groups["server"].Value;
            }
        }

        private void ParseDatabase(string connectionString)
        {
            var regex = new Regex(@"(?<databaseField>Database|Initial Catalog)\s*=\s*(?<database>.*?)(;|$|\s)",
                                  RegexOptions.IgnoreCase);
            Match match = regex.Match(connectionString);
            if(match.Success)
            {
                Database = match.Groups["database"].Value;
                if(!String.IsNullOrEmpty(Database))
                {
                    return;
                }
            }

            if(String.IsNullOrEmpty(Database))
            {
                regex = new Regex(@"AttachDbFilename\s*=\s*\|DataDirectory\|\\(?<database>.*?)(;|$|\s)",
                                  RegexOptions.IgnoreCase);
                match = regex.Match(connectionString);
                if(match.Success)
                {
                    Database = match.Groups["database"].Value;
                    if(!String.IsNullOrEmpty(Database))
                    {
                        return;
                    }
                }
            }
        }

        private void ParseUserId(string connectionString)
        {
            var regex = new Regex(@"User\s+Id\s*=\s*(?<userId>.*?)(;|$|\s)", RegexOptions.IgnoreCase);
            Match match = regex.Match(connectionString);
            if(match.Success)
            {
                UserId = match.Groups["userId"].Value;
            }
        }

        private void ParsePassword(string connectionString)
        {
            var regex = new Regex(@"Password\s*=\s*(?<password>.*?)(;|$|\s)", RegexOptions.IgnoreCase);
            Match match = regex.Match(connectionString);
            if(match.Success)
            {
                Password = match.Groups["password"].Value;
            }
        }

        private void ParseSecurityType(string connectionString)
        {
            var regex =
                new Regex(
                    @"(?<securityTypeField>Integrated\s+Security|Trusted_Connection)\s*=\s*(?<securityType>.*?)(;|$|\s)",
                    RegexOptions.IgnoreCase);
            Match match = regex.Match(connectionString);
            if(match.Success)
            {
                _securityType = match.Groups["securityType"].Value;
            }
        }

        /// <summary>
        /// Implicitly converts the string to a connection string.
        /// </summary>
        /// <remarks>
        /// Got the idea from here.  
        /// http://developer810.blogspot.com/2006/02/good-way-to-create-custom-value-type.html
        /// It's not as clear to me as doing .Parse... I'll think about this one.
        /// </remarks>
        /// <param name="connectionString">The state.</param>
        /// <returns></returns>
        public static implicit operator ConnectionString(string connectionString)
        {
            return new ConnectionString(connectionString);
        }
    }
}using System;
using System.Runtime.Serialization;
using System.Security.Permissions;

namespace Subtext.Scripting.Exceptions
{
    [Serializable]
    public class SqlParseException : Exception
    {
        public SqlParseException()
        {
        }

        public SqlParseException(string message) : base(message)
        {
        }

        public SqlParseException(string message, Exception exception)
            : base(message, exception)
        {
        }

        protected SqlParseException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Runtime.Serialization;
using System.Security.Permissions;

namespace Subtext.Scripting.Exceptions
{
    /// <summary>
    /// Exception thrown when an error occurs during the execution of a script.
    /// </summary>
    /// <remarks>
    /// Contains a custom property, thus it Implements ISerializable 
    /// and the special serialization constructor.
    /// </remarks>
    [Serializable]
    public sealed class SqlScriptExecutionException : Exception, ISerializable
    {
        readonly int _returnValue;
        readonly Script _script;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptExecutionException"/> class.
        /// </summary>
        public SqlScriptExecutionException()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptExecutionException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public SqlScriptExecutionException(string message) : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptExecutionException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        public SqlScriptExecutionException(string message, Exception innerException) : base(message, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptExecutionException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="script">The script.</param>
        /// <param name="returnValue">The return value.</param>
        public SqlScriptExecutionException(string message, Script script, int returnValue) : base(message)
        {
            _script = script;
            _returnValue = returnValue;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptExecutionException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="script">The script.</param>
        /// <param name="returnValue">The return value.</param>
        /// <param name="innerException">The inner exception.</param>
        public SqlScriptExecutionException(string message, Script script, int returnValue, Exception innerException)
            : base(message, innerException)
        {
            _script = script;
            _returnValue = returnValue;
        }

        // Because this class is sealed, this constructor is private. 
        // if this class is not sealed, this constructor should be protected.
        private SqlScriptExecutionException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            _script = info.GetValue("Script", typeof(string)) as Script;
        }

        /// <summary>
        /// Gets the script.
        /// </summary>
        public Script Script
        {
            get { return _script; }
        }

        /// <summary>
        /// Gets the return value.
        /// </summary>
        /// <value>The return value.</value>
        public int ReturnValue
        {
            get { return _returnValue; }
        }

        /// <summary>
        /// Gets a message that describes the current exception.
        /// </summary>
        /// <value></value>
        public override string Message
        {
            get
            {
                string message = base.Message;
                if(Script != null)
                {
                    message += string.Format(CultureInfo.InvariantCulture, "{0}ScriptName: {1}", Environment.NewLine,
                                             _script);
                }
                message += string.Format("Return Value: {0}", ReturnValue);
                return message;
            }
        }

        #region ISerializable Members

        /// <summary>
        /// When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
        /// with information about the exception.
        /// </summary>
        /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
        /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        /// <exception 
        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("Script", _script);
            GetObjectData(info, context);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Data.SqlClient;

namespace Subtext.Scripting
{
    /// <summary>
    /// Interface implemented by a script.
    /// </summary>
    public interface IScript
    {
        int Execute(SqlTransaction transaction);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Scripting
{
    /// <summary>
    /// Template scripts contain template parameters that require user supplied values. 
    /// Defaults may be specified.  This works the same way as template parameters in 
    /// SQL Server.
    /// </summary>
    /// <remarks>
    /// For more information about template parameters, see
    /// <see href="http://haacked.com/archive/2005/07/01/7433.aspx" /> this post.
    /// </remarks>
    public interface ITemplateScript
    {
        /// <summary>
        /// Gets the template parameters embedded in the script.
        /// </summary>
        /// <returns></returns>
        TemplateParameterCollection TemplateParameters { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Scripting
{
    /// <summary>
    /// Contains information about when a template parameter value changes.
    /// </summary>
    public class ParameterValueChangedEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterValueChangedEventArgs"/> class.
        /// </summary>
        /// <param name="parameterName">Name of the parameter.</param>
        /// <param name="oldValue">The old value.</param>
        /// <param name="newValue">The new value.</param>
        public ParameterValueChangedEventArgs(string parameterName, string oldValue, string newValue)
        {
            OldValue = oldValue;
            NewValue = newValue;
            ParameterName = parameterName;
        }

        /// <summary>
        /// Gets the name of the parameter.
        /// </summary>
        /// <value>The name of the parameter.</value>
        public string ParameterName { get; private set; }

        /// <summary>
        /// Gets the old value.
        /// </summary>
        /// <value>The old value.</value>
        public string OldValue { get; private set; }

        /// <summary>
        /// Gets the new value.
        /// </summary>
        /// <value>The new value.</value>
        public string NewValue { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.ApplicationBlocks.Data;
using Subtext.Scripting.Exceptions;
using Subtext.Framework.Properties;

namespace Subtext.Scripting
{
    /// <summary>
    /// Represents a single executable script within the full SQL script.
    /// </summary>
    public class Script : IScript, ITemplateScript
    {
        TemplateParameterCollection _parameters;
        ScriptToken _scriptTokens;

        /// <summary>
        /// Creates a new <see cref="TemplateParameter"/> instance.
        /// </summary>
        /// <param name="scriptText">Script text.</param>
        public Script(string scriptText)
        {
            OriginalScriptText = scriptText;
        }

        /// <summary>
        /// Gets the script text after applying template parameter replacements. 
        /// This is the text of the script that will actually get executed.
        /// </summary>
        /// <value></value>
        public string ScriptText
        {
            get { return ApplyTemplateReplacements(); }
        }

        /// <summary>
        /// Gets the original script text.
        /// </summary>
        /// <value>The original script text.</value>
        public string OriginalScriptText { get; private set; }

        /// <summary>
        /// Executes this script.
        /// </summary>
        public int Execute(SqlTransaction transaction)
        {
            if(transaction == null)
            {
                throw new ArgumentNullException("transaction");
            }

            int returnValue = 0;
            try
            {
                returnValue = SqlHelper.ExecuteNonQuery(transaction, CommandType.Text, ScriptText);
                return returnValue;
            }
            catch(SqlException e)
            {
                throw new SqlScriptExecutionException(
                    String.Format(CultureInfo.InvariantCulture, Resources.SqlScriptExecutionError_ErrorInScript,
                                  ScriptText), this, returnValue, e);
            }
        }

        /// <summary>
        /// Gets the template parameters embedded in the script.
        /// </summary>
        /// <returns></returns>
        public TemplateParameterCollection TemplateParameters
        {
            get
            {
                if(_parameters == null)
                {
                    _parameters = new TemplateParameterCollection();

                    if(String.IsNullOrEmpty(OriginalScriptText))
                    {
                        return _parameters;
                    }

                    var regex =
                        new Regex(@"<\s*(?<name>[^()\[\]>,]*)\s*,\s*(?<type>[^>,]*)\s*,\s*(?<default>[^>,]*)\s*>",
                                  RegexOptions.Compiled);
                    MatchCollection matches = regex.Matches(OriginalScriptText);

                    _scriptTokens = new ScriptToken();

                    int lastIndex = 0;
                    foreach(Match match in matches)
                    {
                        if(match.Index > 0)
                        {
                            string textBeforeMatch = OriginalScriptText.Substring(lastIndex, match.Index - lastIndex);
                            _scriptTokens.Append(textBeforeMatch);
                        }

                        lastIndex = match.Index + match.Length;
                        TemplateParameter parameter = _parameters.Add(match);
                        _scriptTokens.Append(parameter);
                    }
                    string textAfterLastMatch = OriginalScriptText.Substring(lastIndex);
                    if(textAfterLastMatch.Length > 0)
                    {
                        _scriptTokens.Append(textAfterLastMatch);
                    }
                }
                return _parameters;
            }
        }

        /// <summary>
        /// Helper method which given a full SQL script, returns 
        /// a <see cref="ScriptCollection"/> of individual <see cref="TemplateParameter"/> 
        /// using "GO" as the delimiter.
        /// </summary>
        /// <param name="fullScriptText">Full script text.</param>
        public static ScriptCollection ParseScripts(string fullScriptText)
        {
            var scripts = new ScriptCollection(fullScriptText);
            var splitter = new ScriptSplitter(fullScriptText);

            foreach(string script in splitter)
            {
                scripts.Add(new Script(script));
            }

            return scripts;
        }

        string ApplyTemplateReplacements()
        {
            var builder = new StringBuilder();
            if(_scriptTokens == null && TemplateParameters == null)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_TemplateParametersNull);
            }
            if(_scriptTokens != null)
            {
                _scriptTokens.AggregateText(builder);
            }
            return builder.ToString();
        }

        /// <summary>
        /// Returns the text of the script.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
        /// </returns>
        public override string ToString()
        {
            if(_scriptTokens != null)
            {
                return _scriptTokens.ToString();
            }
            return Resources.ScriptHasNoTokens;
        }


        /// <summary>
        /// Implements a linked list representing the script.  This maps the structure 
        /// of a script making it trivial to replace template parameters with their 
        /// values.
        /// </summary>
        class ScriptToken
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ScriptToken"/> class.
            /// </summary>
            internal ScriptToken()
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="ScriptToken"/> class.
            /// </summary>
            /// <param name="text">The text.</param>
            private ScriptToken(string text)
            {
                Text = text;
            }

            /// <summary>
            /// Gets the text.
            /// </summary>
            /// <value>The text.</value>
            protected virtual string Text { get; set; }

            /// <summary>
            /// Gets or sets the next node.
            /// </summary>
            /// <value>The next.</value>
            protected ScriptToken Next { get; private set; }

            /// <summary>
            /// Gets the last node.
            /// </summary>
            /// <value>The last.</value>
            private ScriptToken Last
            {
                get
                {
                    ScriptToken last = this;
                    ScriptToken next = Next;

                    while(next != null)
                    {
                        last = next;
                        next = last.Next;
                    }
                    return last;
                }
            }

            /// <summary>
            /// Appends the specified text.
            /// </summary>
            /// <param name="text">The text.</param>
            internal void Append(string text)
            {
                Last.Next = new ScriptToken(text);
            }

            internal void Append(TemplateParameter parameter)
            {
                Last.Next = new TemplateParameterToken(parameter);
            }

            internal void AggregateText(StringBuilder builder)
            {
                builder.Append(Text);
                if(Next != null)
                {
                    Next.AggregateText(builder);
                }
            }

            /// <summary>
            /// Returns a <see cref="T:System.String"/> that represents the current <see cref="ScriptToken"/>.
            /// </summary>
            /// <returns>
            /// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            /// </returns>
            public override string ToString()
            {
                int length = 0;
                if(Text != null)
                {
                    length = Text.Length;
                }
                string result = string.Format(CultureInfo.InvariantCulture, @"<ScriptToken length=""{0}"">{1}", length,
                                              Environment.NewLine);
                if(Next != null)
                {
                    result += Next.ToString();
                }
                return result;
            }
        }

        #region Nested type: TemplateParameterToken

        /// <summary>
        /// Represents a template parameter within a script.  This is specialized node 
        /// within the ScriptToken linked list.
        /// </summary>
        class TemplateParameterToken : ScriptToken
        {
            readonly TemplateParameter _parameter;

            internal TemplateParameterToken(TemplateParameter parameter)
            {
                _parameter = parameter;
            }

            /// <summary>
            /// Gets the text of this node.
            /// </summary>
            /// <value>The text.</value>
            protected override string Text
            {
                get { return _parameter.Value; }
            }

            /// <summary>
            /// Returns a <see cref="T:System.String"/> that represents the current <see cref="TemplateParameterToken"/>.
            /// </summary>
            /// <returns>
            /// A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            /// </returns>
            public override string ToString()
            {
                string result = "<TemplateParameter";
                if(_parameter != null)
                {
                    result += string.Format(CultureInfo.InvariantCulture, @" name=""{0}"" value=""{1}"" type=""{2}""",
                                            _parameter.Name, _parameter.Value, _parameter.DataType);
                }
                result += string.Format(" />{0}", Environment.NewLine);
                if(Next != null)
                {
                    result += Next.ToString();
                }
                return result;
            }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;

namespace Subtext.Scripting
{
    /// <summary>
    /// A collection of <see cref="Script"/>s.
    /// </summary>
    public class ScriptCollection : Collection<Script>, ITemplateScript
    {
        readonly string _fullScriptText; //Original unexpanded script.
        TemplateParameterCollection _templateParameters;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptCollection"/> class.
        /// </summary>
        /// <param name="fullScriptText">The full script text.</param>
        internal ScriptCollection(string fullScriptText)
        {
            _fullScriptText = fullScriptText;
        }

        /// <summary>
        /// Gets the original full unexpanded script text.
        /// </summary>
        /// <value>The full script text.</value>
        public string FullScriptText
        {
            get { return _fullScriptText; }
        }

        /// <summary>
        /// Gets the expanded script text.
        /// </summary>
        /// <value>The expanded script text.</value>
        public string ExpandedScriptText
        {
            get
            {
                var builder = new StringBuilder();
                ApplyTemplatesToScripts();
                foreach(Script script in this)
                {
                    builder.Append(script.ScriptText);
                    builder.Append(Environment.NewLine);
                    builder.Append("GO");
                    builder.Append(Environment.NewLine);
                    builder.Append(Environment.NewLine);
                }
                return builder.ToString();
            }
        }

        #region ITemplateScript Members

        /// <summary>
        /// Gets the template parameters embedded in the script.
        /// </summary>
        /// <returns></returns>
        public TemplateParameterCollection TemplateParameters
        {
            get
            {
                if(_templateParameters == null)
                {
                    _templateParameters = new TemplateParameterCollection();
                    foreach(Script script in this)
                    {
                        _templateParameters.AddRange(script.TemplateParameters);
                    }
                    _templateParameters.ValueChanged += TemplateParametersValueChanged;
                }

                return _templateParameters;
            }
        }

        #endregion

        /// <summary>
        /// Adds the contents of another <see cref="ScriptCollection">ScriptCollection</see> 
        /// to the end of the collection.
        /// </summary>
        /// <param name="value">A <see cref="ScriptCollection">ScriptCollection</see> containing the <see cref="Script"/>s to add to the collection. </param>
        public void AddRange(IEnumerable<Script> value)
        {
            if(value == null)
            {
                throw new ArgumentNullException("value");
            }

            foreach(Script script in value)
            {
                Add(script);
            }
        }

        internal void ApplyTemplatesToScripts()
        {
            foreach(TemplateParameter parameter in TemplateParameters)
            {
                foreach(Script script in this)
                {
                    if(script.TemplateParameters.Contains(parameter.Name))
                    {
                        script.TemplateParameters[parameter.Name].Value = parameter.Value;
                    }
                }
            }
        }

        private void TemplateParametersValueChanged(object sender, ParameterValueChangedEventArgs args)
        {
            ApplyTemplatesToScripts();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Subtext.Scripting.Exceptions;
using Subtext.Framework.Properties;

namespace Subtext.Scripting
{
    public class ScriptSplitter : IEnumerable<string>
    {
        private readonly TextReader _reader;
        private StringBuilder _builder = new StringBuilder();
        private char _current;
        private char _lastChar;
        private ScriptReader _scriptReader;

        public ScriptSplitter(string script)
        {
            _reader = new StringReader(script);
            _scriptReader = new SeparatorLineReader(this);
        }

        internal bool HasNext
        {
            get { return _reader.Peek() != -1; }
        }

        internal char Current
        {
            get { return _current; }
        }

        internal char LastChar
        {
            get { return _lastChar; }
        }

        #region IEnumerable<string> Members

        public IEnumerator<string> GetEnumerator()
        {
            while(Next())
            {
                if(Split())
                {
                    string script = _builder.ToString().Trim();
                    if(script.Length > 0)
                    {
                        yield return (script);
                    }
                    Reset();
                }
            }
            if(_builder.Length > 0)
            {
                string scriptRemains = _builder.ToString().Trim();
                if(scriptRemains.Length > 0)
                {
                    yield return (scriptRemains);
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        #endregion

        internal bool Next()
        {
            if(!HasNext)
            {
                return false;
            }

            _lastChar = _current;
            _current = (char)_reader.Read();
            return true;
        }

        internal int Peek()
        {
            return _reader.Peek();
        }

        private bool Split()
        {
            return _scriptReader.ReadNextSection();
        }

        internal void SetParser(ScriptReader newReader)
        {
            _scriptReader = newReader;
        }

        internal void Append(string text)
        {
            _builder.Append(text);
        }

        internal void Append(char c)
        {
            _builder.Append(c);
        }

        void Reset()
        {
            _current = _lastChar = char.MinValue;
            _builder = new StringBuilder();
        }
    }

    abstract class ScriptReader
    {
        protected readonly ScriptSplitter Splitter;

        protected ScriptReader(ScriptSplitter splitter)
        {
            Splitter = splitter;
        }

        /// <summary>
        /// This acts as a template method. Specific Reader instances 
        /// override the component methods.
        /// </summary>
        public bool ReadNextSection()
        {
            if(IsQuote)
            {
                ReadQuotedString();
                return false;
            }

            if(BeginDashDashComment)
            {
                return ReadDashDashComment();
            }

            if(BeginSlashStarComment)
            {
                ReadSlashStarComment();
                return false;
            }

            return ReadNext();
        }

        protected virtual bool ReadDashDashComment()
        {
            Splitter.Append(Current);
            while(Splitter.Next())
            {
                Splitter.Append(Current);
                if(EndOfLine)
                {
                    break;
                }
            }
            //We should be EndOfLine or EndOfScript here.
            Splitter.SetParser(new SeparatorLineReader(Splitter));
            return false;
        }

        protected virtual void ReadSlashStarComment()
        {
            if(ReadSlashStarCommentWithResult())
            {
                Splitter.SetParser(new SeparatorLineReader(Splitter));
                return;
            }
        }

        private bool ReadSlashStarCommentWithResult()
        {
            Splitter.Append(Current);
            while(Splitter.Next())
            {
                if(BeginSlashStarComment)
                {
                    ReadSlashStarCommentWithResult();
                    continue;
                }
                Splitter.Append(Current);

                if(EndSlashStarComment)
                {
                    return true;
                }
            }
            return false;
        }

        protected virtual void ReadQuotedString()
        {
            Splitter.Append(Current);
            while(Splitter.Next())
            {
                Splitter.Append(Current);
                if(IsQuote)
                {
                    return;
                }
            }
        }

        protected abstract bool ReadNext();

        #region Helper methods and properties

        protected bool HasNext
        {
            get { return Splitter.HasNext; }
        }

        protected bool WhiteSpace
        {
            get { return char.IsWhiteSpace(Splitter.Current); }
        }

        protected bool EndOfLine
        {
            get { return '\n' == Splitter.Current; }
        }

        protected bool IsQuote
        {
            get { return '\'' == Splitter.Current; }
        }

        protected char Current
        {
            get { return Splitter.Current; }
        }

        protected char LastChar
        {
            get { return Splitter.LastChar; }
        }

        bool BeginDashDashComment
        {
            get { return Current == '-' && Peek() == '-'; }
        }

        bool BeginSlashStarComment
        {
            get { return Current == '/' && Peek() == '*'; }
        }

        bool EndSlashStarComment
        {
            get { return LastChar == '*' && Current == '/'; }
        }

        protected static bool CharEquals(char expected, char actual)
        {
            return Char.ToLowerInvariant(expected) == Char.ToLowerInvariant(actual);
        }

        protected bool CharEquals(char compare)
        {
            return CharEquals(Current, compare);
        }

        protected char Peek()
        {
            if(!HasNext)
            {
                return char.MinValue;
            }
            return (char)Splitter.Peek();
        }

        #endregion
    }

    class SeparatorLineReader : ScriptReader
    {
        private StringBuilder _builder = new StringBuilder();
        private bool _foundGo;
        private bool _gFound;

        public SeparatorLineReader(ScriptSplitter splitter)
            : base(splitter)
        {
        }

        void Reset()
        {
            _foundGo = false;
            _gFound = false;
            _builder = new StringBuilder();
        }

        protected override bool ReadDashDashComment()
        {
            if(!_foundGo)
            {
                base.ReadDashDashComment();
                return false;
            }
            base.ReadDashDashComment();
            return true;
        }

        protected override void ReadSlashStarComment()
        {
            if(_foundGo)
            {
                throw new SqlParseException(Resources.SqlParseException_IncorrectSyntaxNearGo);
            }
            base.ReadSlashStarComment();
        }

        protected override bool ReadNext()
        {
            if(EndOfLine) //End of line or script
            {
                if(!_foundGo)
                {
                    _builder.Append(Current);
                    Splitter.Append(_builder.ToString());
                    Splitter.SetParser(new SeparatorLineReader(Splitter));
                    return false;
                }
                Reset();
                return true;
            }

            if(WhiteSpace)
            {
                _builder.Append(Current);
                return false;
            }

            if(!CharEquals('g') && !CharEquals('o'))
            {
                FoundNonEmptyCharacter(Current);
                return false;
            }

            if(CharEquals('o'))
            {
                if(CharEquals('g', LastChar) && !_foundGo)
                {
                    _foundGo = true;
                }
                else
                {
                    FoundNonEmptyCharacter(Current);
                }
            }

            if(CharEquals('g', Current))
            {
                if(_gFound || (!Char.IsWhiteSpace(LastChar) && LastChar != char.MinValue))
                {
                    FoundNonEmptyCharacter(Current);
                    return false;
                }

                _gFound = true;
            }

            if(!HasNext && _foundGo)
            {
                Reset();
                return true;
            }

            _builder.Append(Current);
            return false;
        }

        void FoundNonEmptyCharacter(char c)
        {
            _builder.Append(c);
            Splitter.Append(_builder.ToString());
            Splitter.SetParser(new SqlScriptReader(Splitter));
        }
    }

    class SqlScriptReader : ScriptReader
    {
        public SqlScriptReader(ScriptSplitter splitter)
            : base(splitter)
        {
        }

        protected override bool ReadNext()
        {
            if(EndOfLine) //end of line
            {
                Splitter.Append(Current);
                Splitter.SetParser(new SeparatorLineReader(Splitter));
                return false;
            }

            Splitter.Append(Current);
            return false;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Subtext.Scripting.Exceptions;
using Subtext.Framework.Properties;

namespace Subtext.Scripting
{
    /// <summary>
    /// Class used to manage and execute SQL scripts.  
    /// Can also be used to hand
    /// </summary>
    public class SqlScriptRunner : IScript, ITemplateScript
    {
        readonly ScriptCollection _scripts;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.  
        /// Initializes the script to execute.
        /// </summary>
        /// <p>
        /// Suppose an assembly Foo.dll contains an embedded resource "Bar.sql" in a folder 
        /// named "Scripts".  To execute the embedded script, pass in any type within the 
        /// namespace "Foo" and pass the scriptname of "Scripts.Bar.sql".  Or pass in a type 
        /// in the namespace "Foo.Scripts" and pass in the scriptname of "Bar.sql".
        /// </p>
        /// <param name="scopingType">
        ///	A type whose assembly contains the script as an embedded resource. 
        ///	Also used to scope the script name. See remarks.
        /// </param>
        /// <param name="scriptName">Name of the script.</param>
        /// <param name="encoding">The encoding.</param>
        public SqlScriptRunner(Type scopingType, string scriptName, Encoding encoding)
            : this(UnpackEmbeddedScript(scopingType, scriptName), encoding)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.
        /// </summary>
        /// <p>
        /// Suppose an assembly Foo.dll contains an embedded resource "Bar.sql" in a folder 
        /// named "Scripts".  To execute the embedded script, pass in any type within the 
        /// namespace "Foo" and pass the scriptname of "Scripts.Bar.sql".  Or pass in a type 
        /// in the namespace "Foo.Scripts" and pass in the scriptname of "Bar.sql".
        /// </p>
        /// <param name="assemblyWithEmbeddedScript">The assembly containing the script as an embedded resource.</param>
        /// <param name="scopingType">
        ///	Used to scope the script name within the embedded resource.
        /// </param>
        /// <param name="scriptName">Name of the script.</param>
        /// <param name="encoding">The encoding.</param>
        public SqlScriptRunner(Assembly assemblyWithEmbeddedScript, Type scopingType, string scriptName,
                               Encoding encoding)
            : this(UnpackEmbeddedScript(assemblyWithEmbeddedScript, scopingType, scriptName), encoding)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.
        /// Initializes the script to execute.
        /// </summary>
        /// <param name="assemblyWithEmbeddedScript">The assembly with the script as an embedded resource.</param>
        /// <param name="fullScriptName">Fully qualified resource name of the script.</param>
        /// <param name="encoding">The encoding.</param>
        public SqlScriptRunner(Assembly assemblyWithEmbeddedScript, string fullScriptName, Encoding encoding)
            : this(UnpackEmbeddedScript(assemblyWithEmbeddedScript, fullScriptName), encoding)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.
        /// </summary>
        /// <param name="scriptStream">The stream containing the script to execute.</param>
        /// <param name="encoding">The encoding.</param>
        public SqlScriptRunner(Stream scriptStream, Encoding encoding) : this(ReadStream(scriptStream, encoding))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.
        /// </summary>
        /// <param name="scriptText">The full script text to execute.</param>
        public SqlScriptRunner(string scriptText) : this(Script.ParseScripts(scriptText))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptRunner"/> class.
        /// </summary>
        /// <param name="scripts">The scripts.</param>
        public SqlScriptRunner(ScriptCollection scripts)
        {
            _scripts = scripts;
        }

        /// <summary>
        /// Gets the script collection this runner is executing.
        /// </summary>
        /// <value>The script collection.</value>
        public ScriptCollection ScriptCollection
        {
            get { return _scripts; }
        }

        #region IScript Members

        /// <summary>
        /// Executes the script.
        /// </summary>
        /// <remarks>
        /// Use script.Execute(transaction) to do the work. We will also pull the
        /// status of our script exection from here.
        /// </remarks>
        /// <param name="transaction">The current transaction.</param>
        public int Execute(SqlTransaction transaction)
        {
            int recordsAffectedTotal = 0;
            SetNoCountOff(transaction);

            // the following reg exp will be used to determine if each script is an
            // INSERT, UPDATE, or DELETE operation. The reg exp is also only looking
            // for these actions on the SubtextData database. <- do we need this last part?
            const string regextStr = @"(INSERT\sINTO\s[\s\w\d\)\(\,\.\]\[\>\<]+)|(UPDATE\s[\s\w\d\)\(\,\.\]\[\>\<]+SET\s)|(DELETE\s[\s\w\d\)\(\,\.\]\[\>\<]+FROM\s[\s\w\d\)\(\,\.\]\[\>\<]+WHERE\s)";
            var regex = new Regex(regextStr,
                                  RegexOptions.IgnorePatternWhitespace | RegexOptions.IgnoreCase | RegexOptions.Compiled |
                                  RegexOptions.Multiline);

            _scripts.ApplyTemplatesToScripts();
            foreach(Script script in _scripts)
            {
                int returnValue = script.Execute(transaction);

                Match match = regex.Match(script.ScriptText);
                if(match.Success)
                {
                    /* 
					 * For UPDATE, INSERT, and DELETE statements, the return value is the 
					 * number of rows affected by the command. For all other types of statements, 
					 * the return value is -1. If a rollback occurs, the return value is also -1. 
					 */
                    if(!IsCrudScript(script))
                    {
                        continue;
                    }

                    if(returnValue > -1)
                    {
                        recordsAffectedTotal += returnValue;
                    }
                    else
                    {
                        throw new SqlScriptExecutionException(Resources.SqlScriptExecutionError_ErrorOccurred, script,
                                                              returnValue);
                    }
                }
            }
            return recordsAffectedTotal;
        }

        #endregion

        #region ITemplateScript Members

        /// <summary>
        /// Gets the template parameters embedded in the script.
        /// </summary>
        /// <returns></returns>
        public TemplateParameterCollection TemplateParameters
        {
            get { return _scripts.TemplateParameters; }
        }

        #endregion

        private static bool IsCrudScript(Script script)
        {
            return script.ScriptText.IndexOf("TRIGGER", StringComparison.OrdinalIgnoreCase) == -1
                   && script.ScriptText.IndexOf("PROC", StringComparison.OrdinalIgnoreCase) == -1;
        }

        /// <summary>
        /// Temporarily set NOCOUNT OFF on the connection. We must do this b/c the SqlScriptRunner 
        /// depends on all CRUD statements returning the number of effected rows to determine if an 
        /// error occured. This isn't a perfect solution, but it's what we've got.
        /// </summary>
        /// <param name="transaction"></param>
        private static void SetNoCountOff(SqlTransaction transaction)
        {
            var noCount = new Script("SET NOCOUNT OFF");
            noCount.Execute(transaction);
        }

        static string ReadStream(Stream stream, Encoding encoding)
        {
            using(var reader = new StreamReader(stream, encoding))
            {
                return reader.ReadToEnd();
            }
        }

        static Stream UnpackEmbeddedScript(Type scopingType, string scriptName)
        {
            Assembly assembly = scopingType.Assembly;
            return assembly.GetManifestResourceStream(scopingType, scriptName);
        }

        static Stream UnpackEmbeddedScript(Assembly assembly, Type scopingType, string scriptName)
        {
            return assembly.GetManifestResourceStream(scopingType, scriptName);
        }

        static Stream UnpackEmbeddedScript(Assembly assembly, string fullScriptName)
        {
            return assembly.GetManifestResourceStream(fullScriptName);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Scripting
{
    /// <summary>
    /// Summary description for TemplateParameter.
    /// </summary>
    [Serializable]
    public class TemplateParameter
    {
        string _value;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateParameter"/> class.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="type">The type.</param>
        /// <param name="defaultValue">The default value.</param>
        public TemplateParameter(string name, string type, string defaultValue)
        {
            Name = name;
            DataType = type;
            _value = defaultValue;
        }

        /// <summary>
        /// Gets or sets the name of the parameter.
        /// </summary>
        /// <value>The name.</value>
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the data.
        /// </summary>
        /// <value>The type of the data.</value>
        public string DataType { get; private set; }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>The value.</value>
        public string Value
        {
            get { return _value; }
            set
            {
                if(value != _value)
                {
                    OnValueChanged(_value, value);
                }
                _value = value;
            }
        }

        protected void OnValueChanged(string oldValue, string newValue)
        {
            EventHandler<ParameterValueChangedEventArgs> changeEvent = ValueChanged;
            if(changeEvent != null)
            {
                changeEvent(this, new ParameterValueChangedEventArgs(Name, oldValue, newValue));
            }
        }

        /// <summary>
        /// Event raised when the parameter's value changes.
        /// </summary>
        public event EventHandler<ParameterValueChangedEventArgs> ValueChanged;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Subtext.Scripting
{
    /// <summary>
    /// A collection of <see cref="TemplateParameter"/> instances.
    /// </summary>
    public class TemplateParameterCollection : ICollection<TemplateParameter>
    {
        readonly List<TemplateParameter> _list = new List<TemplateParameter>();

        /// <summary>
        /// Gets the <see cref="TemplateParameter"/> at the specified index.
        /// </summary>
        /// <value></value>
        public TemplateParameter this[int index]
        {
            get { return _list[index]; }
        }

        /// <summary>
        /// Gets the <see cref="TemplateParameter"/> with the specified name.
        /// </summary>
        /// <value></value>
        public TemplateParameter this[string name]
        {
            get
            {
                foreach(TemplateParameter parameter in _list)
                {
                    if(String.Equals(parameter.Name, name, StringComparison.OrdinalIgnoreCase))
                    {
                        return parameter;
                    }
                }
                return null;
            }
        }

        #region ICollection<TemplateParameter> Members

        void ICollection<TemplateParameter>.Add(TemplateParameter item)
        {
            Add(item);
        }

        public void Clear()
        {
            _list.Clear();
        }

        /// <summary>
        /// Gets a value indicating whether the collection contains the specified 
        /// <see cref="TemplateParameter">Script</see>.
        /// </summary>
        public bool Contains(TemplateParameter item)
        {
            if(item == null)
            {
                throw new ArgumentNullException("item");
            }

            return Contains(item.Name);
        }

        public void CopyTo(TemplateParameter[] array, int arrayIndex)
        {
            _list.CopyTo(array, arrayIndex);
        }

        public int Count
        {
            get { return _list.Count; }
        }

        public bool IsReadOnly
        {
            get { return false; }
        }

        /// <summary>
        /// Removes the specified value.
        /// </summary>
        public bool Remove(TemplateParameter item)
        {
            return _list.Remove(item);
        }

        #endregion

        #region IEnumerable<TemplateParameter> Members

        IEnumerator<TemplateParameter> IEnumerable<TemplateParameter>.GetEnumerator()
        {
            return _list.GetEnumerator();
        }

        public IEnumerator GetEnumerator()
        {
            return _list.GetEnumerator();
        }

        #endregion

        /// <summary>
        /// Determines whether [contains] [the specified name].
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>
        /// 	<c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.
        /// </returns>
        public bool Contains(string name)
        {
            return this[name] != null;
        }

        /// <summary>
        /// Creates a template parameter from a match.
        /// </summary>
        /// <param name="match">The match.</param>
        /// <returns></returns>
        public TemplateParameter Add(Match match)
        {
            if(match == null)
            {
                throw new ArgumentNullException("match");
            }

            if(this[match.Groups["name"].Value] != null)
            {
                return this[match.Groups["name"].Value];
            }

            var parameter = new TemplateParameter(match.Groups["name"].Value, match.Groups["type"].Value,
                                                  match.Groups["default"].Value);
            Add(parameter);
            return parameter;
        }

        /// <summary>
        /// Adds the specified value. If it already exists, returns 
        /// the existing one, otherwise just returns the one you added.
        /// </summary>
        /// <param name="value">Value.</param>
        /// <returns></returns>
        public TemplateParameter Add(TemplateParameter value)
        {
            if(value == null)
            {
                throw new ArgumentNullException("value");
            }

            if(Contains(value))
            {
                return this[value.Name];
            }
            _list.Add(value);
            value.ValueChanged += OnValueChanged;
            return value;
        }

        /// <summary>
        /// Adds the contents of another <see cref="ScriptCollection">ScriptCollection</see> 
        /// to the end of the collection.
        /// </summary>
        /// <param name="value">A <see cref="ScriptCollection">ScriptCollection</see> containing the <see cref="TemplateParameter"/>s to add to the collection. </param>
        public void AddRange(IEnumerable<TemplateParameter> value)
        {
            foreach(TemplateParameter parameter in value)
            {
                Add(parameter);
            }
        }

        /// <summary>
        /// Gets the index in the collection of the specified 
        /// <see cref="TemplateParameter">Script</see>, if it exists in the collection.
        /// </summary>
        /// <param name="value">The <see cref="TemplateParameter">Script</see> 
        /// to locate in the collection.</param>
        /// <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        public int IndexOf(TemplateParameter value)
        {
            return _list.IndexOf(value);
        }

        /// <summary>
        /// Provides a shortcut to set a value.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="value">The value.</param>
        public void SetValue(string name, string value)
        {
            if(this[name] != null)
            {
                this[name].Value = value;
            }
        }

        private void OnValueChanged(object sender, ParameterValueChangedEventArgs args)
        {
            OnValueChanged(args);
        }

        protected void OnValueChanged(ParameterValueChangedEventArgs args)
        {
            EventHandler<ParameterValueChangedEventArgs> changeEvent = ValueChanged;
            if(changeEvent != null)
            {
                changeEvent(this, args);
            }
        }

        /// <summary>
        /// Event raised when any parameter within this collection changes 
        /// its values.
        /// </summary>
        public event EventHandler<ParameterValueChangedEventArgs> ValueChanged;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Reflection;
using Subtext.Framework.Data;

namespace Subtext.Framework.Infrastructure.Installation
{
    public class SqlInstaller : IInstaller
    {
        private readonly string _connectionString;

        public SqlInstaller(string connectionString)
        {
            _connectionString = connectionString;
        }

        public string DBUser { get; set; }

        public void Install(Version assemblyVersion)
        {
            using(var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using(SqlTransaction transaction = connection.BeginTransaction())
                {
                    try
                    {
                        ReadOnlyCollection<string> scripts = ListInstallationScripts(GetCurrentInstallationVersion(),
                                                                                     VersionInfo.CurrentAssemblyVersion);
                        foreach(string scriptName in scripts)
                        {
                            ScriptHelper.ExecuteScript(scriptName, transaction, DBUser);
                        }

                        ScriptHelper.ExecuteScript("StoredProcedures.sql", transaction, DBUser);
                        UpdateInstallationVersionNumber(assemblyVersion, transaction);
                        transaction.Commit();
                    }
                    catch(Exception)
                    {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Upgrades this instance. Returns true if it was successful.
        /// </summary>
        /// <returns></returns>
        public void Upgrade(Version currentAssemblyVersion)
        {
            using(var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using(SqlTransaction transaction = connection.BeginTransaction())
                {
                    try
                    {
                        Version installationVersion = GetCurrentInstallationVersion() ?? new Version(1, 0, 0, 0);
                        ReadOnlyCollection<string> scripts = ListInstallationScripts(installationVersion, currentAssemblyVersion);
                        foreach(string scriptName in scripts)
                        {
                            ScriptHelper.ExecuteScript(scriptName, transaction, DBUser);
                        }
                        ScriptHelper.ExecuteScript("StoredProcedures.sql", transaction, DBUser);

                        UpdateInstallationVersionNumber(currentAssemblyVersion, transaction);
                        transaction.Commit();
                    }
                    catch(Exception)
                    {
                        transaction.Rollback();
                        throw;
                    }
                }
            }
        }

        /// <summary>
        /// Returns a collection of installation script names with a version 
        /// less than or equal to the max version.
        /// </summary>
        /// <param name="minVersionExclusive">The min verison exclusive.</param>
        /// <param name="maxVersionInclusive">The max version inclusive.</param>
        /// <returns></returns>
        public static ReadOnlyCollection<string> ListInstallationScripts(Version minVersionExclusive,
                                                                         Version maxVersionInclusive)
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            string[] resourceNames = assembly.GetManifestResourceNames();
            var collection = new List<string>();
            foreach(string resourceName in resourceNames)
            {
                InstallationScriptInfo scriptInfo = InstallationScriptInfo.Parse(resourceName);
                if(scriptInfo == null)
                {
                    continue;
                }

                if((minVersionExclusive == null || scriptInfo.Version > minVersionExclusive)
                   && (maxVersionInclusive == null || scriptInfo.Version <= maxVersionInclusive))
                {
                    collection.Add(scriptInfo.ScriptName);
                }
            }

            var scripts = new string[collection.Count];
            collection.CopyTo(scripts, 0);
            Array.Sort(scripts);

            return new ReadOnlyCollection<string>(new List<string>(scripts));
        }

        /// <summary>
        /// Updates the value of the current installed version within the subtext_Version table.
        /// </summary>
        /// <param name="newVersion">New version.</param>
        /// <param name="transaction">The transaction to perform this action within.</param>
        public static void UpdateInstallationVersionNumber(Version newVersion, SqlTransaction transaction)
        {
            var procedures = new StoredProcedures(transaction);
            procedures.VersionAdd(newVersion.Major, newVersion.Minor, newVersion.Build, DateTime.Now);
        }

        /// <summary>
        /// Gets the <see cref="Version"/> of the current Subtext data store (ie. SQL Server). 
        /// This is the value stored in the database. If it does not match the actual 
        /// assembly version, we may need to run an upgrade.
        /// </summary>
        /// <returns></returns>
        public Version GetCurrentInstallationVersion()
        {
            var procedures = new StoredProcedures(_connectionString);
            try
            {
                using(var reader = procedures.VersionGetCurrent())
                {
                    if(reader.Read())
                    {
                        var version = new Version((int)reader["Major"], (int)reader["Minor"], (int)reader["Build"]);
                        reader.Close();
                        return version;
                    }
                }
            }
            catch(SqlException exception)
            {
                if(exception.Number != (int)SqlErrorMessage.CouldNotFindStoredProcedure)
                {
                    throw;
                }
            }
            return null;
        }

        /// <summary>
        /// Gets a value indicating whether the subtext installation needs an upgrade 
        /// to occur.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [needs upgrade]; otherwise, <c>false</c>.
        /// </value>
        public bool NeedsUpgrade(Version installationVersion, Version currentAssemblyVersion)
        {
            if(installationVersion >= currentAssemblyVersion)
            {
                return false;
            }

            if(installationVersion == null)
            {
                //This is the base version.  We need to hardcode this 
                //because Subtext 1.0 didn't write the assembly version 
                //into the database.
                installationVersion = new Version(1, 0, 0, 0);
            }
            ReadOnlyCollection<string> scripts = ListInstallationScripts(installationVersion, currentAssemblyVersion);
            return scripts.Count > 0;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;

namespace Subtext.Infrastructure
{
    public interface IServiceLocator
    {
        TService GetService<TService>();
        object GetService(Type type);
        void DisposeRequestScoped(HttpContext httpContext);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Infrastructure
{
    public interface ITimeZone
    {
        /// <summary>
        /// This is the current date and time in this time zone
        /// </summary>
        DateTime Now { get; }

        /// <summary>
        /// This is the current UTC date and time
        /// </summary>
        DateTime UtcNow { get; }

        /// <summary>
        /// This is the current date and time based on the server's time zone.
        /// </summary>
        DateTime ServerNow { get; }

        /// <summary>
        /// Converts the specified DateTime instance to UTC
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        DateTime ToUtc(DateTime dateTime);

        /// <summary>
        /// Converts the specified UTC DateTime to this timezone.
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        DateTime FromUtc(DateTime dateTime);

        /// <summary>
        /// Converts the specified DateTime instance to the server's (local) time zone
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        DateTime ToServerDateTime(DateTime dateTime);

        /// <summary>
        /// Converts the specified DateTime instance to this time zone from the specified time zone.
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="sourceTimeZone"></param>
        /// <returns></returns>
        DateTime FromTimeZone(DateTime dateTime, TimeZoneInfo sourceTimeZone);

        /// <summary>
        /// Returns true if the specified date is in the past, otherwise false.
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="sourceTimeZone"></param>
        /// <returns></returns>
        bool IsInPast(DateTime dateTime, TimeZoneInfo sourceTimeZone);

        /// <summary>
        /// Returns true if the specified date is in the future, otherwise false.
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="sourceTimeZone"></param>
        /// <returns></returns>
        bool IsInFuture(DateTime dateTime, TimeZoneInfo sourceTimeZone);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using Subtext.Framework.Properties;

namespace Subtext.Framework.ModelBinders
{
    public class XmlModelBinder : IModelBinder
    {
        public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
        {
            HttpRequestBase request = controllerContext.HttpContext.Request;
            if(request.ContentType != "text/xml")
            {
                throw new InvalidOperationException(Resources.InvalidOperation_ContentTypeMustBeXml);
            }

            var doc = new XmlDocument();
            doc.Load(controllerContext.HttpContext.Request.InputStream);
            return doc;
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Ninject;
using Ninject.Activation.Caching;
using Subtext.Infrastructure;

namespace Subtext.Framework.Infrastructure
{
    public class NinjectServiceLocator : IServiceLocator
    {
        public NinjectServiceLocator(IKernel kernel)
        {
            Kernel = kernel;
        }

        public IKernel Kernel
        {
            get; 
            private set;
        }

        public TService GetService<TService>()
        {
            return Kernel.Get<TService>();
        }

        public object GetService(Type type)
        {
            return Kernel.Get(type);
        }

        public void DisposeRequestScoped(HttpContext httpContext)
        {
            var cache = Kernel.Components.Get<Ninject.Activation.Caching.ICache>() as Cache;
            if(cache != null)
            {
                cache.DisposeRequestScoped(httpContext);
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;
using Subtext.Framework.Routing;

namespace Subtext.Infrastructure
{
    public class PipelineService
    {
        public PipelineService(HttpContextBase httpContext, IServiceLocator serviceProvider)
        {
            HttpContext = httpContext;
            ServiceProvider = serviceProvider;
        }

        protected HttpContextBase HttpContext { get; private set; }
        protected IServiceLocator ServiceProvider { get; private set; }

        public void ProcessRootRequest(RootRoute route, IRouteHandler routeHandler)
        {
            // todo: unit test this method
            var request = HttpContext.Request;
            RouteData routeData = route.GetRouteData(HttpContext);
            var requestContext = new RequestContext(HttpContext, routeData);
            string originalPath = request.Path;
            HttpContext.RewritePath(request.ApplicationPath, false);
            IHttpHandler httpHandler = routeHandler.GetHttpHandler(requestContext);
            httpHandler.ProcessRequest(System.Web.HttpContext.Current);
            HttpContext.RewritePath(originalPath);
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Routing;
using Subtext.Framework.Components;

namespace Subtext.Framework.Routing
{
    public class AdminUrlHelper
    {
        public AdminUrlHelper(UrlHelper urlHelper)
        {
            Url = urlHelper;
        }

        public UrlHelper Url { get; private set; }

        public VirtualPath Home()
        {
            return Url.AdminUrl("");
        }

        public VirtualPath Rss()
        {
            return Url.AdminUrl("adminRss.axd");
        }

        public VirtualPath ImportExport()
        {
            return Url.AdminUrl("ImportExport.aspx");
        }

        public VirtualPath Export(bool embedAttachments)
        {
            return Url.GetVirtualPath("export", new RouteValueDictionary{ {"embed", embedAttachments }});
        }

        public VirtualPath PostsList()
        {
            return Url.AdminUrl("posts");
        }

        public VirtualPath PostsEdit()
        {
            return Url.AdminUrl("posts/edit.aspx");
        }

        //TODO: Unit test
        public VirtualPath PostsEdit(int id)
        {
            return Url.AdminUrl("posts/edit.aspx", new {PostId = id});
        }

        public VirtualPath ArticlesList()
        {
            return Url.AdminUrl("articles");
        }

        public VirtualPath ArticlesEdit()
        {
            return Url.AdminUrl("articles/edit.aspx");
        }

        public VirtualPath ArticlesEdit(int id)
        {
            return Url.AdminUrl("articles/edit.aspx", new { PostId = id });
        }

        public VirtualPath FeedbackList()
        {
            return Url.AdminUrl("feedback");
        }

        //TODO: Unit test
        public VirtualPath FeedbackEdit(int id)
        {
            var routeValues = new RouteValueDictionary {{"return-to-post", "true"}, {"FeedbackID", id}};
            return Url.AdminUrl("feedback/edit.aspx", routeValues);
        }

        public VirtualPath LinksEdit()
        {
            return Url.AdminUrl("EditLinks.aspx");
        }

        public VirtualPath GalleriesEdit()
        {
            return Url.AdminUrl("EditGalleries.aspx");
        }

        public VirtualPath Referrers(int id)
        {
            return Url.AdminUrl("Referrers.aspx", new { EntryId = id });
        }

        public VirtualPath Statistics()
        {
            return Url.AdminUrl("Statistics.aspx");
        }

        public VirtualPath Options()
        {
            return Url.AdminUrl("Options.aspx");
        }

        public VirtualPath Credits()
        {
            return Url.AdminUrl("Credits.aspx");
        }

        public VirtualPath EditCategories()
        {
            return Url.AdminUrl("EditCategories.aspx");
        }

        public VirtualPath EditCategories(CategoryType categoryType)
        {
            return Url.AdminUrl("EditCategories.aspx", new {catType = categoryType});
        }

        public VirtualPath EditGalleries()
        {
            return Url.AdminUrl("EditGalleries.aspx");
        }

        public VirtualPath EditLinks()
        {
            return Url.AdminUrl("EditLinks.aspx");
        }

        public VirtualPath ErrorLog()
        {
            return Url.AdminUrl("ErrorLog.aspx");
        }

        public VirtualPath FullTextSearch()
        {
            return Url.AdminUrl("FullTextSearch.aspx");
        }

        public VirtualPath AjaxServices()
        {
            return Url.GetVirtualPath("ajax-services", null);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;

namespace Subtext.Framework.Routing
{
    /// <summary>
    /// Aggregate blogs enablement must match this constraint for the route to match.
    /// </summary>
    public class AggregateEnabledConstraint : IRouteConstraint
    {
        public AggregateEnabledConstraint(HostInfo host, bool matchWhenAggregateBlogsEnabled)
        {
            MatchWhenAggregateBlogsEnabled = matchWhenAggregateBlogsEnabled;
            Host = host;
        }

        protected HostInfo Host { get; private set; }

        public bool MatchWhenAggregateBlogsEnabled { get; private set; }

        //Should always return true for non root requests...

        #region IRouteConstraint Members

        public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values,
                          RouteDirection routeDirection)
        {
            if(routeDirection == RouteDirection.UrlGeneration)
            {
                return true;
            }

            return Match(Host.BlogAggregationEnabled);
        }

        #endregion

        public bool Match(bool aggregateBlogsEnabled)
        {
            return (aggregateBlogsEnabled == MatchWhenAggregateBlogsEnabled);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class DirectoryRoute : SubtextRoute, IDirectoryRoute
    {
        public DirectoryRoute(string directoryName, IServiceLocator serviceLocator) :
            base(directoryName + "/{*pathInfo}", new DirectoryRouteHandler(serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator))
        {
            DirectoryName = directoryName;
        }
        
        public string DirectoryName
        {
            get; 
            private set;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Web;
using System.Web.Routing;
using Subtext.Framework.Properties;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class DirectoryRouteHandler : PageRouteHandler
    {
        public DirectoryRouteHandler(ISubtextPageBuilder pageBuilder, IServiceLocator serviceLocator)
            : base(null, pageBuilder, serviceLocator)
        {
        }

        protected override IHttpHandler GetHandler(RequestContext requestContext)
        {
            RouteData routeData = requestContext.RouteData;
            var route = routeData.Route as IDirectoryRoute;
            if(route == null)
            {
                throw new InvalidOperationException(
                    Resources.InvalidOperation_DirectoryRouteHandlerWorksWithDirectoryRoutes);
            }

            string virtualPath = string.Format("~/aspx/{0}/{1}", route.DirectoryName, routeData.Values["pathinfo"]);
            if(String.IsNullOrEmpty(Path.GetExtension(virtualPath)))
            {
                if(!virtualPath.EndsWith("/"))
                {
                    virtualPath += "/";
                }
                virtualPath += "Default.aspx";
            }
            VirtualPath = virtualPath;
            return base.GetHandler(requestContext);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class HttpRouteHandler<THandler> : RouteHandlerBase where THandler : IHttpHandler
    {
        public HttpRouteHandler(IServiceLocator serviceLocator)
            : base(serviceLocator)
        {
        }

        protected override IHttpHandler GetHandler(RequestContext requestContext)
        {
            Bootstrapper.RequestContext = requestContext;
            return ServiceLocator.GetService<THandler>();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Routing
{
    public interface IDirectoryRoute
    {
        string DirectoryName { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Routing;

namespace Subtext.Framework.Routing
{
    /// <summary>
    /// When ignoring routes, we also want to ignore for rendering 
    /// the virtual path. Unfortunately, routing doesn't do this 
    /// yet.
    /// </summary>
    public class IgnoreRoute : Route
    {
        public IgnoreRoute(string url) : base(url, new StopRoutingHandler())
        {
        }

        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
        {
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;

namespace Subtext.Framework.Routing
{
    /// <summary>
    /// Special route for gallery images. It's used to generate URLs, but never to 
    /// match incoming requests.
    /// </summary>
    public class ImageRoute : Route
    {
        public ImageRoute(string url) : base(url, null)
        {
            Defaults = new RouteValueDictionary(new {filename = string.Empty, id = string.Empty});
        }

        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Web;

namespace Subtext.Framework.Routing
{
    public interface IPageWithControls : IHttpHandler
    {
        void SetControls(IEnumerable<string> controls);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using Ninject;
using Subtext.Framework.Providers;

namespace Subtext.Framework.Routing
{
    public interface ISubtextHandler : IHttpHandler
    {
        [Inject]
        ISubtextContext SubtextContext { get; }

        UrlHelper Url { get; }

        ObjectProvider Repository { get; }

        AdminUrlHelper AdminUrl { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Routing
{
    public interface ISubtextPageBuilder
    {
        object CreateInstanceFromVirtualPath(string virtualPath, Type type);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class PageRoute : SubtextRoute
    {
        public const string ControlNamesKey = "controls";

        public PageRoute(string url, string virtualPath, IEnumerable<string> controls, IServiceLocator serviceLocator)
            : this(url, virtualPath, controls, serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator)
        {
        }

        public PageRoute(string url, string virtualPath, IEnumerable<string> controls, ISubtextPageBuilder pageBuilder,
                         IServiceLocator serviceLocator)
            : base(url, new PageRouteHandler(virtualPath, pageBuilder, serviceLocator))
        {
            DataTokens = new RouteValueDictionary {{ControlNamesKey, controls.AsEnumerable()}};
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Routing;
using System.Web.UI;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class PageRouteHandler : RouteHandlerBase
    {
        public PageRouteHandler(string virtualPath, ISubtextPageBuilder pageBuilder, IServiceLocator serviceLocator)
            : base(serviceLocator)
        {
            VirtualPath = virtualPath;
            PageBuilder = pageBuilder;
        }

        protected ISubtextPageBuilder PageBuilder { get; set; }

        public string VirtualPath { get; protected set; }

        protected override IHttpHandler GetHandler(RequestContext requestContext)
        {
            Bootstrapper.RequestContext = requestContext;
            var page = PageBuilder.CreateInstanceFromVirtualPath(VirtualPath, typeof(Page)) as IHttpHandler;

            if(page != null)
            {
                var pageWithControls = page as IPageWithControls;
                if(pageWithControls != null)
                {
                    if(requestContext.RouteData.DataTokens != null)
                    {
                        IEnumerable<string> controls = requestContext.RouteData.GetControlNames();
                        pageWithControls.SetControls(controls);
                    }
                }
            }
            return page;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Web;
using System.Web.Routing;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    // We need special handling of requests for the root due 
    // to the whole aggregate blog situation.
    public class RootRoute : RouteBase
    {
        Route _subfolderAppRootRoute;
        Route _subfolderDefaultRoute;

        public RootRoute(bool blogAggregationEnabled, IServiceLocator serviceLocator)
            : this(blogAggregationEnabled, null, null, serviceLocator)
        {
        }

        public RootRoute(bool blogAggregationEnabled, IRouteHandler normalRouteHandler, IRouteHandler aggRouteHandler,
                         IServiceLocator serviceLocator)
        {
            BlogAggregationEnabled = blogAggregationEnabled;
            NormalRouteHandler = normalRouteHandler ??
                                 new PageRouteHandler("~/aspx/Dtp.aspx", serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator);
            AggregateRouteHandler = aggRouteHandler ??
                                    new PageRouteHandler("~/aspx/AggDefault.aspx", serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator);
        }

        protected bool BlogAggregationEnabled { get; private set; }

        private Route SubfolderDefaultRoute
        {
            get
            {
                if(_subfolderDefaultRoute == null)
                {
                    _subfolderDefaultRoute = new Route("{subfolder}/default.aspx", NormalRouteHandler)
                    {
                        DataTokens =
                            new RouteValueDictionary {{PageRoute.ControlNamesKey, new[] {"homepage"}.AsEnumerable()}}
                    };
                }
                return _subfolderDefaultRoute;
            }
        }

        private Route SubfolderAppRootRoute
        {
            get
            {
                if(_subfolderAppRootRoute == null)
                {
                    _subfolderAppRootRoute = new Route("{subfolder}", NormalRouteHandler)
                    {
                        DataTokens =
                            new RouteValueDictionary {{PageRoute.ControlNamesKey, new[] {"homepage"}.AsEnumerable()}}
                    };
                }
                return _subfolderAppRootRoute;
            }
        }

        public IRouteHandler AggregateRouteHandler { get; private set; }

        public IRouteHandler NormalRouteHandler { get; private set; }

        private IRouteHandler GetHandler()
        {
            return BlogAggregationEnabled ? AggregateRouteHandler : NormalRouteHandler;
        }

        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            string appExecutionPath = httpContext.Request.AppRelativeCurrentExecutionFilePath;

            if(appExecutionPath == "~/" ||
               String.Equals(appExecutionPath, "~/default.aspx", StringComparison.OrdinalIgnoreCase))
            {
                var appRootRouteData = new RouteData
                {
                    Route = this,
                    RouteHandler = GetHandler(),
                };
                if(!BlogAggregationEnabled)
                {
                    appRootRouteData.DataTokens.Add(PageRoute.ControlNamesKey, new[] {"homepage"}.AsEnumerable());
                }
                return appRootRouteData;
            }

            var blogRequest = httpContext.Items[BlogRequest.BlogRequestKey] as BlogRequest;
            if(blogRequest == null || String.IsNullOrEmpty(blogRequest.Subfolder))
            {
                return null;
            }

            RouteData routeData = SubfolderAppRootRoute.GetRouteData(httpContext) ??
                                  SubfolderDefaultRoute.GetRouteData(httpContext);
            if(routeData != null)
            {
                routeData.Route = this;
                if(!String.Equals(blogRequest.Subfolder, routeData.GetSubfolder(), StringComparison.OrdinalIgnoreCase))
                {
                    return null;
                }
            }
            return routeData;
        }

        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
        {
            object subfolderValue;
            if(values == null || !values.TryGetValue("subfolder", out subfolderValue))
            {
                requestContext.RouteData.Values.TryGetValue("subfolder", out subfolderValue);
            }

            var subfolder = subfolderValue as string;

            if(!String.IsNullOrEmpty(subfolder))
            {
                VirtualPathData vpd = SubfolderAppRootRoute.GetVirtualPath(requestContext,
                                                                           new RouteValueDictionary(new {subfolder}));
                vpd.Route = this;
                return vpd;
            }

            if(values == null || values.Count == 0)
            {
                return new VirtualPathData(this, string.Empty);
            }
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public abstract class RouteHandlerBase : IRouteHandler
    {
        protected RouteHandlerBase(IServiceLocator serviceLocator)
        {
            ServiceLocator = serviceLocator;
        }

        public IServiceLocator ServiceLocator
        {
            get; 
            private set;
        }

        IHttpHandler IRouteHandler.GetHttpHandler(RequestContext requestContext)
        {
            Bootstrapper.RequestContext = requestContext;
            return GetHandler(requestContext);
        }

        protected abstract IHttpHandler GetHandler(RequestContext requestContext);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Routing;

namespace Subtext.Framework.Routing
{
    class SubfolderRoute : Route
    {
        readonly Route _parent;

        public SubfolderRoute(Route parent) : base("{subfolder}/" + parent.Url, parent.RouteHandler)
        {
            _parent = parent;
            Constraints = parent.Constraints;
            Defaults = parent.Defaults;
            DataTokens = parent.DataTokens;
        }

        public RouteData GetRouteData(HttpContextBase httpContext, string subfolder)
        {
            RouteData routeData = GetRouteData(httpContext);
            if(routeData != null)
            {
                if(!String.Equals(subfolder, routeData.GetSubfolder(), StringComparison.OrdinalIgnoreCase))
                {
                    return null;
                }
            }
            return routeData;
        }

        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            RouteData routeData = base.GetRouteData(httpContext);
            if(routeData != null)
            {
                routeData.Route = _parent;
            }
            return routeData;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.Compilation;
using Ninject;

namespace Subtext.Framework.Routing
{
    public class SubtextPageBuilder : ISubtextPageBuilder
    {
        public SubtextPageBuilder(IKernel kernel)
        {
            Kernel = kernel;
        }

        public IKernel Kernel { get; private set; }

        #region ISubtextPageBuilder Members

        public object CreateInstanceFromVirtualPath(string virtualPath, Type type)
        {
            object instance = BuildManager.CreateInstanceFromVirtualPath(virtualPath, type);
            Kernel.Inject(instance);
            return instance;
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Routing;
using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Routing
{
    public class SubtextRoute : Route
    {
        SubfolderRoute _subfolderRoute;

        public SubtextRoute(string url, IRouteHandler routeHandler)
            : base(url, routeHandler)
        {
        }

        private SubfolderRoute RouteForSubfolder
        {
            get
            {
                SubfolderRoute subfolderRoute = _subfolderRoute;
                //Not going to lock...
                if(subfolderRoute == null)
                {
                    subfolderRoute = new SubfolderRoute(this);
                    _subfolderRoute = subfolderRoute;
                }
                return subfolderRoute;
            }
        }

        public virtual RouteData GetRouteData(HttpContextBase httpContext, BlogRequest blogRequest)
        {
            RouteData routeData;
            if(String.IsNullOrEmpty(blogRequest.Subfolder))
            {
                routeData = base.GetRouteData(httpContext);
                if(routeData != null)
                {
                    //Add current subfolder info.
                    routeData.Values.Add("subfolder", string.Empty);
                }
            }
            else
            {
                routeData = RouteForSubfolder.GetRouteData(httpContext, blogRequest.Subfolder);
            }

            return routeData;
        }

        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            var request = (BlogRequest)httpContext.Items[BlogRequest.BlogRequestKey];
            return GetRouteData(httpContext, request);
        }

        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
        {
            var subfolderInRouteData = requestContext.RouteData.Values["subfolder"] as string;
            if(String.IsNullOrEmpty(subfolderInRouteData) && values != null)
            {
                subfolderInRouteData = values["subfolder"] as string;
            }
            if(String.IsNullOrEmpty(subfolderInRouteData))
            {
                return base.GetVirtualPath(requestContext, values);
            }
            return RouteForSubfolder.GetVirtualPath(requestContext, values);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class SubtextRouteMapper
    {
        public SubtextRouteMapper(RouteCollection routes, IServiceLocator serviceLocator)
        {
            Routes = routes;
            ServiceLocator = serviceLocator;
        }

        public IServiceLocator ServiceLocator
        {
            get; 
            private set;
        }

        protected RouteCollection Routes { get; private set; }

        public void Add(string routeName, RouteBase route)
        {
            Routes.Add(routeName, route);
        }

        public void Add(RouteBase route)
        {
            Routes.Add(route);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using Subtext.Framework.XmlRpc;

namespace Subtext.Framework.Routing
{
    public static class SubtextRouteExtensions
    {
        public static IEnumerable<string> GetControlNames(this RouteData routeData)
        {
            if(routeData.DataTokens == null)
            {
                return null;
            }
            return routeData.DataTokens[PageRoute.ControlNamesKey] as IEnumerable<string>;
        }

        public static void MapDirectory(this SubtextRouteMapper routes, string directoryName)
        {
            routes.Add(directoryName, new DirectoryRoute(directoryName, routes.ServiceLocator));
        }

        public static void MapSystemDirectories(this SubtextRouteMapper routes, params string[] directoryNames)
        {
            foreach(var directoryName in directoryNames)
            {
                routes.MapSystemDirectory(directoryName);
            }
        }

        public static void MapSystemDirectory(this SubtextRouteMapper routes, string directoryName)
        {
            routes.Add(directoryName, new SystemDirectoryRoute(directoryName, routes.ServiceLocator));
        }

        public static void MapControls(this SubtextRouteMapper routes, string url, object constraints,
                                       IEnumerable<string> controls)
        {
            routes.MapControls(null, url, ToRouteValueDictionary(constraints), controls, null);
        }

        public static void MapControls(this SubtextRouteMapper routes, string url, RouteValueDictionary constraints,
                                       IEnumerable<string> controls)
        {
            routes.MapControls(null, url, constraints, controls, null);
        }

        public static void MapControls(this SubtextRouteMapper routes, string name, string url, object constraints,
                                       IEnumerable<string> controls)
        {
            routes.MapControls(name, url, ToRouteValueDictionary(constraints), controls, null);
        }

        public static void MapControls(this SubtextRouteMapper routes, string name, string url,
                                       RouteValueDictionary constraints, IEnumerable<string> controls)
        {
            routes.MapControls(name, url, constraints, controls, null);
        }

        public static void MapControls(this SubtextRouteMapper routes, string name, string url,
                                       RouteValueDictionary constraints, IEnumerable<string> controls, RouteValueDictionary defaults)
        {
            var pageRoute = 
            new PageRoute(url, "~/aspx/Dtp.aspx", controls, routes.ServiceLocator)
            {
                Constraints = constraints,
                Defaults = defaults
            };
            routes.Add(name, pageRoute);
        }

        public static void MapControls(this SubtextRouteMapper routes, string url, IEnumerable<string> controls)
        {
            routes.MapControls(url, null, controls);
        }

        public static void MapPagesToControlOfSameName(this SubtextRouteMapper routes, params string[] controlNames)
        {
            foreach(var controlName in controlNames)
            {
                routes.MapPageToControl(controlName);
            }
        }

        public static void MapPageToControl(this SubtextRouteMapper routes, string controlName)
        {
            routes.MapControls(controlName, controlName + ".aspx", null, new[] {controlName});
        }

        /// <summary>
        /// We need special handling here because of Aggregate blogs.
        /// </summary>
        /// <param name="routes"></param>
        public static void MapRoot(this SubtextRouteMapper routes)
        {
            routes.Add("root",
                       new RootRoute(
                           String.Equals(ConfigurationManager.AppSettings["AggregateEnabled"], "true",
                                         StringComparison.OrdinalIgnoreCase), routes.ServiceLocator));
        }

        public static void MapPage(this SubtextRouteMapper routes, string name)
        {
            string url = string.Format("{0}.aspx", name);
            routes.Add(name, new SubtextRoute(url, new PageRouteHandler(string.Format("~/aspx/{0}", url), routes.ServiceLocator.GetService<ISubtextPageBuilder>(), routes.ServiceLocator)));
        }

        public static void MapSystemPage(this SubtextRouteMapper routes, string name)
        {
            string url = string.Format("{0}.aspx", name);
            routes.Add(name,
                       new Route(url,
                                 new PageRouteHandler(string.Format("~/aspx/{0}", url), routes.ServiceLocator.GetService<ISubtextPageBuilder>(),
                                                      routes.ServiceLocator)));
        }

        public static void MapHttpHandler<THttpHandler>(this SubtextRouteMapper routes, string name, string url)
            where THttpHandler : IHttpHandler
        {
            routes.Add(name, new SubtextRoute(url, new HttpRouteHandler<THttpHandler>(routes.ServiceLocator)));
        }

        public static void MapHttpHandler<THttpHandler>(this SubtextRouteMapper routes, string url)
            where THttpHandler : IHttpHandler
        {
            routes.MapHttpHandler<THttpHandler>(null, url);
        }

        public static void MapXmlRpcHandler<TXmlRpcHandler>(this SubtextRouteMapper routes, string url,
                                                            object constraints)
            where TXmlRpcHandler : SubtextXmlRpcService
        {
            routes.Add(new SubtextRoute(url, new XmlRpcRouteHandler<TXmlRpcHandler>(routes.ServiceLocator)));
        }

        public static void MapXmlRpcHandler<TXmlRpcHandler>(this SubtextRouteMapper routes, string name, string url,
                                                            object constraints)
            where TXmlRpcHandler : SubtextXmlRpcService
        {
            routes.Add(name, new SubtextRoute(url, new XmlRpcRouteHandler<TXmlRpcHandler>(routes.ServiceLocator)));
        }

        public static void MapHttpHandler<THttpHandler>(this SubtextRouteMapper routes, string name, string url,
                                                        object constraints) where THttpHandler : IHttpHandler
        {
            var route = new SubtextRoute(url, new HttpRouteHandler<THttpHandler>(routes.ServiceLocator))
            {
                Constraints = ToRouteValueDictionary(constraints)
            };
            routes.Add(name, route);
        }

        public static void MapHttpHandler<THttpHandler>(this SubtextRouteMapper routes, string url, object constraints)
            where THttpHandler : IHttpHandler
        {
            routes.MapHttpHandler<THttpHandler>(null, url, constraints);
        }

        public static void MapImageRoute(this SubtextRouteMapper routes, string routeName, string url)
        {
            routes.Add(routeName, new ImageRoute(url));
        }
        
        public static void MapRoute(this SubtextRouteMapper routes, string routeName, string url, object defaults)
        {
            routes.MapRoute(routeName, url, defaults, null);
        }

        public static void MapRoute(this SubtextRouteMapper routes, string routeName, string url, object defaults,
                                    object constraints)
        {
            routes.Add(routeName, new SubtextRoute(url, new MvcRouteHandler())
            {
                Defaults = ToRouteValueDictionary(defaults),
                Constraints = ToRouteValueDictionary(constraints)
            });
        }

        public static void Ignore(this SubtextRouteMapper routes, string url)
        {
            routes.Add(new IgnoreRoute(url));
        }

        public static string GetSubfolder(this RouteData routeData)
        {
            return routeData.Values["subfolder"] as string;
        }

        private static RouteValueDictionary ToRouteValueDictionary(object anonymousDictionary)
        {
            if(anonymousDictionary == null)
            {
                return null;
            }
            if(anonymousDictionary is RouteValueDictionary)
            {
                return (RouteValueDictionary)anonymousDictionary;
            }
            return new RouteValueDictionary(anonymousDictionary);
        }

        public static Uri ToFullyQualifiedUrl(this VirtualPath virtualPath, Blog blog)
        {
            if(virtualPath == null)
            {
                return null;
            }

            if(blog == null)
            {
                throw new ArgumentNullException("blog");
            }

            var builder = new UriBuilder {Scheme = "http", Host = blog.Host};
            if(HttpContext.Current != null && HttpContext.Current.Request != null && HttpContext.Current.Request.Url.Port != 80)
            {
                builder.Port = HttpContext.Current.Request.Url.Port;
            }
            return new Uri(builder.Uri, virtualPath);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class SystemDirectoryRoute : Route, IDirectoryRoute
    {
        public SystemDirectoryRoute(string directoryName, IServiceLocator serviceLocator)
            : base(directoryName + "/{*pathInfo}", new DirectoryRouteHandler(serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator))
        {
            DirectoryName = directoryName;
        }

        public string DirectoryName { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Routing;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Web;

namespace Subtext.Framework.Routing
{
    public class UrlHelper
    {
        protected UrlHelper()
        {
        }

        public UrlHelper(RequestContext context, RouteCollection routes)
        {
            RequestContext = context ??
                             new RequestContext(new HttpContextWrapper(System.Web.HttpContext.Current), new RouteData());
            Routes = routes ?? RouteTable.Routes;
        }

        public HttpContextBase HttpContext
        {
            get { return RequestContext.HttpContext; }
        }

        protected RequestContext RequestContext { get; private set; }

        public RouteCollection Routes { get; private set; }

        public virtual VirtualPath AppRoot()
        {
            return new VirtualPath(GetNormalizedAppPath());
        }

        private string GetNormalizedAppPath()
        {
            string appRoot = HttpContext.Request.ApplicationPath;
            if(!appRoot.EndsWith("/"))
            {
                appRoot += "/";
            }
            return appRoot;
        }

        public virtual VirtualPath CommentUpdateStatus()
        {
            return GetVirtualPath("comments-admin", 
                new RouteValueDictionary {{"action", "updatestatus"}, {"controller", "comment"}});
        }

        public virtual VirtualPath CommentDestroy()
        {
            return GetVirtualPath("comments-admin",
                new RouteValueDictionary { { "action", "destroy" }, { "controller", "comment" } });
        }

        public virtual VirtualPath FeedbackUrl(FeedbackItem comment)
        {
            if(comment == null)
            {
                throw new ArgumentNullException("comment");
            }
            if(comment.FeedbackType == FeedbackType.ContactPage || comment.Entry == null)
            {
                return null;
            }
            string entryUrl = EntryUrl(comment.Entry);
            if(string.IsNullOrEmpty(entryUrl))
            {
                return null;
            }
            return string.Format("{0}#{1}", entryUrl, comment.Id);
        }

        public virtual VirtualPath EntryUrl(IEntryIdentity entry)
        {
            return EntryUrl(entry, null);
        }

        public virtual VirtualPath EntryUrl(IEntryIdentity entry, Blog entryBlog)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }
            if(entry.PostType == PostType.None)
            {
                throw new ArgumentException(Resources.Argument_EntryMustHaveValidPostType, "entry");
            }

            if(NullValue.IsNull(entry.Id))
            {
                return null;
            }

            string routeName;
            var routeValues = new RouteValueDictionary();

            if(entry.PostType == PostType.BlogPost)
            {
#if DEBUG
                var blogEntry = entry as Entry;
                if(blogEntry != null && blogEntry.IsActive && blogEntry.DateSyndicated.Year == 1)
                {
                    throw new InvalidOperationException("DateSyndicated was not properly set.");
                }
#endif
                routeValues.Add("year", entry.DateSyndicated.ToString("yyyy", CultureInfo.InvariantCulture));
                routeValues.Add("month", entry.DateSyndicated.ToString("MM", CultureInfo.InvariantCulture));
                routeValues.Add("day", entry.DateSyndicated.ToString("dd", CultureInfo.InvariantCulture));
                routeName = "entry-";
            }
            else
            {
                routeName = "article-";
            }

            if(string.IsNullOrEmpty(entry.EntryName))
            {
                routeValues.Add("id", entry.Id);
                routeName += "by-id";
            }
            else
            {
                routeValues.Add("slug", entry.EntryName);
                routeName += "by-slug";
            }
            if(entryBlog != null)
            {
                routeValues.Add("subfolder", entryBlog.Subfolder);
            }

            VirtualPathData virtualPath = Routes.GetVirtualPath(RequestContext, routeName, routeValues);
            if(virtualPath != null)
            {
                return virtualPath.VirtualPath;
            }
            return null;
        }

        private static string NormalizeFileName(string filename)
        {
            if(filename.StartsWith("/"))
            {
                return filename.Substring(1);
            }
            return filename;
        }

        private string GetImageDirectoryTildePath(Blog blog)
        {
            string host = blog.Host.Replace(":", "_").Replace(".", "_");
            string appPath = GetNormalizedAppPath().Replace(".", "_");
            string subfolder = String.IsNullOrEmpty(blog.Subfolder) ? String.Empty : blog.Subfolder + "/";
            return string.Format("~/images/{0}{1}{2}", host, appPath, subfolder);
        }

        private string GetImageTildePath(Blog blog, string filename)
        {
            return GetImageDirectoryTildePath(blog) + NormalizeFileName(filename);
        }

        private string GetGalleryImageTildePath(Image image, string filename)
        {
            return string.Format("{0}{1}/{2}", GetImageDirectoryTildePath(image.Blog), image.CategoryID, filename);
        }

        /// <summary>
        /// Returns the URL for an image that was uploaded to a blog via MetaWeblog API. The image 
        /// is not associated with an image gallery.
        /// </summary>
        /// <param name="blog"></param>
        /// <param name="filename"></param>
        /// <returns></returns>
        public virtual VirtualPath ImageUrl(Blog blog, string filename)
        {
            return ResolveUrl(GetImageTildePath(blog, filename));
        }

        /// <summary>
        /// Returns the URL for a system image that's directly in the images directory.
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        public virtual VirtualPath ImageUrl(string filename)
        {
            return ResolveUrl(string.Format("~/images/{0}", filename));
        }

        /// <summary>
        /// Returns the direct URL to an image within a gallery.
        /// </summary>
        /// <param name="image"></param>
        /// <returns></returns>
        public virtual VirtualPath GalleryImageUrl(Image image)
        {
            return GalleryImageUrl(image, image.OriginalFile);
        }

        public VirtualPath GalleryImageUrl(Image image, string fileName)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }

            if(!String.IsNullOrEmpty(image.Url))
            {
                return ResolveUrl(image.Url + fileName);
            }
            return ResolveUrl(GetGalleryImageTildePath(image, fileName));
        }

        public virtual VirtualPath ImageDirectoryUrl(Blog blog)
        {
            return ResolveUrl(GetImageDirectoryTildePath(blog));
        }

        /// <summary>
        /// Returns the physical gallery path for the specified category.
        /// </summary>
        public virtual string GalleryDirectoryPath(Blog blog, int categoryId)
        {
            string path = ImageGalleryDirectoryUrl(blog, categoryId);
            return HttpContext.Server.MapPath(path);
        }

        public virtual string ImageDirectoryPath(Blog blog)
        {
            return HttpContext.Server.MapPath(ImageDirectoryUrl(blog));
        }

        /// <summary>
        /// Returns the URL to a page that displays an image within a gallery.
        /// </summary>
        /// <param name="image"></param>
        /// <returns></returns>
        public virtual VirtualPath GalleryImagePageUrl(Image image)
        {
            if(image == null)
            {
                throw new ArgumentNullException("image");
            }
            var routeValues = GetRouteValuesWithSubfolder(image.Blog.Subfolder) ?? new RouteValueDictionary();
            routeValues.Add("id", image.ImageID);

            return GetVirtualPath("gallery-image", routeValues);
        }

        public virtual VirtualPath ImageGalleryDirectoryUrl(Blog blog, int galleryId)
        {
            var image = new Image {Blog = blog, CategoryID = galleryId};
            string imageUrl = GalleryImageUrl(image, string.Empty);
            if(!imageUrl.EndsWith("/"))
            {
                imageUrl += "/";
            }
            return imageUrl;
        }

        public virtual VirtualPath GalleryUrl(int id)
        {
            return GetVirtualPath("gallery", new RouteValueDictionary{{"id", id}});
        }

        public virtual VirtualPath GalleryUrl(Image image)
        {
            var routeValues = GetRouteValuesWithSubfolder(image.Blog.Subfolder) ?? new RouteValueDictionary();
            routeValues.Add("id", image.CategoryID);

            return GetVirtualPath("gallery", routeValues);
        }

        public virtual VirtualPath AggBugUrl(int id)
        {
            return GetVirtualPath("aggbug", new RouteValueDictionary { { "id", id } });
        }

        public virtual VirtualPath ResolveUrl(string virtualPath)
        {
            return RequestContext.HttpContext.ExpandTildePath(virtualPath);
        }

        public virtual VirtualPath BlogUrl()
        {
            string vp = GetVirtualPath("root", null);
            return BlogUrl(vp);
        }

        public virtual VirtualPath BlogUrl(Blog blog)
        {
            if(String.IsNullOrEmpty(blog.Subfolder))
            {
                return BlogUrl();
            }
            string vp = GetVirtualPath("root", GetRouteValuesWithSubfolder(blog.Subfolder));
            return BlogUrl(vp);
        }

        private static VirtualPath BlogUrl(string virtualPath)
        {
            if(!(virtualPath ?? string.Empty).EndsWith("/"))
            {
                virtualPath += "/";
            }
            if(!HttpRuntime.UsingIntegratedPipeline)
            {
                virtualPath += "default.aspx";
            }
            return virtualPath;
        }

        public virtual VirtualPath ContactFormUrl()
        {
            return GetVirtualPath("contact", null);
        }

        public virtual VirtualPath SearchPageUrl()
        {
            return GetVirtualPath("search", null);
        }

        public virtual VirtualPath SearchPageUrl(string keywords)
        {
            return GetVirtualPath("search", new { q = keywords });
        }

        public virtual VirtualPath MonthUrl(DateTime dateTime)
        {
            var routeValues = new RouteValueDictionary
            {
                { "year", dateTime.ToString("yyyy", CultureInfo.InvariantCulture) }, 
                { "month", dateTime.ToString("MM", CultureInfo.InvariantCulture) }
            };
            return GetVirtualPath("entries-by-month", routeValues);
        }

        public virtual VirtualPath CommentApiUrl(int entryId)
        {
            return GetVirtualPath("comment-api", new RouteValueDictionary { { "id", entryId } });
        }

        public virtual VirtualPath CommentRssUrl(int entryId)
        {
            return GetVirtualPath("comment-rss", new RouteValueDictionary { { "id", entryId } });
        }

        public virtual VirtualPath TrackbacksUrl(int entryId)
        {
            return GetVirtualPath("trackbacks", new RouteValueDictionary { { "id", entryId } });
        }

        public virtual VirtualPath CategoryUrl(Category category)
        {
            var routeValues = new RouteValueDictionary {{"slug", category.Id}, {"categoryType", "category"}};
            return GetVirtualPath("category", routeValues);
        }

        public virtual VirtualPath CategoryRssUrl(Category category)
        {
            return GetVirtualPath("rss", new RouteValueDictionary {{"catId", category.Id}});
        }

        /// <summary>
        /// Returns the url for all posts on the day specified by the date
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        public virtual VirtualPath DayUrl(DateTime date)
        {
            var routeValues = new RouteValueDictionary
            {
                { "year", date.ToString("yyyy", CultureInfo.InvariantCulture) }, 
                { "month", date.ToString("MM", CultureInfo.InvariantCulture) }, 
                { "day", date.ToString("dd", CultureInfo.InvariantCulture) }
            };

            return GetVirtualPath("entries-by-day", routeValues);
        }

        /// <summary>
        /// Returns the url for all posts on the day specified by the date
        /// </summary>
        public virtual Uri RssUrl(Blog blog)
        {
            if(blog.RssProxyEnabled)
            {
                return RssProxyUrl(blog);
            }

            RouteValueDictionary routeValues = GetRouteValuesWithSubfolder(blog.Subfolder);
            return GetVirtualPath("rss", routeValues).ToFullyQualifiedUrl(blog);
        }

        /// <summary>
        /// Returns the url for all posts on the day specified by the date
        /// </summary>
        public virtual Uri AtomUrl(Blog blog)
        {
            if(blog.RssProxyEnabled)
            {
                return RssProxyUrl(blog);
            }

            return GetVirtualPath("atom", null).ToFullyQualifiedUrl(blog);
        }

        public virtual Uri RssProxyUrl(Blog blog)
        {
            //TODO: Store this in db.
            string feedburnerUrl = ConfigurationManager.AppSettings["FeedBurnerUrl"];
            feedburnerUrl = String.IsNullOrEmpty(feedburnerUrl) ? "http://feedproxy.google.com/" : feedburnerUrl;
            return new Uri(new Uri(feedburnerUrl), blog.RssProxyUrl);
        }

        public virtual VirtualPath GetVirtualPath(string routeName, object routeValues)
        {
            RouteValueDictionary routeValueDictionary = null;

            if(routeValues is RouteValueDictionary)
            {
                routeValueDictionary = (RouteValueDictionary)routeValues;
            }

            if(routeValues != null)
            {
                routeValueDictionary = new RouteValueDictionary(routeValues);
            }
            return GetVirtualPath(routeName, routeValueDictionary);
        }

        public virtual VirtualPath GetVirtualPath(string routeName, RouteValueDictionary routeValues)
        {
            VirtualPathData virtualPath = Routes.GetVirtualPath(RequestContext, routeName, routeValues);
            if(virtualPath == null)
            {
                return null;
            }
            return virtualPath.VirtualPath;
        }

        public virtual VirtualPath LoginUrl()
        {
            return LoginUrl(null);
        }

        public virtual VirtualPath LoginUrl(string returnUrl)
        {
            RouteValueDictionary routeValues = null;
            if(!String.IsNullOrEmpty(returnUrl))
            {
                routeValues = new RouteValueDictionary {{"ReturnUrl", returnUrl}};
            }
            return GetVirtualPath("login", routeValues);
        }

        public virtual VirtualPath LogoutUrl()
        {
            return GetVirtualPath("logout", null);
        }

        public virtual VirtualPath ArchivesUrl()
        {
            return GetVirtualPath("archives", null);
        }

        public virtual VirtualPath AdminUrl(string path)
        {
            return AdminUrl(path, null);
        }

        public virtual VirtualPath AdminUrl(string path, object routeValues)
        {
            RouteValueDictionary routeValueDict = (routeValues as RouteValueDictionary) ??
                                                  new RouteValueDictionary(routeValues);
            return AdminUrl(path, routeValueDict);
        }

        public virtual VirtualPath HostAdminUrl(string path)
        {
            return ResolveUrl(string.Format("~/hostadmin/{0}", EnsureDefaultAspx(path)));
        }

        public virtual VirtualPath AdminUrl(string path, RouteValueDictionary routeValues)
        {
            return GetUrl("admin", path, routeValues);
        }

        private VirtualPath GetUrl(string directory, string path, RouteValueDictionary routeValues)
        {
            routeValues = routeValues ?? new RouteValueDictionary();
            if(!HttpRuntime.UsingIntegratedPipeline)
            {
                path = EnsureDefaultAspx(path);
            }
            else
            {
                path = EnsureTrailingSlash(path);
            }
            routeValues.Add("pathinfo", path);
            return GetVirtualPath(directory, routeValues);
        }

        private static string EnsureDefaultAspx(string path)
        {
            if(!path.EndsWith(".aspx", StringComparison.OrdinalIgnoreCase))
            {
                if(path.Length > 0 && !path.EndsWith("/", StringComparison.Ordinal))
                {
                    path += "/";
                }
                path += "default.aspx";
            }
            return path;
        }

        private static string EnsureTrailingSlash(string path)
        {
            if(!path.EndsWith(".aspx", StringComparison.OrdinalIgnoreCase) && 
                !path.EndsWith("/", StringComparison.Ordinal))
            {
                return path + "/";
            }
            return path;
        }

        public virtual VirtualPath AdminRssUrl(string feedName)
        {
            return GetVirtualPath("admin-rss", new RouteValueDictionary{{"feedName", feedName}});
        }

        public virtual Uri MetaWeblogApiUrl(Blog blog)
        {
            VirtualPath vp = GetVirtualPath("metaweblogapi", null);
            return vp.ToFullyQualifiedUrl(blog);
        }

        public virtual Uri RsdUrl(Blog blog)
        {
            VirtualPath vp = GetVirtualPath("rsd", null);
            return vp.ToFullyQualifiedUrl(blog);
        }

        public virtual VirtualPath WlwManifestUrl()
        {
            VirtualPath vp = GetVirtualPath("wlwmanifest", null);
            return vp;
        }

        public virtual VirtualPath OpenSearchDescriptorUrl()
        {
            VirtualPath vp = GetVirtualPath("opensearchdesc", null);
            return vp;
        }

        public virtual VirtualPath CustomCssUrl()
        {
            return GetVirtualPath("customcss", null);
        }

        public virtual VirtualPath EditIconUrl()
        {
            return AppRoot() + "images/icons/edit.gif";
        }

        public virtual VirtualPath TagUrl(string tagName)
        {
            return GetVirtualPath("tag", new RouteValueDictionary{{"tag", tagName.Replace("#", "{:#:}")}});
        }

        public virtual VirtualPath TagCloudUrl()
        {
            return GetVirtualPath("tag-cloud", null);
        }

        public virtual VirtualPath IdenticonUrl(int code)
        {
            return GetVirtualPath("identicon", new RouteValueDictionary{{"code", code}});
        }

        private static RouteValueDictionary GetRouteValuesWithSubfolder(string subfolder)
        {
            if(String.IsNullOrEmpty(subfolder))
            {
                return null;
            }
            return new RouteValueDictionary {{"subfolder", subfolder}};
        }

        public virtual VirtualPath Logout()
        {
            return GetVirtualPath("logout", new RouteValueDictionary {{"action", "logout"}, {"controller", "account"}});
        }

        // Code inspidered from this article: http://dotnetperls.com/google-query
        public static string ExtractKeywordsFromReferrer(Uri referrer, Uri currentPath)
        {
            if(referrer.Host == currentPath.Host)
                return string.Empty;

            string u = referrer.OriginalString.ToLower();

            //This looks for parameters named q (Google, Bing, possibly others)
            int start = u.IndexOf("&q=", StringComparison.Ordinal);
            int length = 3;

            if (start == -1)
            {
                start = u.IndexOf("q=", StringComparison.Ordinal);
                length = 2;
            }

            //This looks for parameters named p (Yahoo)
            if (start == -1)
            {
                start = u.IndexOf("p=", StringComparison.Ordinal);
                length = 2;
            }

            //Nothing found
            if (start == -1)
            {
                return string.Empty;
            }


            //Get Keywords
            start += length;

            int end = u.IndexOf('&', start);

            if (end == -1)
            {
                end = u.Length;
            }

            string sub = u.Substring(start, end - start);

            string result = HttpUtility.UrlDecode(sub);

            result = StripUnwantedClauses(result);

            return result;
        }

        private static string StripUnwantedClauses(string result)
        {
            Regex regex = new Regex(@"(^|\s)site:http(s?)://[\w|.|/|?]*(\s|$)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
            return regex.Replace(result, "");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Routing
{
    public class VirtualPath
    {
        readonly Uri _virtualPath;

        public VirtualPath(string virtualPath)
        {
            if(virtualPath == null)
            {
                throw new ArgumentNullException("virtualPath");
            }
            virtualPath = virtualPath.Replace("%7B:#:%7D", "%23");
            _virtualPath = new Uri(virtualPath, UriKind.Relative);
        }

        public static implicit operator String(VirtualPath vp)
        {
            if(vp == null)
            {
                return null;
            }
            return vp.ToString();
        }

        public static implicit operator VirtualPath(string virtualPath)
        {
            if(String.IsNullOrEmpty(virtualPath))
            {
                return null;
            }
            return new VirtualPath(virtualPath);
        }

        public override string ToString()
        {
            return _virtualPath.ToString();
        }

        public Uri ToUri()
        {
            return _virtualPath;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using System.Web.Routing;
using Subtext.Framework.XmlRpc;
using Subtext.Infrastructure;

namespace Subtext.Framework.Routing
{
    public class XmlRpcRouteHandler<THandler> : IRouteHandler where THandler : SubtextXmlRpcService
    {
        public XmlRpcRouteHandler(IServiceLocator serviceLocator)
        {
            ServiceLocator = serviceLocator;
        }

        protected IServiceLocator ServiceLocator { get; private set; }

        public IHttpHandler GetHttpHandler(RequestContext requestContext)
        {
            Bootstrapper.RequestContext = requestContext;
            return ServiceLocator.GetService<THandler>();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Web.Caching;

namespace Subtext.Infrastructure
{
    public class SubtextCache : ICache
    {
        public SubtextCache(Cache cache)
        {
            Cache = cache;
        }

        protected Cache Cache { get; set; }

        public object this[string key]
        {
            get { return Cache.Get(key); }
            set { Cache[key] = value; }
        }

        public void Insert(string key, object value)
        {
            Cache.Insert(key, value);
        }

        public void Insert(string key, object value, CacheDependency dependency)
        {
            Cache.Insert(key, value, dependency);
        }

        public void Insert(string key, object value, CacheDependency dependency, DateTime absoluteExpiration,
                           TimeSpan slidingExpiration)
        {
            Cache.Insert(key, value, dependency, absoluteExpiration, slidingExpiration);
        }

        public void Remove(string key)
        {
            Cache.Remove(key);
        }

        public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration,
                           TimeSpan slidingExpiration, CacheItemPriority priority,
                           CacheItemRemovedCallback onRemoveCallback)
        {
            Cache.Insert(key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback);
        }

        public IEnumerator GetEnumerator()
        {
            return Cache.GetEnumerator();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Infrastructure
{
    // TimeZoneInfo is sealed. :(
    public class TimeZoneWrapper : ITimeZone
    {
        readonly Func<DateTime> _utcNowFactory;

        public TimeZoneWrapper(TimeZoneInfo timeZone)
            : this(timeZone, TimeZoneInfo.Local, () => DateTime.UtcNow)
        {
        }

        public TimeZoneWrapper(TimeZoneInfo timeZone, TimeZoneInfo serverTimeZone, Func<DateTime> utcNowFactory)
        {
            TimeZoneInfo = timeZone;
            ServerTimeZoneInfo = serverTimeZone;
            _utcNowFactory = utcNowFactory;
        }

        protected TimeZoneInfo TimeZoneInfo { get; private set; }

        protected TimeZoneInfo ServerTimeZoneInfo { get; private set; }

        #region ITimeZone Members

        public DateTime UtcNow
        {
            get { return _utcNowFactory(); }
        }

        public DateTime Now
        {
            get { return TimeZoneInfo.ConvertTimeFromUtc(UtcNow, TimeZoneInfo); }
        }

        public DateTime ServerNow
        {
            get { return TimeZoneInfo.ConvertTimeFromUtc(UtcNow, ServerTimeZoneInfo); }
        }

        public DateTime ToUtc(DateTime dateTime)
        {
            return TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo, TimeZoneInfo.Utc);
        }

        public DateTime FromUtc(DateTime dateTime)
        {
            if(dateTime.Kind != DateTimeKind.Utc)
            {
                dateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, dateTime.Hour, dateTime.Minute, dateTime.Second, dateTime.Millisecond, DateTimeKind.Unspecified);
            }
            return FromTimeZone(dateTime, TimeZoneInfo.Utc);
        }

        public DateTime FromTimeZone(DateTime dateTime, TimeZoneInfo sourceTimeZone)
        {
            return TimeZoneInfo.ConvertTime(dateTime, sourceTimeZone, TimeZoneInfo);
        }

        public DateTime ToServerDateTime(DateTime dateTime)
        {
            return TimeZoneInfo.ConvertTime(dateTime, TimeZoneInfo, ServerTimeZoneInfo);
        }

        public bool IsInPast(DateTime dateTime, TimeZoneInfo sourceTimeZone)
        {
            return FromTimeZone(dateTime, sourceTimeZone) < Now;
        }

        public bool IsInFuture(DateTime dateTime, TimeZoneInfo sourceTimeZone)
        {
            return FromTimeZone(dateTime, sourceTimeZone) > Now;
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Security.Principal;
using System.Web;
using System.Web.Routing;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Infrastructure;

namespace Subtext.Framework
{
    public interface ISubtextContext
    {
        Blog Blog { get; }
        ObjectProvider Repository { get; }
        RequestContext RequestContext { get; }
        HttpContextBase HttpContext { get; }
        UrlHelper UrlHelper { get; }
        IPrincipal User { get; }
        ICache Cache { get; }
        IServiceLocator ServiceLocator { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework
{
    /// <summary>
    /// Summary description for Links.
    /// </summary>
    public static class Links
    {
        public static ICollection<LinkCategory> GetCategories(CategoryType catType, ActiveFilter status)
        {
            return ObjectProvider.Instance().GetCategories(catType, status == ActiveFilter.ActiveOnly);
        }

        public static ICollection<LinkCategory> GetLinkCategoriesByPostId(int postId)
        {
            var links = new List<Link>(ObjectProvider.Instance().GetLinkCollectionByPostId(postId));
            ICollection<LinkCategory> postCategories =
                ObjectProvider.Instance().GetCategories(CategoryType.PostCollection, true /* activeOnly */);
            var categories = new LinkCategory[postCategories.Count];
            postCategories.CopyTo(categories, 0);

            foreach(LinkCategory category in categories)
            {
                LinkCategory innerCategory = category;
                if(!links.Exists(link => innerCategory.Id == link.CategoryId))
                {
                    postCategories.Remove(category);
                }
            }
            return postCategories;
        }

        public static int CreateLink(Link link)
        {
            return ObjectProvider.Instance().CreateLink(link);
        }

        public static int CreateLinkCategory(LinkCategory lc)
        {
            lc.Id = ObjectProvider.Instance().CreateLinkCategory(lc);
            return lc.Id;
        }

        public static bool DeleteLinkCategory(int categoryId)
        {
            return ObjectProvider.Instance().DeleteLinkCategory(categoryId);
        }

        public static bool DeleteLink(int linkId)
        {
            return ObjectProvider.Instance().DeleteLink(linkId);
        }
    }

    public enum ActiveFilter
    {
        None,
        ActiveOnly,
        InactiveOnly,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Data;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Logging
{
    /// <summary>
    /// Summary description for DatabaseLoggingProvider.
    /// </summary>
    public class DatabaseLoggingProvider : LoggingProvider
    {
        readonly StoredProcedures _procedures = new StoredProcedures(Config.ConnectionString);

        public int BlogId
        {
            get { return BlogRequest.Current.IsHostAdminRequest ? NullValue.NullInt32 : Config.CurrentBlog.Id; }
        }

        /// <summary>
        /// Gets a pageable collection of log entries.
        /// </summary>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public override IPagedCollection<LogEntry> GetPagedLogEntries(int pageIndex, int pageSize)
        {
            using(IDataReader reader = _procedures.GetPageableLogEntries(BlogId, pageIndex, pageSize))
            {
                return reader.ReadPagedCollection(r => r.ReadObject<LogEntry>());
            }
        }

        /// <summary>
        /// Clears the log.
        /// </summary>
        public override void ClearLog()
        {
            _procedures.LogClear(BlogId.NullIfMinValue());
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Web;
using log4net;
using log4net.Core;
using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Logging
{
    /// <summary>
    /// Provides logging for the Subtext framework. This class is typically instantiated as a 
    /// <c>private static readonly</c> member of a class in order to handle logging inside of 
    /// the class. This class is a specialized wrapper for the log4net framework.
    /// </summary>
    /// <para>
    /// The class provides methods to log messages at the following levels:
    /// </para>
    /// <remarks>
    /// <list type="definition">
    ///	<item>
    ///	<term>DEBUG</term>
    ///	<description>
    ///	The <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object)"/> and 
    ///	<see cref="M:Subtext.Framework.Logging.Log.DebugFormat(System.String,System.Object[])"/> methods log messages
    ///	at the <c>DEBUG</c> level. That is the level with that name defined in the log4net
    ///	repositories. The <see cref="P:Subtext.Framework.Logging.Log.IsDebugEnabled"/>
    ///	property tests if this level is enabled for logging.
    ///	</description>
    ///	</item>
    ///	<item>
    ///	<term>INFO</term>
    ///	<description>
    ///	The <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object)"/> and 
    ///	<see cref="M:Subtext.Framework.Logging.Log.InfoFormat(System.String,System.Object[])"/> methods log messages
    ///	at the <c>INFO</c> level. That is the level with that name defined in the log4net
    ///	repositories. The <see cref="P:Subtext.Framework.Logging.Log.IsInfoEnabled"/>
    ///	property tests if this level is enabled for logging.
    ///	</description>
    ///	</item>
    ///	<item>
    ///	<term>WARN</term>
    ///	<description>
    ///	The <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object)"/> and 
    ///	<see cref="M:Subtext.Framework.Logging.Log.WarnFormat(System.String,System.Object[])"/> methods log messages
    ///	at the <c>WARN</c> level. That is the level with that name defined in the log4net
    ///	repositories. The <see cref="P:Subtext.Framework.Logging.Log.IsWarnEnabled"/>
    ///	property tests if this level is enabled for logging.
    ///	</description>
    ///	</item>
    ///	<item>
    ///	<term>ERROR</term>
    ///	<description>
    ///	The <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object)"/> and 
    ///	<see cref="M:Subtext.Framework.Logging.Log.ErrorFormat(System.String,System.Object[])"/> methods log messages
    ///	at the <c>ERROR</c> level. That is the level with that name defined in the log4net
    ///	repositories. The <see cref="P:Subtext.Framework.Logging.Log.IsErrorEnabled"/>
    ///	property tests if this level is enabled for logging.
    ///	</description>
    ///	</item>
    ///	<item>
    ///	<term>FATAL</term>
    ///	<description>
    ///	The <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object)"/> and 
    ///	<see cref="M:Subtext.Framework.Logging.Log.FatalFormat(System.String,System.Object[])"/> methods log messages
    ///	at the <c>FATAL</c> level. That is the level with that name defined in the log4net
    ///	repositories. The <see cref="P:Subtext.Framework.Logging.Log.IsFatalEnabled"/>
    ///	property tests if this level is enabled for logging.
    ///	</description>
    ///	</item>
    ///	</list>
    /// </remarks>
    /// <example>
    /// An example of using the Log class
    /// <code lang="C#">
    /// public class Subtext.Framework.Wigdetry
    /// {
    ///		<b>private static readonly Log __log = new Log();</b>
    ///		...
    ///		public void DoSomething()
    ///		{
    ///			try
    ///			{
    ///			}
    ///			catch(Exception e)
    ///			{
    ///				<b>__log.Error("Something had gone terribly wrong", e);</b>
    ///			}
    ///		}
    /// }
    /// </code>
    /// </example>
    public class Log : ILog
    {
        private static readonly ILog __nullLog = new NullLog();
        private readonly ILog _log;

        /// <summary>
        /// Default constructor. Uses <see cref="T:System.Diagnostics.StackFrame"/> to discover the class it is being called from 
        /// and automatically establishes log name as the <see cref="P:System.Type.FullName"/> of the class type.
        /// </summary>
        [MethodImpl(MethodImplOptions.NoInlining)]
        public Log() : this(GetCallerType())
        {
        }

        /// <summary>
        /// Instantiates a log using the <see cref="P:System.Type.FullName"/> of the suppled type of the class as the name.
        /// </summary>
        /// <param name="type"><see cref="T:System.Type"/> of the class to create a log for</param>
        public Log(Type type)
        {
            _log = CreateInnerLogger(type);
        }

        /// <summary>
        /// Instantiates a log which wraps the specified inner logger.
        /// </summary>
        /// <param name="innerLogger"><see cref="T:System.Type"/> of the class to create a log for</param>
        public Log(ILog innerLogger)
        {
            _log = innerLogger;
        }

        #region ILog Members

        /// <summary>
        /// Checks if the log is enabled for the <c>ERROR</c> level.
        /// </summary>
        /// <value>
        /// <c>true</c> if this log is enabled for the <c>ERROR</c> events, <c>false</c> otherwise
        /// </value>
        /// <remarks>
        /// <para>
        /// This function is intended to lessen the computational cost of disabled log debug statements.
        /// </para>
        /// </remarks>
        public bool IsErrorEnabled
        {
            get { return _log.IsErrorEnabled; }
        }

        /// <summary>
        /// Checks if the log is enabled for the <c>FATAL</c> level.
        /// </summary>
        /// <value>
        /// <c>true</c> if this log is enabled for the <c>FATAL</c> events, <c>false</c> otherwise
        /// </value>
        /// <remarks>
        /// <para>
        /// This function is intended to lessen the computational cost of disabled log debug statements.
        /// </para>
        /// </remarks>
        public bool IsFatalEnabled
        {
            get { return _log.IsFatalEnabled; }
        }

        /// <summary>
        /// Checks if the log is enabled for the <c>WARN</c> level.
        /// </summary>
        /// <value>
        /// <c>true</c> if this log is enabled for the <c>WARN</c> events, <c>false</c> otherwise
        /// </value>
        /// <remarks>
        /// <para>
        /// This function is intended to lessen the computational cost of disabled log debug statements.
        /// </para>
        /// </remarks>
        public bool IsWarnEnabled
        {
            get { return _log.IsWarnEnabled; }
        }

        /// <summary>
        /// Checks if the log is enabled for the <c>INFO</c> level.
        /// </summary>
        /// <value>
        /// <c>true</c> if this log is enabled for the <c>INFO</c> events, <c>false</c> otherwise
        /// </value>
        /// <remarks>
        /// <para>
        /// This function is intended to lessen the computational cost of disabled log debug statements.
        /// </para>
        /// </remarks>
        public bool IsInfoEnabled
        {
            get { return _log.IsInfoEnabled; }
        }

        /// <summary>
        /// Checks if the log is enabled for the <c>DEBUG</c> level.
        /// </summary>
        /// <value>
        /// <c>true</c> if this log is enabled for the <c>DEBUG</c> events, <c>false</c> otherwise
        /// </value>
        /// <remarks>
        /// <para>
        /// This function is intended to lessen the computational cost of disabled log debug statements.
        /// </para>
        /// </remarks>
        public bool IsDebugEnabled
        {
            get { return _log.IsDebugEnabled; }
        }

        /// <summary>
        /// Logs a message with the <c>ERROR</c> level.
        /// </summary>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void ErrorFormat(IFormatProvider provider, string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.ErrorFormat(provider, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>ERROR</c> level.
        /// </summary>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void ErrorFormat(string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.ErrorFormat(CultureInfo.InvariantCulture, format, args);
        }

        /// <summary>
        /// Logs a message object with the <c>INFO</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <param name="exception">The exception to log, including its stack trace</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>INFO</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// </remarks>
        public void Info(object message, Exception exception)
        {
            SetBlogRequestContext();
            _log.Info(message, exception);
        }

        /// <summary>
        /// Logs a message object with the <c>INFO</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>INFO</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
        /// will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
        /// To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object,System.Exception)"/> form 
        /// instead.
        /// </para>
        /// </remarks>
        public void Info(object message)
        {
            SetBlogRequestContext();
            _log.Info(message);
        }

        /// <summary>
        /// Logs a message object with the <c>DEBUG</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <param name="exception">The exception to log, including its stack trace</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>DEBUG</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// This method is compiled to nothing if DEBUG compilation constant is not set (production build).
        /// </para>
        /// </remarks>
        public void Debug(object message, Exception exception)
        {
            SetBlogRequestContext();
            _log.Debug(message, exception);
        }

        /// <summary>
        /// Logs a message object with the <c>DEBUG</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>DEBUG</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
        /// will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
        /// To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object,System.Exception)"/> form 
        /// instead.
        /// </para>
        /// <para>
        /// This method is compiled to nothing if DEBUG compilation constant is not set (production build).
        /// </para>
        /// </remarks>
        public void Debug(object message)
        {
            SetBlogRequestContext();
            _log.Debug(message);
        }

        /// <summary>
        /// Logs a message object with the <c>WARN</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <param name="exception">The exception to log, including its stack trace</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>WARN</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// </remarks>
        public void Warn(object message, Exception exception)
        {
            SetBlogRequestContext();
            _log.Warn(message, exception);
        }

        /// <summary>
        /// Logs a message object with the <c>WARN</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>WARN</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
        /// will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
        /// To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object,System.Exception)"/> form 
        /// instead.
        /// </para>
        /// </remarks>
        public void Warn(object message)
        {
            SetBlogRequestContext();
            _log.Warn(message);
        }

        /// <summary>
        /// Logs a message with the <c>WARN</c> level.
        /// </summary>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void WarnFormat(IFormatProvider provider, string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.WarnFormat(provider, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>WARN</c> level.
        /// </summary>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void WarnFormat(string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.WarnFormat(CultureInfo.InvariantCulture, format, args);
        }

        /// <summary>
        /// Logs a message object with the <c>FATAL</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <param name="exception">The exception to log, including its stack trace</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>FATAL</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// </remarks>
        public void Fatal(object message, Exception exception)
        {
            SetBlogRequestContext();
            _log.Fatal(message, exception);
        }

        /// <summary>
        /// Logs a message object with the <c>FATAL</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>FATAL</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
        /// will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
        /// To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object,System.Exception)"/> form 
        /// instead.
        /// </para>
        /// </remarks>
        public void Fatal(object message)
        {
            SetBlogRequestContext();
            _log.Fatal(message);
        }

        /// <summary>
        /// Logs a message object with the <c>ERROR</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <param name="exception">The exception to log, including its stack trace</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>ERROR</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// </remarks>
        public void Error(object message, Exception exception)
        {
            SetBlogRequestContext();
            _log.Error(message, exception);
        }

        /// <summary>
        /// Logs a message object with the <c>ERROR</c> level.
        /// </summary>
        /// <param name="message">The message object to log</param>
        /// <remarks>
        /// <para>
        ///  This method first checks if this logger is <c>ERROR</c> enabled. If so, 
        ///  it converts the message object (passed as parameter) to a string 
        ///  by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
        ///  It then proceeds to call all the registered appenders in this logger and also 
        ///  higher in the hierarchy depending on the value of the additivity flag.
        /// </para>
        /// <para>
        /// <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
        /// will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
        /// To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object,System.Exception)"/> form 
        /// instead.
        /// </para>
        /// </remarks>
        public void Error(object message)
        {
            SetBlogRequestContext();
            _log.Error(message);
        }

        /// <summary>
        /// Logs a message with the <c>INFO</c> level.
        /// </summary>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void InfoFormat(IFormatProvider provider, string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.InfoFormat(provider, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>INFO</c> level.
        /// </summary>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void InfoFormat(string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.InfoFormat(CultureInfo.InvariantCulture, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>FATAL</c> level.
        /// </summary>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void FatalFormat(IFormatProvider provider, string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.FatalFormat(provider, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>FATAL</c> level.
        /// </summary>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void FatalFormat(string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.FatalFormat(CultureInfo.InvariantCulture, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>DEBUG</c> level.
        /// </summary>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object)"/> methods instead.
        /// </para>
        /// <para>
        /// This method is compiled to nothing if DEBUG compilation constant is not set (production build).
        /// </para>
        /// </remarks>
        public void DebugFormat(IFormatProvider provider, string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.DebugFormat(provider, format, args);
        }

        /// <summary>
        /// Logs a message with the <c>DEBUG</c> level.
        /// </summary>
        /// <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
        /// <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
        /// <remarks>
        /// <para>
        /// The message is formatted using the <c>String.Format</c> method. 
        /// See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
        /// of the format string and the behavior of the formatting.
        /// </para>
        /// <para>
        /// This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
        /// To pass an <see cref="T:System.Exception"/> use
        /// one of the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object)"/> methods instead.
        /// </para>
        /// </remarks>
        public void DebugFormat(string format, params object[] args)
        {
            SetBlogRequestContext();
            _log.DebugFormat(CultureInfo.InvariantCulture, format, args);
        }

        public ILogger Logger
        {
            get { return _log.Logger; }
        }

        public void DebugFormat(string format, object arg0, object arg1, object arg2)
        {
            SetBlogRequestContext();
            _log.DebugFormat(format, arg0, arg1, arg2);
        }

        public void DebugFormat(string format, object arg0, object arg1)
        {
            SetBlogRequestContext();
            _log.DebugFormat(format, arg0, arg1);
        }

        public void DebugFormat(string format, object arg0)
        {
            SetBlogRequestContext();
            _log.DebugFormat(format, arg0);
        }

        public void ErrorFormat(string format, object arg0, object arg1, object arg2)
        {
            SetBlogRequestContext();
            _log.ErrorFormat(format, arg0, arg1, arg2);
        }

        public void ErrorFormat(string format, object arg0, object arg1)
        {
            SetBlogRequestContext();
            _log.ErrorFormat(format, arg0, arg1);
        }

        public void ErrorFormat(string format, object arg0)
        {
            SetBlogRequestContext();
            _log.ErrorFormat(format, arg0);
        }

        public void FatalFormat(string format, object arg0, object arg1, object arg2)
        {
            SetBlogRequestContext();
            _log.FatalFormat(format, arg0, arg1, arg2);
        }

        public void FatalFormat(string format, object arg0, object arg1)
        {
            SetBlogRequestContext();
            _log.FatalFormat(format, arg0, arg1);
        }

        public void FatalFormat(string format, object arg0)
        {
            SetBlogRequestContext();
            _log.FatalFormat(format, arg0);
        }

        public void InfoFormat(string format, object arg0, object arg1, object arg2)
        {
            SetBlogRequestContext();
            _log.InfoFormat(format, arg0, arg1, arg2);
        }

        public void InfoFormat(string format, object arg0, object arg1)
        {
            SetBlogRequestContext();
            _log.InfoFormat(format, arg0, arg1);
        }

        public void InfoFormat(string format, object arg0)
        {
            SetBlogRequestContext();
            _log.InfoFormat(format, arg0);
        }

        public void WarnFormat(string format, object arg0, object arg1, object arg2)
        {
            SetBlogRequestContext();
            _log.WarnFormat(format, arg0, arg1, arg2);
        }

        public void WarnFormat(string format, object arg0, object arg1)
        {
            SetBlogRequestContext();
            _log.WarnFormat(format, arg0, arg1);
        }

        public void WarnFormat(string format, object arg0)
        {
            SetBlogRequestContext();
            _log.WarnFormat(format, arg0);
        }

        #endregion

        #region private class NulLog : ILog

        private class NullLog : ILog
        {
            #region ILog Members

            public void ErrorFormat(IFormatProvider provider, string format, params object[] args)
            {
            }

            void ILog.ErrorFormat(string format, params object[] args)
            {
            }

            public void Info(object message, Exception exception)
            {
            }

            void ILog.Info(object message)
            {
            }

            public void Debug(object message, Exception exception)
            {
            }

            void ILog.Debug(object message)
            {
            }

            public bool IsErrorEnabled
            {
                get { return false; }
            }

            public bool IsFatalEnabled
            {
                get { return false; }
            }

            public bool IsWarnEnabled
            {
                get { return false; }
            }

            public void Warn(object message, Exception exception)
            {
            }

            void ILog.Warn(object message)
            {
            }

            public bool IsInfoEnabled
            {
                get { return false; }
            }

            public bool IsDebugEnabled
            {
                get { return false; }
            }

            public void WarnFormat(IFormatProvider provider, string format, params object[] args)
            {
            }

            void ILog.WarnFormat(string format, params object[] args)
            {
            }

            public void Fatal(object message, Exception exception)
            {
            }

            void ILog.Fatal(object message)
            {
            }

            public void Error(object message, Exception exception)
            {
            }

            void ILog.Error(object message)
            {
            }

            public void InfoFormat(IFormatProvider provider, string format, params object[] args)
            {
            }

            void ILog.InfoFormat(string format, params object[] args)
            {
            }

            public void FatalFormat(IFormatProvider provider, string format, params object[] args)
            {
            }

            void ILog.FatalFormat(string format, params object[] args)
            {
            }

            public void DebugFormat(IFormatProvider provider, string format, params object[] args)
            {
            }

            void ILog.DebugFormat(string format, params object[] args)
            {
            }

            public ILogger Logger
            {
                get { return null; }
            }

            public void DebugFormat(string format, object arg0, object arg1, object arg2)
            {
            }

            public void DebugFormat(string format, object arg0, object arg1)
            {
            }

            public void DebugFormat(string format, object arg0)
            {
            }

            public void ErrorFormat(string format, object arg0, object arg1, object arg2)
            {
            }

            public void ErrorFormat(string format, object arg0, object arg1)
            {
            }

            public void ErrorFormat(string format, object arg0)
            {
            }

            public void FatalFormat(string format, object arg0, object arg1, object arg2)
            {
            }

            public void FatalFormat(string format, object arg0, object arg1)
            {
            }

            public void FatalFormat(string format, object arg0)
            {
            }

            public void InfoFormat(string format, object arg0, object arg1, object arg2)
            {
            }

            public void InfoFormat(string format, object arg0, object arg1)
            {
            }

            public void InfoFormat(string format, object arg0)
            {
            }

            public void WarnFormat(string format, object arg0, object arg1, object arg2)
            {
            }

            public void WarnFormat(string format, object arg0, object arg1)
            {
            }

            public void WarnFormat(string format, object arg0)
            {
            }

            #endregion
        }

        #endregion

        private static ILog CreateInnerLogger(Type type)
        {
            ILog log = LogManager.GetLogger(type);
            return log ?? __nullLog;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static Type GetCallerType()
        {
            return new StackFrame(2, false).GetMethod().DeclaringType;
        }

        /// <summary>
        /// Sets the blog id context in the Log4net ThreadContext.
        /// </summary>
        /// <param name="blogId">Blog id.</param>
        static void SetBlogIdContext(int blogId)
        {
            if(blogId == NullValue.NullInt32 && ThreadContext.Properties["BlogId"] != null)
            {
                return;
            }

            ThreadContext.Properties["BlogId"] = blogId;
        }

        static void SetBlogRequestContext()
        {
            if(HttpContext.Current != null)
            {
                try
                {
                    Uri url = HttpContext.Current.Request.Url;
                    if (url != null && ThreadContext.Properties != null)
                    {
                        ThreadContext.Properties["Url"] = url.ToString();
                    }
                }
                catch (HttpException) { 
                
                }

                if(HttpContext.Current.Items != null && BlogRequest.Current != null)
                {
                    var blog = BlogRequest.Current.Blog;
                    if(blog != null)
                    {
                        SetBlogIdContext(blog.Id);
                    }
                }
            }
        }

        /// <summary>
        /// Resets blog id context in the Log4net ThreadContext.
        /// </summary>
        public static void ResetBlogIdContext()
        {
            ThreadContext.Properties["BlogId"] = NullValue.NullInt32;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Logging
{
    /// <summary>
    /// Represents an entry within the Subtext log.
    /// </summary>
    /// <remarks>
    /// These entries as of now are added by Log4Net.
    /// </remarks>
    [Serializable]
    public class LogEntry
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogEntry"/> class.
        /// </summary>
        public LogEntry()
        {
            BlogId = NullValue.NullInt32;
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the blog id.
        /// </summary>
        /// <value>The blog id.</value>
        public int BlogId { get; set; }

        /// <summary>
        /// Gets or sets the date of the log entry.
        /// </summary>
        /// <value>The date.</value>
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or sets the id or name of thread on which 
        /// this log message was logged.
        /// </summary>
        /// <value>The thread.</value>
        public string Thread { get; set; }

        /// <summary>
        /// Gets or sets the context of the message if any was set.
        /// </summary>
        /// <value>The context.</value>
        public string Context { get; set; }

        /// <summary>
        /// Gets or sets the level of the log message.
        /// </summary>
        /// <value>The level.</value>
        public string Level { get; set; }

        /// <summary>
        /// Gets or sets the logger that logged this message.
        /// </summary>
        /// <value>The logger.</value>
        public string Logger { get; set; }

        /// <summary>
        /// Gets or sets the log message.
        /// </summary>
        /// <value>The message.</value>
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets the exception type and stack trace 
        /// if an exception was logged.
        /// </summary>
        /// <value>The exception.</value>
        public string Exception { get; set; }

        /// <summary>
        /// Gets or sets the Url that of the request that caused this 
        /// exception.
        /// </summary>
        /// <value>The URL.</value>
        public Uri Url { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Configuration.Provider;
using Subtext.Extensibility.Interfaces;

namespace Subtext.Framework.Logging
{
    /// <summary>
    /// Provider for retrieving log entries.
    /// </summary>
    public abstract class LoggingProvider : ProviderBase
    {
        /// <summary>
        /// Returns the configured concrete instance of a <see cref="LoggingProvider"/>.
        /// </summary>
        /// <returns></returns>
        public static LoggingProvider Instance()
        {
            //TODO: Make this a service.
            return new DatabaseLoggingProvider();
        }

        /// <summary>
        /// Gets a pageable collection of log entries.
        /// </summary>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public abstract IPagedCollection<LogEntry> GetPagedLogEntries(int pageIndex, int pageSize);

        /// <summary>
        /// Clears the log.
        /// </summary>
        public abstract void ClearLog();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework
{
    /// <summary>
    /// Static class used to retrieve meta tags from the data store. MetaTags are simple enough 
    /// that generic collections are used instead of custom MetaTag objects.
    /// </summary>
    public static class MetaTags
    {
        public static int Create(MetaTag metaTag)
        {
            if(metaTag == null)
            {
                throw new ArgumentNullException("metaTag");
            }

            if(!metaTag.IsValid)
            {
                throw new ArgumentException(metaTag.ValidationMessage);
            }
            metaTag.Id = ObjectProvider.Instance().Create(metaTag);

            return metaTag.Id;
        }

        public static bool Update(MetaTag metaTag)
        {
            if(metaTag == null)
            {
                throw new ArgumentNullException("metaTag");
            }

            if(!metaTag.IsValid)
            {
                throw new ArgumentException(metaTag.ValidationMessage);
            }

            return ObjectProvider.Instance().Update(metaTag);
        }

        public static bool Delete(int metaTagId)
        {
            return ObjectProvider.Instance().DeleteMetaTag(metaTagId);
        }

        public static IPagedCollection<MetaTag> GetMetaTagsForBlog(Blog blog, int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetMetaTagsForBlog(blog, pageIndex, pageSize);
        }

        public static IPagedCollection<MetaTag> GetMetaTagsForEntry(Entry entry, int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetMetaTagsForEntry(entry, pageIndex, pageSize);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#if DOCUMENTATION
using System.Diagnostics.CodeAnalysis;

namespace Subtext
{
	/// <summary>
	/// Subtext is a blogging engine built on the .NET Framework.  
	/// For more information, check out SubtextProject.com.
	/// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "This class is used to generate namespace summary documentation.")]
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}

namespace Subtext.Framework
{
	/// <summary>
	/// Contains the primary framework classes used by 
	/// the Subtext blogging engine.
	/// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "This class is used to generate namespace summary documentation.")]
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}

namespace Subtext.Framework.Configuration
{
	/// <summary>
	/// <p>
	/// Contains classes used to read various configuration data 
	/// for Subtext.  Configuration data is generally stored in two places, 
	/// Web.config or the blog_config table.</p>
	/// <p>
	/// Either way, the class to use when accessing any configuration setting 
	/// is the <see cref="Subtext.Framework.Configuration.Config" /> class.  
	/// </p>
	/// <p>
	/// The <see cref="Config.Settings"/> returns an instance of <see cref="BlogConfigurationSettings"/> 
	/// which contains settings configured in a custom section of Web.config (see the &lt;BlogConfigurationSettings&gt; 
	/// tag in Web.config).
	/// </p>
	/// <p>
	/// The <see cref="Config.CurrentBlog"/> method returns an instance of <see cref="Blog"/> 
	/// contains settings stored in the blog_config table.  This can be used to save settings to 
	/// the configuration as well.
	/// </p>
	/// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "This class is used to generate namespace summary documentation.")]
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}

namespace Subtext.Framework.Components
{
	/// <summary>
	/// Contains the primary business layer classes such as <see cref="Entry"/>, 
	/// <see cref="Image"/>, <see cref="KeyWord"/>.
	/// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "This class is used to generate namespace summary documentation.")]
	internal sealed class NamespaceDoc
	{
		private NamespaceDoc()
		{
		}
	}
}
#endif#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework
{
    /// <summary>
    /// Constants used to represent null value type.
    /// </summary>
    public static class NullValue
    {
        /// <summary>Represents a null double.</summary>
        public const double NullDouble = double.NaN;

        /// <summary>Represents a null integer.</summary>
        public const int NullInt32 = Int32.MinValue;

        /// <summary>Represents a null DateTime</summary>
        public static DateTime NullDateTime
        {
            get { return DateTime.MinValue; }
        }

        /// <summary>
        /// Determines whether the specified value is null.
        /// </summary>
        /// <param name="number">The value.</param>
        /// <returns>
        /// 	<c>true</c> if the specified value is null; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsNull(int number)
        {
            return number == NullInt32;
        }

        public static bool IsNull(Guid guid)
        {
            return guid == Guid.Empty;
        }

        /// <summary>
        /// Determines whether the specified number is null.
        /// </summary>
        /// <param name="number">The number.</param>
        /// <returns>
        /// 	<c>true</c> if the specified number is null; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsNull(double number)
        {
            return number.Equals(NullDouble);
        }

        /// <summary>
        /// Determines whether the specified date time is null.
        /// </summary>
        /// <param name="dateTime">The date time.</param>
        /// <returns>
        /// 	<c>true</c> if the specified date time is null; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsNull(DateTime dateTime)
        {
            return dateTime == NullDateTime;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics.CodeAnalysis;

namespace Subtext.Extensibility
{
    /// <summary>
    /// Think of PostConfig items as filters. These values are often used in the 
    /// WHERE clause of stored procedures, for example.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1714:FlagsEnumsShouldHavePluralNames")]
    [Flags]
    public enum PostConfig
    {
        None = 0, //no filter. Therefore if getting items, all items will be gotten.
        IsActive = 1, //filter returns only the active items
        IsXhtml = 2,
        AllowComments = 4,
        DisplayOnHomepage = 8,
        IncludeInMainSyndication = 16,
        SyndicateDescriptionOnly = 32,
        IsAggregated = 64,
        CommentsClosed = 128,
        NeedsModeratorApproval = 256,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Extensibility
{
    /// <summary>
    /// Enumerates the various types of entries within the 
    /// subtext_Content table.  A record in that table 
    /// might be any one of the following enumerations.
    /// </summary>
    public enum PostType
    {
        None = 0,
        BlogPost = 1,
        Story = 2,
    }

    /// <summary>
    /// Enumates the various types of comments within the subtext content table.
    /// </summary>
    public enum FeedbackType
    {
        None = 0,
        Comment = 1,
        PingTrack = 2,
        ContactPage = 3, //Only applies if "ContactToFeedback" is set to true.
    }
}// ---------------------------------------------------------------------------
// GlobalSuppressions.cs
//
// Provides assembly level (global) CodeAnalysis suppressions for FxCop.
//
// While static code analysis with FxCop is excellent for catching many common
// and not so common code errors, there are some things that it flags that
// do not always apply to the project at hand. For those cases, FxCop allows
// you to exclude the message (and optionally give a justification reason for
// excluding it). However, those exclusions are stored only in the FxCop
// project file. In the 2.0 version of the .NET framework, Microsoft introduced
// SuppressMessageAttribute, which is used primarily by the version of FxCop
// that is built in to Visual Studio. As this built-in functionality is not
// included in all versions of Visual Studio, we have opted to continue
// using the standalone version of FxCop. 
//
// In order for this version to recognize SupressMessageAttribute, the
// CODE_ANALYSIS symbol must be defined.
//
// ---------------------------------------------------------------------------
using System.Diagnostics.CodeAnalysis;

[assembly:
    SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames", Scope = "assembly",
        Justification = "Assemblies are not currently being signed.")]

// FxCop says that namespaces should generally have more than five types.
// Unfortunately, not all of these namespaces currently have more than five
// types but we still want the namespace so we can expand the library in the
// future without moving types around. 

#region CA1020:AvoidNamespacesWithFewTypes

[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Web.Handlers",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.ImportExport.Conversion",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.ImportExport",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Providers",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Syndication.Compression",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Format",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Web",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Services",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Text",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Security",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Web.HttpModules",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Web.HttpModules",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.UI",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Net",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Framework.Search",
        Justification =
            "Ignoring this warning...we want this namespace, but don't have enough classes to go in it right now to satisfy the rule."
        )]
[assembly: SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace", Target = "Subtext.Scripting.Exceptions")]
#endregion

// We could use a CustomDictionary.xml file to handle the spelling and case
// rules, but VS2005 Code Analysis doesn't support them and the FxCop add-ins
// and custom external tools don't rely on a project file, so we can't specify
// the location of the CustomDictionary.xml file. We don't want to modify the
// default file that ships with the FxCop distribution either. This does make
// more work for us, but it is the safest solution.

#region CA1704:IdentifiersShouldBeSpelledCorrectly

//[assembly: SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", Scope = "member", Target = "Subtext.BlogML.Interfaces.IBlogMLProvider.CreatePostTrackback(BlogML.Xml.BlogMLTrackback,System.String):System.Void", MessageId = "0#trackback")]
//[assembly: SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", Scope = "member", Target = "Subtext.BlogML.Interfaces.IBlogMLProvider.CreatePostTrackback(BlogML.Xml.BlogMLTrackback,System.String):System.Void", MessageId = "Trackback")]

#endregionï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Framework.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Subtext.Framework.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entry must have a title.
        /// </summary>
        public static string Argument_EntryHasNoTitle {
            get {
                return ResourceManager.GetString("Argument_EntryHasNoTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entry must have a valid PostType.
        /// </summary>
        public static string Argument_EntryMustHaveValidPostType {
            get {
                return ResourceManager.GetString("Argument_EntryMustHaveValidPostType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String cannot be of zero length..
        /// </summary>
        public static string Argument_StringZeroLength {
            get {
                return ResourceManager.GetString("Argument_StringZeroLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert a comment of type &apos;{0}&apos; to &apos;{1}&apos;.
        /// </summary>
        public static string ArgumentException_CommentTypeMismatch {
            get {
                return ResourceManager.GetString("ArgumentException_CommentTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We will not shorten a URL to less than 5 characters. Come on now!.
        /// </summary>
        public static string ArgumentException_TooShortUrl {
            get {
                return ResourceManager.GetString("ArgumentException_TooShortUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Length must not be negative..
        /// </summary>
        public static string ArgumentOutOfRange_LengthMustNotBeNegative {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_LengthMustNotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot request negative tags. Pass in 0 to get all tags..
        /// </summary>
        public static string ArgumentOutOfRange_NegativeTagItemCount {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NegativeTagItemCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semaphore must have a count of at least 0..
        /// </summary>
        public static string ArgumentOutOfRange_SemaphoreCount {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_SemaphoreCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We&apos;d all like to be able to go back in time, but this is not allowed. Please choose a positive timeout.
        /// </summary>
        public static string ArgumentOutOfRange_StackTraceTimeout {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_StackTraceTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to StartIndex cannot be less than zero..
        /// </summary>
        public static string ArgumentOutOfRange_StartIndex {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_StartIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Length cannot be less than zero..
        /// </summary>
        public static string ArgumnetOutOfRange_Length {
            get {
                return ResourceManager.GetString("ArgumnetOutOfRange_Length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to are {0} blogs.
        /// </summary>
        public static string BlogCountClause {
            get {
                return ResourceManager.GetString("BlogCountClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but there {0} with the specified hostname &apos;{1}&apos;.  To set up another blog with the same hostname, you must provide an subfolder name.  Please click on &apos;Host Domain&apos; below for more information..
        /// </summary>
        public static string BlogRequiresSubfolder_ThereAreBlogsWithSameHostName {
            get {
                return ResourceManager.GetString("BlogRequiresSubfolder_ThereAreBlogsWithSameHostName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but there is a delay between allowing comments originating from the same source. Please wait for {0} and try again..
        /// </summary>
        public static string CommentFrequencyException_Message {
            get {
                return ResourceManager.GetString("CommentFrequencyException_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No connection string matches the key &apos;{0}&apos;..
        /// </summary>
        public static string Configuration_KeyNotFound {
            get {
                return ResourceManager.GetString("Configuration_KeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no connectionString entry associated with the connectionStringName &apos;{0}&apos;..
        /// </summary>
        public static string ConfigurationErrros_NoConnectionString {
            get {
                return ResourceManager.GetString("ConfigurationErrros_NoConnectionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An entry with that EntryName already exists..
        /// </summary>
        public static string DuplicateEntryException_EntryNameAlreadyExists {
            get {
                return ResourceManager.GetString("DuplicateEntryException_EntryNameAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment: {0} (via {1}).
        /// </summary>
        public static string Email_CommentVia {
            get {
                return ResourceManager.GetString("Email_CommentVia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enclosure must have a mime type..
        /// </summary>
        public static string Enclosure_MimeTypeRequired {
            get {
                return ResourceManager.GetString("Enclosure_MimeTypeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enclosure requires to be bound to a Entry..
        /// </summary>
        public static string Enclosure_NeedsAnEntry {
            get {
                return ResourceManager.GetString("Enclosure_NeedsAnEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enclosure size must be greater than zero..
        /// </summary>
        public static string Enclosure_SizeGreaterThanZero {
            get {
                return ResourceManager.GetString("Enclosure_SizeGreaterThanZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enclosure must have an URL..
        /// </summary>
        public static string Enclosure_UrlRequired {
            get {
                return ResourceManager.GetString("Enclosure_UrlRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExtendedProperties bytes overflow. The ExtendedProperties is limited to 7800 bytes.
        /// </summary>
        public static string ExtendedPropertiesOverflow_Generic {
            get {
                return ResourceManager.GetString("ExtendedPropertiesOverflow_Generic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Not Found.
        /// </summary>
        public static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String was not recognized as a valid DateTime..
        /// </summary>
        public static string Format_BadDateTime {
            get {
                return ResourceManager.GetString("Format_BadDateTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not format &apos;{0}:{1}&apos;.
        /// </summary>
        public static string Format_CouldNotFormatExpression {
            get {
                return ResourceManager.GetString("Format_CouldNotFormatExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid blog id &apos;{0}&apos; specified.
        /// </summary>
        public static string Format_InvalidBlogId {
            get {
                return ResourceManager.GetString("Format_InvalidBlogId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Expression.
        /// </summary>
        public static string Format_InvalidExpression {
            get {
                return ResourceManager.GetString("Format_InvalidExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Post ID..
        /// </summary>
        public static string Format_InvalidPostId {
            get {
                return ResourceManager.GetString("Format_InvalidPostId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing attribute &apos;{0}&apos;..
        /// </summary>
        public static string HttpException_MissingAttribute {
            get {
                return ResourceManager.GetString("HttpException_MissingAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal Characters Found.
        /// </summary>
        public static string IllegalPostCharacters {
            get {
                return ResourceManager.GetString("IllegalPostCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occurred while importing a comment.
        /// </summary>
        public static string Import_ErrorWhileImportingComment {
            get {
                return ResourceManager.GetString("Import_ErrorWhileImportingComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backslashes are not allowed in the rss proxy name..
        /// </summary>
        public static string InvalidOperation_BackslashesInRssProxyName {
            get {
                return ResourceManager.GetString("InvalidOperation_BackslashesInRssProxyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot destroy an approved comment. Please flag it as spam or trash it first..
        /// </summary>
        public static string InvalidOperation_CannotDestroyApprovedComment {
            get {
                return ResourceManager.GetString("InvalidOperation_CannotDestroyApprovedComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContentRegion with ID &apos;{0}&apos; must be Defined.
        /// </summary>
        public static string InvalidOperation_ContentRegionNotFound {
            get {
                return ResourceManager.GetString("InvalidOperation_ContentRegionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Content Type must be text/xml.
        /// </summary>
        public static string InvalidOperation_ContentTypeMustBeXml {
            get {
                return ResourceManager.GetString("InvalidOperation_ContentTypeMustBeXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot destroy an active comment..
        /// </summary>
        public static string InvalidOperation_DestroyActiveComment {
            get {
                return ResourceManager.GetString("InvalidOperation_DestroyActiveComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectoryRouteHandler only works with IDirectoryRoutes.
        /// </summary>
        public static string InvalidOperation_DirectoryRouteHandlerWorksWithDirectoryRoutes {
            get {
                return ResourceManager.GetString("InvalidOperation_DirectoryRouteHandlerWorksWithDirectoryRoutes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Host record already exists.
        /// </summary>
        public static string InvalidOperation_HostRecordAlreadyExists {
            get {
                return ResourceManager.GetString("InvalidOperation_HostRecordAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a Host record.  One already exists..
        /// </summary>
        public static string InvalidOperation_HostRecordExists {
            get {
                return ResourceManager.GetString("InvalidOperation_HostRecordExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were invalid characetres in the file name &apos;{0}&apos;.
        /// </summary>
        public static string InvalidOperation_InvalidCharactersInFileName {
            get {
                return ResourceManager.GetString("InvalidOperation_InvalidCharactersInFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Date Format.
        /// </summary>
        public static string InvalidOperation_InvalidDateFormat {
            get {
                return ResourceManager.GetString("InvalidOperation_InvalidDateFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Feedback Status supplied &apos;{0}&apos;.
        /// </summary>
        public static string InvalidOperation_InvalidFeedbackStatus {
            get {
                return ResourceManager.GetString("InvalidOperation_InvalidFeedbackStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LocalDirectoryPath has not been set yet..
        /// </summary>
        public static string InvalidOperation_LocalDirectoryPathNotSet {
            get {
                return ResourceManager.GetString("InvalidOperation_LocalDirectoryPathNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PostType must not be set to PostType.None.
        /// </summary>
        public static string InvalidOperation_PostTypeIsNone {
            get {
                return ResourceManager.GetString("InvalidOperation_PostTypeIsNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TemplateFile Property for MasterPage must be Defined.
        /// </summary>
        public static string InvalidOperation_TemplateFileIsNull {
            get {
                return ResourceManager.GetString("InvalidOperation_TemplateFileIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Template parameters are null. This should is impossible..
        /// </summary>
        public static string InvalidOperation_TemplateParametersNull {
            get {
                return ResourceManager.GetString("InvalidOperation_TemplateParametersNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Akismet returned an empty response.
        /// </summary>
        public static string InvalidResponse_EmptyResponse {
            get {
                return ResourceManager.GetString("InvalidResponse_EmptyResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Received the response &apos;{0}&apos; from Akismet. Probably a bad API key..
        /// </summary>
        public static string InvalidResponse_PossiblyBadApiKey {
            get {
                return ResourceManager.GetString("InvalidResponse_PossiblyBadApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service was not able to handle our request. Http Status &apos;{0}&apos;..
        /// </summary>
        public static string InvalidResponse_ServiceUnableToHandleRequest {
            get {
                return ResourceManager.GetString("InvalidResponse_ServiceUnableToHandleRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is another blog.
        /// </summary>
        public static string IsAnotherBlog {
            get {
                return ResourceManager.GetString("IsAnotherBlog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Approve.
        /// </summary>
        public static string Label_Approve {
            get {
                return ResourceManager.GetString("Label_Approve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments.
        /// </summary>
        public static string Label_Comments {
            get {
                return ResourceManager.GetString("Label_Comments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments Flagged as SPAM.
        /// </summary>
        public static string Label_CommentsFlaggedAsSpam {
            get {
                return ResourceManager.GetString("Label_CommentsFlaggedAsSpam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments In The Trash Bin.
        /// </summary>
        public static string Label_CommentsInTrash {
            get {
                return ResourceManager.GetString("Label_CommentsInTrash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments Pending Moderator Approval.
        /// </summary>
        public static string Label_CommentsPendingModeratorApproval {
            get {
                return ResourceManager.GetString("Label_CommentsPendingModeratorApproval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destroy all spam, not just checked.
        /// </summary>
        public static string Label_DestroySpamTooltip {
            get {
                return ResourceManager.GetString("Label_DestroySpamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destroy all trash, not just checked.
        /// </summary>
        public static string Label_DestroyTrashTooltip {
            get {
                return ResourceManager.GetString("Label_DestroyTrashTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;em&gt;There are no approved comments to display.&lt;/em&gt;.
        /// </summary>
        public static string Label_NoApprovedComments {
            get {
                return ResourceManager.GetString("Label_NoApprovedComments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;em&gt;No Entries Flagged as SPAM.&lt;/em&gt;.
        /// </summary>
        public static string Label_NoCommentsFlaggedAsSpam {
            get {
                return ResourceManager.GetString("Label_NoCommentsFlaggedAsSpam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;em&gt;No Entries in the Trash.&lt;/em&gt;.
        /// </summary>
        public static string Label_NoCommentsInTrash {
            get {
                return ResourceManager.GetString("Label_NoCommentsInTrash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;em&gt;No Entries Need Moderation.&lt;/em&gt;.
        /// </summary>
        public static string Label_NoCommentsNeedModeration {
            get {
                return ResourceManager.GetString("Label_NoCommentsNeedModeration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trashes checked spam.
        /// </summary>
        public static string Label_TrashesSpam {
            get {
                return ResourceManager.GetString("Label_TrashesSpam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undelete.
        /// </summary>
        public static string Label_Undelete {
            get {
                return ResourceManager.GetString("Label_Undelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not extract entry id from incoming URL &apos;{0}.
        /// </summary>
        public static string Log_CouldNotExtractEntryId {
            get {
                return ResourceManager.GetString("Log_CouldNotExtractEntryId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} referrals from &lt;a href=\&quot;{0}\&quot;&gt;{0}&lt;/a&gt;.
        /// </summary>
        public static string Message_ReferrersForm {
            get {
                return ResourceManager.GetString("Message_ReferrersForm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to minutes.
        /// </summary>
        public static string Minutes_Plural {
            get {
                return ResourceManager.GetString("Minutes_Plural", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to minute.
        /// </summary>
        public static string Minutes_Singular {
            get {
                return ResourceManager.GetString("Minutes_Singular", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the private instance field &apos;{0}&apos;.
        /// </summary>
        public static string ReflectionArgument_CouldNotFindInstanceField {
            get {
                return ResourceManager.GetString("ReflectionArgument_CouldNotFindInstanceField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a method with the name &apos;{0}&apos;.
        /// </summary>
        public static string ReflectionArgument_CouldNotFindMethod {
            get {
                return ResourceManager.GetString("ReflectionArgument_CouldNotFindMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a property with the name &apos;{0}&apos;.
        /// </summary>
        public static string ReflectionArgument_CouldNotFindProperty {
            get {
                return ResourceManager.GetString("ReflectionArgument_CouldNotFindProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the static field &apos;{0}&apos;.
        /// </summary>
        public static string ReflectionArgument_CouldNotFindsStaticField {
            get {
                return ResourceManager.GetString("ReflectionArgument_CouldNotFindsStaticField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script has no tokens..
        /// </summary>
        public static string ScriptHasNoTokens {
            get {
                return ResourceManager.GetString("ScriptHasNoTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not load this Skin control.
        /// </summary>
        public static string SkinControlLoadException_Message {
            get {
                return ResourceManager.GetString("SkinControlLoadException_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect syntax was encountered while parsing GO. Cannot have a slash star /* comment */ after a GO statement..
        /// </summary>
        public static string SqlParseException_IncorrectSyntaxNearGo {
            get {
                return ResourceManager.GetString("SqlParseException_IncorrectSyntaxNearGo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in executing the script: {0}.
        /// </summary>
        public static string SqlScriptExecutionError_ErrorInScript {
            get {
                return ResourceManager.GetString("SqlScriptExecutionError_ErrorInScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while executing the script..
        /// </summary>
        public static string SqlScriptExecutionError_ErrorOccurred {
            get {
                return ResourceManager.GetString("SqlScriptExecutionError_ErrorOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout waiting for lock.
        /// </summary>
        public static string TimeoutWaitingForLock {
            get {
                return ResourceManager.GetString("TimeoutWaitingForLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EntryId is invalid or missing.
        /// </summary>
        public static string TrackbackResponse_EntryIdMissing {
            get {
                return ResourceManager.GetString("TrackbackResponse_EntryIdMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry couldn&apos;t find a relevant link in {0}.
        /// </summary>
        public static string TrackbackResponse_NoRelevantLink {
            get {
                return ResourceManager.GetString("TrackbackResponse_NoRelevantLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to no url parameter found, please try harder!.
        /// </summary>
        public static string TrackbackResponse_NoUrl {
            get {
                return ResourceManager.GetString("TrackbackResponse_NoUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!--
        ///   &lt;rdf:RDF 
        ///      xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;
        ///      xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;
        ///      xmlns:trackback=&quot;http://madskills.com/public/xml/rss/module/trackback/&quot;&gt;
        ///
        ///      &lt;rdf:Description
        ///         rdf:about=&quot;{0}&quot;
        ///         dc:identifier=&quot;{1}&quot;
        ///         dc:title=&quot;{2}&quot;
        ///         trackback:ping=&quot;{3}services/trackbacks/{4}.aspx&quot; 
        ///      /&gt;
        ///   &lt;/rdf:RDF&gt;
        ///--&gt;.
        /// </summary>
        public static string TrackbackTag {
            get {
                return ResourceManager.GetString("TrackbackTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undisposed Lock.
        /// </summary>
        public static string UndisposedLock {
            get {
                return ResourceManager.GetString("UndisposedLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You did not link to a permalink.
        /// </summary>
        public static string XmlRcpFault_DidNotLinkToPermalink {
            get {
                return ResourceManager.GetString("XmlRcpFault_DidNotLinkToPermalink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a valid link.
        /// </summary>
        public static string XmlRcpFault_InvalidLink {
            get {
                return ResourceManager.GetString("XmlRcpFault_InvalidLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while connecting to the Community Credit webservice.
        /// </summary>
        public static string XmlRpcError_CommunityCredits {
            get {
                return ResourceManager.GetString("XmlRpcError_CommunityCredits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The post could not be added.
        /// </summary>
        public static string XmlRpcFault_AddPostFailed {
            get {
                return ResourceManager.GetString("XmlRpcFault_AddPostFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not delete page:{0}.
        /// </summary>
        public static string XmlRpcFault_CannotDeletePage {
            get {
                return ResourceManager.GetString("XmlRpcFault_CannotDeletePage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not delete post: {0}.
        /// </summary>
        public static string XmlRpcFault_CannotDeletePost {
            get {
                return ResourceManager.GetString("XmlRpcFault_CannotDeletePost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry could not be found.
        /// </summary>
        public static string XmlRpcFault_CouldNotFindEntry {
            get {
                return ResourceManager.GetString("XmlRpcFault_CouldNotFindEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error saving file..
        /// </summary>
        public static string XmlRpcFault_ErrorSavingFile {
            get {
                return ResourceManager.GetString("XmlRpcFault_ErrorSavingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No categories exist.
        /// </summary>
        public static string XmlRpcFault_NoCategories {
            get {
                return ResourceManager.GetString("XmlRpcFault_NoCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Username and password denied..
        /// </summary>
        public static string XmlRpcFault_UsernameAndPasswordInvalid {
            get {
                return ResourceManager.GetString("XmlRpcFault_UsernameAndPasswordInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Service Access is not enabled..
        /// </summary>
        public static string XmlRpcFault_WebServiceNotEnabled {
            get {
                return ResourceManager.GetString("XmlRpcFault_WebServiceNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to thanks for the pingback on {0}.
        /// </summary>
        public static string XmlRpcMessage_ThanksForThePingback {
            get {
                return ResourceManager.GetString("XmlRpcMessage_ThanksForThePingback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Community Credit ws returned the following response while notifying for the url {0}: {1}.
        /// </summary>
        public static string XmlRpcWarn_CommunityCredits {
            get {
                return ResourceManager.GetString("XmlRpcWarn_CommunityCredits", resourceCulture);
            }
        }
    }
}
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Framework.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.WebServiceUrl)]
        [global::System.Configuration.DefaultSettingValueAttribute("http://www.community-credit.com/services/affiliateservices.asmx")]
        public string Subtext_Framework_com_community_credit_www_AffiliateServices {
            get {
                return ((string)(this["Subtext_Framework_com_community_credit_www_AffiliateServices"]));
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration.Provider;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;

namespace Subtext.Framework.Providers
{
    /// <summary>
    /// This is the API for interacting with the data in Subtext. This is essentially the repository.
    /// </summary>
    public abstract class ObjectProvider : ProviderBase
    {
        private static readonly ObjectProvider Provider = new DatabaseObjectProvider();

        /// <summary>
        /// Returns the currently configured ObjectProvider.
        /// </summary>
        /// <returns></returns>
        public static ObjectProvider Instance()
        {
            return Provider;
        }

        public abstract void ClearBlogContent(int blogId);

        /// <summary>
        /// Returns the <see cref="HostInfo"/> for the Subtext installation.
        /// </summary>
        /// <returns>A <see cref="HostInfo"/> instance.</returns>
        public abstract HostInfo LoadHostInfo(HostInfo info);

        /// <summary>
        /// Updates the <see cref="HostInfo"/> instance.  If the host record is not in the 
        /// database, one is created. There should only be one host record.
        /// </summary>
        /// <param name="hostInfo">The host information.</param>
        public abstract bool UpdateHost(HostInfo hostInfo);

        /// <summary>
        /// Inserts the blog group.
        /// </summary>
        /// <param name="blogGroup">The group to insert.</param>
        /// <returns>The blog group id</returns>
        public abstract int InsertBlogGroup(BlogGroup blogGroup);

        /// <summary>
        /// Update the blog group.
        /// </summary>
        /// <param name="blogGroup">The group to insert.</param>
        /// <returns>The blog group id</returns>
        public abstract bool UpdateBlogGroup(BlogGroup blogGroup);

        public abstract bool DeleteBlogGroup(int blogGroupId);

        /// <summary>
        /// Gets a pageable <see cref="ICollection"/> of <see cref="Blog"/> instances.
        /// </summary>
        /// <param name="host">The host to filter by.</param>
        /// <param name="pageIndex">Page index.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        /// <param name="flags"></param>
        public abstract IPagedCollection<Blog> GetPagedBlogs(string host, int pageIndex, int pageSize,
                                                             ConfigurationFlags flags);

        /// <summary>
        /// Gets the blog by id.
        /// </summary>
        /// <param name="blogId">Blog id.</param>
        /// <returns></returns>
        public abstract Blog GetBlogById(int blogId);

        public abstract Blog GetBlogByDomainAlias(string host, string subfolder, bool strict);

        public abstract IPagedCollection<BlogAlias> GetPagedBlogDomainAlias(Blog blog, int pageIndex, int pageSize);

        /// <summary>
        /// Gets the blog group by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public abstract BlogGroup GetBlogGroup(int id, bool activeOnly);

        /// <summary>
        /// Lists the blog groups.
        /// </summary>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public abstract ICollection<BlogGroup> ListBlogGroups(bool activeOnly);

        public abstract bool CreateBlogAlias(BlogAlias alias);

        public abstract bool UpdateBlogAlias(BlogAlias alias);

        public abstract bool DeleteBlogAlias(BlogAlias alias);

        /// <summary>
        /// Gets the paged feedback.
        /// </summary>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="status">A flag for the status types to return.</param>
        /// <param name="excludeStatusMask">A flag for the statuses to exclude.</param>
        /// <param name="type">The type of feedback to return.</param>
        /// <returns></returns>
        public abstract IPagedCollection<FeedbackItem> GetPagedFeedback(int pageIndex, int pageSize,
                                                                        FeedbackStatusFlag status,
                                                                        FeedbackStatusFlag excludeStatusMask,
                                                                        FeedbackType type);


        public abstract EntryDay GetEntryDay(DateTime dt);

        /// <summary>
        /// Returns the previous and next entry to the specified entry.
        /// </summary>
        /// <param name="entryId"></param>
        /// <param name="postType"></param>
        /// <returns></returns>
        public abstract ICollection<EntrySummary> GetPreviousAndNextEntries(int entryId, PostType postType);

        /// <summary>
        /// Returns a pageable collection of entries ordered by the id descending.
        /// This is used in the admin section.
        /// </summary>
        /// <param name="postType">Type of the post.</param>
        /// <param name="categoryId">The category ID.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public abstract IPagedCollection<EntryStatsView> GetEntries(PostType postType, int? categoryId, int pageIndex, int pageSize);

        /// <summary>
        /// Gets the entries that meet the <see cref="PostType"/> and 
        /// <see cref="PostConfig"/> flags.
        /// </summary>
        /// <param name="itemCount">Item count.</param>
        /// <param name="postType">The type of entry to return.</param>
        /// <param name="postConfig">Post Configuration options.</param>
        /// <param name="includeCategories">Whether or not to include categories</param>
        /// <returns></returns>
        public abstract ICollection<Entry> GetEntries(int itemCount, PostType postType, PostConfig postConfig, bool includeCategories);
        public abstract ICollection<Entry> GetEntriesByCategory(int itemCount, int categoryId, bool activeOnly);
        public abstract ICollection<Entry> GetEntriesByTag(int itemCount, string tagName);
        public abstract ICollection<Entry> GetPostsByMonth(int month, int year);
        public abstract ICollection<Entry> GetPostsByDayRange(DateTime start, DateTime stop, PostType postType, bool activeOnly);
        public abstract IPagedCollection<EntryStatsView> GetEntriesForExport(int pageIndex, int pageSize);

        public abstract ICollection<EntryStatsView> GetPopularEntries(int blogId, DateFilter filter);

        /// <summary>
        /// Gets the <see cref="FeedbackItem" /> items for the specified entry.
        /// </summary>
        /// <param name="parentEntry">The parent entry.</param>
        /// <returns></returns>
        public abstract ICollection<FeedbackItem> GetFeedbackForEntry(Entry parentEntry);

        /// <summary>
        /// Gets the feedback by the specified id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public abstract FeedbackItem GetFeedback(int id);

        /// <summary>
        /// Gets the feedback counts for the various top level statuses.
        /// </summary>
        /// <param name="approved">The approved.</param>
        /// <param name="needsModeration">The needs moderation.</param>
        /// <param name="flaggedAsSpam">The flagged as spam.</param>
        /// <param name="deleted">The deleted.</param>
        public abstract void GetFeedbackCounts(out int approved, out int needsModeration, out int flaggedAsSpam,
                                               out int deleted);

        /// <summary>
        /// Searches the data store for the first comment with a 
        /// matching checksum hash.
        /// </summary>
        /// <param name="checksumHash">Checksum hash.</param>
        /// <returns></returns>
        public abstract FeedbackItem GetFeedbackByChecksumHash(string checksumHash);

        /// <summary>
        /// Returns an <see cref="Entry" /> with the specified id as long as it is 
        /// within the current blog (Config.CurrentBlog).
        /// </summary>
        /// <param name="id">Id of the entry</param>
        /// <param name="activeOnly">Whether or not to only return the entry if it is active.</param>
        /// <param name="includeCategories">Whether the entry should have its Categories property populated</param>
        /// <returns></returns>
        public abstract Entry GetEntry(int id, bool activeOnly, bool includeCategories);

        /// <summary>
        /// Returns an <see cref="Entry" /> with the specified entry name as long as it is 
        /// within the current blog (Config.CurrentBlog).
        /// </summary>
        /// <param name="entryName">Url friendly entry name.</param>
        /// <param name="activeOnly">Whether or not to only return the entry if it is active.</param>
        /// <param name="includeCategories">Whether the entry should have its Categories property populated</param>
        /// <returns></returns>
        public abstract Entry GetEntry(string entryName, bool activeOnly, bool includeCategories);

        /// <summary>
        /// Deletes the specified entry.
        /// </summary>
        /// <param name="entryId">The entry id.</param>
        /// <returns></returns>
        public abstract bool DeleteEntry(int entryId);

        /// <summary>
        /// Completely deletes the specified feedback as 
        /// opposed to moving it to the trash.
        /// </summary>
        /// <param name="id">The id.</param>
        public abstract void DestroyFeedback(int id);

        /// <summary>
        /// Destroys the feedback with the given status.
        /// </summary>
        /// <param name="status">The status.</param>
        public abstract void DestroyFeedback(FeedbackStatusFlag status);

        /// <summary>
        /// Creates a feedback record and returs the id of the newly created item.
        /// </summary>
        /// <param name="feedbackItem"></param>
        /// <returns></returns>
        public abstract int Create(FeedbackItem feedbackItem);

        /// <summary>
        /// Creates the specified entry attaching the specified categories.
        /// </summary>
        /// <param name="entry">Entry.</param>
        /// <param name="categoryIds">Category Ids.</param>
        /// <returns></returns>
        public abstract int Create(Entry entry, IEnumerable<int> categoryIds);

        /// <summary>
        /// Saves changes to the specified entry attaching the specified categories.
        /// </summary>
        /// <param name="entry">Entry.</param>
        /// <param name="categoryIds">Category Ids.</param>
        /// <returns></returns>
        public abstract bool Update(Entry entry, IEnumerable<int> categoryIds);

        /// <summary>
        /// Saves changes to the specified feedback.
        /// </summary>
        /// <param name="feedbackItem">The feedback item.</param>
        /// <returns></returns>
        public abstract bool Update(FeedbackItem feedbackItem);

        public abstract bool SetEntryCategoryList(int entryId, IEnumerable<int> categoryIds);

        /// <summary>
        /// Sets the tags for the entry.
        /// </summary>
        /// <param name="entryId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public abstract bool SetEntryTagList(int entryId, IEnumerable<string> tags);

        public abstract IPagedCollection<Link> GetPagedLinks(int? categoryTypeId, int pageIndex, int pageSize,
                                                             bool sortDescending);

        public abstract ICollection<Link> GetLinkCollectionByPostId(int postId);
        public abstract Link GetLink(int linkId);
        public abstract ICollection<LinkCategory> GetCategories(CategoryType categoryType, bool activeOnly);
        public abstract ICollection<LinkCategory> GetActiveCategories();

        /// <summary>
        /// Gets the link category for the specified category id.
        /// </summary>
        /// <param name="categoryId">The category id.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public abstract LinkCategory GetLinkCategory(int? categoryId, bool activeOnly);

        /// <summary>
        /// Gets the link category for the specified category name.
        /// </summary>
        /// <param name="categoryName">The category name.</param>
        /// <param name="activeOnly">if set to <c>true</c> [active only].</param>
        /// <returns></returns>
        public abstract LinkCategory GetLinkCategory(string categoryName, bool activeOnly);

        public abstract bool UpdateLink(Link link);
        public abstract int CreateLink(Link link);
        public abstract bool UpdateLinkCategory(LinkCategory linkCategory);
        public abstract int CreateLinkCategory(LinkCategory linkCategory);
        public abstract bool DeleteLinkCategory(int categoryId);
        public abstract bool DeleteLink(int linkId);

        public abstract IPagedCollection<Referrer> GetPagedReferrers(int pageIndex, int pageSize, int entryId);
        public abstract bool TrackEntry(EntryView ev);

        /// <summary>
        /// Adds the initial blog configuration.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="host"></param>
        /// <param name="subfolder"></param>
        /// <returns></returns>
        public abstract int CreateBlog(string title, string userName, string password, string host, string subfolder);

        /// <summary>
        /// Adds the initial blog configuration.  This is a convenience method for 
        /// allowing a user with a freshly installed blog to immediately gain access 
        /// to the admin section to edit the blog.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">Password.</param>
        /// <param name="host"></param>
        /// <param name="subfolder"></param>
        /// <param name="blogGroupId"></param>
        /// <returns>The id of the created blog.</returns>
        public abstract int CreateBlog(string title, string userName, string password, string host, string subfolder,
                                       int blogGroupId);

        /// <summary>
        /// Updates the specified blog configuration.
        /// </summary>
        /// <param name="info">Config.</param>
        /// <returns></returns>
        public abstract bool UpdateBlog(Blog info);

        /// <summary>
        /// Returns a <see cref="Blog"/> instance containing 
        /// the configuration settings for the blog specified by the 
        /// Hostname and Application.
        /// </summary>
        /// <remarks>
        /// Until Subtext supports multiple blogs again (if ever), 
        /// this will always return the same instance.
        /// </remarks>
        /// <param name="hostname">Hostname.</param>
        /// <param name="subfolder">Subfolder Name.</param>
        /// <returns></returns>
        public abstract Blog GetBlog(string hostname, string subfolder);

        /// <summary>
        /// Gets the top tags from the database sorted by tag name.
        /// </summary>
        /// <param name="itemCount">The number of tags to return.</param>
        /// <returns>
        /// A sorted dictionary with the tag name as key and entry count
        /// as value.
        /// </returns>
        public abstract IDictionary<string, int> GetTopTags(int itemCount);

        /// <summary>
        /// Adds the given MetaTag to the data store.
        /// </summary>
        /// <param name="metaTag"></param>
        /// <returns></returns>
        public abstract int Create(MetaTag metaTag);

        /// <summary>
        /// Updates the given MetaTag in the data store.
        /// </summary>
        /// <param name="metaTag"></param>
        /// <returns></returns>
        public abstract bool Update(MetaTag metaTag);

        /// <summary>
        /// Gets a collection of MetaTags for the given Blog.
        /// </summary>
        /// <returns></returns>
        public abstract IPagedCollection<MetaTag> GetMetaTagsForBlog(Blog blog, int pageIndex, int pageSize);

        /// <summary>
        /// Gets a collection of MetaTags for the given Entry
        /// </summary>
        /// <returns></returns>
        public abstract IPagedCollection<MetaTag> GetMetaTagsForEntry(Entry entry, int pageIndex, int pageSize);

        /// <summary>
        /// Deletes the MetaTag with the given metaTagId.
        /// </summary>
        /// <param name="metaTagId"></param>
        /// <returns></returns>
        public abstract bool DeleteMetaTag(int metaTagId);

        /// <summary>
        /// Adds the given enclosure to the data store
        /// </summary>
        /// <param name="enclosure"></param>
        /// <returns>Id of the enclosure created</returns>
        public abstract int Create(Enclosure enclosure);

        public abstract bool Update(Enclosure metaTag);
        public abstract bool DeleteEnclosure(int enclosureId);

        public abstract KeyWord GetKeyWord(int id);
        public abstract ICollection<KeyWord> GetKeyWords();
        public abstract IPagedCollection<KeyWord> GetPagedKeyWords(int pageIndex, int pageSize);
        public abstract bool UpdateKeyWord(KeyWord keyWord);
        public abstract int InsertKeyWord(KeyWord keyWord);
        public abstract bool DeleteKeyWord(int id);

        public abstract ImageCollection GetImagesByCategoryId(int categoryId, bool activeOnly);
        public abstract Image GetImage(int imageId, bool activeOnly);
        public abstract int InsertImage(Image image);
        public abstract bool UpdateImage(Image image);
        public abstract bool DeleteImage(int imageId);

        public abstract ICollection<ArchiveCount> GetPostCountsByYear();
        public abstract ICollection<ArchiveCount> GetPostCountsByMonth();
        public abstract ICollection<ArchiveCount> GetPostCountsByCategory();

        public abstract BlogStatistics GetBlogStatistics(int blogId);
        public abstract BlogAlias GetBlogAliasById(int aliasId);
        public abstract ICollection<Blog> GetBlogsByGroup(string host, int? groupId);
        public abstract ICollection<BlogGroup> GroupBlogs(IEnumerable<Blog> blogs);
        public abstract HostStats GetTotalBlogStats(string host, int? groupId);
        public abstract ICollection<Entry> GetRecentEntries(string host, int? groupId, int rowCount);
        public abstract ICollection<Image> GetImages(string host, int? groupId, int rowCount);
        public abstract ICollection<EntrySummary> GetTopEntrySummaries(int blogId, int rowCount);
        public abstract ICollection<EntrySummary> GetRelatedEntries(int blogId, int entryId, int rowCount);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Data;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Providers
{
    public class SearchEngine
    {
        readonly Blog _blog;
        readonly StoredProcedures _procedures;
        readonly UrlHelper _urlHelper;

        public SearchEngine(Blog blog, UrlHelper urlHelper, string connectionString)
        {
            _blog = blog;
            _procedures = new StoredProcedures(connectionString);
            _urlHelper = urlHelper;
        }

        /// <summary>
        /// Searches the specified blog for items that match the search term.
        /// </summary>
        /// <param name="blogId"></param>
        /// <param name="searchTerm"></param>
        /// <returns></returns>
        public virtual ICollection<SearchResult> Search(int blogId, string searchTerm)
        {
            ICollection<SearchResult> results = new List<SearchResult>();

            using(IDataReader reader = _procedures.SearchEntries(blogId, searchTerm, _blog.TimeZone.Now))
            {
                while(reader.Read())
                {
                    Entry foundEntry = reader.ReadEntry(true);
                    results.Add(new SearchResult(foundEntry.Title, _urlHelper.EntryUrl(foundEntry).ToUri()));
                }
            }
            return results;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Providers
{
    public class SearchResult
    {
        public SearchResult(string title, Uri url)
        {
            Title = title;
            Url = url;
        }

        public string Title { get; private set; }

        public Uri Url { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Web;
using Subtext.Framework.Properties;

namespace Subtext.Akismet
{
    /// <summary>
    /// The client class used to communicate with the 
    /// <see href="http://akismet.com/">Akismet</see> service.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Akismet")]
    [Serializable]
    public class AkismetClient
    {
        const string CheckUrlFormat = "http://{0}.rest.akismet.com/1.1/comment-check";
        const string SubmitHamUrlFormat = "http://{0}.rest.akismet.com/1.1/submit-ham";
        const string SubmitSpamUrlFormat = "http://{0}.rest.akismet.com/1.1/submit-spam";
        static readonly Uri VerifyUrl = new Uri("http://rest.akismet.com/1.1/verify-key");
        static readonly string Version = typeof(HttpClient).Assembly.GetName().Version.ToString();
        string _apiKey;
        Uri _checkUrl;
        [NonSerialized] private readonly HttpClient _httpClient;
        Uri _submitHamUrl;
        Uri _submitSpamUrl;
        string _userAgent;

        protected AkismetClient()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AkismetClient"/> class.
        /// </summary>
        /// <param name="apiKey">The Akismet API key.</param>
        /// <param name="blogUrl">The root url of the blog.</param>
        public AkismetClient(string apiKey, Uri blogUrl)
            : this(apiKey, blogUrl, new HttpClient())
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AkismetClient"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor takes in all the dependencies to allow for 
        /// dependency injection and unit testing. Seems like overkill, 
        /// but it's worth it.
        /// </remarks>
        /// <param name="apiKey">The Akismet API key.</param>
        /// <param name="blogUrl">The root url of the blog.</param>
        /// <param name="httpClient">Client class used to make the underlying requests.</param>
        public AkismetClient(string apiKey, Uri blogUrl, HttpClient httpClient)
        {
            if(apiKey == null)
            {
                throw new ArgumentNullException("apiKey");
            }

            if(blogUrl == null)
            {
                throw new ArgumentNullException("blogUrl");
            }

            if(httpClient == null)
            {
                throw new ArgumentNullException("httpClient");
            }

            _apiKey = apiKey;
            BlogUrl = blogUrl;
            _httpClient = httpClient;
            Timeout = 5000; /* default */
            SetServiceUrls();
        }

        /// <summary>
        /// Gets or sets the Akismet API key.
        /// </summary>
        /// <value>The API key.</value>
        public string ApiKey
        {
            get { return _apiKey ?? string.Empty; }
            set
            {
                _apiKey = value ?? string.Empty;
                SetServiceUrls();
            }
        }

        /// <summary>
        /// Gets or sets the Usera Agent for the Akismet Client.  
        /// Do not confuse this with the user agent for the comment 
        /// being checked.
        /// </summary>
        /// <value>The API key.</value>
        public string UserAgent
        {
            get { return _userAgent ?? BuildUserAgent("Subtext", Version); }
            set { _userAgent = value; }
        }

        /// <summary>
        /// Gets or sets the timeout in milliseconds for the http request to Akismet. 
        /// By default 5000 (5 seconds).
        /// </summary>
        /// <value>The timeout.</value>
        public int Timeout { get; set; }

        /// <summary>
        /// Gets or sets the root URL to the blog.
        /// </summary>
        /// <value>The blog URL.</value>
        public Uri BlogUrl { get; set; }

        /// <summary>
        /// Gets or sets the proxy to use.
        /// </summary>
        /// <value>The proxy.</value>
        public IWebProxy Proxy { get; set; }

        void SetServiceUrls()
        {
            _submitHamUrl = new Uri(String.Format(CultureInfo.InvariantCulture, SubmitHamUrlFormat, _apiKey));
            _submitSpamUrl = new Uri(String.Format(CultureInfo.InvariantCulture, SubmitSpamUrlFormat, _apiKey));
            _checkUrl = new Uri(String.Format(CultureInfo.InvariantCulture, CheckUrlFormat, _apiKey));
        }

        /// <summary>
        /// Helper method for building a user agent string in the format 
        /// preferred by Akismet.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        /// <param name="appVersion">The version of the app.</param>
        /// <returns></returns>
        public static string BuildUserAgent(string applicationName, string appVersion)
        {
            return string.Format(CultureInfo.InvariantCulture, "{0}/{1} | Akismet/1.11", applicationName, appVersion);
        }

        /// <summary>
        /// Verifies the API key.  You really only need to
        /// call this once, perhaps at startup.
        /// </summary>
        /// <returns></returns>
        /// <exception type="Sytsem.Web.WebException">If it cannot make a request of Akismet.</exception>
        public bool VerifyApiKey()
        {
            string parameters = "key=" + HttpUtility.UrlEncode(ApiKey) + "&blog=" +
                                HttpUtility.UrlEncode(BlogUrl.ToString());
            string result = _httpClient.PostRequest(VerifyUrl, UserAgent, Timeout, parameters, Proxy);

            if(String.IsNullOrEmpty(result))
            {
                throw new InvalidResponseException(Resources.InvalidResponse_EmptyResponse);
            }

            return String.Equals("valid", result, StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Checks the comment and returns true if it is spam, otherwise false.
        /// </summary>
        /// <param name="comment"></param>
        /// <returns></returns>
        public bool CheckCommentForSpam(IComment comment)
        {
            if(comment == null)
            {
                throw new ArgumentNullException("comment");
            }
            string result = SubmitComment(comment, _checkUrl);

            if(String.IsNullOrEmpty(result))
            {
                throw new InvalidResponseException(Resources.InvalidResponse_EmptyResponse);
            }

            if(result != "true" && result != "false")
            {
                throw new InvalidResponseException(string.Format(CultureInfo.InvariantCulture,
                                                                 Resources.InvalidResponse_PossiblyBadApiKey, result));
            }

            return bool.Parse(result);
        }

        /// <summary>
        /// Submits a comment to Akismet that should have been 
        /// flagged as SPAM, but was not flagged by Akismet.
        /// </summary>
        /// <param name="comment"></param>
        /// <returns></returns>
        public virtual void SubmitSpam(IComment comment)
        {
            SubmitComment(comment, _submitSpamUrl);
        }

        /// <summary>
        /// Submits a comment to Akismet that should not have been 
        /// flagged as SPAM (a false positive).
        /// </summary>
        /// <param name="comment"></param>
        /// <returns></returns>
        public void SubmitHam(IComment comment)
        {
            SubmitComment(comment, _submitHamUrl);
        }

        [SuppressMessage("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
        string SubmitComment(IComment comment, Uri url)
        {
            //Not too many concatenations.  Might not need a string builder.
            string parameters = "blog=" + HttpUtility.UrlEncode(BlogUrl.ToString())
                                + "&user_ip=" + comment.IPAddress
                                + "&user_agent=" + HttpUtility.UrlEncode(comment.UserAgent);

            if(!String.IsNullOrEmpty(comment.Referrer))
            {
                parameters += "&referer=" + HttpUtility.UrlEncode(comment.Referrer);
            }

            if(comment.Permalink != null)
            {
                parameters += "&permalink=" + HttpUtility.UrlEncode(comment.Permalink.ToString());
            }

            if(!String.IsNullOrEmpty(comment.CommentType))
            {
                parameters += "&comment_type=" + HttpUtility.UrlEncode(comment.CommentType);
            }

            if(!String.IsNullOrEmpty(comment.Author))
            {
                parameters += "&comment_author=" + HttpUtility.UrlEncode(comment.Author);
            }

            if(!String.IsNullOrEmpty(comment.AuthorEmail))
            {
                parameters += "&comment_author_email=" + HttpUtility.UrlEncode(comment.AuthorEmail);
            }

            if(comment.AuthorUrl != null)
            {
                parameters += "&comment_author_url=" + HttpUtility.UrlEncode(comment.AuthorUrl.ToString());
            }

            if(!String.IsNullOrEmpty(comment.Content))
            {
                parameters += "&comment_content=" + HttpUtility.UrlEncode(comment.Content);
            }

            if(comment.ServerEnvironmentVariables != null)
            {
                foreach(string key in comment.ServerEnvironmentVariables)
                {
                    parameters += "&" + key + "=" + HttpUtility.UrlEncode(comment.ServerEnvironmentVariables[key]);
                }
            }

            return _httpClient.PostRequest(url, UserAgent, Timeout, parameters).ToLowerInvariant();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Net;

namespace Subtext.Akismet
{
    public class Comment : IComment
    {
        NameValueCollection _serverEnvironmentVariables;

        /// <summary>
        /// Initializes a new instance of the <see cref="Comment"/> class.
        /// </summary>
        /// <param name="authorIpAddress">The author IP address.</param>
        /// <param name="authorUserAgent">The author user agent.</param>
        public Comment(IPAddress authorIpAddress, string authorUserAgent)
        {
            IPAddress = authorIpAddress;
            UserAgent = authorUserAgent;
        }

        /// <summary>
        /// The name submitted with the comment.
        /// </summary>
        public string Author { get; set; }

        /// <summary>
        /// The email submitted with the comment.
        /// </summary>
        public string AuthorEmail { get; set; }

        /// <summary>
        /// The url submitted if provided.
        /// </summary>
        public Uri AuthorUrl { get; set; }

        /// <summary>
        /// Content of the comment
        /// </summary>
        public string Content { get; set; }

        /// <summary>
        /// The HTTP_REFERER header value of the 
        /// originating comment.
        /// </summary>
        public string Referrer { get; set; }

        /// <summary>
        /// Permanent location of the entry the comment was 
        /// submitted to.
        /// </summary>
        public Uri Permalink { get; set; }

        /// <summary>
        /// User agent of the requester. (Required)
        /// </summary>
        public string UserAgent { get; private set; }

        /// <summary>
        /// May be one of the following: {blank}, "comment", "trackback", "pingback", or a made-up value 
        /// like "registration".
        /// </summary>
        public string CommentType { get; set; }

        /// <summary>
        /// IPAddress of the submitter
        /// </summary>
        public IPAddress IPAddress { get; private set; }

        /// <summary>
        /// Optional collection of various server environment variables. 
        /// </summary>
        public NameValueCollection ServerEnvironmentVariables
        {
            get
            {
                _serverEnvironmentVariables = _serverEnvironmentVariables ?? new NameValueCollection();
                return _serverEnvironmentVariables;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using System.Net;
using System.Text;
using Subtext.Framework.Properties;

namespace Subtext.Akismet
{
    /// <summary>
    /// Class used to make the actual HTTP requests.
    /// </summary>
    /// <remarks>
    /// Yeah, I know you're thinking this is overkill, but it makes it 
    /// easier to write tests to have this layer of abstraction from the 
    /// underlying Http request.
    /// </remarks>
    public class HttpClient
    {
        /// <summary>
        /// Posts the request and returns a text response.  
        /// This is all that is needed for Akismet.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="userAgent">The user agent.</param>
        /// <param name="timeout">The timeout.</param>
        /// <param name="formParameters">The properly formatted parameters.</param>
        /// <returns></returns>
        public virtual string PostRequest(Uri url, string userAgent, int timeout, string formParameters)
        {
            return PostRequest(url, userAgent, timeout, formParameters, null);
        }

        /// <summary>
        /// Posts the request.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="userAgent">The user agent.</param>
        /// <param name="timeout">The timeout.</param>
        /// <param name="formParameters">The form parameters.</param>
        /// <param name="proxy">The proxy.</param>
        /// <returns></returns>
        public virtual string PostRequest(Uri url, string userAgent, int timeout, string formParameters, IWebProxy proxy)
        {
            ServicePointManager.Expect100Continue = false;
            var request = WebRequest.Create(url) as HttpWebRequest;

            if(proxy != null)
            {
                request.Proxy = proxy;
            }

            if(null != request)
            {
                request.UserAgent = userAgent;
                request.Timeout = timeout;
                request.Method = "POST";
                request.ContentLength = formParameters.Length;
                request.ContentType = "application/x-www-form-urlencoded; charset=utf-8";
                request.KeepAlive = true;

                using(var myWriter = new StreamWriter(request.GetRequestStream()))
                {
                    myWriter.Write(formParameters);
                }
            }

            var response = (HttpWebResponse)request.GetResponse();
            if(response.StatusCode < HttpStatusCode.OK && response.StatusCode >= HttpStatusCode.Ambiguous)
            {
                throw new InvalidResponseException(
                    string.Format(CultureInfo.InvariantCulture, Resources.InvalidResponse_ServiceUnableToHandleRequest,
                                  response.StatusCode), response.StatusCode);
            }

            string responseText;
            using(var reader = new StreamReader(response.GetResponseStream(), Encoding.ASCII))
                //They only return "true" or "false"
            {
                responseText = reader.ReadToEnd();
            }

            return responseText;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Diagnostics.CodeAnalysis;
using System.Net;

namespace Subtext.Akismet
{
    /// <summary>
    /// Defines the base information about a comment submitted to 
    /// Akismet.
    /// </summary>
    public interface IComment
    {
        /// <summary>
        /// The name submitted with the comment.
        /// </summary>
        string Author { get; }

        /// <summary>
        /// The email submitted with the comment.
        /// </summary>
        string AuthorEmail { get; }

        /// <summary>
        /// The url submitted if provided.
        /// </summary>
        Uri AuthorUrl { get; }

        /// <summary>
        /// Content of the comment
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The HTTP_REFERER header value of the 
        /// originating comment.
        /// </summary>
        string Referrer { get; }

        /// <summary>
        /// Permanent location of the entry the comment was 
        /// submitted to.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Permalink")]
        Uri Permalink { get; }

        /// <summary>
        /// User agent of the requester. (Required)
        /// </summary>
        string UserAgent { get; }

        /// <summary>
        /// May be one of the following: {blank}, "comment", "trackback", "pingback", or a made-up value 
        /// like "registration".
        /// </summary>
        string CommentType { get; }

        /// <summary>
        /// IPAddress of the submitter
        /// </summary>
        IPAddress IPAddress { get; }

        /// <summary>
        /// Optional collection of various server environment variables. 
        /// </summary>
        NameValueCollection ServerEnvironmentVariables { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Net;
using System.Runtime.Serialization;
using System.Security.Permissions;

namespace Subtext.Akismet
{
    /// <summary>
    /// Exception thrown when a response other than 200 is returned.
    /// </summary>
    /// <remarks>
    /// This exception does not have any custom properties, 
    /// thus it does not implement ISerializable.
    /// </remarks>
    [Serializable]
    public sealed class InvalidResponseException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidResponseException"/> class.
        /// </summary>
        public InvalidResponseException()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidResponseException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public InvalidResponseException(string message) : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidResponseException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        public InvalidResponseException(string message, Exception innerException) : base(message, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidResponseException"/> class.
        /// </summary>
        public InvalidResponseException(string message, HttpStatusCode status) : base(message)
        {
            HttpStatus = status;
        }

        private InvalidResponseException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            HttpStatus = (HttpStatusCode)info.GetInt32("HttpStatus");
        }

        /// <summary>
        /// Gets the HTTP status returned by the service.
        /// </summary>
        /// <value>The HTTP status.</value>
        public HttpStatusCode HttpStatus { get; private set; }

        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("HttpStatus", (int)HttpStatus);
            base.GetObjectData(info, context);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Net;
using log4net;
using Subtext.Akismet;
using Subtext.Framework.Components;
using Subtext.Framework.Logging;
using Subtext.Framework.Routing;
using Subtext.Framework.Web;

namespace Subtext.Framework.Services
{
    [Serializable]
    public class AkismetSpamService : ICommentSpamService
    {
        private readonly static ILog Log = new Log();
        readonly AkismetClient _akismet;
        readonly Blog _blog;
        readonly UrlHelper _urlHelper;

        /// <summary>
        /// Initializes a new instance of the <see cref="AkismetSpamService"/> class.
        /// </summary>
        /// <param name="apiKey">The API key.</param>
        /// <param name="blog">The blog.</param>
        public AkismetSpamService(string apiKey, Blog blog) : this(apiKey, blog, null, null)
        {
        }

        public AkismetSpamService(string apiKey, Blog blog, AkismetClient akismetClient, UrlHelper urlHelper)
        {
            _blog = blog;
            _akismet = akismetClient ?? new AkismetClient(apiKey, urlHelper.BlogUrl().ToFullyQualifiedUrl(blog));
            IWebProxy proxy = HttpHelper.GetProxy();
            if(proxy != null)
            {
                _akismet.Proxy = proxy;
            }
            _urlHelper = urlHelper ?? new UrlHelper(null, null);
        }

        /// <summary>
        /// Examines the item and determines whether or not it is spam.
        /// </summary>
        /// <param name="feedback"></param>
        /// <returns></returns>
        public bool IsSpam(FeedbackItem feedback)
        {
            Comment comment = ConvertToAkismetItem(feedback);

            try
            {
                if(_akismet.CheckCommentForSpam(comment))
                {
                    _akismet.SubmitSpam(comment);
                    return true;
                }
            }
            catch(InvalidResponseException e)
            {
                Log.Error(e.Message, e);
            }
            return false;
        }

        /// <summary>
        /// Submits the item to the service as a false positive. 
        /// Something that should not have been marked as spam.
        /// </summary>
        /// <param name="feedback"></param>
        public void SubmitGoodFeedback(FeedbackItem feedback)
        {
            Comment comment = ConvertToAkismetItem(feedback);
            _akismet.SubmitHam(comment);
        }

        /// <summary>
        /// Submits the item to the service as a piece of SPAM that got through 
        /// the filter. Something that should've been marked as SPAM.
        /// </summary>
        /// <param name="feedback"></param>
        public void SubmitSpam(FeedbackItem feedback)
        {
            Comment comment = ConvertToAkismetItem(feedback);
            _akismet.SubmitSpam(comment);
        }

        /// <summary>
        /// Verifies the api key.
        /// </summary>
        /// <returns></returns>
        public bool VerifyApiKey()
        {
            try
            {
                return _akismet.VerifyApiKey();
            }
            catch(WebException e)
            {
                Log.Error("Error occured while verifying Akismet.", e);
                return false;
            }
        }

        public Comment ConvertToAkismetItem(FeedbackItem feedback)
        {
            var comment = new Comment(feedback.IpAddress, feedback.UserAgent) {Author = feedback.Author ?? string.Empty, AuthorEmail = feedback.Email};
            if(feedback.SourceUrl != null)
            {
                comment.AuthorUrl = feedback.SourceUrl;
            }
            comment.Content = feedback.Body;
            comment.Referrer = feedback.Referrer;

            var feedbackUrl = _urlHelper.FeedbackUrl(feedback);
            if(feedbackUrl != null)
            {
                Uri permalink = feedbackUrl.ToFullyQualifiedUrl(_blog);
                if(permalink != null)
                {
                    comment.Permalink = permalink;
                }
            }

            comment.CommentType = feedback.FeedbackType.ToString().ToLower(CultureInfo.InvariantCulture);
            return comment;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Services
{
    public class BlogLookupResult
    {
        public BlogLookupResult(Blog blog, Uri alternateUrl)
        {
            Blog = blog;
            AlternateUrl = alternateUrl;
        }

        /// <summary>
        /// The found blog. Null if not found.
        /// </summary>
        public Blog Blog { get; private set; }

        /// <summary>
        /// No blog was found, redirect to this alternate URL instead.
        /// </summary>
        public Uri AlternateUrl { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Services
{
    public class BlogLookupService : IBlogLookupService
    {
        HostInfo _host;

        public BlogLookupService(ObjectProvider repository, HostInfo host)
        {
            Repository = repository;
            _host = host;
        }

        protected ObjectProvider Repository { get; private set; }

        protected HostInfo Host
        {
            get
            {
                if(_host == null)
                {
                    _host = HostInfo.LoadHost(true);
                }
                return _host;
            }
        }

        public BlogLookupResult Lookup(BlogRequest blogRequest)
        {
            if(Host == null)
            {
                return new BlogLookupResult(null, null);
            }

            string host = blogRequest.Host;
            Blog blog = Repository.GetBlog(host, blogRequest.Subfolder);
            if(blog != null)
            {
                if(!String.Equals(host, blog.Host, StringComparison.OrdinalIgnoreCase)
                   || !String.Equals(blogRequest.Subfolder, blog.Subfolder, StringComparison.OrdinalIgnoreCase))
                {
                    UriBuilder alternateUrl = ReplaceHost(blogRequest.RawUrl, blog.Host);
                    alternateUrl = ReplaceSubfolder(alternateUrl, blogRequest, blog.Subfolder);
                    return new BlogLookupResult(null, alternateUrl.Uri);
                }
                return new BlogLookupResult(blog, null);
            }

            IPagedCollection<Blog> pagedBlogs = Repository.GetPagedBlogs(null, 0, 10, ConfigurationFlags.None);
            int totalBlogCount = pagedBlogs.MaxItems;
            if(Host.BlogAggregationEnabled && totalBlogCount > 0)
            {
                if(!String.IsNullOrEmpty(blogRequest.Subfolder))
                {
                    return null;
                }
                return new BlogLookupResult(Host.AggregateBlog, null);
            }

            if(totalBlogCount == 1)
            {
                Blog onlyBlog = pagedBlogs.First();
                if(onlyBlog.Host == blogRequest.Host)
                {
                    Uri onlyBlogUrl =
                        ReplaceSubfolder(new UriBuilder(blogRequest.RawUrl), blogRequest, onlyBlog.Subfolder).Uri;
                    return new BlogLookupResult(null, onlyBlogUrl);
                }

                //Extra special case to deal with a common deployment problem where dev uses "localhost" on 
                //dev machine. But deploys to real domain.
                if(OnlyBlogIsLocalHostNotCurrentHost(host, onlyBlog))
                {
                    onlyBlog.Host = host;
                    Repository.UpdateBlog(onlyBlog);

                    if(onlyBlog.Subfolder != blogRequest.Subfolder)
                    {
                        Uri onlyBlogUrl =
                            ReplaceSubfolder(new UriBuilder(blogRequest.RawUrl), blogRequest, onlyBlog.Subfolder).Uri;
                        return new BlogLookupResult(null, onlyBlogUrl);
                    }
                    return new BlogLookupResult(onlyBlog, null);
                }

                //TODO: What about case where you've pulled the prod blog down to localhost?
            }

            return null;
        }

        //private bool CurrentRequestIsForBlogAlias(BlogRequest blogRequest)
        //{
        //    !String.Equals(blogRequest.Host, blog.Host, StringComparison.OrdinalIgnoreCase)
        //           || !String.Equals(blogRequest.Subfolder, blog.Subfolder, StringComparison.OrdinalIgnoreCase)
        //}

        private static bool OnlyBlogIsLocalHostNotCurrentHost(string host, Blog onlyBlog)
        {
            return (
                       !String.Equals("localhost", host, StringComparison.OrdinalIgnoreCase)
                       && String.Equals("localhost", onlyBlog.Host, StringComparison.OrdinalIgnoreCase)
                   )
                   || (
                          !String.Equals("127.0.0.1", host, StringComparison.OrdinalIgnoreCase)
                          && String.Equals("127.0.0.1", onlyBlog.Host, StringComparison.OrdinalIgnoreCase)
                      );
        }

        private static UriBuilder ReplaceHost(Uri originalUrl, string newHost)
        {
            var builder = new UriBuilder(originalUrl) {Host = newHost};
            return builder;
        }

        private static UriBuilder ReplaceSubfolder(UriBuilder originalUrl, BlogRequest blogRequest, string newSubfolder)
        {
            if(!String.Equals(blogRequest.Subfolder, newSubfolder, StringComparison.OrdinalIgnoreCase))
            {
                string appPath = blogRequest.ApplicationPath;
                if(!appPath.EndsWith("/"))
                {
                    appPath += "/";
                }

                int indexAfterAppPath = appPath.Length;
                if(!String.IsNullOrEmpty(blogRequest.Subfolder))
                {
                    originalUrl.Path = originalUrl.Path.Remove(indexAfterAppPath, blogRequest.Subfolder.Length + 1);
                }
                if(!String.IsNullOrEmpty(newSubfolder))
                {
                    originalUrl.Path = originalUrl.Path.Substring(0, indexAfterAppPath) + newSubfolder + "/" +
                                       originalUrl.Path.Substring(indexAfterAppPath);
                }
            }
            return originalUrl;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.Web;
using System.Web.Mobile;
using Subtext.Framework.Configuration;

namespace Subtext.Framework.Services
{
    public class BrowserDetectionService : IHttpHandler
    {
        private static int BlogId
        {
            get
            {
                if(Config.CurrentBlog != null)
                {
                    return Config.CurrentBlog.Id;
                }
                return 0;
            }
        }

        public bool IsReusable
        {
            get { return false; }
        }

        public void ProcessRequest(HttpContext context)
        {
            string mobileQuery = context.Request.QueryString["mobile"];
            bool isMobile;
            if(!bool.TryParse(mobileQuery, out isMobile))
            {
                isMobile = false;
            }
            SetMobile(isMobile);

            string returnUrl = context.Request.QueryString["returnUrl"] ?? string.Empty;
            if(returnUrl.Length == 0)
            {
                returnUrl = "~/";
            }

            //Security so people can't use this for phishing.
            if(returnUrl.StartsWith("http:")
               || returnUrl.StartsWith("https:")
               || (!returnUrl.StartsWith("/") && !returnUrl.StartsWith("~/")))
            {
                returnUrl = "~/";
            }
            context.Response.Redirect(returnUrl);
        }

        public BrowserInfo DetectBrowserCapabilities(HttpRequestBase request)
        {
            bool? isMobile = UserSpecifiedMobile();
            if(isMobile == null)
            {
                var mobileCaps = request.Browser;
                isMobile = mobileCaps != null && mobileCaps.IsMobileDevice;
            }
            return new BrowserInfo(isMobile.Value);
        }

        static bool? UserSpecifiedMobile()
        {
            HttpCookie cookie = HttpContext.Current.Request.Cookies.Get("MobileDeviceInfo_" + BlogId);
            if(cookie == null)
            {
                return null;
            }
            return (cookie.Value == "True");
        }

        public void SetMobile(bool isMobile)
        {
            var cookie = new HttpCookie("MobileDeviceInfo_" + BlogId, isMobile.ToString(CultureInfo.InvariantCulture))
            {Value = isMobile.ToString(CultureInfo.InvariantCulture)};
            HttpContext.Current.Response.Cookies.Add(cookie);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Services
{
    public class BrowserInfo
    {
        readonly bool _mobile;

        public BrowserInfo(bool mobile)
        {
            _mobile = mobile;
        }

        public bool Mobile
        {
            get { return _mobile; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.Framework.Services
{
    public class CommentService : ICommentService
    {
        public CommentService(ISubtextContext context, ICommentFilter filter)
        {
            SubtextContext = context;
            Filter = filter;
        }

        protected ISubtextContext SubtextContext { get; private set; }

        protected ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        protected ICommentFilter Filter { get; private set; }

        public int Create(FeedbackItem comment, bool runFilters)
        {
            Entry entry = Cacher.GetEntry(comment.EntryId, SubtextContext);
            if(entry != null && entry.CommentingClosed)
            {
                return NullValue.NullInt32;
            }

            ISubtextContext context = SubtextContext;
            HttpContextBase httpContext = context.HttpContext;

            if(httpContext != null && httpContext.Request != null)
            {
                comment.UserAgent = httpContext.Request.UserAgent;
                comment.IpAddress = HttpHelper.GetUserIpAddress(httpContext);
            }

            if(runFilters)
            {
                comment.FlaggedAsSpam = true; //We're going to start with this assumption.
            }
            comment.Author = HtmlHelper.SafeFormat(comment.Author, context.HttpContext.Server);
            comment.Body = HtmlHelper.ConvertUrlsToHyperLinks(HtmlHelper.ConvertToAllowedHtml(comment.Body));
            comment.Title = HtmlHelper.SafeFormat(comment.Title, context.HttpContext.Server);

            // If we are creating this feedback item as part of an import, we want to 
            // be sure to use the item's datetime, and not set it to the current time.
            if(NullValue.NullDateTime.Equals(comment.DateCreated))
            {
                comment.DateCreated = context.Blog.TimeZone.Now;
                comment.DateModified = comment.DateCreated;
            }
            else if(NullValue.NullDateTime.Equals(comment.DateModified))
            {
                comment.DateModified = comment.DateCreated;
            }

            comment.Entry = entry;

            if(runFilters)
            {
                OnBeforeCreate(comment);
            }
            
            comment.Id = Repository.Create(comment);

            if(runFilters)
            {
                OnAfterCreate(comment);
            }

            return comment.Id;
        }

        protected virtual void OnBeforeCreate(FeedbackItem feedback)
        {
            if(Filter != null)
            {
                Filter.FilterBeforePersist(feedback);
            }
        }

        protected virtual void OnAfterCreate(FeedbackItem feedback)
        {
            if(Filter != null)
            {
                Filter.FilterAfterPersist(feedback);
            }
        }

        public FeedbackItem Get(int id)
        {
            return Repository.GetFeedback(id);
        }

        public void UpdateStatus(FeedbackItem comment, FeedbackStatusFlag status)
        {
            comment.Status = status;
            Repository.Update(comment);
        }

        public void Destroy(int id)
        {
            Repository.DestroyFeedback(id);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.ObjectModel;
using System.Linq;

namespace Subtext.Framework.Services
{
    public class CompositeTextTransformation : Collection<ITextTransformation>, ITextTransformation
    {
        public string Transform(string original)
        {
            return this.Aggregate(original,
                                  (resultFromLastTransform, transformation) =>
                                  transformation.Transform(resultFromLastTransform));
        }

        /// <summary>
        /// Removes the text transformation of the given type.
        /// </summary>
        /// <typeparam name="TTextTransformation"></typeparam>
        public void Remove<TTextTransformation>() where TTextTransformation : ITextTransformation
        {
            foreach(ITextTransformation textTransform in this)
            {
                if(textTransform.GetType() == typeof(TTextTransformation))
                {
                    Remove(textTransform);
                    return;
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Extensibility;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Routing;
using Subtext.Framework.Security;

namespace Subtext.Framework.Email
{
    public class EmailService : IEmailService
    {
        public EmailService(EmailProvider provider, ITemplateEngine templateEngine, ISubtextContext context)
        {
            EmailProvider = provider;
            TemplateEngine = templateEngine;
            Url = context.UrlHelper;
            Blog = context.Blog;
            Context = context;
        }

        protected EmailProvider EmailProvider { get; private set; }

        protected ITemplateEngine TemplateEngine { get; private set; }

        protected Blog Blog { get; private set; }

        protected UrlHelper Url { get; private set; }

        protected ISubtextContext Context { get; private set; }

        public void EmailCommentToBlogAuthor(FeedbackItem comment)
        {
            if(String.IsNullOrEmpty(Blog.Email)
               || comment.FeedbackType == FeedbackType.PingTrack
               || Context.User.IsAdministrator())
            {
                return;
            }

            string fromEmail = comment.Email;
            if(String.IsNullOrEmpty(fromEmail))
            {
                fromEmail = null;
            }

            var commentForTemplate = new
            {
                blog = Blog,
                comment = new
                {
                    author = comment.Author,
                    title = comment.Title,
                    source = Url.FeedbackUrl(comment).ToFullyQualifiedUrl(Blog),
                    email = fromEmail ?? "none given",
                    authorUrl = comment.SourceUrl,
                    ip = comment.IpAddress,
                    // we're sending plain text email by default, but body includes <br />s for crlf
                    body =
                        (comment.Body ?? string.Empty).Replace("<br />", Environment.NewLine).Replace("&lt;br /&gt;",
                                                                                                      Environment.
                                                                                                          NewLine)
                },
                spamFlag = comment.FlaggedAsSpam ? "Spam Flagged " : ""
            };

            ITextTemplate template = TemplateEngine.GetTemplate("CommentReceived");
            string message = template.Format(commentForTemplate);
            string subject = String.Format(CultureInfo.InvariantCulture, Resources.Email_CommentVia, comment.Title,
                                           Blog.Title);
            if(comment.FlaggedAsSpam)
            {
                subject = "[SPAM Flagged] " + subject;
            }
            string from = EmailProvider.UseCommentersEmailAsFromAddress
                              ? (fromEmail ?? EmailProvider.AdminEmail)
                              : EmailProvider.AdminEmail;

            EmailProvider.Send(Blog.Email, from, subject, message);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Text;
using Subtext.Framework.Util;

namespace Subtext.Framework.Email
{
    public class EmbeddedTemplateEngine : ITemplateEngine
    {
        public ITextTemplate GetTemplate(string templateName)
        {
            string resourceName = "Subtext.Framework.Services.Email.Templates." + templateName + ".template";
            string templateText = ResourceHelper.UnpackEmbeddedResource(resourceName, Encoding.UTF8);
            return new NamedFormatTextTemplate(templateText);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Email
{
    public interface IEmailService
    {
        void EmailCommentToBlogAuthor(FeedbackItem comment);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Email
{
    public interface ITemplateEngine
    {
        ITextTemplate GetTemplate(string templateName);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Email
{
    public interface ITextTemplate
    {
        string Format(object data);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Text;

namespace Subtext.Framework.Email
{
    public class NamedFormatTextTemplate : ITextTemplate
    {
        public NamedFormatTextTemplate(string template)
        {
            Template = template;
        }

        public string Template { get; private set; }

        #region ITextTemplate Members

        public string Format(object data)
        {
            return Template.NamedFormat(data);
        }

        #endregion

        public override string ToString()
        {
            return Template;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Net;
using System.Net.Mail;
using System.Text;
using log4net;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Email
{
    /// <summary>
    /// Default implementation of the <see cref="EmailProvider"/>.  This uses 
    /// the new (introduced in .NET 2.0) System.Net.SmtpClient class which uses SMTP.
    /// </summary>
    public class SystemMailProvider : EmailProvider
    {
        private readonly static ILog Log = new Log();

        /// <summary>
        /// Sends an email.
        /// </summary>
        public override void Send(string to, string from, string subject, string message)
        {
            SendAsync(to, from, subject, message);
        }

        private void SendAsync(string toStr, string fromStr, string subject, string message)
        {
            try
            {
                var from = new MailAddress(fromStr);
                var to = new MailAddress(toStr);

                var em = new MailMessage(from, to) {BodyEncoding = Encoding.UTF8, Subject = subject, Body = message, ReplyTo = from};

                var client = new SmtpClient(SmtpServer) {Port = Port, EnableSsl = SslEnabled};

                if(UserName != null && Password != null)
                {
                    client.UseDefaultCredentials = false;
                    client.Credentials = new NetworkCredential(UserName, Password);
                }

                client.Send(em);
            }
            catch(Exception e)
            {
                Log.Error("Could not send email.", e);
                //Swallow as this was on an async thread.
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.Text.RegularExpressions;

namespace Subtext.Framework.Emoticons
{
    public class Emoticon
    {
        private readonly Regex _regex;

        public Emoticon(string emoticonText, string imageTag)
        {
            EmoticonText = emoticonText;
            ImageTag = imageTag;
            string regexText = Regex.Escape(emoticonText);
            _regex = new Regex(regexText, RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Multiline);
        }

        public string EmoticonText { get; private set; }

        public string ImageTag { get; set; }

        public string Replace(string text, string appRootUrl)
        {
            return _regex.Replace(text, string.Format(CultureInfo.InvariantCulture, ImageTag, appRootUrl));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Subtext.Framework.Emoticons
{
    public class EmoticonsFileSource : IEmoticonsSource, IDisposable
    {
        readonly string _path;
        readonly StreamReader _reader;

        private readonly ISubtextContext _subtextContext;

        public EmoticonsFileSource(ISubtextContext context)
        {
            _subtextContext = context;
        }

        public EmoticonsFileSource(string path)
        {
            _path = path ?? _subtextContext.RequestContext.HttpContext.Request.MapPath("~/emoticons.txt");
            if(!String.IsNullOrEmpty(_path))
            {
                _reader = File.OpenText(_path);
            }
        }

        public EmoticonsFileSource(StreamReader reader)
        {
            _reader = reader ?? File.OpenText(_path);
        }

        #region IDisposable Members

        public void Dispose()
        {
            if(_reader != null)
            {
                _reader.Dispose();
            }
        }

        #endregion

        #region IEmoticonsSource Members

        public IEnumerable<Emoticon> GetEmoticons()
        {
            if(_reader == null)
            {
                return new List<Emoticon>();
            }
            return GetEnumerable().ToList();
        }

        #endregion

        private IEnumerable<Emoticon> GetEnumerable()
        {
            string emoticonText = _reader.ReadLine();
            while(emoticonText != null)
            {
                string imageTag = _reader.ReadLine();
                yield return new Emoticon(emoticonText, imageTag);
                emoticonText = _reader.ReadLine();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;

namespace Subtext.Framework.Emoticons
{
    public interface IEmoticonsSource
    {
        IEnumerable<Emoticon> GetEmoticons();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Linq;
using Ninject;
using Subtext.Framework.Services;

namespace Subtext.Framework.Emoticons
{
    /// <summary>
    /// Converts emoticons to img tags.
    /// </summary>
    public class EmoticonsTransformation : ITextTransformation
    {
        readonly ISubtextContext _subtextContext;

        string _appRootUrl;

        [Inject]
        public EmoticonsTransformation(ISubtextContext context)
            : this(new EmoticonsFileSource(context), null)
        {
            _subtextContext = context;
        }

        public EmoticonsTransformation(IEmoticonsSource emoticonsSource, string appRootUrl)
        {
            EmoticonsTable = emoticonsSource.GetEmoticons();
            _appRootUrl = appRootUrl;
        }

        protected IEnumerable<Emoticon> EmoticonsTable { get; private set; }

        public string Transform(string original)
        {
            if(_appRootUrl == null && _subtextContext != null && _subtextContext.UrlHelper != null)
            {
                //TODO: Temporary Hack.
                _appRootUrl = _subtextContext.UrlHelper.AppRoot();
            }
            return EmoticonsTable.Aggregate(original, (input, transform) => transform.Replace(input, _appRootUrl));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Services
{
    public class EmptyTextTransformation : ITextTransformation
    {
        public static readonly ITextTransformation Instance = new EmptyTextTransformation();

        private EmptyTextTransformation()
        {
        }

        public string Transform(string original)
        {
            return original;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using Subtext.Configuration;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Properties;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Text;

namespace Subtext.Framework.Services
{
    public class EntryPublisher : IEntryPublisher
    {
        public EntryPublisher(ISubtextContext context, ITextTransformation transformation, ISlugGenerator slugGenerator,
            IIndexingService indexingService)
        {
            if(context == null)
            {
                throw new ArgumentNullException("context");
            }
            if (indexingService == null)
            {
                throw new ArgumentNullException("indexingService");
            }
            SubtextContext = context;
            Transformation = transformation ?? EmptyTextTransformation.Instance;
            SlugGenerator = slugGenerator ?? new SlugGenerator(FriendlyUrlSettings.Settings, context.Repository);
            IndexingService = indexingService;
        }

        public ITextTransformation Transformation { get; private set; }

        public ISubtextContext SubtextContext { get; private set; }

        public ISlugGenerator SlugGenerator { get; private set; }

        public IIndexingService IndexingService { get; private set; }

        #region IEntryPublisher Members

        public int Publish(Entry entry)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }

            if(entry.PostType == PostType.None)
            {
                throw new ArgumentException(Resources.InvalidOperation_PostTypeIsNone, "entry");
            }

            entry.Body = Transformation.Transform(entry.Body);

            if(String.IsNullOrEmpty(entry.EntryName))
            {
                entry.EntryName = SlugGenerator.GetSlugFromTitle(entry);
            }
            if(entry.EntryName.IsNumeric())
            {
                entry.EntryName = "n_" + entry.EntryName;
            }
            if(NullValue.IsNull(entry.DateCreated))
            {
                entry.DateCreated = SubtextContext.Blog.TimeZone.Now;
            }
            if(NullValue.IsNull(entry.DateModified))
            {
                entry.DateModified = SubtextContext.Blog.TimeZone.Now;
            }
            if(entry.IsActive)
            {
                if(NullValue.IsNull(entry.DateSyndicated) && entry.IncludeInMainSyndication)
                {
                    entry.DateSyndicated = SubtextContext.Blog.TimeZone.Now;
                }
            }
            else
            {
                entry.DateSyndicated = NullValue.NullDateTime;
            }

            IEnumerable<int> categoryIds = null;
            if(entry.Categories.Count > 0)
            {
                categoryIds = GetCategoryIdsFromCategoryTitles(entry);
            }

            try
            {
                if(NullValue.IsNull(entry.Id))
                {
                    SubtextContext.Repository.Create(entry, categoryIds);
                }
                else
                {
                    SubtextContext.Repository.Update(entry, categoryIds);
                }
            }
            catch(DbException e)
            {
                if(e.Message.Contains("pick a unique EntryName"))
                {
                    throw new DuplicateEntryException(Resources.DuplicateEntryException_EntryNameAlreadyExists, e);
                }
                throw;
            }

            ValidateEntry(entry);
            IList<string> tags = entry.Body.ParseTags();
            SubtextContext.Repository.SetEntryTagList(entry.Id, tags);
            IndexingService.AddPost(entry, tags);
            return entry.Id;
        }

        #endregion

        private static void ValidateEntry(Entry e)
        {
            //TODO: The following doesn't belong here. It's verification code.
            if(!Config.Settings.AllowScriptsInPosts && HtmlHelper.HasIllegalContent(e.Body))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            //Never allow scripts in the title.
            if(HtmlHelper.HasIllegalContent(e.Title))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            if(!Config.Settings.AllowScriptsInPosts && HtmlHelper.HasIllegalContent(e.Description))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            //never allow scripts in the url.
            if(HtmlHelper.HasIllegalContent(e.EntryName))
            {
                throw new IllegalPostCharactersException(Resources.IllegalPostCharacters);
            }

            return;
        }

        private IEnumerable<int> GetCategoryIdsFromCategoryTitles(Entry entry)
        {
            IEnumerable<int> categoryIds = from categoryName in entry.Categories
                                           let category = SubtextContext.Repository.GetLinkCategory(categoryName, true)
                                           where category != null
                                           select category.Id;

            return categoryIds;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Services
{
    public enum GravatarEmailFormat
    {
        Plain,
        Md5
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Web;
using System.Web.Security;

namespace Subtext.Framework.Services
{
    //TODO: This service is a bit hard to use. We should refactor it so it has 
    //      a bit more smarts about Subtext. Such as it can figure out the default image FQDN URL
    public class GravatarService
    {
        public GravatarService(NameValueCollection settings)
            : this(
                settings["GravatarUrlFormatString"], settings.GetEnum<GravatarEmailFormat>("GravatarEmailFormat"),
                settings.GetBoolean("GravatarEnabled"))
        {
        }

        public GravatarService(string urlFormatString, GravatarEmailFormat emailFormat, bool enabled)
        {
            UrlFormatString = urlFormatString;
            EmailFormat = emailFormat;
            Enabled = enabled;
        }

        public bool Enabled { get; private set; }

        public string UrlFormatString { get; private set; }

        public GravatarEmailFormat EmailFormat { get; private set; }

        public string GenerateUrl(string email, Uri defaultImage)
        {
            return GenerateUrl(email, defaultImage != null ? defaultImage.ToString(): string.Empty);
        }

        public string GenerateUrl(string email, string defaultImage)
        {
            if(String.IsNullOrEmpty(email))
            {
                return defaultImage ?? string.Empty;
            }
            defaultImage = defaultImage ?? "identicon";
            string emailForUrl = email.ToLowerInvariant();
            if(EmailFormat == GravatarEmailFormat.Md5)
            {
                emailForUrl = (FormsAuthentication.HashPasswordForStoringInConfigFile(emailForUrl, "md5") ?? string.Empty).ToLowerInvariant();
            }

            emailForUrl = HttpUtility.UrlEncode(emailForUrl);

            return String.Format(CultureInfo.InvariantCulture, UrlFormatString, emailForUrl, defaultImage);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Web.HttpModules;

namespace Subtext.Framework.Services
{
    public interface IBlogLookupService
    {
        BlogLookupResult Lookup(BlogRequest blogRequest);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    public interface ICommentFilter
    {
        void FilterAfterPersist(FeedbackItem feedbackItem);
        void FilterBeforePersist(FeedbackItem feedback);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    public interface ICommentService
    {
        FeedbackItem Get(int id);
        int Create(FeedbackItem feedback, bool runFilters);
        void UpdateStatus(FeedbackItem feedback, FeedbackStatusFlag status);
        void Destroy(int id);
    }
}using System;
using System.Linq;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;

namespace Docuverse.Identicon
{
    /// <summary>
    /// Code borrowed from http://identicon.codeplex.com/
    /// </summary>
    public class IdenticonRenderer
    {
        // Each "patch" in an Identicon is a polygon created from a list of vertices on a 5 by 5 grid.
        // Vertices are numbered from 0 to 24, starting from top-left corner of
        // the grid, moving left to right and top to bottom.
        private const int MaxSize = 128;
        private const int MinSize = 16;
        private const int PatchCells = 4;
        private const int PatchGrids = PatchCells + 1;
        private const byte PatchInverted = 2;
        private const byte PatchSymmetric = 1;
        private static readonly int[] CenterPatchTypes = new[] {0, 4, 8, 15};

        private static readonly byte[] Patch0 = new byte[] {0, 4, 24, 20, 0};
        private static readonly byte[] Patch1 = new byte[] {0, 4, 20, 0};
        private static readonly byte[] Patch10 = new byte[] {0, 2, 12, 10, 0};
        private static readonly byte[] Patch11 = new byte[] {10, 14, 22, 10};
        private static readonly byte[] Patch12 = new byte[] {20, 12, 24, 20};
        private static readonly byte[] Patch13 = new byte[] {10, 2, 12, 10};
        private static readonly byte[] Patch14 = new byte[] {0, 2, 10, 0};
        private static readonly byte[] Patch2 = new byte[] {2, 24, 20, 2};
        private static readonly byte[] Patch3 = new byte[] {2, 10, 14, 22, 2};
        private static readonly byte[] Patch4 = new byte[] {2, 14, 22, 10, 2};
        private static readonly byte[] Patch5 = new byte[] {0, 14, 24, 22, 0};
        private static readonly byte[] Patch6 = new byte[] {2, 24, 22, 13, 11, 22, 20, 2};
        private static readonly byte[] Patch7 = new byte[] {0, 14, 22, 0};
        private static readonly byte[] Patch8 = new byte[] {6, 8, 18, 16, 6};
        private static readonly byte[] Patch9 = new byte[] {4, 20, 10, 12, 2, 4};

        private static readonly byte[] PatchFlags =
            new byte[]
            {
                PatchSymmetric, 0, 0, 0, PatchSymmetric, 0, 0, 0, PatchSymmetric, 0, 0, 0, 0, 0, 0,
                (PatchSymmetric + PatchInverted)
            };

        private static readonly byte[][] PatchTypes =
            new[]
            {
                Patch0, Patch1, Patch2, Patch3, Patch4, Patch5, Patch6, Patch7, Patch8, Patch9, Patch10, Patch11, Patch12, Patch13,
                Patch14, Patch0
            };

        private int _patchOffset; // used to center patch shape at origin because shape rotation works correctly.

        private GraphicsPath[] _patchShapes;

        /// <summary>
        /// The size in pixels at which each patch will be rendered interally before they
        /// are scaled down to the requested identicon size. Default size is 20 pixels
        /// which means, for 9-block identicon, a 60x60 image will be rendered and
        /// scaled down.
        /// </summary>
        public int PatchSize
        {
            get;
            set;
        }

        private IEnumerable<GraphicsPath> CalculatePatchShapes()
        {
            _patchOffset = PatchSize / 2; // used to center patch shape at origin.
            int scale = PatchSize / PatchCells;
            foreach(var patchVertices in PatchTypes)
            {
                var patch = new GraphicsPath();
                foreach(int vertex in patchVertices)
                {
                    int xVertex = (vertex % PatchGrids * scale) - _patchOffset;
                    int yVertex = (vertex / PatchGrids * scale) - _patchOffset;
                    AddPointToGraphicsPath(patch, xVertex, yVertex);
                }
                yield return patch;
            }
        }

        /// <summary>
        /// Adds the X and Y coordinates to the current graphics path.
        /// </summary>
        /// <param name="path"> The current Graphics path</param>
        /// <param name="x">The x coordinate to be added</param>
        /// <param name="y">The y coordinate to be added</param>
        private static void AddPointToGraphicsPath(GraphicsPath path, int x, int y)
        {
            // increment by one.
            var points = new PointF[path.PointCount + 1];
            var pointTypes = new byte[path.PointCount + 1];

            if(path.PointCount == 0)
            {
                points[0] = new PointF(x, y);
                var newPath = new GraphicsPath(points, new[] {(byte)PathPointType.Start});
                path.AddPath(newPath, false);
            }
            else
            {
                path.PathPoints.CopyTo(points, 0);
                points[path.PointCount] = new Point(x, y);

                path.PathTypes.CopyTo(pointTypes, 0);
                pointTypes[path.PointCount] = (byte)PathPointType.Line;

                var tempGraphics = new GraphicsPath(points, pointTypes);
                path.Reset();
                path.AddPath(tempGraphics, false);
            }
        }

        /// <summary>
        /// Returns rendered identicon bitmap for a given identicon code.
        /// </summary>
        /// <param name="code">Identicon code</param>
        /// <param name="size">desired image size</param>
        public Bitmap Render(int code, int size)
        {
            // enforce size limits
            size = Math.Min(size, MaxSize);
            size = Math.Max(size, MinSize);

            // set patch size appropriately to avoid scaling artifacts
            if(size <= 24)
            {
                PatchSize = 16;
            }
            else if(size <= 40)
            {
                PatchSize = 20;
            }
            else if(size <= 64)
            {
                PatchSize = 32;
            }
            else if(size <= 128)
            {
                PatchSize = 48;
            }
            _patchShapes = CalculatePatchShapes().ToArray();

            // decode the code into parts:            
            // bit 0-1: middle patch type
            int centerType = CenterPatchTypes[code & 0x3];
            // bit 2: middle invert
            bool centerInvert = ((code >> 2) & 0x1) != 0;
            // bit 3-6: corner patch type
            int cornerType = (code >> 3) & 0x0f;
            // bit 7: corner invert
            bool cornerInvert = ((code >> 7) & 0x1) != 0;
            // bit 8-9: corner turns
            int cornerTurn = (code >> 8) & 0x3;
            // bit 10-13: side patch type
            int sideType = (code >> 10) & 0x0f;
            // bit 14: side invert
            bool sideInvert = ((code >> 14) & 0x1) != 0;
            // bit 15: corner turns
            int sideTurn = (code >> 15) & 0x3;
            // bit 16-20: blue color component
            int blue = (code >> 16) & 0x01f;
            // bit 21-26: green color component
            int green = (code >> 21) & 0x01f;
            // bit 27-31: red color component
            int red = (code >> 27) & 0x01f;

            // color components are used at top of the range for color difference
            // use white background for now. TODO: support transparency.
            Color foreColor = Color.FromArgb(red << 3, green << 3, blue << 3);
            Color backColor = Color.White;

            // outline shapes with a noticeable color (complementary will do) if
            // shape color and background color are too similar (measured by color
            // distance).
            Color strokeColor = Color.Empty;
            if(ColorDistance(ref foreColor, ref backColor) < 32f)
            {
                strokeColor = ComplementaryColor(ref foreColor);
            }

            // render at larger source size (to be scaled down later)
            int sourceSize = PatchSize * 3;
            using(var sourceImage = new Bitmap(sourceSize, sourceSize, PixelFormat.Format32bppRgb))
            {
                using(Graphics graphics = Graphics.FromImage(sourceImage))
                {
                    // center patch
                    DrawPatch(graphics, PatchSize, PatchSize, centerType, 0, centerInvert, ref foreColor, ref backColor,
                              ref strokeColor);

                    // side patch (top)
                    DrawPatch(graphics, PatchSize, 0, sideType, sideTurn++, sideInvert, ref foreColor, ref backColor,
                              ref strokeColor);
                    // side patch (right)
                    DrawPatch(graphics, PatchSize * 2, PatchSize, sideType, sideTurn++, sideInvert, ref foreColor, ref backColor,
                              ref strokeColor);
                    // side patch (bottom)
                    DrawPatch(graphics, PatchSize, PatchSize * 2, sideType, sideTurn++, sideInvert, ref foreColor, ref backColor,
                              ref strokeColor);
                    // side patch (left)
                    DrawPatch(graphics, 0, PatchSize, sideType, sideTurn, sideInvert, ref foreColor, ref backColor, ref strokeColor);

                    // corner patch (top left)
                    DrawPatch(graphics, 0, 0, cornerType, cornerTurn++, cornerInvert, ref foreColor, ref backColor, ref strokeColor);
                    // corner patch (top right)
                    DrawPatch(graphics, PatchSize * 2, 0, cornerType, cornerTurn++, cornerInvert, ref foreColor, ref backColor,
                              ref strokeColor);
                    // corner patch (bottom right)
                    DrawPatch(graphics, PatchSize * 2, PatchSize * 2, cornerType, cornerTurn++, cornerInvert, ref foreColor,
                              ref backColor, ref strokeColor);
                    // corner patch (bottom left)
                    DrawPatch(graphics, 0, PatchSize * 2, cornerType, cornerTurn, cornerInvert, ref foreColor, ref backColor,
                              ref strokeColor);
                }
                // scale source image to target size with bicubic smoothing
                return ScaleImage(size, sourceImage);
            }
        }

        private static Bitmap ScaleImage(int size, Image sourceImage)
        {
            var bitmap = new Bitmap(size, size, PixelFormat.Format32bppRgb);
            using(Graphics g = Graphics.FromImage(bitmap))
            {
                var fudge = (int)(size * 0.016); // this is necessary to prevent scaling artifacts at larger sizes
                g.DrawImage(sourceImage, 0, 0, size + fudge, size + fudge);
            }
            return bitmap;
        }

        private void DrawPatch(Graphics g, int x, int y, int patch, int turn, bool invert, ref Color fore, ref Color back, ref Color stroke)
        {
            patch %= PatchTypes.Length;
            turn %= 4;
            if((PatchFlags[patch] & PatchInverted) != 0)
            {
                invert = !invert;
            }

            // paint the background
            g.FillRegion(new SolidBrush(invert ? fore : back), new Region(new Rectangle(x, y, PatchSize, PatchSize)));

            // offset and rotate coordinate space by patch position (x, y) and
            // 'turn' before rendering patch shape
            Matrix m = g.Transform;
            g.TranslateTransform((x + _patchOffset), (y + _patchOffset));
            g.RotateTransform(turn * 90);

            // if stroke color was specified, apply stroke
            // stroke color should be specified if fore color is too close to the back color.
            if(!stroke.IsEmpty)
            {
                g.DrawPath(new Pen(stroke), _patchShapes[patch]);
            }

            // render rotated patch using fore color (back color if inverted)
            g.FillPath(new SolidBrush(invert ? back : fore), _patchShapes[patch]);

            // restore previous rotation
            g.Transform = m;
        }

        /// <summary>Returns distance between two colors</summary>		
        private static float ColorDistance(ref Color c1, ref Color c2)
        {
            float dx = c1.R - c2.R;
            float dy = c1.G - c2.G;
            float dz = c1.B - c2.B;
            return (float)Math.Sqrt(dx * dx + dy * dy + dz * dz);
        }

        /// <summary>Returns complementary color</summary>
        private static Color ComplementaryColor(ref Color c)
        {
            return Color.FromArgb(c.ToArgb() ^ 0x00FFFFFF);
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Web;
using System.Web.Mvc;
using Docuverse.Identicon;

namespace Subtext.Framework.Services.Identicon
{
    public class IdenticonResult : FileResult
    {
        public IdenticonResult(int code, int size, string etag) : base("image/png")
        {
            Code = code;
            Size = size;
            Etag = etag;
        }

        public string Etag
        {
            get; 
            private set;
        }
        
        public int Code
        {
            get; 
            private set;
        }
        public int Size
        {
            get; 
            private set;
        }

        protected override void WriteFile(HttpResponseBase response)
        {
            response.Clear();
            if(!string.IsNullOrEmpty(Etag))
            {
                response.AppendHeader("ETag", Etag);
            }
            response.ContentType = "image/png";

            var renderer = new IdenticonRenderer();
            using(Bitmap b = renderer.Render(Code, Size))
            {
                using(var stream = new MemoryStream())
                {
                    b.Save(stream, ImageFormat.Png);
                    stream.WriteTo(response.OutputStream);
                }
            }
        }
    }
}
using System;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace Subtext.Identicon
{
    /// <summary>
    /// Code borrowed from http://identicon.codeplex.com/
    /// </summary>
    public class IdenticonUtil
    {
        /// <summary>Sets or returns current IP address mask. Default is 0xffffffff.</summary>
        public static int Mask = unchecked((int)0xffffffff);

        /// <summary>Sets or returns current salt string value.</summary>
        public static String Salt;

        /// <summary>
        /// Returns Identicon code for given IP address as an integer.
        /// </summary>
        public static int Code(string ipAddress)
        {
            if(ipAddress == null)
            {
                throw new ArgumentNullException("ipAddress", "Must specify a non-null ip address.");
            }

            if(Salt == null)
            {
                // if not set manually, salt is automatically set to some machine-specific stuff 
                // Removed Environment.ProcessorCount because it requires elevated privileges.
                Salt = Environment.MachineName;
            }

            byte[] ip = GetAddressBytes(ipAddress);

            var s = new StringBuilder();
            /// Current implementation uses first four bytes of SHA1(int(mask(ip))+salt)
            /// where mask(ip) uses inetMask to remove unwanted bits from IP address.
            s.Append((((ip[0] & 0xFF) << 24) | ((ip[1] & 0xFF) << 16) | ((ip[2] & 0xFF) << 8) | (ip[3] & 0xFF)) & Mask);
            s.Append('+');
            /// Also, since salt is a string for convenience sake, int(mask(ip)) is
            /// converetd into a string and combined with inetSalt prior to hashing.
            s.Append(Salt);

            SHA1 md = new SHA1CryptoServiceProvider();
            byte[] hashedIp = md.ComputeHash(new UTF8Encoding().GetBytes(s.ToString()));

            return ((hashedIp[0] & 0xFF) << 24) | ((hashedIp[1] & 0xFF) << 16) | ((hashedIp[2] & 0xFF) << 8) | (hashedIp[3] & 0xFF);
        }

        /// <summary>
        /// Translates IP string into 4-byte array
        /// </summary>
        private static byte[] GetAddressBytes(string ipAddress)
        {
            var b = new byte[] {0, 0, 0, 0};
            if(!String.IsNullOrEmpty(ipAddress))
            {
                string s = Regex.Match(ipAddress, @"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}").ToString();
                int i = 0;
                foreach(Match m in Regex.Matches(s, @"\d+"))
                {
                    Byte.TryParse(m.ToString(), out b[i]);
                    i++;
                }
            }
            return b;
        }

        /// <summary>
        /// returns unique string tag for an Identicon code at a specific size. 
        /// Used to track browser caching of specific images
        /// </summary>		
        public static String ETag(int code, int size)
        {
            return "W/\"" + Convert.ToString(code, 16) + "@" + size + "\"";
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    public interface IEntryPublisher
    {
        int Publish(Entry entry);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    /// <summary>
    /// Base interface for comment spam services such as Akismet.
    /// </summary>
    public interface ICommentSpamService
    {
        /// <summary>
        /// Examines the item and determines whether or not it is spam.
        /// </summary>
        /// <param name="feedback"></param>
        /// <returns></returns>
        bool IsSpam(FeedbackItem feedback);

        /// <summary>
        /// Submits the item to the service as a false positive. 
        /// Something that should not have been marked as spam.
        /// </summary>
        /// <param name="feedback"></param>
        void SubmitGoodFeedback(FeedbackItem feedback);

        /// <summary>
        /// Submits the item to the service as a piece of SPAM that got through 
        /// the filter. Something that should've been marked as SPAM.
        /// </summary>
        /// <param name="feedback"></param>
        void SubmitSpam(FeedbackItem feedback);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    public interface ISlugGenerator
    {
        string GetSlugFromTitle(Entry entry);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.Services
{
    public interface IStatisticsService
    {
        void RecordWebView(EntryView view);
        void RecordAggregatorView(EntryView view);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Services
{
    public interface ITextTransformation
    {
        string Transform(string original);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Framework.Services
{
    /// <summary>
    /// Expands keywords into links.
    /// </summary>
    public class KeywordExpander : ITextTransformation
    {
        public KeywordExpander(ObjectProvider repository)
        {
            _repository = repository;
        }

        readonly ObjectProvider _repository;

        public KeywordExpander(IEnumerable<KeyWord> keyWords)
        {
            _keywords = keyWords;
        }

        public IEnumerable<KeyWord> Keywords
        {
            get
            {
                if(_keywords == null)
                {
                    if(_repository != null)
                    {
                        _keywords = _repository.GetKeyWords();
                    }
                }
                return _keywords;
            }
        }

        IEnumerable<KeyWord> _keywords;

        public string Transform(string original)
        {
            return Keywords != null ? Keywords.Aggregate(original, ReplaceFormat) : original;
        }

        /// <summary>
        /// Preforms a forward scan and replace for a given pattern. 
        /// Can specify only to match first fine and if the pattern is CaseSensitive
        /// </summary>
        private static string ReplaceFormat(string source, KeyWord keyword)
        {
            return Scan(source, keyword.Word, keyword.GetFormat, true, keyword.ReplaceFirstTimeOnly,
                        keyword.CaseSensitive);
        }

        private static string Scan(string source, string oldValue, string newValue, bool isFormat, bool onlyFirstMatch,
                                   bool caseSensitive)
        {
            const char tagOpen = '<';
            const char tagClose = '>';
            const string anchorOpen = "<a ";
            const string anchorClose = "</a";

            source += " ";

            bool lastIterMatched = false;

            ScanState state = ScanState.Replace;
            var outputBuffer = new StringBuilder(source.Length);

            var tagstack = new Queue<char>(anchorOpen.Length);

            for(int i = 0; i < source.Length; i++)
            {
                char nextChar = source[i];
                tagstack.Enqueue(nextChar);

                switch(state)
                {
                    case ScanState.Replace:
                        if(anchorOpen == new string(tagstack.ToArray()))
                        {
                            state = ScanState.InAnchor;
                            break;
                        }
                        if(tagOpen == nextChar)
                        {
                            state = ScanState.InTag;
                            break;
                        }
                        if(source.Length - (i + oldValue.Length) > 0)
                        {
                            // peek a head the next target length chunk + 1 boundary char
                            string matchTarget = source.Substring(i, oldValue.Length);

                            if(String.Equals(matchTarget, oldValue,
                                             caseSensitive
                                                 ? StringComparison.Ordinal
                                                 : StringComparison.OrdinalIgnoreCase))
                            {
                                int index = 0 - i;
                                if(index != 0) //Skip if we are at the start of the block
                                {
                                    char prevBeforeMatch = source[(i) - 1];
                                    if(prevBeforeMatch != '>' && prevBeforeMatch != '"' &&
                                       !Char.IsWhiteSpace(prevBeforeMatch))
                                    {
                                        break;
                                    }
                                }

                                // check for word boundary
                                char nextAfterMatch = source[i + oldValue.Length];
                                if(!CharIsWordBoundary(nextAfterMatch))
                                {
                                    break;
                                }

                                // format old with specifier else it's a straight replace
                                if(isFormat)
                                {
                                    outputBuffer.AppendFormat(newValue, oldValue);
                                }
                                else
                                {
                                    outputBuffer.Append(newValue);
                                }

                                // if we're onlyFirstMatch, tack on remainder of source and return
                                if(onlyFirstMatch)
                                {
                                    outputBuffer.Append(source.Substring(i + oldValue.Length,
                                                                               source.Length -
                                                                               (i + oldValue.Length + 1)));
                                    return outputBuffer.ToString();
                                }
                                i += oldValue.Length - 1;

                                lastIterMatched = true;
                                break;
                            }
                        }

                        break;

                    case ScanState.InAnchor:
                        if(anchorClose == new string(tagstack.ToArray()))
                        {
                            state = ScanState.Replace;
                        }
                        break;

                    case ScanState.InTag:
                        if(anchorOpen == new string(tagstack.ToArray()))
                        {
                            state = ScanState.InAnchor;
                        }
                        else if(tagClose == nextChar)
                        {
                            state = ScanState.Replace;
                        }
                        break;

                    default:
                        break;
                }

                if(!lastIterMatched)
                {
                    outputBuffer.Append(nextChar);
                }
                else
                {
                    lastIterMatched = false;
                }
            }

            outputBuffer.Length--;
            return outputBuffer.ToString();
        }


        // cursory testing for word boundaries. there are still some cracks here for html,
        // e.g., &nbsp; and other boundary entities
        private static bool CharIsWordBoundary(char value)
        {
            switch(value)
            {
                case '_':
                    return false;
                default:
                    return !Char.IsLetterOrDigit(value);
            }
        }

        private enum ScanState
        {
            Replace,
            InTag,
            InAnchor
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using Subtext.Framework.Components;
using Subtext.Framework.Text;

namespace Subtext.Framework.Services.SearchEngine
{
    public static class EntryExtensionMethods
    {
        /// <summary>
        /// Converts a blog entry to the document ready for being indexed.
        /// </summary>
        /// <param name="entry">the <see cref="Entry"/> to convert</param>
        /// <param name="tags">list of tags</param>
        /// <returns>the model in the format required by the indexing service</returns>
        public static SearchEngineEntry ConvertToSearchEngineEntry(this Entry entry, IEnumerable<string> tags)
        {
            return new SearchEngineEntry()
                       {
                           BlogId = entry.BlogId,
                           BlogName = entry.Blog.Title,
                           Body = HtmlHelper.RemoveHtml(entry.Body),
                           GroupId = entry.Blog.BlogGroupId,
                           IsPublished = entry.IsActive,
                           EntryId = entry.Id,
                           PublishDate = entry.DateSyndicated,
                           Tags = String.Join(",",tags.ToArray()),
                           Title = entry.Title,
                           EntryName = entry.EntryName
                       };
        }

        /// <summary>
        /// Converts a blog entry to the document ready for being indexed.
        /// Parses the body of the entry looking for tags.
        /// </summary>
        /// <param name="entry">the <see cref="Entry"/> to convert</param>
        /// <returns>the model in the format required by the indexing service</returns>
        public static SearchEngineEntry ConvertToSearchEngineEntry(this Entry entry)
        {
            return entry.ConvertToSearchEngineEntry(entry.Body.ParseTags());
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using Subtext.Framework.Components;

namespace Subtext.Framework.Services.SearchEngine
{
    public interface IIndexingService
    {
        /// <summary>
        /// Rebuilds the index for the current blog. This is done spinning another thread.
        /// </summary>
        void RebuildIndexAsync();
        /// <summary>
        /// Rebuilds the index for the current blog.
        /// </summary>
        IEnumerable<IndexingError> RebuildIndex();
        /// <summary>
        /// Adds a entry to the full text index
        /// </summary>
        /// <param name="entry">The Entry to be added</param>
        /// <returns>A list of possible errors</returns>
        IEnumerable<IndexingError> AddPost(Entry entry);
        /// <summary>
        /// Adds a entry to the full text index
        /// </summary>
        /// <param name="entry">The Entry to be added</param>
        /// <param name="tags">The List of tags</param>
        /// <returns>A list of possible errors</returns>
        IEnumerable<IndexingError> AddPost(Entry entry, IList<string> tags);
    }
}using System;

namespace Subtext.Framework.Services.SearchEngine
{
    public class IndexingError
    {
        public IndexingError(SearchEngineEntry entry, Exception exception)
        {
            Entry = entry;
            Exception = exception;
        }

        public SearchEngineEntry Entry { get; set; }
        public Exception Exception { get; set; }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Threading;
using Subtext.Extensibility;
using Subtext.Extensibility.Collections;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Util;

namespace Subtext.Framework.Services.SearchEngine
{
    public class IndexingService : IIndexingService
    {
        public IndexingService(ISubtextContext subtextContext, ISearchEngineService searchEngine)
        {
            SubtextContext = subtextContext;
            SearchEngineService = searchEngine;
        }

        protected ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        public ISearchEngineService SearchEngineService { get; private set; }
        public ISubtextContext SubtextContext { get; private set; }

        public void RebuildIndexAsync()
        {
            ThreadHelper.FireAndForget(o => RebuildIndex(), "Error while rebuilding index");
        }

        public IEnumerable<IndexingError> RebuildIndex()
        {
            return SearchEngineService.AddPosts(GetBlogPosts());
        }

        private IEnumerable<SearchEngineEntry> GetBlogPosts()
        {
            const int pageSize = 100;
            var collectionBook = new CollectionBook<EntryStatsView>((pageIndex, sizeOfPage) => Repository.GetEntries(PostType.BlogPost,null, pageIndex, sizeOfPage), pageSize);
            foreach (var entry in collectionBook.AsFlattenedEnumerable())
            {
                if(entry.IsActive)
                    yield return entry.ConvertToSearchEngineEntry();
            }
        }

        public IEnumerable<IndexingError> AddPost(Entry entry)
        {
            return ExecuteAddPost(entry.ConvertToSearchEngineEntry());
        }

        public IEnumerable<IndexingError> AddPost(Entry entry, IList<string> tags)
        {
            return ExecuteAddPost(entry.ConvertToSearchEngineEntry(tags));
        }

        private IEnumerable<IndexingError> ExecuteAddPost(SearchEngineEntry entry)
        {
            if (entry.IsPublished)
                return SearchEngineService.AddPost(entry);
            SearchEngineService.RemovePost(entry.EntryId);
            return new List<IndexingError>();
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework.Configuration;

namespace Subtext.Framework.Services.SearchEngine
{
    public interface ISearchEngineService: IDisposable
    {
        /// <summary>
        /// Adds an entry to the full text index
        /// </summary>
        /// <param name="post">The Entry</param>
        IEnumerable<IndexingError> AddPost(SearchEngineEntry post);
        /// <summary>
        /// Adds many entries to the full text index.
        /// This optimizes the index after adding the posts.
        /// </summary>
        /// <param name="posts">List of entries</param>
        IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts);
        /// <summary>
        /// Adds many entries to the full text index
        /// </summary>
        /// <param name="posts">List of entries</param>
        /// <param name="optimize">False to not optimize the index after adding the posts</param>
        IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts, bool optimize);
        /// <summary>
        /// Search the full text index by query string
        /// </summary>
        /// <param name="queryString">the query string</param>
        /// <param name="max">Max number of results to retrieve</param>
        /// <param name="blogId">The id of the blog being searched</param>
        /// <returns></returns>
        IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId);
        /// <summary>
        /// Search the full text index by query string
        /// </summary>
        /// <param name="queryString">the query string</param>
        /// <param name="max">Max number of results to retrieve</param>
        /// <param name="blogId">The id of the blog being searched</param>
        /// <param name="entryId">The id of the entry that must be filtered out of the results (-1 if none)</param>
        /// <returns></returns>
        IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId, int entryId);
        /// <summary>
        /// Removes an entry from the index.
        /// </summary>
        /// <param name="postId">Id of the entry</param>
        void RemovePost(int postId);
        /// <summary>
        /// Gets the number of entries indexed for a blog.
        /// </summary>
        /// <param name="blogId">Id of the blog</param>
        /// <returns></returns>
        int GetIndexedEntryCount(int blogId);
        /// <summary>
        /// Gets the number of entries available in the whole index
        /// </summary>
        /// <returns></returns>
        int GetTotalIndexedEntryCount();
        /// <summary>
        /// Returns all entries "similar" to the entry specified by the id.
        /// </summary>
        /// <param name="entryId">The id of the Entry</param>
        /// <param name="max">The maximum number of results to return</param>
        /// <param name="blogId">The id of the blog being searched</param>
        /// <returns></returns>
        IEnumerable<SearchEngineResult> RelatedContents(int entryId, int max, int blogId);

    }
}ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Subtext.Framework.Services.SearchEngine
{
    public class NoOpIndexingService: IIndexingService
    {
        #region IIndexingService Members

        public void RebuildIndexAsync()
        {
            
        }

        public IEnumerable<IndexingError> RebuildIndex()
        {
            var errors = new List<IndexingError>();
            errors.Add(new IndexingError(new SearchEngineEntry() { EntryId=0 }, new NotSupportedException("The Search Engine has been disabled. Please contact the webmaster if you need further assistence")));
            return errors;
        }

        public IEnumerable<IndexingError> AddPost(Subtext.Framework.Components.Entry entry)
        {
            return new List<IndexingError>();
        }

        public IEnumerable<IndexingError> AddPost(Subtext.Framework.Components.Entry entry, IList<string> tags)
        {
            return new List<IndexingError>();
        }

        #endregion
    }
}
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Subtext.Framework.Services.SearchEngine
{
    public class NoOpSearchEngineService: ISearchEngineService
    {
        #region ISearchEngineService Members

        public IEnumerable<IndexingError> AddPost(SearchEngineEntry post)
        {
            return AddPosts(new[] { post }, false);
        }

        public IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts)
        {
            return AddPosts(posts, true);
        }

        public IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts, bool optimize)
        {
            return new List<IndexingError>();
        }

        public IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId)
        {
            return Search(queryString, max, blogId, -1);
        }

        public IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId, int entryId)
        {
            return new List<SearchEngineResult>();
        }

        public void RemovePost(int postId)
        {
            
        }

        public int GetIndexedEntryCount(int blogId)
        {
            return 0;
        }

        public int GetTotalIndexedEntryCount()
        {
            return 0;
        }

        public IEnumerable<SearchEngineResult> RelatedContents(int entryId, int max, int blogId)
        {
            return new List<SearchEngineResult>();
        }

        #endregion

        #region IDisposable Members

        public void Dispose()
        {
            
        }

        #endregion
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace Subtext.Framework.Services.SearchEngine
{
    public class SearchEngineEntry
    {
        public int EntryId { get; set; }
        public string EntryName { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public string Tags { get; set; }
        public int BlogId { get; set; }
        public bool IsPublished { get; set; }
        public DateTime PublishDate { get; set; }
        public string BlogName { get; set; }
        public int GroupId { get; set; }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;

namespace Subtext.Framework.Services.SearchEngine
{
    public class SearchEngineResult : IEntryIdentity
    {
        public int EntryId { get; set; }
        public string Title { get; set; }
        public DateTime PublishDate { get; set; }
        public string BlogName { get; set; }
        public float Score { get; set; }

        #region IEntryIdentity Members

        public string EntryName { get; set; }

        public DateTime DateSyndicated
        {
            get { return PublishDate; }
        }

        public PostType PostType
        {
            get { return PostType.BlogPost; }
        }

        #endregion

        #region IIdentifiable Members

        public int Id
        {
            get { return EntryId; }
        }

        #endregion
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Lucene.Net.Analysis;
using Lucene.Net.Documents;
using Lucene.Net.Index;
using Lucene.Net.QueryParsers;
using Lucene.Net.Search;
using Lucene.Net.Store;
using Lucene.Net.Util;
using Similarity.Net;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Services.SearchEngine
{

    public class SearchEngineService : ISearchEngineService
    {
        private readonly Directory _directory;
        private readonly Analyzer _analyzer;
        private static IndexWriter _writer;
        private readonly FullTextSearchEngineSettings _settings;

        private const string Title = "Title";
        private const string Body = "Body";
        private const string Tags = "Tags";
        private const string Pubdate = "PubDate";
        private const string Blogid = "BlogId";
        private const string Groupid = "GroupId";
        private const string BlogName = "BlogName";
        private const string Entryid = "PostId";
        private const string Published = "IsPublished";
        private const string EntryName = "EntryName";

        private static readonly Object WriterLock = new Object();

        private static readonly Log Log = new Log();
        private bool _disposed;

        public SearchEngineService(Directory directory, Analyzer analyzer, FullTextSearchEngineSettings settings)
        {
            _directory = directory;
            _analyzer = analyzer;
            _settings = settings;
        }

        private void DoWriterAction(Action<IndexWriter> action)
        {
            lock(WriterLock)
            {
                EnsureIndexWriter();
            }
            action(_writer);
        }

        private T DoWriterAction<T>(Func<IndexWriter,T> action)
        {
            lock (WriterLock)
            {
                EnsureIndexWriter();
            }
            return action(_writer);
        }
      
        // Method should only be called from within a lock.
        void EnsureIndexWriter()
        {
            if(_writer == null)
            {
                if(IndexWriter.IsLocked(_directory))
                {
                    Log.Error("Something left a lock in the index folder: deleting it");
                    IndexWriter.Unlock(_directory);
                    Log.Info("Lock Deleted... can proceed");
                }
                _writer = new IndexWriter(_directory, _analyzer,IndexWriter.MaxFieldLength.UNLIMITED);
                _writer.SetMergePolicy(new LogDocMergePolicy(_writer));
                _writer.SetMergeFactor(5);
            }
        }

        private IndexSearcher Searcher { 
            get {return DoWriterAction(writer => new IndexSearcher(writer.GetReader())); }
        }


        private QueryParser BuildQueryParser()
        {
            var parser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29, Body, _analyzer);
            parser.SetDefaultOperator(QueryParser.Operator.AND);
            return parser;
        }

        public IEnumerable<IndexingError> AddPost(SearchEngineEntry post)
        {
            return AddPosts(new[] { post }, false);
        }

        public IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts)
        {
            return AddPosts(posts, true);
        }

        public IEnumerable<IndexingError> AddPosts(IEnumerable<SearchEngineEntry> posts, bool optimize)
        {
            IList<IndexingError> errors = new List<IndexingError>();
            foreach (var post in posts)
            {
                ExecuteRemovePost(post.EntryId);
                try
                {
                    var currentPost = post;
                    DoWriterAction(writer => writer.AddDocument(CreateDocument(currentPost)));
                }
                catch(Exception ex)
                {
                    errors.Add(new IndexingError(post, ex));
                }
            }
            DoWriterAction(writer =>
            {
                writer.Commit();
                if(optimize)
                {
                    writer.Optimize();
                }

            });
            
            return errors;
        }

        public void RemovePost(int postId)
        {
            ExecuteRemovePost(postId);
            DoWriterAction(writer => writer.Commit());
        }

        public int GetIndexedEntryCount(int blogId)
        {
            var query = GetBlogIdSearchQuery(blogId);
            TopDocs hits = Searcher.Search(query,1);
            return hits.totalHits;
        }

        public int GetTotalIndexedEntryCount()
        {
            return DoWriterAction(writer => writer.GetReader().NumDocs());
        }

        private void ExecuteRemovePost(int entryId)
        {
            Query searchQuery = GetIdSearchQuery(entryId);
            DoWriterAction(writer => writer.DeleteDocuments(searchQuery));
        }

        private static Query GetIdSearchQuery(int id)
        {
            return new TermQuery(new Term(Entryid, NumericUtils.IntToPrefixCoded(id)));
        }

        private static Query GetBlogIdSearchQuery(int id)
        {
            return new TermQuery(new Term(Blogid, NumericUtils.IntToPrefixCoded(id)));
        }

        protected virtual Document CreateDocument(SearchEngineEntry post)
        {
            var doc = new Document();

            var postId = new Field(Entryid,
                NumericUtils.IntToPrefixCoded(post.EntryId),
                Field.Store.YES,
                Field.Index.NOT_ANALYZED,
                Field.TermVector.NO);

            var title = new Field(Title,
                post.Title,
                Field.Store.YES,
                Field.Index.ANALYZED,
                Field.TermVector.YES);
            title.SetBoost(_settings.Parameters.TitleBoost);

            var body = new Field(Body,
                post.Body,
                Field.Store.NO,
                Field.Index.ANALYZED,
                Field.TermVector.YES);
            body.SetBoost(_settings.Parameters.BodyBoost);

            var tags = new Field(Tags,
                post.Tags,
                Field.Store.NO,
                Field.Index.ANALYZED,
                Field.TermVector.YES);
            tags.SetBoost(_settings.Parameters.TagsBoost);

            var blogId = new Field(Blogid,
                NumericUtils.IntToPrefixCoded(post.BlogId),
                Field.Store.NO,
                Field.Index.NOT_ANALYZED,
                Field.TermVector.NO);


            var published = new Field(Published,
                post.IsPublished.ToString(),
                Field.Store.NO,
                Field.Index.NOT_ANALYZED,
                Field.TermVector.NO);

            var pubDate = new Field(Pubdate,
                DateTools.DateToString(post.PublishDate, DateTools.Resolution.MINUTE),
                Field.Store.YES,
                Field.Index.NOT_ANALYZED,
                Field.TermVector.NO);

            var groupId = new Field(Groupid,
                NumericUtils.IntToPrefixCoded(post.GroupId),
                Field.Store.NO,
                Field.Index.NOT_ANALYZED,
                Field.TermVector.NO);

            var blogName = new Field(BlogName,
                post.BlogName,
                Field.Store.YES,
                Field.Index.NO,
                Field.TermVector.NO);

            var postName = new Field(EntryName,
                post.EntryName ?? "",
                Field.Store.YES,
                Field.Index.NO,
                Field.TermVector.NO);
            postName.SetBoost(_settings.Parameters.EntryNameBoost);


            doc.Add(postId);
            doc.Add(title);
            doc.Add(body);
            doc.Add(tags);
            doc.Add(blogId);
            doc.Add(published);
            doc.Add(pubDate);
            doc.Add(groupId);
            doc.Add(blogName);
            doc.Add(postName);

            return doc;
        }

        protected virtual SearchEngineResult CreateSearchResult(Document doc, float score)
        {
            var result = new SearchEngineResult
            {
                BlogName = doc.Get(BlogName),
                EntryId = NumericUtils.PrefixCodedToInt(doc.Get(Entryid)),
                PublishDate = DateTools.StringToDate(doc.Get(Pubdate)),
                Title = doc.Get(Title),
                Score = score
            };
            string entryName = doc.Get(EntryName);
            result.EntryName = !String.IsNullOrEmpty(entryName) ? entryName : null;
            
            return result;
        }

        public IEnumerable<SearchEngineResult> RelatedContents(int entryId, int max, int blogId)
        {
            var list = new List<SearchEngineResult>();

            //First look for the original doc
            Query query = GetIdSearchQuery(entryId);
            TopDocs hits = Searcher.Search(query, max);

            if(hits.scoreDocs.Length <= 0) 
            {
                return list;
            }

            int docNum = hits.scoreDocs[0].doc;

            //Setup MoreLikeThis searcher
            var reader = DoWriterAction(w => w.GetReader());
            var mlt = new MoreLikeThis(reader);
            mlt.SetAnalyzer(_analyzer);
            mlt.SetFieldNames(new[] { Title, Body, Tags });
            mlt.SetMinDocFreq(_settings.Parameters.MinimumDocumentFrequency);
            mlt.SetMinTermFreq(_settings.Parameters.MinimumTermFrequency);
            mlt.SetBoost(_settings.Parameters.MoreLikeThisBoost);

            var moreResultsQuery = mlt.Like(docNum);
            return PerformQuery(list, moreResultsQuery, max+1, blogId, entryId);
        }

        public IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId)
        {
            return Search(queryString, max, blogId, -1);
        }

        public IEnumerable<SearchEngineResult> Search(string queryString, int max, int blogId, int entryId)
        {
            var list = new List<SearchEngineResult>();
            if (String.IsNullOrEmpty(queryString)) return list;
            QueryParser parser = BuildQueryParser();
            Query bodyQuery = parser.Parse(queryString);

            
            string queryStringMerged = String.Format("({0}) OR ({1}) OR ({2})",
                                                     bodyQuery,
                                                     bodyQuery.ToString().Replace("Body", "Title"),
                                                     bodyQuery.ToString().Replace("Body", "Tags"));

            Query query = parser.Parse(queryStringMerged);
            

            return PerformQuery(list, query, max, blogId, entryId);
        }

        private IEnumerable<SearchEngineResult> PerformQuery(ICollection<SearchEngineResult> list, Query queryOrig, int max, int blogId, int idToFilter)
        {
            Query isPublishedQuery = new TermQuery(new Term(Published, true.ToString()));
            Query isBlogQuery = GetBlogIdSearchQuery(blogId);
            
            var query = new BooleanQuery();
            query.Add(isPublishedQuery, BooleanClause.Occur.MUST);
            query.Add(queryOrig, BooleanClause.Occur.MUST);
            query.Add(isBlogQuery, BooleanClause.Occur.MUST);
            IndexSearcher searcher = Searcher;
            TopDocs hits = searcher.Search(query, max);
            int length = hits.scoreDocs.Length;
            int resultsAdded = 0;
            float minScore = _settings.MinimumScore;
            float scoreNorm = 1.0f / hits.GetMaxScore(); 
            for (int i = 0; i < length && resultsAdded < max; i++)
            {
                float score = hits.scoreDocs[i].score * scoreNorm;
                SearchEngineResult result = CreateSearchResult(searcher.Doc(hits.scoreDocs[i].doc), score);
                if (idToFilter != result.EntryId && result.Score > minScore && result.PublishDate < DateTime.Now)
                {
                    list.Add(result);
                    resultsAdded++;
                }
                    
            }
            return list;
        }

        ~SearchEngineService()
        {
            Dispose();
        }

        public void Dispose()
        {
            lock(WriterLock)
            {
                if(!_disposed)
                {
                    //Never checking for disposing = true because there are
                    //no managed resources to dispose

                    var writer = _writer;

                    if(writer != null)
                    {
                        try
                        {
                            writer.Close();
                        }
                        catch(ObjectDisposedException e)
                        {
                           Log.Error("Exception while disposing SearchEngineService", e); 
                        }
                        _writer = null;
                    }

                    var directory = _directory;
                    if(directory != null)
                    {
                        try
                        {
                            directory.Close();
                        }
                        catch(ObjectDisposedException e)
                        {
                            Log.Error("Exception while disposing SearchEngineService", e);
                        }
                    }

                    _disposed = true;
                }
            }
            GC.SuppressFinalize(this);
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Security;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Framework.Security;

namespace Subtext.Framework.Services.Account
{
    public class AccountService : IAccountService
    {
        private readonly static ILog Log = new Log();

        public void Logout(ISubtextContext context)
        {
            var request = context.HttpContext.Request;
            var response = context.HttpContext.Response;
            var authCookie = new HttpCookie(request.GetFullCookieName(context.Blog)) { Expires = DateTime.Now.AddYears(-30) };
            response.Cookies.Add(authCookie);

            if(Log.IsDebugEnabled)
            {
                string username = context.HttpContext.User.Identity.Name;
                if(Log.IsDebugEnabled)
                {
                    Log.Debug("Logging out " + username);
                    Log.Debug("the code MUST call a redirect after this");
                }
            }

            FormsAuthentication.SignOut();
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Services.Account
{
    public interface IAccountService
    {
        void Logout(ISubtextContext context);
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Web;
using System.Web.Security;
using log4net;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.Framework.Security
{
    /// <summary>
    /// Handles blog logins/passwords/tickets
    /// </summary>
    public static class SecurityHelper
    {
        private readonly static ILog Log = new Log();

        /// <summary>
        /// Gets a value indicating whether the current 
        /// user is the admin for the current blog.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [is admin]; otherwise, <c>false</c>.
        /// </value>
        public static bool IsAdmin
        {
            get { return IsInRole("Admins"); }
        }

        /// <summary>
        /// Gets a value indicating whether the current user is a 
        /// Host Admin for the entire installation.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [is host admin]; otherwise, <c>false</c>.
        /// </value>
        public static bool IsHostAdmin
        {
            get { return IsInRole("HostAdmins"); }
        }

        /// <summary>
        /// Gets the name of the current user.
        /// </summary>
        /// <value></value>
        public static string CurrentUserName
        {
            get
            {
                if(HttpContext.Current.Request.IsAuthenticated)
                {
                    try
                    {
                        return HttpContext.Current.User.Identity.Name;
                    }
                    catch
                    {
                    }
                }
                return null;
            }
        }

        /// <summary>
        /// If true, then the user is connecting to the blog via "localhost" 
        /// on the same server as this is installed.  In other words, we're 
        /// pretty sure the user is a developer.
        /// </summary>
        public static bool UserIsConnectingLocally
        {
            get
            {
                var httpContext = new HttpContextWrapper(HttpContext.Current);
                return String.Equals(httpContext.Request.Url.Host, "localhost",
                                     StringComparison.InvariantCultureIgnoreCase)
                       &&
                       HttpHelper.GetUserIpAddress(httpContext).ToString() ==
                       HttpContext.Current.Request.ServerVariables["LOCAL_ADDR"]
                       && HttpHelper.GetUserIpAddress(httpContext).ToString() == "127.0.0.1";
            }
        }

        /// <summary>
        /// Check to see if the supplied credentials are valid for the current blog. If so, 
        /// Set the user's FormsAuthentication Ticket This method will handle passwords for 
        /// both hashed and non-hashed configurations
        /// </summary>
        public static bool Authenticate(this HttpContextBase httpContext, Blog blog, string username, string password,
                                        bool persist)
        {
            if(!IsValidUser(blog, username, password))
            {
                return false;
            }

            httpContext.SetAuthenticationTicket(blog, username, persist, "Admins");
            return true;
        }

        /// <summary>
        /// Check to see if the supplied OpenID claim is valid for the current blog. If so, 
        /// Set the user's FormsAuthentication Ticket This method will handle passwords for 
        /// both hashed and non-hashed configurations
        /// We're comparing URI objects rather than using simple string compare because
        /// functionally equivalent URI's may not pass string comparaisons, e.g.
        /// such as http://example.myopenid.com/ and http://example.myopenid.com (trailing /)
        /// </summary>
        public static bool Authenticate(string claimedIdentifier, bool persist)
        {
            Blog currentBlog = Config.CurrentBlog;
            if(currentBlog == null)
            {
                return false;
            }

            //If the current blog doesn't have a valid OpenID URI, must fail
            if(!Uri.IsWellFormedUriString(currentBlog.OpenIdUrl, UriKind.Absolute))
            {
                return false;
            }

            //If the cliamed identifier isn't a valid OpenID URI, must fail
            if(!Uri.IsWellFormedUriString(claimedIdentifier, UriKind.Absolute))
            {
                return false;
            }

            var currentBlogClaimUri = new Uri(currentBlog.OpenIdUrl);
            var claimedUri = new Uri(claimedIdentifier);

            if(claimedUri.Host != currentBlogClaimUri.Host ||
               claimedUri.AbsolutePath != currentBlogClaimUri.AbsolutePath ||
               claimedUri.Query != currentBlogClaimUri.Query)
            {
                return false;
            }

            if(Log.IsDebugEnabled)
            {
                Log.Debug("SetAuthenticationTicket-Admins via OpenID for " + currentBlog.UserName);
            }
            HttpContextBase httpContext = new HttpContextWrapper(HttpContext.Current);
            httpContext.SetAuthenticationTicket(currentBlog, currentBlog.UserName, persist, "Admins");
            return true;
        }

        /// <summary>
        /// Authenticates the host admin.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="persist">if set to <c>true</c> [persist].</param>
        /// <returns></returns>
        public static bool AuthenticateHostAdmin(string username, string password, bool persist)
        {
            if(!String.Equals(username, HostInfo.Instance.HostUserName, StringComparison.InvariantCultureIgnoreCase))
            {
                return false;
            }

            if(Config.Settings.UseHashedPasswords)
            {
                password = HashPassword(password, HostInfo.Instance.Salt);
            }

            if(!String.Equals(HostInfo.Instance.Password, password, StringComparison.InvariantCultureIgnoreCase))
            {
                return false;
            }

            if(Log.IsDebugEnabled)
            {
                Log.Debug("SetAuthenticationTicket-HostAdmins for " + username);
            }
            HttpContextBase httpContext = new HttpContextWrapper(HttpContext.Current);
            httpContext.SetAuthenticationTicket(null, username, persist, true, "HostAdmins");

            return true;
        }

        /// <summary>
        /// Used to remove a cookie from the client.
        /// </summary>
        /// <returns>a correctly named cookie with Expires date set 30 years ago</returns>
        public static HttpCookie GetExpiredCookie(this HttpRequestBase request, Blog blog)
        {
            var expiredCookie = new HttpCookie(request.GetFullCookieName(blog)) {Expires = DateTime.Now.AddYears(-30)};
            return expiredCookie;
        }

        /// <summary>
        /// Obtains the correct cookie for the current blog
        /// </summary>
        /// <returns>null if correct cookie was not found</returns>
        public static HttpCookie SelectAuthenticationCookie(this HttpRequestBase request, Blog blog)
        {
            HttpCookie authCookie = null;
            HttpCookie c;
            int count = request.Cookies.Count;

            for(int i = 0; i < count; i++)
            {
                c = request.Cookies[i];

                if(c.Name == request.GetFullCookieName(blog))
                {
                    authCookie = c;
                    break;
                }
            }
            return authCookie;
        }

        /// <summary>
        /// Identifies cookies by unique BlogHost names (rather than a single
        /// name for all cookies in multiblog setups as the old code did).
        /// </summary>
        /// <returns></returns>
        public static string GetFullCookieName(this HttpRequestBase request, Blog blog)
        {
            return request.GetFullCookieName(blog, (blog == null || blog.IsAggregateBlog)/*forceHostAdmin*/);
        }

        public static string GetFullCookieName(this HttpRequestBase request, Blog blog, bool forceHostAdmin)
        {
            var name = new StringBuilder(FormsAuthentication.FormsCookieName);
            name.Append(".");

            //See if we need to authenticate the HostAdmin
            string path = request.Path;
            string returnUrl = request.QueryString["ReturnURL"];
            if(forceHostAdmin
               || (path + returnUrl).Contains("HostAdmin", StringComparison.OrdinalIgnoreCase))
            {
                name.Append("HA.");
            }

            if(!forceHostAdmin && blog != null)
            {
                name.Append(blog.Id.ToString(CultureInfo.InvariantCulture));
            }
            else
            {
                name.Append("null");
            }
            if(Log.IsDebugEnabled)
            {
                Log.Debug("GetFullCookieName selected cookie named " + name);
            }
            return name.ToString();
        }

        public static void SetAuthenticationTicket(this HttpContextBase httpContext, Blog blog, string username,
                                                   bool persist, params string[] roles)
        {
            httpContext.SetAuthenticationTicket(blog, username, persist, false, roles);
        }

        /// <summary>
        /// Used by methods in this class plus Install.Step02_ConfigureHost
        /// </summary>
        public static void SetAuthenticationTicket(this HttpContextBase httpContext, Blog blog, string username,
                                                   bool persist, bool forceHostAdmin, params string[] roles)
        {
            //Getting a cookie this way and using a temp auth ticket 
            //allows us to access the timeout value from web.config in partial trust.
            HttpCookie authCookie = FormsAuthentication.GetAuthCookie(username, persist);
            FormsAuthenticationTicket tempTicket = FormsAuthentication.Decrypt(authCookie.Value);
            string userData = string.Join("|", roles);

            var authTicket = new FormsAuthenticationTicket(
                tempTicket.Version,
                tempTicket.Name,
                tempTicket.IssueDate,
                tempTicket.Expiration, //this is how we access the configured timeout value
                persist,
                //the configured persistence value in web.config is not used. We use the checkbox value on the login page.
                userData, //roles
                tempTicket.CookiePath);
            authCookie.Value = FormsAuthentication.Encrypt(authTicket);
            authCookie.Name = httpContext.Request.GetFullCookieName(blog, forceHostAdmin);
            //prevents login problems with some multiblog setups

            httpContext.Response.Cookies.Add(authCookie);
        }

        /// <summary>
        /// Get MD5 hashed/encrypted representation of the password and 
        /// returns a Base64 encoded string of the hash.
        /// This is a one-way hash.
        /// </summary>
        /// <remarks>
        /// Passwords are case sensitive now. Before they weren't.
        /// </remarks>
        /// <param name="password">Supplied Password</param>
        /// <returns>Encrypted (Hashed) value</returns>
        public static string HashPassword(string password)
        {
            Byte[] clearBytes = new UnicodeEncoding().GetBytes(password);
            Byte[] hashedBytes = new MD5CryptoServiceProvider().ComputeHash(clearBytes);

            return Convert.ToBase64String(hashedBytes);
        }

        /// <summary>
        /// Get MD5 hashed/encrypted representation of the password and a 
        /// salt value combined in the proper manner.  
        /// Returns a Base64 encoded string of the hash.
        /// This is a one-way hash.
        /// </summary>
        /// <remarks>
        /// Passwords are case sensitive now. Before they weren't.
        /// </remarks>
        public static string HashPassword(string password, string salt)
        {
            string preHash = CombinePasswordAndSalt(password, salt);
            return HashPassword(preHash);
        }

        /// <summary>
        /// Creates a random salt value.
        /// </summary>
        /// <returns></returns>
        public static string CreateRandomSalt()
        {
            return Convert.ToBase64String(Guid.NewGuid().ToByteArray());
        }

        /// <summary>
        /// Returns a string with a password and salt combined.
        /// </summary>
        /// <param name="password">Password.</param>
        /// <param name="salt">Salt.</param>
        /// <returns></returns>
        public static string CombinePasswordAndSalt(string password, string salt)
        {
            //TODO: return salt + "." + password;
            //We're not ready to do this yet till we do it to the blog_content table too.
            return password;
        }

        /// <summary>
        /// Validates if the supplied credentials match the current blog
        /// </summary>
        public static bool IsValidUser(Blog blog, string username, string password)
        {
            if(String.Equals(username, blog.UserName, StringComparison.OrdinalIgnoreCase))
            {
                return IsValidPassword(blog, password);
            }
            Log.DebugFormat("The supplied username '{0}' does not equal the configured username of '{1}'.", username,
                            blog.UserName);
            return false;
        }

        /// <summary>
        /// Check to see if the supplied password matches the password 
        /// for the current blog. This method will check the 
        /// BlogConfigurationSettings to see if the password should be 
        /// Encrypted/Hashed
        /// </summary>
        public static bool IsValidPassword(Blog blog, string password)
        {
            if(blog.IsPasswordHashed)
            {
                password = HashPassword(password);
            }
            string storedPassword = blog.Password;

            if(storedPassword.IndexOf('-') > 0)
            {
                // NOTE: This is necessary because I want to change how 
                // we store the password.  Maybe changing the password 
                // storage is dumb.  Let me know. -Phil
                //	This is an old password created from BitConverter 
                // string.  Converting to a Base64 hash.
                string[] hashBytesStrings = storedPassword.Split('-');
                var hashedBytes = new byte[hashBytesStrings.Length];
                for(int i = 0; i < hashBytesStrings.Length; i++)
                {
                    hashedBytes[i] = byte.Parse(hashBytesStrings[i].ToString(CultureInfo.InvariantCulture),
                                                NumberStyles.HexNumber, CultureInfo.InvariantCulture);
                    storedPassword = Convert.ToBase64String(hashedBytes);
                }
            }

            return String.Equals(password, storedPassword, StringComparison.Ordinal);
        }

        /// <summary>
        /// When we Encrypt/Hash the password, we can not un-Encrypt/Hash the password. If user's need to retrieve this value, all we can
        /// do is reset the passowrd to a new value and send it.
        /// </summary>
        /// <returns>A New Password</returns>
        public static string ResetPassword()
        {
            string password = RandomPassword();

            UpdatePassword(password);

            return password;
        }

        /// <summary>
        /// Updates the current users password to the supplied value. 
        /// Handles hashing (or not hashing of the password)
        /// </summary>
        /// <param name="password">Supplied Password</param>
        public static void UpdatePassword(string password)
        {
            Blog info = Config.CurrentBlog;
            info.Password = Config.CurrentBlog.IsPasswordHashed ? HashPassword(password) : password;
            //Save new password.
            ObjectProvider.Instance().UpdateConfigData(info);
        }

        public static void UpdateHostAdminPassword(string password)
        {
            HostInfo hostInfo = HostInfo.Instance;
            hostInfo.Password = Config.Settings.UseHashedPasswords ? HashPassword(password, HostInfo.Instance.Salt) : password;
            HostInfo.UpdateHost(hostInfo);
        }

        public static string ResetHostAdminPassword()
        {
            string password = RandomPassword();
            UpdateHostAdminPassword(password);
            return password;
        }

        /// <summary>
        /// Generates a "Random Enough" password. :)
        /// </summary>
        /// <returns></returns>
        public static string RandomPassword()
        {
            return Guid.NewGuid().ToString().Substring(0, 8);
        }

        public static bool IsAdministrator(this IPrincipal user)
        {
            if(user == null)
            {
                return false;
            }
            return user.IsInRole("Admins");
        }

        /// <summary>
        /// Returns true if the user is in the specified role.
        /// It's a wrapper to calling the IsInRole method of 
        /// IPrincipal.
        /// </summary>
        /// <param name="role">Role.</param>
        /// <returns></returns>
        public static bool IsInRole(string role)
        {
            if(HttpContext.Current.User == null)
            {
                return false;
            }
            return HttpContext.Current.User.IsInRole(role);
        }

        /// <summary>
        /// Generates the symmetric key.
        /// </summary>
        /// <returns></returns>
        public static byte[] GenerateSymmetricKey()
        {
            SymmetricAlgorithm rijaendel = Rijndael.Create();
            rijaendel.GenerateKey();
            return rijaendel.Key;
        }

        /// <summary>
        /// Generates the symmetric key.
        /// </summary>
        /// <returns></returns>
        public static byte[] GenerateInitializationVector()
        {
            SymmetricAlgorithm rijaendel = Rijndael.Create();
            rijaendel.GenerateIV();
            return rijaendel.IV;
        }

        /// <summary>
        /// Generates the symmetric key.
        /// </summary>
        /// <param name="clearText">The clear text.</param>
        /// <param name="encoding">The encoding.</param>
        /// <param name="key">The key.</param>
        /// <param name="initializationVendor">The initialization vendor.</param>
        /// <returns></returns>
        public static string EncryptString(string clearText, Encoding encoding, byte[] key, byte[] initializationVendor)
        {
            SymmetricAlgorithm rijaendel = Rijndael.Create();
            ICryptoTransform encryptor = rijaendel.CreateEncryptor(key, initializationVendor);
            byte[] clearTextBytes = encoding.GetBytes(clearText);
            byte[] encrypted = encryptor.TransformFinalBlock(clearTextBytes, 0, clearTextBytes.Length);
            return Convert.ToBase64String(encrypted);
        }

        /// <summary>
        /// Decrypts the string.
        /// </summary>
        /// <param name="encryptedBase64EncodedString">The encrypted base64 encoded string.</param>
        /// <param name="encoding">The encoding.</param>
        /// <param name="key">The key.</param>
        /// <param name="initializationVendor">The initialization vendor.</param>
        /// <returns></returns>
        public static string DecryptString(string encryptedBase64EncodedString, Encoding encoding, byte[] key,
                                           byte[] initializationVendor)
        {
            SymmetricAlgorithm rijaendel = Rijndael.Create();
            ICryptoTransform decryptor = rijaendel.CreateDecryptor(key, initializationVendor);
            byte[] encrypted = Convert.FromBase64String(encryptedBase64EncodedString);
            byte[] decrypted = decryptor.TransformFinalBlock(encrypted, 0, encrypted.Length);
            return encoding.GetString(decrypted);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using Ninject;
using Subtext.Configuration;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;

namespace Subtext.Framework.Services
{
    public class SlugGenerator : ISlugGenerator
    {
        private const string DefaultWordSeparator = "-";

        private static readonly FriendlyUrlSettings DefaultSettings = GetDefaultSettings();
        static readonly Regex TrailingPeriodRegex = new Regex(@"\.+$", RegexOptions.Compiled);
        static readonly Regex WordCharRegex = new Regex(@"[^\w\d\.\- ]+", RegexOptions.Compiled);

        public SlugGenerator(FriendlyUrlSettings slugSettings)
            : this(slugSettings, null)
        {
        }

        [Inject]
        public SlugGenerator(FriendlyUrlSettings slugSettings, ObjectProvider repository)
        {
            SlugSettings = slugSettings ?? DefaultSettings;
            Repository = repository;
        }

        public FriendlyUrlSettings SlugSettings { get; private set; }

        protected ObjectProvider Repository { get; private set; }

        #region ISlugGenerator Members

        public string GetSlugFromTitle(Entry entry)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }
            if(String.IsNullOrEmpty(entry.Title))
            {
                throw new ArgumentException(Resources.Argument_EntryHasNoTitle, "entry");
            }

            string separator = SlugSettings.SeparatingCharacter;
            if(separator != "_" && separator != "." && separator != "-" && separator != string.Empty)
            {
                separator = DefaultWordSeparator;
            }

            string slug = RemoveNonWordCharacters(entry.Title);
            slug = RemoveTrailingPeriods(slug);

            if(SlugSettings.WordCountLimit > 0)
            {
                IEnumerable<string> words = slug.SplitIntoWords().Take(SlugSettings.WordCountLimit);
                IEnumerable<string> encodedWords = words.Select(word => ReplaceUnicodeCharacters(word));
                if(!String.IsNullOrEmpty(separator))
                {
                    slug = String.Join(separator, encodedWords.ToArray());
                    slug = slug.Trim(new[] { separator[0] });
                }
                else
                {
                    //special case for back compati
                    slug = slug.ToPascalCase();
                }
            }

            if(slug.IsNumeric())
            {
                slug = "n_" + slug;
            }
            slug = EnsureUniqueness(slug, SlugSettings.SeparatingCharacter);
            slug = FriendlyUrlSettings.TransformString(slug, SlugSettings.TextTransformation);

            return slug;
        }

        #endregion

        private static FriendlyUrlSettings GetDefaultSettings()
        {
            var config = new NameValueCollection
            {
                {"textTransform", "LowerCase"},
                {"separatingCharacter", DefaultWordSeparator},
                {"limitWordCount", "10"}
            };
            return new FriendlyUrlSettings(config);
        }

        string EnsureUniqueness(string originalSlug, string separator)
        {
            if(Repository == null)
            {
                return originalSlug;
            }
            var suffixFormats = new[]
            {
                string.Empty, "{0}Again", "{0}Yet{0}Again", "{0}And{0}Again", "{0}Once{0}Again", "{0}Once{0}More",
                "{0}To{0}Beat{0}A{0}Dead{0}Horse"
            };
            IEnumerable<string> slugs =
                suffixFormats.Select(s => originalSlug + String.Format(CultureInfo.InvariantCulture, s, separator));
            string uniqueSlug = slugs.First(slug => Repository.GetEntry(slug, false, false) == null);
            return uniqueSlug;
        }

        private static string RemoveNonWordCharacters(string text)
        {
            return WordCharRegex.Replace(text, string.Empty);
        }

        private static string ReplaceUnicodeCharacters(string text)
        {
            string normalized = text.Normalize(NormalizationForm.FormKD);
            Encoding removal = Encoding.GetEncoding(Encoding.ASCII.CodePage,
                                                    new EncoderReplacementFallback(string.Empty),
                                                    new DecoderReplacementFallback(string.Empty));
            byte[] bytes = removal.GetBytes(normalized);

            string encoded = Encoding.ASCII.GetString(bytes);
            if(String.IsNullOrEmpty(encoded))
            {
                return HttpUtility.UrlEncode(text);
            }
            return encoded;
        }

        private static string RemoveTrailingPeriods(string text)
        {
            return TrailingPeriodRegex.Replace(text, string.Empty);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data.SqlClient;
using System.Web;
using log4net;
using Subtext.Framework.Components;
using Subtext.Framework.Logging;
using Subtext.Framework.Routing;
using Subtext.Framework.Web;

namespace Subtext.Framework.Services
{
    public class StatisticsService : IStatisticsService
    {
        private readonly static ILog Log = new Log();

        public StatisticsService(ISubtextContext context, Configuration.Tracking settings)
        {
            SubtextContext = context;
            Settings = settings;
        }

        public ISubtextContext SubtextContext { get; private set; }

        public Configuration.Tracking Settings { get; private set; }

        public void RecordAggregatorView(EntryView entryView)
        {
            if(!Settings.EnableAggBugs || SubtextContext.HttpContext.Request.HttpMethod == "POST")
            {
                return;
            }

            entryView.PageViewType = PageViewType.AggView;

            try
            {
                SubtextContext.Repository.TrackEntry(entryView);
            }
            catch(SqlException e)
            {
                Log.Error("Could not record Aggregator view", e);
            }
        }

        public void RecordWebView(EntryView entryView)
        {
            if(!Settings.EnableWebStats || SubtextContext.HttpContext.Request.HttpMethod == "POST")
            {
                return;
            }

            entryView.ReferralUrl = GetReferral(SubtextContext);

            entryView.PageViewType = PageViewType.WebView;
            try
            {
                SubtextContext.Repository.TrackEntry(entryView);
            }
            catch(Exception e)
            {
                // extra precautions for web view because it's not done via image bug.
                Log.Error("Could not record Web view", e);
            }
        }

        private static string GetReferral(ISubtextContext context)
        {
            HttpRequestBase request = context.HttpContext.Request;
            Uri uri = request.GetUriReferrerSafe();

            if(uri == null)
            {
                return null;
            }

            string referrerDomain = Blog.StripWwwPrefixFromHost(uri.Host);
            string blogDomain =
                Blog.StripWwwPrefixFromHost(context.UrlHelper.BlogUrl().ToFullyQualifiedUrl(context.Blog).Host);

            if(String.Equals(referrerDomain, blogDomain, StringComparison.OrdinalIgnoreCase))
            {
                return null;
            }

            if(referrerDomain.Length == 0)
            {
                Log.Warn("Somehow the referral was an empty string and not null.");
                return null;
            }

            return uri.ToString();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Xml;
using Ninject;
using Sgml;

namespace Subtext.Framework.Services
{
    public class XhtmlConverter : ITextTransformation
    {
        static readonly Regex NewLineStripperRegex = new Regex(@">(\r\n)+<!\[CDATA\[", RegexOptions.Compiled);
        private readonly Converter<string, string> _innerTextConverter;
        private readonly SgmlReader _reader;

        [Inject]
        public XhtmlConverter() : this(null, new SgmlReader())
        {
        }

        public XhtmlConverter(Converter<string, string> innerTextConverter) : this(innerTextConverter, new SgmlReader())
        {
        }

        public XhtmlConverter(Converter<string, string> innerTextConverter, SgmlReader sgmlReader)
        {
            _innerTextConverter = innerTextConverter;
            _reader = sgmlReader;
        }

        public string Transform(string original)
        {
            if(string.IsNullOrEmpty(original))
            {
                return string.Empty;
            }
            return ConvertHtmlToXHtml(original, _innerTextConverter);
        }

        /// <summary>
        /// Converts the specified html into XHTML compliant text.
        /// </summary>
        /// <param name="html">html to convert.</param>
        /// <param name="converter">The converter.</param>
        /// <returns></returns>
        private string ConvertHtmlToXHtml(string html, Converter<string, string> converter)
        {
            _reader.DocType = "html";
            _reader.WhitespaceHandling = WhitespaceHandling.All;
            // Hack to fix SF bug #1678030
            html = RemoveNewLineBeforeCdata(html);
            _reader.InputStream = new StringReader(string.Format("<html>{0}</html>", html));
            _reader.CaseFolding = CaseFolding.ToLower;
            var writer = new StringWriter();
            XmlWriter xmlWriter = null;
            try
            {
                xmlWriter = new XmlTextWriter(writer);

                bool insideAnchor = false;
                bool skipRead = false;
                while((skipRead || _reader.Read()) && !_reader.EOF)
                {
                    skipRead = false;
                    switch(_reader.NodeType)
                    {
                        case XmlNodeType.Element:
                            //Special case for anchor tags for the time being. 
                            //We need some way to communicate which elements the current node is nested within 
                            if(_reader.IsEmptyElement)
                            {
                                xmlWriter.WriteStartElement(_reader.LocalName);
                                xmlWriter.WriteAttributes(_reader, true);
                                if(_reader.LocalName == "a" || _reader.LocalName == "script" ||
                                   _reader.LocalName == "iframe" || _reader.LocalName == "object")
                                {
                                    xmlWriter.WriteFullEndElement();
                                }
                                else
                                {
                                    xmlWriter.WriteEndElement();
                                }
                            }
                            else
                            {
                                if(_reader.LocalName == "a")
                                {
                                    insideAnchor = true;
                                }
                                xmlWriter.WriteStartElement(_reader.LocalName);
                                xmlWriter.WriteAttributes(_reader, true);
                            }
                            break;

                        case XmlNodeType.Text:
                            string text = _reader.Value;

                            if(converter != null && !insideAnchor)
                            {
                                xmlWriter.WriteRaw(converter(HttpUtility.HtmlEncode(text)));
                            }
                            else
                            {
                                xmlWriter.WriteString(text);
                            }
                            break;

                        case XmlNodeType.EndElement:
                            if(_reader.LocalName == "a")
                            {
                                insideAnchor = false;
                            }

                            if(_reader.LocalName == "a" || 
                                _reader.LocalName == "script" ||
                               _reader.LocalName == "iframe" || 
                               _reader.LocalName == "object")
                            {
                                xmlWriter.WriteFullEndElement();
                            }
                            else
                            {
                                xmlWriter.WriteEndElement();
                            }
                            break;

                        default:
                            xmlWriter.WriteNode(_reader, true);
                            skipRead = true;
                            break;
                    }
                }
            }
            finally
            {
                if(xmlWriter != null)
                {
                    xmlWriter.Close();
                }
            }

            string xml = writer.ToString();
            return xml.Substring("<html>".Length, xml.Length - "<html></html>".Length);
        }

        // Ugly hack to remove any new line that sits between a tag end
        // and the beginning of a CDATA section.
        // This to make sure the Xhtml is well formatted before processing it
        private static string RemoveNewLineBeforeCdata(string text)
        {
            if(String.IsNullOrEmpty(text))
            {
                return string.Empty;
            }
            return NewLineStripperRegex.Replace(text, "><![CDATA[");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Security.Principal;
using System.Web;
using System.Web.Routing;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Infrastructure;

namespace Subtext.Framework
{
    public class SubtextContext : ISubtextContext
    {
        public SubtextContext(Blog blog, RequestContext requestContext, UrlHelper urlHelper, ObjectProvider repository,
                              IPrincipal user, ICache cache, IServiceLocator serviceLocator)
        {
            Blog = blog;
            RequestContext = requestContext;
            UrlHelper = urlHelper;
            Repository = repository;
            User = user ?? requestContext.HttpContext.User;
            Cache = cache ?? new SubtextCache(requestContext.HttpContext.Cache);
            ServiceLocator = serviceLocator;
        }

        public Blog Blog { get; private set; }

        public RequestContext RequestContext { get; private set; }

        public HttpContextBase HttpContext
        {
            get { return RequestContext.HttpContext; }
        }

        public UrlHelper UrlHelper { get; private set; }

        public ObjectProvider Repository { get; private set; }

        public IPrincipal User { get; private set; }

        public ICache Cache { get; private set; }

        public IServiceLocator ServiceLocator
        {
            get; 
            private set;
        }

        public ISearchEngineService SearchEngine { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Syndication.Admin
{
    public class LogRssWriter : GenericRssWriter<LogEntry>
    {
        public LogRssWriter(TextWriter writer, ICollection<LogEntry> logs, bool useDeltaEncoding,
                            ISubtextContext context)
            : base(writer, NullValue.NullDateTime, useDeltaEncoding, context)
        {
            Items = logs;
        }

        //TODO: Fix ISP Violation
        protected override string GetCommentRssUrl(LogEntry item)
        {
            return string.Empty;
        }

        protected override string GetGuid(LogEntry item)
        {
            return item.Message + item.Date.ToUniversalTime();
        }

        //TODO: Fix ISP violation
        protected override string GetTrackBackUrl(LogEntry item)
        {
            return string.Empty;
        }

        //TODO: Fix ISP violation
        protected override string GetCommentApiUrl(LogEntry item)
        {
            return string.Empty;
        }

        //TODO: Fix ISP violation
        protected override string GetAggBugUrl(LogEntry item)
        {
            return string.Empty;
        }

        protected override ICollection<string> GetCategoriesFromItem(LogEntry item)
        {
            IList<string> collection = new List<string> {item.Level};

            string path = item.Url.PathAndQuery.Split('?')[0];
            collection.Add(path);
            return collection;
        }

        protected override string GetTitleFromItem(LogEntry item)
        {
            return item.Message;
        }

        protected override string GetLinkFromItem(LogEntry item)
        {
            return UrlHelper.AdminUrl("ErrorLog.aspx");
        }

        protected override string GetBodyFromItem(LogEntry item)
        {
            return item.Exception;
        }

        protected override string GetAuthorFromItem(LogEntry item)
        {
            return item.Logger;
        }

        protected override DateTime GetPublishedDateUtc(LogEntry item)
        {
            return item.Date;
        }

        protected override bool ItemCouldContainComments(LogEntry item)
        {
            return false;
        }

        protected override bool ItemAllowsComments(LogEntry item)
        {
            return false;
        }

        protected override bool CommentsClosedOnItem(LogEntry item)
        {
            return true;
        }

        protected override int GetFeedbackCount(LogEntry item)
        {
            return 0;
        }

        protected override DateTime GetSyndicationDate(LogEntry item)
        {
            return item.Date;
        }

        protected override EnclosureItem GetEnclosureFromItem(LogEntry item)
        {
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication.Admin
{
    public class ModeratedCommentRssWriter : CommentRssWriter
    {
        public ModeratedCommentRssWriter(TextWriter writer, ICollection<FeedbackItem> commentEntries, Entry entry,
                                         ISubtextContext context)
            : base(writer, commentEntries, entry, context)
        {
        }

        protected override void WriteChannel()
        {
            var image = new RssImageElement(GetRssImage(),
                                            CommentEntry.Title,
                                            UrlHelper.EntryUrl(CommentEntry).ToFullyQualifiedUrl(Blog),
                                            77,
                                            60,
                                            null);

            Uri url = UrlHelper.AdminUrl("Feedback.aspx", new {status = 2}).ToFullyQualifiedUrl(Blog);
            BuildChannel(CommentEntry.Title, url, CommentEntry.Email,
                         CommentEntry.HasDescription ? CommentEntry.Description : CommentEntry.Body, Blog.Language,
                         Blog.Author, Blog.LicenseUrl, image);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Text;

namespace Subtext.Framework.Syndication.Admin
{
    public class ReferrerRssWriter : GenericRssWriter<Referrer>
    {
        public ReferrerRssWriter(TextWriter writer, ICollection<Referrer> referrers,
                                 DateTime dateLastViewedFeedItemPublished, bool useDeltaEncoding,
                                 ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
            Items = referrers;
        }

        protected override ICollection<string> GetCategoriesFromItem(Referrer item)
        {
            var strings = new List<string> {item.PostTitle, new Uri(item.ReferrerUrl).Host};
            return strings;
        }

        protected override string GetGuid(Referrer item)
        {
            return item.BlogId.ToString(CultureInfo.InvariantCulture) +
                   item.EntryId.ToString(CultureInfo.InvariantCulture) + item.ReferrerUrl;
        }

        protected override string GetTitleFromItem(Referrer item)
        {
            return item.PostTitle + " - " + item.ReferrerUrl.ShortenUrl(20);
        }

        protected override string GetLinkFromItem(Referrer item)
        {
            return UrlHelper.AdminUrl("Referrers.aspx");
        }

        protected override string GetBodyFromItem(Referrer item)
        {
            return String.Format(CultureInfo.InvariantCulture, Resources.Message_ReferrersForm, item.ReferrerUrl,
                                 item.Count);
        }

        protected override string GetAuthorFromItem(Referrer item)
        {
            return "";
        }

        protected override DateTime GetPublishedDateUtc(Referrer item)
        {
            return item.LastReferDate;
        }

        protected override bool ItemCouldContainComments(Referrer item)
        {
            return false;
        }

        protected override bool ItemAllowsComments(Referrer item)
        {
            return false;
        }

        protected override bool CommentsClosedOnItem(Referrer item)
        {
            return true;
        }

        protected override int GetFeedbackCount(Referrer item)
        {
            return item.Count;
        }

        protected override DateTime GetSyndicationDate(Referrer item)
        {
            return item.LastReferDate;
        }

        protected override string GetAggBugUrl(Referrer item)
        {
            return string.Empty;
        }

        protected override string GetCommentApiUrl(Referrer item)
        {
            return string.Empty;
        }

        protected override string GetCommentRssUrl(Referrer item)
        {
            return string.Empty;
        }

        protected override string GetTrackBackUrl(Referrer item)
        {
            return string.Empty;
        }

        protected override EnclosureItem GetEnclosureFromItem(Referrer item)
        {
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Providers;

namespace Subtext.Framework.Syndication.Admin
{
    public class RssAdminHandler : EntryCollectionHandler<object>
    {
        int _count;
        string[] _filters;
        string _rssType = "";
        string _title = "";

        public RssAdminHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        protected override bool RequiresAdminRole
        {
            get { return true; }
        }

        protected override BaseSyndicationWriter SyndicationWriter
        {
            get
            {
                IList feed = GetFeedEntriesSimple();
                if(feed is ICollection<FeedbackItem>)
                {
                    //TODO: Test the admin feeds
                    var entry = new Entry(PostType.None) {Title = _title, Body = string.Empty};

                    var feedback = (ICollection<FeedbackItem>)feed;
                    return new CommentRssWriter(new StringWriter(), feedback, entry, SubtextContext);
                }
                if(feed is ICollection<Referrer>)
                {
                    var referrers = (ICollection<Referrer>)feed;
                    DateTime lastReferrer = NullValue.NullDateTime;
                    if(referrers.Count > 0)
                    {
                        lastReferrer = referrers.First().LastReferDate;
                    }
                    return new ReferrerRssWriter(new StringWriter(), referrers, lastReferrer, UseDeltaEncoding,
                                                 SubtextContext);
                }
                if(feed is ICollection<LogEntry>)
                {
                    var entries = (ICollection<LogEntry>)feed;
                    return new LogRssWriter(new StringWriter(), entries, UseDeltaEncoding, SubtextContext);
                }
                return null;
            }
        }

        protected override bool IsMainfeed
        {
            get { return false; }
        }

        protected override bool IsLocalCacheOk()
        {
            string dt = LastModifiedHeader;

            if(dt != null)
            {
                IList ec = GetFeedEntriesSimple();

                if(ec != null && ec.Count > 0)
                {
                    //Get the first entry.
                    object entry = default(object);
                    
                    //TODO: Probably change GetFeedEntries to return ICollection<Entry>
                    foreach(object en in ec)
                    {
                        entry = en;
                        break;
                    }
                    return
                        DateTime.Compare(DateTime.Parse(dt, CultureInfo.InvariantCulture),
                                         ConvertLastUpdatedDate(GetItemCreatedDate(entry))) == 0;
                }
            }
            return false;
        }

        protected void SetOptions()
        {
            if(!Int32.TryParse(HttpContext.Request.QueryString["Count"], out _count))
            {
                _count = Config.Settings.ItemCount;
            }

            //TODO: Use route data instead.
            if(Regex.IsMatch(HttpContext.Request.Url.PathAndQuery, "ModeratedCommentRss", RegexOptions.IgnoreCase))
            {
                _title = "Comments requiring your approval.";
                _filters = new[] {"NeedsModeration"};
                _rssType = "Comment";
                return;
            }

            if(Regex.IsMatch(HttpContext.Request.Url.PathAndQuery, "ReferrersRss", RegexOptions.IgnoreCase))
            {
                _title = "Referrals";
                _rssType = "Referral";
                return;
            }

            if(Regex.IsMatch(HttpContext.Request.Url.PathAndQuery, "ErrorsRss", RegexOptions.IgnoreCase))
            {
                _title = "Errors";
                _rssType = "Log";
                return;
            }

            _title = HttpContext.Request["Title"];
            _rssType = HttpContext.Request.QueryString["Type"];

            string qryFilters = HttpContext.Request.QueryString["Filter"];
            _filters = String.IsNullOrEmpty(qryFilters) ? new string[] {} : qryFilters.Split('+');
        }

        protected override void ProcessFeed()
        {
            SetOptions();
            base.ProcessFeed();
        }

        protected override ICollection<object> GetFeedEntries()
        {
            throw new NotImplementedException();
        }

        protected IList GetFeedEntriesSimple()
        {
            if(String.IsNullOrEmpty(_rssType))
            {
                throw new InvalidOperationException("rssType is empty or null");
            }

            ObjectProvider repository = ObjectProvider.Instance();

            switch(_rssType)
            {
                case "Comment":
                    FeedbackStatusFlag flags = FeedbackStatusFlag.None;

                    foreach(string filter in _filters)
                    {
                        if(Enum.IsDefined(typeof(FeedbackStatusFlag), filter))
                        {
                            flags |= (FeedbackStatusFlag)Enum.Parse(typeof(FeedbackStatusFlag), filter, true);
                        }
                    }
                    ICollection<FeedbackItem> moderatedFeedback = repository.GetPagedFeedback(0, _count, flags,
                                                                                              FeedbackStatusFlag.None,
                                                                                              FeedbackType.None);
                    return (IList)moderatedFeedback;

                case "Referral":
                    //TODO: Fix!
                    ICollection<Referrer> referrers = repository.GetPagedReferrers(0, _count, NullValue.NullInt32);
                    return (IList)referrers;

                case "Log":
                    ICollection<LogEntry> entries = LoggingProvider.Instance().GetPagedLogEntries(0, _count);
                    return (IList)entries;
            }

            return null;
        }

        protected override DateTime GetItemCreatedDate(object item)
        {
            if(item is FeedbackItem)
            {
                return ((FeedbackItem)item).DateCreated;
            }
            if(item is Referrer)
            {
                return ((Referrer)item).LastReferDate;
            }
            if(item is LogEntry)
            {
                return ((LogEntry)item).Date;
            }
            return DateTime.Now;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Infrastructure;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Summary description for RssHandler.
    /// </summary>
    public class AtomHandler : BaseSyndicationHandler
    {
        BaseSyndicationWriter<Entry> _writer;

        public AtomHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        /// <summary>
        /// Gets the syndication writer.
        /// </summary>
        /// <returns></returns>
        protected override BaseSyndicationWriter SyndicationWriter
        {
            get
            {
                if(_writer == null)
                {
                    _writer = new AtomWriter(SubtextContext.RequestContext.HttpContext.Response.Output,
                                            Repository.GetMainSyndicationEntries(Blog.ItemCount),
                                            PublishDateOfLastFeedItemReceived, UseDeltaEncoding, SubtextContext);
                }
                return _writer;
            }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected override bool IsMainfeed
        {
            get { return true; }
        }

        /// <summary>
        /// Returns the key used to cache this feed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Date last viewed feed item published.</param>
        /// <returns></returns>
        protected override string CacheKey(DateTime dateLastViewedFeedItemPublished)
        {
            const string key = "ATOM;IndividualMainFeed;BlogId:{0};LastViewed:{1}";
            return string.Format(CultureInfo.InvariantCulture, key, Blog.Id, dateLastViewedFeedItemPublished);
        }

        protected override void Cache(CachedFeed feed)
        {
            ICache cache = SubtextContext.Cache;
            if(cache != null)
            {
                cache.InsertDuration(CacheKey(SyndicationWriter.DateLastViewedFeedItemPublished), feed,
                                     Cacher.MediumDuration, null);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework.Components;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Generates RSS
    /// </summary>
    public class AtomWriter : BaseAtomWriter
    {
        /// <summary>
        /// Creates a new <see cref="AtomWriter"/> instance.
        /// </summary>
        public AtomWriter(TextWriter writer, ICollection<Entry> entries, DateTime dateLastViewedFeedItemPublished,
                          bool useDeltaEncoding, ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
            Items = entries;
            UseAggBugs = true;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using System.Web;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using Subtext.Framework.Tracking;
using Subtext.Infrastructure;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Generates an Atom feed.
    /// </summary>
    public abstract class BaseAtomWriter : BaseSyndicationWriter<Entry>
    {
        private static string W3Utcz(IFormattable dt)
        {
            return dt.ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture);
        }

        private bool _isBuilt;

        /// <summary>
        /// Bases the syndication writer.
        /// </summary>
        protected BaseAtomWriter(TextWriter writer, DateTime dateLastViewedFeedItemPublished, bool useDeltaEncoding,
                                 ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
        }

        protected override void Build()
        {
            if(!_isBuilt)
            {
                Build(DateLastViewedFeedItemPublished);
            }
        }

        /// <summary>
        /// Builds the specified last id viewed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Last id viewed.</param>
        protected override void Build(DateTime dateLastViewedFeedItemPublished)
        {
            if(!_isBuilt)
            {
                StartDocument();
                SetNamespaces();
                WriteChannel();
                WriteEntries();
                EndDocument();
                _isBuilt = true;
            }
        }

        protected virtual void SetNamespaces()
        {
            WriteAttributeString("xmlns:dc", "http://purl.org/dc/elements/1.1/");
            WriteAttributeString("xmlns:trackback", "http://madskills.com/public/xml/rss/module/trackback/");
            WriteAttributeString("xmlns:wfw", "http://wellformedweb.org/CommentAPI/");
            WriteAttributeString("xmlns:slash", "http://purl.org/rss/1.0/modules/slash/");
            //(Duncanma 11/13/2005, changing atom namespace for 1.0 feed)
            WriteAttributeString("xmlns", "http://www.w3.org/2005/Atom");
            WriteAttributeString("xml:lang", Blog.Language);
        }

        protected virtual void StartDocument()
        {
            WriteStartElement("feed");
            //(Duncanma 11/13/2005, removing version attribute for 1.0 feed)
            //this.WriteAttributeString("version","0.3");
        }

        protected void EndDocument()
        {
            WriteEndElement();
        }

        protected virtual void WriteChannel()
        {
            var blogUrl = new Uri(UrlHelper.BlogUrl().ToFullyQualifiedUrl(Blog), "Default.aspx");
            BuildChannel(Blog.Title, blogUrl.ToString(), Blog.SubTitle);
        }

        protected void BuildChannel(string title, string link, string description)
        {
            WriteElementString("title", HtmlHelper.RemoveHtml(title));

            //(Duncanma 11/13/2005, changing link rel and href for 1.0 feed)
            WriteStartElement("link");
            //(Duncanma 12/28/2005, changing again... Atom vs atom was causing feed validation errors
            WriteAttributeString("rel", "self");
            WriteAttributeString("type", "application/atom+xml");
            string currentUrl = link + "Atom.aspx";
            if(HttpContext.Current.Request != null)
            {
                currentUrl = HttpContext.Current.Request.Url.ToString();
            }
            WriteAttributeString("href", currentUrl);

            // this.WriteAttributeString("rel","self");
            // this.WriteAttributeString("type","application/xml");
            // this.WriteAttributeString("href",info.RootUrl + "atom.aspx");
            WriteEndElement();

            //(Duncanma 11/13/2005, changing tagline to subtitle for 1.0 feed)
            WriteStartElement("subtitle");
            WriteAttributeString("type", "html");
            WriteString(HtmlHelper.RemoveHtml(description));
            WriteEndElement();

            WriteElementString("id", link);

            WriteStartElement("author");
            WriteElementString("name", Blog.Author);

            var blogUrl = new Uri(UrlHelper.BlogUrl().ToFullyQualifiedUrl(Blog), "Default.aspx");
            WriteElementString("uri", blogUrl.ToString());
            WriteEndElement();

            //(Duncanma 11/13/05) updated generator to reflect project name change to Subtext
            WriteStartElement("generator");
            //(Duncanma 11/13/2005, changing url to uri for 1.0 feed)
            WriteAttributeString("uri", "http://subtextproject.com");
            WriteAttributeString("version", VersionInfo.VersionDisplayText);
            WriteString("Subtext");
            WriteEndElement();

            //(Duncanma 11/13/2005, changing modified to updated for 1.0 feed)
            WriteElementString("updated", W3Utcz(Blog.LastUpdated));
        }

        private void WriteEntries()
        {
            BlogConfigurationSettings settings = Config.Settings;

            ClientHasAllFeedItems = true;
            LatestPublishDate = DateLastViewedFeedItemPublished;

            foreach(Entry entry in Items)
            {
                // We'll show every entry if RFC3229 is not enabled.
                //TODO: This is wrong.  What if a post is not published 
                // and then gets published later. It will not be displayed.
                if(!UseDeltaEncoding || entry.DateSyndicated > DateLastViewedFeedItemPublished)
                {
                    WriteStartElement("entry");
                    EntryXml(entry, settings, Blog.TimeZone);
                    WriteEndElement();
                    ClientHasAllFeedItems = false;

                    //Update the latest publish date.
                    if(entry.DateSyndicated > LatestPublishDate)
                    {
                        LatestPublishDate = entry.DateSyndicated;
                    }
                }
            }
        }

        protected virtual void EntryXml(Entry entry, BlogConfigurationSettings settings, ITimeZone timezone)
        {
            WriteElementString("title", entry.Title);

            WriteStartElement("link");
            //(Duncanma 11/13/2005, changing alternate to self for 1.0 feed)
            WriteAttributeString("rel", "alternate");
            WriteAttributeString("type", "text/html");
            WriteAttributeString("href", UrlHelper.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString());
            WriteEndElement();

            WriteElementString("id", UrlHelper.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString());

            //(Duncanma 11/13/2005, hiding created, change issued to
            //published and modified to updated for 1.0 feed)
            //this.WriteElementString("created",W3Utcz(entry.DateCreated));
            WriteElementString("published", W3Utcz(entry.DateCreated));
            WriteElementString("updated", W3Utcz(entry.DateModified));

            if(entry.HasDescription)
            {
                WriteStartElement("summary");
                //(Duncanma 11/13/2005, changing text/html to html for 1.0 feed)
                WriteAttributeString("type", "html");
                WriteString(entry.Description);
                WriteEndElement();
            }

            WriteStartElement("content");
            //(Duncanma 11/13/2005, changing text/html to html for 1.0 feed)
            WriteAttributeString("type", "html");
            //(Duncanma 11/13/2005, hiding mode for 1.0 feed)
            //this.WriteAttributeString("mode","escaped");

            WriteString
                (
                string.Format
                    (CultureInfo.InvariantCulture, "{0}{1}", //tag def
                     entry.SyndicateDescriptionOnly ? entry.Description : entry.Body, //use desc or full post
                     (UseAggBugs && settings.Tracking.EnableAggBugs)
                         ? TrackingUrls.AggBugImage(UrlHelper.AggBugUrl(entry.Id))
                         : null //use aggbugs
                    )
                );
            WriteEndElement();

            if(AllowComments && Blog.CommentsEnabled && entry.AllowComments && !entry.CommentingClosed)
            {
                //optional for CommentApi Post location
                WriteElementString("wfw:comment", UrlHelper.CommentApiUrl(entry.Id));
                //optional url for comments
                //this.WriteElementString("comments",entry.Link + "#feedback");
                //optional comment count
                WriteElementString("slash:comments", entry.FeedBackCount.ToString(CultureInfo.InvariantCulture));
                //optional commentRss feed location
                WriteElementString("wfw:commentRss", UrlHelper.CommentRssUrl(entry.Id));
                //optional trackback location
                WriteElementString("trackback:ping", UrlHelper.TrackbacksUrl(entry.Id));
                //core 
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Abstract base class used to write RSS feeds.
    /// </summary>
    public abstract class BaseRssWriter<T> : GenericRssWriter<T> where T : IIdentifiable
    {
        protected BaseRssWriter(TextWriter writer, DateTime dateLastViewedFeedItemPublished, bool useDeltaEncoding,
                                ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
        }

        protected override string GetAggBugUrl(T item)
        {
            return UrlHelper.AggBugUrl(item.Id).ToFullyQualifiedUrl(Blog).ToString();
        }

        protected override string GetCommentApiUrl(T item)
        {
            return UrlHelper.CommentApiUrl(item.Id).ToFullyQualifiedUrl(Blog).ToString();
        }

        protected override string GetCommentRssUrl(T item)
        {
            return UrlHelper.CommentRssUrl(item.Id).ToFullyQualifiedUrl(Blog).ToString();
        }

        protected override string GetTrackBackUrl(T item)
        {
            return UrlHelper.TrackbacksUrl(item.Id).ToFullyQualifiedUrl(Blog).ToString();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Net;
using System.Text;
using System.Web;
using System.Web.Security;
using Subtext.Framework.Security;
using Subtext.Framework.Syndication.Compression;
using Subtext.Framework.Web.Handlers;
using Subtext.Framework.Web;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Abstract base class used to respond to requests for 
    /// syndicated feeds such as RSS and ATOM.
    /// </summary>
    public abstract class BaseSyndicationHandler : SubtextHttpHandler
    {
        const int HttpImUsed = 226;

        protected BaseSyndicationHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        protected CachedFeed Feed { get; set; }

        // TODO: Why is the private setter not used?
        protected virtual bool RequiresAdminRole { get; private set; }
        // TODO: Why is the private setter not used?
        protected virtual bool RequiresHostAdminRole { get; private set; }

        protected HttpContextBase HttpContext
        {
            get { return SubtextContext.HttpContext; }
        }

        /// <summary>
        /// Returns the "If-Modified-Since" HTTP header.  This indicates 
        /// the last time the client requested data and is used to 
        /// determine whether new data is to be sent.
        /// </summary>
        /// <value></value>
        protected string LastModifiedHeader
        {
            get { return HttpContext.Request.Headers["If-Modified-Since"]; }
        }

        /// <summary>
        /// Returns the "If-None-Match" HTTP header.  This is used to indicate 
        /// a conditional GET and is used to implement RFC3229 with feeds 
        /// <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html"/>.
        /// </summary>
        /// <value></value>
        protected string IfNonMatchHeader
        {
            get { return HttpContext.Request.Headers["If-None-Match"]; }
        }

        /// <summary>
        /// Gets the Publish Date of the last feed item received by the client. 
        /// This is used to determine whether the client is up to date 
        /// or whether the client is ready to receive new feed items. 
        /// We will then send just the difference.
        /// </summary>
        /// <value></value>
        protected DateTime PublishDateOfLastFeedItemReceived
        {
            get
            {
                if(!string.IsNullOrEmpty(IfNonMatchHeader))
                {
                    try
                    {
                        return DateTime.Parse(IfNonMatchHeader, CultureInfo.InvariantCulture);
                    }
                    catch(FormatException)
                    {
                        //Swallow it.
                    }
                }
                return NullValue.NullDateTime;
            }
        }

        /// <summary>
        /// Gets a value indicating whether use delta encoding within this request.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if use delta encoding; otherwise, <c>false</c>.
        /// </value>
        protected bool UseDeltaEncoding
        {
            get { return Blog.RFC3229DeltaEncodingEnabled && AcceptDeltaEncoding; }
        }

        /// <summary>
        /// Gets the syndication writer.
        /// </summary>
        /// <returns></returns>
        protected abstract BaseSyndicationWriter SyndicationWriter { get; }

        /// <summary>
        /// Returns the "Accept-Encoding" value from the HTTP Request header. 
        /// This is a list of encodings that may be sent to the browser.
        /// </summary>
        /// <remarks>
        /// Specifically we're looking for gzip.
        /// </remarks>
        /// <value></value>
        protected string AcceptEncoding
        {
            get
            {
                string header = HttpContext.Request.Headers["Accept-Encoding"];
                if(header != null)
                {
                    return header;
                }
                return string.Empty;
            }
        }

        /// <summary>
        /// Gets the accept IM header from the request.
        /// </summary>
        /// <value></value>
        protected string AcceptImHeader
        {
            get
            {
                string header = HttpContext.Request.Headers["A-IM"];
                if(header != null)
                {
                    return header;
                }
                return string.Empty;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the client accepts 
        /// <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html">RFC3229 Feed Delta 
        /// Encoding</see>. 
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [accepts delta encoding]; otherwise, <c>false</c>.
        /// </value>
        protected bool AcceptDeltaEncoding
        {
            get { return AcceptImHeader.IndexOf("feed") >= 0; }
        }

        /// <summary>
        /// Gets a value indicating whether the client accepts gzip compression.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if accepts gzip compression; otherwise, <c>false</c>.
        /// </value>
        protected bool AcceptGzipCompression
        {
            get
            {
                return AcceptEncoding.IndexOf("gzip") >= 0 ||
                       AcceptImHeader.IndexOf("gzip") >= 0;
            }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected abstract bool IsMainfeed { get; }

        /// <summary>
        /// Compares the requesting clients <see cref="LastModifiedHeader"/> against 
        /// the date the feed was last updated.  If the feed hasn't been updated, then 
        /// it sends a 304 HTTP header indicating such.
        /// </summary>
        /// <returns></returns>
        protected virtual bool IsLocalCacheOk()
        {
            string dt = LastModifiedHeader;
            if(dt != null)
            {
                try
                {
                    DateTime feedDt = DateTime.Parse(dt, CultureInfo.InvariantCulture);
                    DateTime lastUpdated = ConvertLastUpdatedDate(Blog.LastUpdated);
                    TimeSpan ts = feedDt - lastUpdated;

                    //We need to allow some margin of error.
                    return Math.Abs(ts.TotalMilliseconds) <= 500;
                }
                catch(FormatException)
                {
                    //TODO: Review
                    //swallow it for now.
                    //Some browsers send a funky last modified header.
                    //We don't want to throw an exception in those cases.
                }
            }
            return false;
        }

        /// <summary>
        /// Returns whether or not the http cache is OK.
        /// </summary>
        /// <returns></returns>
        protected virtual bool IsHttpCacheOk()
        {
            if(HttpContext.Cache == null)
            {
                Feed = null;
                return false;
            }

            Feed = HttpContext.Cache[CacheKey(PublishDateOfLastFeedItemReceived)] as CachedFeed;
            if(Feed == null)
            {
                return false;
            }
            return Feed.LastModified == ConvertLastUpdatedDate(Blog.LastUpdated);
        }

        /// <summary>
        /// Send the HTTP status code 304 to the response this instance.
        /// </summary>
        private void Send304()
        {
            HttpContext.Response.StatusCode = 304;
        }

        /// <summary>
        /// Convert a date to the server time.
        /// </summary>
        protected DateTime ConvertLastUpdatedDate(DateTime dateTime)
        {
            return Blog.TimeZone.ToServerDateTime(dateTime);
        }

        /// <summary>
        /// Processs the feed. Responds to the incoming request with the 
        /// contents of the feed.
        /// </summary>
        protected virtual void ProcessFeed()
        {
            if(RedirectToFeedBurnerIfNecessary())
            {
                return;
            }

            // Checks Last Modified Header.
            if(IsLocalCacheOk())
            {
                Send304();
                return;
            }

            // Checks our cache against last modified header.
            if(!IsHttpCacheOk())
            {
                Feed = BuildFeed();
                if(Feed != null)
                {
                    if(UseDeltaEncoding && Feed.ClientHasAllFeedItems)
                    {
                        Send304();
                        return;
                    }
                    Cache(Feed);
                }
            }

            WriteFeed();
        }

        /// <summary>
        /// Returns the key used to cache this feed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Date last viewed feed item published.</param>
        /// <returns></returns>
        protected abstract string CacheKey(DateTime dateLastViewedFeedItemPublished);

        protected abstract void Cache(CachedFeed feed);

        protected virtual CachedFeed BuildFeed()
        {
            var feed = new CachedFeed {LastModified = ConvertLastUpdatedDate(Blog.LastUpdated)};
            BaseSyndicationWriter writer = SyndicationWriter;
            feed.Xml = writer.Xml;
            feed.ClientHasAllFeedItems = writer.ClientHasAllFeedItems;
            feed.Etag = writer.DateLastViewedFeedItemPublished.ToString(CultureInfo.InvariantCulture);
            feed.LatestFeedItemPublishDate = writer.DateLastViewedFeedItemPublished;

            return feed;
        }

        /// <summary>
        /// Writes the feed to the response.
        /// </summary>
        protected virtual void WriteFeed()
        {
            string encoding = null;

            if(Feed != null)
            {
                if(Blog.UseSyndicationCompression && AcceptGzipCompression)
                {
                    // We're GZip Encoding!
                    SyndicationCompressionFilter filter = SyndicationCompressionHelper.GetFilterForScheme(
                        AcceptEncoding, HttpContext.Response.Filter);

                    if(filter != null)
                    {
                        encoding = filter.ContentEncoding;
                        HttpContext.Response.Filter = filter.Filter;
                    }
                }

                if(encoding == null)
                {
                    HttpContext.Response.ContentEncoding = Encoding.UTF8;
                }

                HttpContext.Response.ContentType = "text/xml";
                HttpContext.Response.Cache.SetCacheability(HttpCacheability.Public);
                HttpContext.Response.Cache.SetLastModified(Feed.LastModified);
                HttpContext.Response.Cache.SetETag(Feed.Etag);

                if(AcceptGzipCompression)
                {
                    HttpContext.Response.AddHeader("IM", "feed, gzip");
                }
                else
                {
                    HttpContext.Response.AddHeader("IM", "feed");
                }
                if(UseDeltaEncoding)
                {
                    HttpContext.Response.StatusCode = HttpImUsed; //IM Used
                }
                else
                {
                    HttpContext.Response.StatusCode = (int)HttpStatusCode.OK;
                }

                HttpContext.Response.Write(Feed.Xml);
            }
        }

        /// <summary>
        /// Processs the request and sends the feed to the response.
        /// </summary>
        public override void ProcessRequest()
        {
            if((RequiresAdminRole && !SecurityHelper.IsAdmin) || (RequiresHostAdminRole && !SecurityHelper.IsHostAdmin))
            {
                FormsAuthentication.RedirectToLoginPage();
                return;
            }
            ProcessFeed();
        }

        // Adapted from DasBlog
        private bool RedirectToFeedBurnerIfNecessary()
        {
            //If we are using FeedBurner, only allow them to get our feed...
            if(!String.IsNullOrEmpty(Blog.RssProxyUrl))
            {
                string userAgent = HttpContext.Request.UserAgent;
                if(!String.IsNullOrEmpty(userAgent))
                {
                    // If they aren't FeedBurner and they aren't asking for a category or comment rss, redirect them!
                    if(!userAgent.StartsWith("FeedBurner") && IsMainfeed)
                    {
                        HttpContext.Response.RedirectPermanent(SubtextContext.UrlHelper.RssProxyUrl(SubtextContext.Blog).ToString());
                        return true;
                    }
                }
            }
            return false;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Xml;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Base class for writing RSS and ATOM feeds.
    /// </summary>
    public abstract class BaseSyndicationWriter : XmlTextWriter
    {
        private readonly TextWriter _writer;

        /// <summary>
        /// Creates a new <see cref="BaseSyndicationWriter"/> instance.
        /// </summary>
        protected BaseSyndicationWriter(TextWriter writer, DateTime dateLastViewedFeedItemPublished,
                                        bool useDeltaEncoding, ISubtextContext context) : base(writer)
        {
            LatestPublishDate = NullValue.NullDateTime;

            DateLastViewedFeedItemPublished = dateLastViewedFeedItemPublished;
            _writer = writer;
            SubtextContext = context;
            Blog = context.Blog;
            UrlHelper = context.UrlHelper;
            UseDeltaEncoding = useDeltaEncoding;
            Formatting = Formatting.Indented;
            Indentation = 4;
        }

        public ISubtextContext SubtextContext { get; private set; }

        public UrlHelper UrlHelper { get; private set; }

        public Blog Blog { get; private set; }

        public bool UseDeltaEncoding { get; protected set; }

        /// <summary>
        /// Gets the underlying text writer.
        /// </summary>
        /// <value></value>
        public TextWriter TextWriter
        {
            get
            {
                Build();
                return _writer;
            }
        }

        /// <summary>
        /// Gets the XML.
        /// </summary>
        /// <value></value>
        public string Xml
        {
            get
            {
                var xml = TextWriter.ToString();
                return xml;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the feed client has all the feed items.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if the client has all feed items; otherwise, <c>false</c>.
        /// </value>
        public bool ClientHasAllFeedItems { get; protected set; }

        /// <summary>
        /// Gets the publish date of the latest syndicated item.
        /// </summary>
        /// <value></value>
        public DateTime LatestPublishDate { get; protected set; }

        /// <summary>
        /// Gets the publish date of the last syndicated feed item 
        /// that the client aggregator viewed.  This is sent as 
        /// the ETag.
        /// </summary>
        /// <value></value>
        public DateTime DateLastViewedFeedItemPublished { get; private set; }

        public bool UseAggBugs { get; set; }

        public bool AllowComments { get; set; }

        /// <summary>
        /// Returns the XML
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return Xml;
        }

        /// <summary>
        /// Builds the feed.
        /// </summary>
        protected abstract void Build();

        /// <summary>
        /// Builds the feed with delta-encoding possible.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">The date last viewed feed item published.</param>
        protected abstract void Build(DateTime dateLastViewedFeedItemPublished);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;

namespace Subtext.Framework.Syndication
{
    public abstract class BaseSyndicationWriter<T> : BaseSyndicationWriter
    {
        /// <summary>
        /// Creates a new <see cref="BaseSyndicationWriter"/> instance.
        /// </summary>
        protected BaseSyndicationWriter(TextWriter writer, DateTime dateLastViewedFeedItemPublished,
                                        bool useDeltaEncoding, ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
        }

        /// <summary>
        /// Gets or sets the entries to be rendered in the feed.
        /// </summary>
        /// <value>The entries.</value>
        public ICollection<T> Items { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// <p>
    /// The CachedFeed is a cacheable container for our rss feed(s). Instead of 
    /// requesting the cache data, processing it, and creating an XML document 
    /// on each request, we will store the actual Rss document as a cached string.
    /// Generally, it will be returned to the client by calling Response.Write(feed.Xml)
    /// </p>
    /// </summary>
    public class CachedFeed
    {
        private string _etag;
        private DateTime _lastModified;

        public CachedFeed()
        {
            LatestFeedItemPublishDate = NullValue.NullDateTime;
        }

        /// <summary>
        /// Gets or sets the date this feed was last modified.
        /// </summary>
        /// <value></value>
        public DateTime LastModified
        {
            //TODO: Need to figure out what happens to the date when we set LastModified date. 
            // Returned data usually does not match 
            // what we sent!
            get { return _lastModified; }
            set
            {
                //Just incase the user changes timezones after a post
                if(value > DateTime.Now)
                {
                    value = DateTime.Now;
                }
                _lastModified = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether client has all feed items. 
        /// This is according to RFC3229 with feeds 
        /// <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html"/>.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if the client has all feed items; otherwise, <c>false</c>.
        /// </value>
        public bool ClientHasAllFeedItems { get; set; }

        /// <summary>
        /// Gets or sets the latest feed item publish date. This is the date that the latest feed 
        /// item that will be sent to the client was published.
        /// </summary>
        /// <value></value>
        public DateTime LatestFeedItemPublishDate { get; set; }

        /// <summary>
        /// Provides the current value of the entity tag for the requested 
        /// variant (<see href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19"/>). 
        /// In our case, it should be the ID of the last feed item sent.
        /// </summary>
        /// <value></value>
        public string Etag
        {
            get
            {
                if(_etag == null)
                {
                    // if we did not set the etag, just use the 
                    // LastModified Date
                    _etag = LastModified.ToString(CultureInfo.InvariantCulture);
                }
                return _etag;
            }
            set { _etag = value; }
        }

        /// <summary>
        /// Gets or sets the contents of the feed.
        /// </summary>
        /// <value></value>
        public string Xml { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework.Components;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Summary description for CategoryWriter.
    /// </summary>
    public class CategoryWriter : RssWriter
    {
        /// <summary>
        /// Creates a new <see cref="CategoryWriter"/> instance.
        /// </summary>
        public CategoryWriter(TextWriter writer, ICollection<Entry> ec, LinkCategory lc, Uri url,
                              ISubtextContext context) : base(writer, ec, NullValue.NullDateTime, false, context)
        {
            Category = lc;
            Url = url;
        }

        public LinkCategory Category { get; set; }

        public Uri Url { get; set; }

        //TODO: implement dateLastViewedFeedItemPublished
        //TODO: Implement useDeltaEncoding

        protected override void WriteChannel()
        {
            if(Category == null)
            {
                base.WriteChannel();
            }
            else
            {
                BuildChannel(Category.Title, Url, Blog.Email,
                             Category.HasDescription ? Category.Description : Category.Title, Blog.Language, Blog.Author,
                             Blog.LicenseUrl);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Writes a CommentRSS feed to the underlying stream.  Inherits from 
    /// BaseRssWriter which ultimately inherits from <see cref="XmlTextWriter"/>.
    /// </summary>
    public class CommentRssWriter : BaseRssWriter<FeedbackItem>
    {
        protected Entry CommentEntry;

        /// <summary>
        /// Creates a new <see cref="CommentRssWriter"/> instance.
        /// </summary>
        public CommentRssWriter(TextWriter writer, ICollection<FeedbackItem> commentEntries, Entry entry,
                                ISubtextContext context) : base(writer, NullValue.NullDateTime, false, context)
        {
            if(commentEntries == null)
            {
                throw new ArgumentNullException("commentEntries");
            }

            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }

            Items = commentEntries;
            CommentEntry = entry;
            UseAggBugs = false;
            AllowComments = false;
        }

        /// <summary>
        /// Writes the RSS channel to the underlying stream.
        /// </summary>
        protected override void WriteChannel()
        {
            Uri entryUrl = UrlHelper.EntryUrl(CommentEntry).ToFullyQualifiedUrl(Blog);
            var image = new RssImageElement(GetRssImage(), CommentEntry.Title, entryUrl, 77, 60, null);

            BuildChannel(CommentEntry.Title,
                         entryUrl,
                         CommentEntry.Email,
                         CommentEntry.HasDescription ? CommentEntry.Description : CommentEntry.Body,
                         Blog.Language,
                         Blog.Author,
                         Blog.LicenseUrl,
                         image);
        }

        /// <summary>
        /// Gets the categories from entry.
        /// </summary>
        /// <param name="item">The entry.</param>
        /// <returns></returns>
        protected override ICollection<string> GetCategoriesFromItem(FeedbackItem item)
        {
            return null;
        }

        /// <summary>
        /// Gets the title from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetTitleFromItem(FeedbackItem item)
        {
            return item.Title;
        }

        /// <summary>
        /// Gets the link from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetLinkFromItem(FeedbackItem item)
        {
            return UrlHelper.FeedbackUrl(item).ToFullyQualifiedUrl(Blog).ToString();
        }

        /// <summary>
        /// Gets the body from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetBodyFromItem(FeedbackItem item)
        {
            return item.Body;
        }

        /// <summary>
        /// Gets the author from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetAuthorFromItem(FeedbackItem item)
        {
            return item.Author;
        }

        /// <summary>
        /// Returns true if the Item could contain comments.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool ItemCouldContainComments(FeedbackItem item)
        {
            return false;
        }

        /// <summary>
        /// Returns true if the item allows comments, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool ItemAllowsComments(FeedbackItem item)
        {
            return false;
        }

        /// <summary>
        /// Returns true if comments are closed, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool CommentsClosedOnItem(FeedbackItem item)
        {
            return true;
        }

        /// <summary>
        /// Gets the feedback count for the item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override int GetFeedbackCount(FeedbackItem item)
        {
            return 0;
        }

        /// <summary>
        /// Obtains the syndication date for the specified entry, since 
        /// we don't necessarily know if the type has that field, we 
        /// can delegate this to the inheriting class.
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        protected override DateTime GetSyndicationDate(FeedbackItem item)
        {
            return item.DateCreated;
        }

        /// <summary>
        /// Gets the publish date from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override DateTime GetPublishedDateUtc(FeedbackItem item)
        {
            return Blog.TimeZone.ToUtc(item.DateCreated);
        }

        protected override EnclosureItem GetEnclosureFromItem(FeedbackItem item)
        {
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.IO;

namespace Subtext.Framework.Syndication.Compression
{
    public class SyndicationCompressionFilter
    {
        private readonly string _encoding;
        private readonly Stream _stream;

        #region -- Constructor(Stream) --

        public SyndicationCompressionFilter(Stream stream)
        {
            _stream = stream;
            _encoding = null;
        }

        #endregion

        #region -- Constructor(Stream, encoding) --

        public SyndicationCompressionFilter(Stream stream, string encoding)
        {
            _stream = stream;
            _encoding = encoding;
        }

        #endregion

        #region -- ContentEncoding Property --

        public string ContentEncoding
        {
            get { return _encoding; }
        }

        #endregion

        #region -- Filter Property --

        public Stream Filter
        {
            get { return _stream; }
        }

        #endregion

        /*-- Constructors --*/

        /*-- Properties --*/
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.IO;
using blowery.Web.HttpCompress;

namespace Subtext.Framework.Syndication.Compression
{
    public static class SyndicationCompressionHelper
    {
        public static SyndicationCompressionFilter GetFilterForScheme(string schemes, Stream contextFilter)
        {
            SyndicationCompressionFilter filter = null;
            bool foundDeflate = false;
            bool foundGZip = false;

            schemes = schemes.ToLower(CultureInfo.InvariantCulture);
            SyndicationCompressionSettings settings = SyndicationCompressionSettings.GetSettings();

            if(schemes.IndexOf("deflate") >= 0)
            {
                foundDeflate = true;
            }
            if(schemes.IndexOf("gzip") >= 0)
            {
                foundGZip = true;
            }

            if(settings.CompressionType == Algorithms.Deflate && foundDeflate)
            {
                filter = new SyndicationCompressionFilter(new DeflateFilter(contextFilter, settings.CompressionLevel),
                                                          "deflate");
            }
            else if(settings.CompressionType == Algorithms.GZip && foundGZip)
            {
                filter = new SyndicationCompressionFilter(new GZipFilter(contextFilter), "gzip");
            }
            else if(foundDeflate) //-- If Use Accepts Other Than Configured
            {
                filter = new SyndicationCompressionFilter(new DeflateFilter(contextFilter, settings.CompressionLevel),
                                                          "deflate");
            }
            else if(foundGZip) //-- If Use Accepts Other Than Configured
            {
                filter = new SyndicationCompressionFilter(new GZipFilter(contextFilter), "gzip");
            }

            return filter;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Configuration;
using System.Xml;

namespace Subtext.Framework.Syndication.Compression
{
    internal class SyndicationCompressionSectionHandler : IConfigurationSectionHandler
    {
        #region IConfigurationSectionHandler Members

        object IConfigurationSectionHandler.Create(object parent, object configContext, XmlNode configurationSection)
        {
            return new SyndicationCompressionSettings(configurationSection);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Xml;
using blowery.Web.HttpCompress;

namespace Subtext.Framework.Syndication.Compression
{
    public class SyndicationCompressionSettings
    {
        private static readonly SyndicationCompressionSettings DefaultSettings = new SyndicationCompressionSettings();
        private readonly CompressionLevels _level;
        private readonly Algorithms _type;

        #region -- Constructor(XmlNode) --

        public SyndicationCompressionSettings(XmlNode node) : this()
        {
            if(node == null)
            {
                return;
            }

            _type = (Algorithms)RetrieveEnumFromAttribute(node.Attributes["type"], typeof(Algorithms));
            _level = (CompressionLevels)RetrieveEnumFromAttribute(node.Attributes["level"], typeof(CompressionLevels));
        }

        #endregion

        #region -- Constructor() --

        private SyndicationCompressionSettings()
        {
            _type = Algorithms.Deflate;
            _level = CompressionLevels.Normal;
        }

        #endregion

        #region -- CompressionLevel Property --

        public CompressionLevels CompressionLevel
        {
            get { return _level; }
        }

        #endregion

        #region -- CompressionType Property --

        public Algorithms CompressionType
        {
            get { return _type; }
        }

        #endregion

        #region -- RetrieveEnumFromAttribute(XmlAttribute, Type) Method --

        protected Enum RetrieveEnumFromAttribute(XmlAttribute attribute, Type type)
        {
            return (Enum)Enum.Parse(type, attribute.Value, true);
        }

        #endregion

        #region -- GetSettings() Method --

        public static SyndicationCompressionSettings GetSettings()
        {
            SyndicationCompressionSettings settings;

            settings = (SyndicationCompressionSettings)ConfigurationManager.GetSection("SyndicationCompression");

            if(settings == null)
            {
                settings = DefaultSettings;
            }

            return settings;
        }

        #endregion

        /*-- Constructors --*/

        /*-- Properties --*/

        /*-- Methods --*/

        /*-- Static Methods --*/
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// </summary>
    public abstract class EntryCollectionHandler<T> : BaseSyndicationHandler
    {
        protected EntryCollectionHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        protected abstract ICollection<T> GetFeedEntries();

        protected override bool IsLocalCacheOk()
        {
            string dt = LastModifiedHeader;

            if(dt != null)
            {
                ICollection<T> ec = GetFeedEntries();

                if(ec != null && ec.Count > 0)
                {
                    //Get the first entry.
                    T entry = default(T);
                    //TODO: Probably change GetFeedEntries to return ICollection<Entry>
                    foreach(T en in ec)
                    {
                        entry = en;
                        break;
                    }
                    return
                        DateTime.Compare(DateTime.Parse(dt, CultureInfo.InvariantCulture),
                                         ConvertLastUpdatedDate(GetItemCreatedDate(entry))) == 0;
                }
            }
            return false;
        }

        /// <summary>
        /// Returns the key used to cache this feed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Date last viewed feed item published.</param>
        /// <returns></returns>
        protected override string CacheKey(DateTime dateLastViewedFeedItemPublished)
        {
            return null;
        }


        protected override void Cache(CachedFeed feed)
        {
        }


        //By default, we will assume the cached data objects will be used else where
        protected override bool IsHttpCacheOk()
        {
            return false;
        }

        /// <summary>
        /// Gets the item created date.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract DateTime GetItemCreatedDate(T item);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using Subtext.Framework.Tracking;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Abstract base class used to write RSS feeds.
    /// </summary>
    public abstract class GenericRssWriter<T> : BaseSyndicationWriter<T>
    {
        private bool _isBuilt;

        protected GenericRssWriter(TextWriter writer, DateTime dateLastViewedFeedItemPublished, bool useDeltaEncoding,
                                   ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
        }

        /// <summary>
        /// Builds the RSS feed.
        /// </summary>
        protected override void Build()
        {
            Build(DateLastViewedFeedItemPublished);
        }

        /// <summary>
        /// Builds the specified last id viewed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Last id viewed.</param>
        protected override void Build(DateTime dateLastViewedFeedItemPublished)
        {
            if(!_isBuilt)
            {
                StartDocument();
                SetNamespaces();
                StartChannel();
                WriteChannel();
                WriteEntries();
                EndChannel();
                EndDocument();
                _isBuilt = true;
            }
        }

        /// <summary>
        /// Sets the namespaces used within the RSS feed.
        /// </summary>
        protected virtual void SetNamespaces()
        {
            WriteAttributeString("xmlns:dc", "http://purl.org/dc/elements/1.1/");
            WriteAttributeString("xmlns:trackback", "http://madskills.com/public/xml/rss/module/trackback/");
            WriteAttributeString("xmlns:wfw", "http://wellformedweb.org/CommentAPI/");
            WriteAttributeString("xmlns:slash", "http://purl.org/rss/1.0/modules/slash/");

            // Copyright notice
            WriteAttributeString("xmlns:copyright", "http://blogs.law.harvard.edu/tech/rss");

            if(!string.IsNullOrEmpty(Blog.LicenseUrl))
            {
                // Used to specify a license. Does not have to be a creative commons license.
                // see http://backend.userland.com/creativeCommonsRssModule
                WriteAttributeString("xmlns:creativeCommons", "http://backend.userland.com/creativeCommonsRssModule");
            }
            // Similar to a favicon image.
            WriteAttributeString("xmlns:image", "http://purl.org/rss/1.0/modules/image/");
        }

        /// <summary>
        /// Starts the RSS document.
        /// </summary>
        protected virtual void StartDocument()
        {
            WriteStartElement("rss");
            WriteAttributeString("version", "2.0");
        }

        /// <summary>
        /// Ends the document.
        /// </summary>
        protected void EndDocument()
        {
            WriteEndElement();
        }

        /// <summary>
        /// Writes the channel Start element.
        /// </summary>
        protected void StartChannel()
        {
            WriteStartElement("channel");
        }

        /// <summary>
        /// Writes the channel.
        /// </summary>
        protected virtual void WriteChannel()
        {
            var blogUrl = new Uri(UrlHelper.BlogUrl().ToFullyQualifiedUrl(Blog), "Default.aspx");
            var image = new RssImageElement(GetRssImage(), Blog.Title, blogUrl, 77, 60, null);
            BuildChannel(Blog.Title, blogUrl, Blog.Email, Blog.SubTitle, Blog.Language, Blog.Author, Blog.LicenseUrl,
                         image);
        }

        /// <summary>
        /// Returns the image that will be displayed in an RSS aggregator that supports RSS images. 
        /// </summary>
        /// <returns></returns>
        public virtual Uri GetRssImage()
        {
            VirtualPath url = UrlHelper.ImageUrl("RSS2Image.gif");
            return url.ToFullyQualifiedUrl(Blog);
        }

        /// <summary>
        /// Builds the RSS channel starting XML section.
        /// </summary>
        /// <param name="title">The title.</param>
        /// <param name="url">The url.</param>
        /// <param name="authorEmail">The author email.</param>
        /// <param name="description">The description.</param>
        /// <param name="lang">The lang.</param>
        /// <param name="copyright">The copyright.</param>
        /// <param name="cclicense">The cclicense.</param>
        protected void BuildChannel(string title, Uri url, string authorEmail, string description, string lang,
                                    string copyright, string cclicense)
        {
            BuildChannel(title, url, authorEmail, description, lang, copyright, cclicense, null);
        }

        /// <summary>
        /// Builds the RSS channel starting XML section.
        /// </summary>
        /// <param name="title">The title.</param>
        /// <param name="url">The url.</param>
        /// <param name="authorEmail">The author email.</param>
        /// <param name="description">The description.</param>
        /// <param name="lang">The lang.</param>
        /// <param name="copyright">The copyright.</param>
        /// <param name="cclicense">The cclicense.</param>
        /// <param name="image">An optional sub-element of channel for rendering an image for the channel.</param>
        protected void BuildChannel(string title, Uri url, string authorEmail, string description, string lang,
                                    string copyright, string cclicense, RssImageElement image)
        {
            //Required Channel Elements
            WriteElementString("title", HtmlHelper.RemoveHtml(title));
            WriteElementString("link", url.ToString());
            WriteElementString("description", HtmlHelper.RemoveHtml(description));

            //Optional Channel Elements
            WriteElementString("language", lang);
            //TODO: Implement this element.
            WriteElementString("copyright", copyright);

            if(!string.IsNullOrEmpty(authorEmail)
               && authorEmail.IndexOf("@") > 0
               && authorEmail.IndexOf(".") > 0
               && (Blog.ShowEmailAddressInRss))
            {
                WriteElementString("managingEditor", authorEmail);
            }

            //TODO: <category>One or more categories</category>
            WriteElementString("generator", VersionInfo.VersionDisplayText);

            if(!string.IsNullOrEmpty(cclicense))
            {
                WriteElementString("creativeCommons:license", cclicense);
            }

            if(image != null)
            {
                image.WriteToXmlWriter(this);
            }
        }

        protected void EndChannel()
        {
            WriteEndElement();
        }

        private void WriteEntries()
        {
            BlogConfigurationSettings settings = Config.Settings;
            ClientHasAllFeedItems = true;
            LatestPublishDate = DateLastViewedFeedItemPublished;

            foreach(T entry in Items)
            {
                if(UseDeltaEncoding && GetSyndicationDate(entry) <= DateLastViewedFeedItemPublished)
                {
                    // Since Entries are ordered by DatePublished descending, as soon 
                    // as we encounter one that is smaller than or equal to 
                    // one the client has already seen, we're done as we 
                    // know the client already has the rest of the items in 
                    // the collection.
                    return;
                }

                // If we're here, we know that entry.EntryId is larger than 
                // the LastViewedFeedItemId.  Thus we can send it.
                WriteStartElement("item");
                EntryXml(entry, settings);
                WriteEndElement();
                if(GetSyndicationDate(entry) > LatestPublishDate)
                {
                    LatestPublishDate = GetSyndicationDate(entry);
                }

                ClientHasAllFeedItems = false;
            }
        }

        protected virtual string GetGuid(T item)
        {
            return GetLinkFromItem(item);
        }

        /// <summary>
        /// Writes the XML for a single entry.
        /// </summary>
        protected virtual void EntryXml(T item, BlogConfigurationSettings settings)
        {
            //core
            WriteElementString("title", GetTitleFromItem(item));

            ICollection<string> categories = GetCategoriesFromItem(item);
            if(categories != null)
            {
                foreach(string category in categories)
                {
                    WriteElementString("category", category);
                }
            }

            string fullUrl = GetLinkFromItem(item);

            WriteElementString("link", fullUrl);
            WriteElementString
                (
                "description", //Tag
                string.Format
                    (
                    CultureInfo.InvariantCulture,
                    "{0}{1}", //tag def
                    GetBodyFromItem(item),
                    (UseAggBugs && settings.Tracking.EnableAggBugs)
                        ? TrackingUrls.AggBugImage(GetAggBugUrl(item))
                        : null //use aggbugs
                    )
                );

            string author = GetAuthorFromItem(item);
            if(!String.IsNullOrEmpty(author))
            {
                WriteElementString("dc:creator", author);
            }

            WriteElementString("guid", GetGuid(item));
            WriteElementString("pubDate", GetPublishedDateUtc(item).ToString("r", CultureInfo.InvariantCulture));

            if(ItemCouldContainComments(item))
            {
                if(AllowComments && Blog.CommentsEnabled && ItemAllowsComments(item) && !CommentsClosedOnItem(item))
                {
                    // Comment API (http://wellformedweb.org/story/9)
                    WriteElementString("wfw:comment", GetCommentApiUrl(item));
                }

                WriteElementString("comments", fullUrl + "#feedback");

                if(GetFeedbackCount(item) > 0)
                {
                    WriteElementString("slash:comments", GetFeedbackCount(item).ToString(CultureInfo.InvariantCulture));
                }

                WriteElementString("wfw:commentRss", GetCommentRssUrl(item));

                if(Blog.TrackbacksEnabled)
                {
                    WriteElementString("trackback:ping", GetTrackBackUrl(item));
                }
            }

            EnclosureItem encItem = GetEnclosureFromItem(item);
            if(encItem != null)
            {
                WriteStartElement("enclosure");
                WriteAttributeString("url", encItem.Url);
                WriteAttributeString("length", encItem.Size.ToString(CultureInfo.InvariantCulture));
                WriteAttributeString("type", encItem.MimeType);
                WriteEndElement();
            }
        }


        protected abstract string GetCommentRssUrl(T item);
        protected abstract string GetTrackBackUrl(T item);
        protected abstract string GetCommentApiUrl(T item);
        protected abstract string GetAggBugUrl(T item);

        /// <summary>
        /// Gets the categories from entry.
        /// </summary>
        /// <param name="item">The entry.</param>
        /// <returns></returns>
        protected abstract ICollection<string> GetCategoriesFromItem(T item);

        /// <summary>
        /// Gets the title from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract string GetTitleFromItem(T item);

        /// <summary>
        /// Gets the link from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract string GetLinkFromItem(T item);

        /// <summary>
        /// Gets the body from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract string GetBodyFromItem(T item);

        /// <summary>
        /// Gets the author from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract string GetAuthorFromItem(T item);

        /// <summary>
        /// Gets the publish date from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract DateTime GetPublishedDateUtc(T item);

        /// <summary>
        /// Returns true if the Item could contain comments.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract bool ItemCouldContainComments(T item);

        /// <summary>
        /// Returns true if the item allows comments, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract bool ItemAllowsComments(T item);

        /// <summary>
        /// Returns true if comments are closed, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract bool CommentsClosedOnItem(T item);

        /// <summary>
        /// Gets the feedback count for the item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract int GetFeedbackCount(T item);

        /// <summary>
        /// Obtains the syndication date for the specified entry, since 
        /// we don't necessarily know if the type has that field, we 
        /// can delegate this to the inheriting class.
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        protected abstract DateTime GetSyndicationDate(T item);

        /// <summary>
        /// Gets the enclosure for the item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected abstract EnclosureItem GetEnclosureFromItem(T item);

        #region Nested type: EnclosureItem

        protected class EnclosureItem
        {
            public string MimeType { get; set; }

            public long Size { get; set; }

            public string Url { get; set; }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Web;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Framework.Syndication
{
    public class OpmlHandler : SubtextHttpHandler
    {
        public OpmlHandler(ISubtextContext subtextContext, OpmlWriter writer) : base(subtextContext)
        {
            OpmlWriter = writer;
        }

        protected OpmlWriter OpmlWriter { get; private set; }

        public override void ProcessRequest()
        {
            ProcessRequest(HostInfo.Instance);
        }

        public virtual void ProcessRequest(HostInfo hostInfo)
        {
            HttpResponseBase response = SubtextContext.HttpContext.Response;
            response.ContentType = "text/xml";

            IEnumerable<Blog> blogs = null;
            if(!hostInfo.BlogAggregationEnabled)
            {
                Blog blog = SubtextContext.Blog;
                if(blog != null)
                {
                    blogs = new[] {blog};
                }
            }
            else
            {
                int? groupId = GetGroupIdFromQueryString(SubtextContext.HttpContext.Request);
                blogs = SubtextContext.Repository.GetBlogsByGroup(SubtextContext.HttpContext.Request.Url.Host, groupId);
            }

            OpmlWriter.Write(blogs, response.Output, SubtextContext.UrlHelper);
        }

        public int? GetGroupIdFromQueryString(HttpRequestBase request)
        {
            int? groupId = null;
            string groupIdText = request.QueryString["GroupID"];
            if(groupIdText != null)
            {
                int parsedGroupId;
                if(int.TryParse(groupIdText, out parsedGroupId))
                {
                    groupId = parsedGroupId;
                }
            }
            return groupId;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Text;
using System.Xml;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    public class OpmlWriter
    {
        public virtual void Write(IEnumerable<Blog> blogs, TextWriter writer, UrlHelper urlHelper)
        {
            var settings = new XmlWriterSettings
            {
                Encoding = Encoding.UTF8,
                OmitXmlDeclaration = true,
                ConformanceLevel = ConformanceLevel.Document,
                Indent = true,
                IndentChars = ("\t")
            };

            using(XmlWriter xmlWriter = XmlWriter.Create(writer, settings))
            {
                if(xmlWriter != null)
                {
                    xmlWriter.WriteStartDocument();

                    //OPML ROOT
                    xmlWriter.WriteStartElement("opml");
                    xmlWriter.WriteAttributeString("version", "1.0");
                    xmlWriter.WriteStartElement("head");
                    xmlWriter.WriteStartElement("title");
                    xmlWriter.WriteString(ConfigurationManager.AppSettings["AggregateTitle"]);
                    xmlWriter.WriteEndElement();

                    xmlWriter.WriteEndElement();
                    //Body
                    xmlWriter.WriteStartElement("body");

                    xmlWriter.WriteStartElement("outline");
                    xmlWriter.WriteAttributeString("text", ConfigurationManager.AppSettings["AggregateTitle"] + " Feeds");
                    foreach(Blog blog in blogs)
                    {
                        xmlWriter.WriteStartElement("outline");

                        string title = blog.Title;
                        string xmlUrl = urlHelper.RssUrl(blog).ToString();

                        xmlWriter.WriteAttributeString("type", "rss");
                        xmlWriter.WriteAttributeString("text", title);
                        xmlWriter.WriteAttributeString("xmlUrl", xmlUrl);
                        xmlWriter.WriteEndElement();
                    }
                    xmlWriter.WriteEndElement(); //outline
                    xmlWriter.WriteEndElement(); //body
                    xmlWriter.WriteEndElement(); //opml
                    xmlWriter.Flush();
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    public class RssCategoryHandler : EntryCollectionHandler<Entry>
    {
        protected LinkCategory Category;
        ICollection<Entry> _posts;

        public RssCategoryHandler(ISubtextContext subtextContext)
            : base(subtextContext)
        {
        }

        protected override BaseSyndicationWriter SyndicationWriter
        {
            get
            {
                return new CategoryWriter(HttpContext.Response.Output, _posts, Category,
                                          Url.CategoryUrl(Category).ToFullyQualifiedUrl(Blog), SubtextContext);
            }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected override bool IsMainfeed
        {
            get { return false; }
        }

        protected override ICollection<Entry> GetFeedEntries()
        {
            if(Category == null)
            {
                Category = Cacher.SingleCategory(SubtextContext);
            }

            if(Category != null && _posts == null)
            {
                _posts = Cacher.GetEntriesByCategory(10, Category.Id, SubtextContext);
            }

            return _posts;
        }

        /// <summary>
        /// Builds the feed using delta encoding if it's true.
        /// </summary>
        /// <returns></returns>
        protected override CachedFeed BuildFeed()
        {
            CachedFeed feed = null;

            _posts = GetFeedEntries();

            if(_posts != null && _posts.Count > 0)
            {
                feed = new CachedFeed();
                var cw = new CategoryWriter(HttpContext.Response.Output, _posts, Category,
                                            Url.CategoryUrl(Category).ToFullyQualifiedUrl(Blog), SubtextContext);
                feed.LastModified = ConvertLastUpdatedDate(_posts.First().DateCreated);
                feed.Xml = cw.Xml;
            }
            return feed;
        }

        /// <summary>
        /// Gets the item created date.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override DateTime GetItemCreatedDate(Entry item)
        {
            return item.DateCreated;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Web;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// RssCommentHandler is a proposed extention to the CommentApi. This is still beta/etc.
    /// The Main Rss feed now contains an element for each entry, which will generate a rss feed 
    /// containing the comments for each post.
    /// </summary>
    public class RssCommentHandler : EntryCollectionHandler<FeedbackItem>
    {
        ICollection<FeedbackItem> _comments;
        protected ICollection<FeedbackItem> Comments;
        protected Entry ParentEntry;

        public RssCommentHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        protected override BaseSyndicationWriter SyndicationWriter
        {
            get { return new CommentRssWriter(HttpContext.Response.Output, _comments, ParentEntry, SubtextContext); }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected override bool IsMainfeed
        {
            get { return false; }
        }

        /// <summary>
        /// Gets the feed entries.
        /// </summary>
        /// <returns></returns>
        protected override ICollection<FeedbackItem> GetFeedEntries()
        {
            if(ParentEntry == null)
            {
                ParentEntry = Cacher.GetEntryFromRequest(false, SubtextContext);
            }

            if(ParentEntry == null)
            {
                // bad news... we couldn't find the entry the request is looking for - return 404.
                HttpHelper.SetFileNotFoundResponse();
            }

            if(ParentEntry != null && Comments == null)
            {
                Comments = Cacher.GetFeedback(ParentEntry, SubtextContext);
            }

            return Comments;
        }

        protected virtual CommentRssWriter GetCommentWriter(ICollection<FeedbackItem> comments, Entry entry)
        {
            return new CommentRssWriter(HttpContext.Response.Output, comments, entry, SubtextContext);
        }

        /// <summary>
        /// Builds the feed using delta encoding if it's true.
        /// </summary>
        /// <returns></returns>
        protected override CachedFeed BuildFeed()
        {
            _comments = GetFeedEntries() ?? new List<FeedbackItem>();

            var feed = new CachedFeed();
            CommentRssWriter crw = GetCommentWriter(_comments, ParentEntry);
            feed.LastModified = _comments.Count > 0 ? ConvertLastUpdatedDate(_comments.Last().DateCreated) : ParentEntry.DateCreated;
            feed.Xml = crw.Xml;
            return feed;
        }

        protected override bool IsLocalCacheOk()
        {
            string dt = LastModifiedHeader;
            if(dt != null)
            {
                _comments = GetFeedEntries();

                if(_comments != null && _comments.Count > 0)
                {
                    return
                        DateTime.Compare(DateTime.Parse(dt, CultureInfo.InvariantCulture),
                                         ConvertLastUpdatedDate(_comments.Last().DateCreated)) == 0;
                }
            }
            return false;
        }

        /// <summary>
        /// Gets the item created date.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override DateTime GetItemCreatedDate(FeedbackItem item)
        {
            return item.DateCreated;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Infrastructure;
using System.IO;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Class used to handle requests for an RSS feed.
    /// </summary>
    public class RssHandler : BaseSyndicationHandler
    {
        BaseSyndicationWriter<Entry> _writer;

        public RssHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        /// <summary>
        /// Gets the syndication writer.
        /// </summary>
        /// <returns></returns>
        protected override BaseSyndicationWriter SyndicationWriter
        {
            get
            {
                if(_writer == null)
                {
                    _writer = new RssWriter(new StringWriter(),
                                           Repository.GetMainSyndicationEntries(Blog.ItemCount),
                                           PublishDateOfLastFeedItemReceived, 
                                           UseDeltaEncoding, 
                                           SubtextContext);
                }
                return _writer;
            }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected override bool IsMainfeed
        {
            get { return true; }
        }

        /// <summary>
        /// Returns the key used to cache this feed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Date last viewed feed item published.</param>
        /// <returns></returns>
        protected override string CacheKey(DateTime dateLastViewedFeedItemPublished)
        {
            const string key = "RSS;IndividualMainFeed;BlogId:{0};LastViewed:{1}";
            return string.Format(CultureInfo.InvariantCulture, key, Blog.Id, dateLastViewedFeedItemPublished);
        }

        /// <summary>
        /// Caches the specified RSS feed.
        /// </summary>
        /// <param name="feed">Feed.</param>
        protected override void Cache(CachedFeed feed)
        {
            ICache cache = SubtextContext.Cache;
            if(cache != null)
            {
                cache.InsertDuration(CacheKey(SyndicationWriter.DateLastViewedFeedItemPublished), feed,
                                     Cacher.MediumDuration, null);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Xml;
using Subtext.Framework.Text;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// &lt;image&gt; is an optional sub-element of &lt;channel&gt;, which contains three required and three optional sub-elements.
    /// </summary>
    public class RssImageElement
    {
        readonly string _description;
        int? _height;
        readonly Uri _link;
        readonly string _title;
        readonly Uri _url;
        int? _width;

        /// <summary>
        /// Initializes a new instance of the <see cref="RssImageElement"/> class.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="title">The title.</param>
        /// <param name="link">The link.</param>
        public RssImageElement(Uri url, string title, Uri link) : this(url, title, link, null, null, null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RssImageElement"/> class.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="title">The title.</param>
        /// <param name="link">The link.</param>
        /// <param name="width">The width.</param>
        /// <param name="height">The height.</param>
        /// <param name="description">The description.</param>
        public RssImageElement(Uri url, string title, Uri link, int? width, int? height, string description)
        {
            _url = url;
            _title = HtmlHelper.RemoveHtml(title);
            _link = link;
            _width = width;
            _height = height;
            _description = description;
        }

        /// <summary>
        /// The URL of a GIF, JPEG or PNG image that represents the channel. 
        /// </summary>
        /// <value>The URL.</value>
        public Uri Url
        {
            get { return _url; }
        }

        /// <summary>
        /// Describes the image, it's used in the ALT attribute of the HTML &lt;img&gt; tag when the channel is rendered in HTML.
        /// </summary>
        /// <value>The title.</value>
        public string Title
        {
            get { return _title; }
        }

        /// <summary>
        /// The URL of the site, when the channel is rendered, the image is a link to the site. 
        /// (Note, in practice the image &lt;title&gt; and &lt;link&gt; should have the same value as the channel's &lt;title&gt; and &lt;link&gt;.
        /// </summary>
        /// <value>The link.</value>
        public Uri Link
        {
            get { return _link; }
        }

        /// <summary>
        /// Gets the width.
        /// </summary>
        /// <value>The width.</value>
        public int? Width
        {
            get { return _width; }
        }

        /// <summary>
        /// Gets the height.
        /// </summary>
        /// <value>The height.</value>
        public int? Height
        {
            get { return Height; }
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        /// <value>The description.</value>
        public string Description
        {
            get { return _description; }
        }

        /// <summary>
        /// Writes this RssImage element to the specified XmlWriter.
        /// </summary>
        /// <param name="writer"></param>
        public void WriteToXmlWriter(XmlWriter writer)
        {
            writer.WriteStartElement("image");
            writer.WriteElementString("title", _title);
            writer.WriteElementString("url", _url.ToString());
            writer.WriteElementString("link", _link.ToString());

            if(_width != null)
            {
                writer.WriteElementString("width", _width.Value.ToString(CultureInfo.InvariantCulture));
            }

            if(_height != null)
            {
                writer.WriteElementString("height", _height.Value.ToString(CultureInfo.InvariantCulture));
            }

            if(_description != null)
            {
                writer.WriteElementString("description", _description); //Used in the alt tag.
            }
            writer.WriteEndElement();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Infrastructure;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Class used to handle requests for an RSS feed.
    /// </summary>
    public class RssTagHandler : BaseSyndicationHandler
    {
        BaseSyndicationWriter<Entry> _writer;

        public RssTagHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        /// <summary>
        /// Gets the syndication writer.
        /// </summary>
        /// <returns></returns>
        protected override BaseSyndicationWriter SyndicationWriter
        {
            get
            {
                if(_writer == null)
                {
                    // timheuer: changed this to GetEntriesByTag
                    _writer = new RssWriter(HttpContext.Response.Output,
                                           Repository.GetEntriesByTag(Blog.ItemCount, GetTagName()),
                                           PublishDateOfLastFeedItemReceived, UseDeltaEncoding, SubtextContext);
                }
                return _writer;
            }
        }

        /// <summary>
        /// Returns true if the feed is the main feed.  False for category feeds and comment feeds.
        /// </summary>
        protected override bool IsMainfeed
        {
            get { return true; }
        }

        /// <summary>
        /// Returns the key used to cache this feed.
        /// </summary>
        /// <param name="dateLastViewedFeedItemPublished">Date last viewed feed item published.</param>
        /// <returns></returns>
        protected override string CacheKey(DateTime dateLastViewedFeedItemPublished)
        {
            const string key = "RSS;IndividualMainFeed;BlogId:{0};LastViewed:{1};Tag:{2}";
            return string.Format(key, Blog.Id, dateLastViewedFeedItemPublished, GetTagName());
        }

        // timheuer - overridden method to bypass the feedburner check
        protected override void ProcessFeed()
        {
            if(base.IsLocalCacheOk())
            {
                HttpContext.Response.StatusCode = 304;
                return;
            }

            // Checks our cache against last modified header.
            if(!base.IsHttpCacheOk())
            {
                Feed = base.BuildFeed();
                if(Feed != null)
                {
                    if(UseDeltaEncoding && Feed.ClientHasAllFeedItems)
                    {
                        HttpContext.Response.StatusCode = 304;
                        return;
                    }
                    Cache(Feed);
                }
            }

            base.WriteFeed();
        }

        // TODO: Make this not a hack. timheuer - this is a slight hack to get the tag name
        private string GetTagName()
        {
            Uri url = HttpContext.Request.Url;
            string tagName = HttpUtility.UrlDecode(url.Segments[url.Segments.Length - 2].Replace("/", ""));
            return tagName;
        }

        /// <summary>
        /// Caches the specified RSS feed.
        /// </summary>
        /// <param name="feed">Feed.</param>
        protected override void Cache(CachedFeed feed)
        {
            ICache cache = SubtextContext.Cache;
            if(cache != null)
            {
                cache.InsertDuration(CacheKey(SyndicationWriter.DateLastViewedFeedItemPublished), feed,
                                     Cacher.MediumDuration, null);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Syndication
{
    /// <summary>
    /// Generates RSS
    /// </summary>
    public class RssWriter : BaseRssWriter<Entry>
    {
        /// <summary>
        /// Creates a new <see cref="RssWriter"/> instance.
        /// </summary>
        public RssWriter(TextWriter writer, ICollection<Entry> entries, DateTime dateLastViewedFeedItemPublished,
                         bool useDeltaEncoding, ISubtextContext context)
            : base(writer, dateLastViewedFeedItemPublished, useDeltaEncoding, context)
        {
            Items = entries;
            UseAggBugs = true;
        }

        /// <summary>
        /// Gets the categories from entry.
        /// </summary>
        /// <param name="item">The entry.</param>
        /// <returns></returns>
        protected override ICollection<string> GetCategoriesFromItem(Entry item)
        {
            return item.Categories;
        }

        /// <summary>
        /// Gets the title from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetTitleFromItem(Entry item)
        {
            return item.Title;
        }

        /// <summary>
        /// Gets the link from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetLinkFromItem(Entry item)
        {
            return UrlHelper.EntryUrl(item).ToFullyQualifiedUrl(Blog).ToString();
        }

        /// <summary>
        /// Obtains the syndication date for the specified entry, since 
        /// we don't necessarily know if the type has that field, we 
        /// can delegate this to the inheriting class.
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        protected override DateTime GetSyndicationDate(Entry item)
        {
            return item.DateSyndicated;
        }

        /// <summary>
        /// Gets the body from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetBodyFromItem(Entry item)
        {
            return item.SyndicateDescriptionOnly ? item.Description : item.Body; //use desc or full post
        }

        /// <summary>
        /// Gets the author from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override string GetAuthorFromItem(Entry item)
        {
            return item.Author;
        }

        /// <summary>
        /// Gets the publish date from item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override DateTime GetPublishedDateUtc(Entry item)
        {
            return Blog.TimeZone.ToUtc(item.DateSyndicated);
        }

        /// <summary>
        /// Returns true if the Item could contain comments.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool ItemCouldContainComments(Entry item)
        {
            return true;
        }

        /// <summary>
        /// Returns true if the item allows comments, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool ItemAllowsComments(Entry item)
        {
            return item.AllowComments;
        }

        /// <summary>
        /// Returns true if comments are closed, otherwise false.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override bool CommentsClosedOnItem(Entry item)
        {
            return item.CommentingClosed;
        }

        /// <summary>
        /// Gets the feedback count for the item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <returns></returns>
        protected override int GetFeedbackCount(Entry item)
        {
            return item.FeedBackCount;
        }

        protected override EnclosureItem GetEnclosureFromItem(Entry item)
        {
            if(item.Enclosure != null && item.Enclosure.AddToFeed)
            {
                var enc = new EnclosureItem {Url = item.Enclosure.Url, MimeType = item.Enclosure.MimeType, Size = item.Enclosure.Size};
                return enc;
            }
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
// Logic adapted from Rama Krishna Vavilala's tag cloud article on Code Project
// http://www.codeproject.com/useritems/cloud.asp
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Providers;
using Subtext.Framework.Util;

namespace Subtext.Framework
{
    /// <summary>
    /// Static class used to retrieve tags from the data store. Tags are simple enough 
    /// that generic collections are used instead of custom Tag objects.
    /// </summary>
    public static class Tags
    {
        /// <summary>
        /// Sets the tags on entry.
        /// </summary>
        /// <param name="entryId">The entry id.</param>
        /// <param name="tags">The tags.</param>
        public static void SetTagsOnEntry(int entryId, ICollection<string> tags)
        {
            ObjectProvider.Instance().SetEntryTagList(entryId, tags);
        }

        /// <summary>
        /// Gets the top tags.
        /// </summary>
        public static ICollection<Tag> GetMostUsedTags(this ObjectProvider repository, int itemCount)
        {
            if(itemCount < 0)
            {
                throw new ArgumentOutOfRangeException("itemCount", itemCount,
                                                      Resources.ArgumentOutOfRange_NegativeTagItemCount);
            }
            var topTags = repository.GetTopTags(itemCount);

            double mean;
            double stdDev = topTags.Values.StandardDeviation(out mean);

            var tags = new List<Tag>();
            foreach(var tag in topTags)
            {
                var t = new Tag(tag);
                t.Factor = (t.Count - mean) / stdDev;
                t.Weight = ComputeWeight(t.Factor, stdDev);
                tags.Add(t);
            }

            return tags;
        }

        public static int ComputeWeight(double factor, double standardDeviation)
        {
            if(factor <= -0.25 * standardDeviation)
            {
                return 1;
            }
            if(factor <= 0 * standardDeviation)
            {
                return 2;
            }
            if(factor <= 0.25 * standardDeviation)
            {
                return 3;
            }
            if(factor < 0.5 * standardDeviation)
            {
                return 4;
            }
            if(factor < 1 * standardDeviation)
            {
                return 5;
            }
            if(factor < 2 * standardDeviation)
            {
                return 6;
            }
            return 7;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Text
{
    public class FormatExpression : ITextExpression
    {
        readonly bool _invalidExpression;

        public FormatExpression(string expression)
        {
            if(!expression.StartsWith("{") || !expression.EndsWith("}"))
            {
                _invalidExpression = true;
                Expression = expression;
                return;
            }

            string expressionWithoutBraces = expression.Substring(1
                                                                  , expression.Length - 2);
            int colonIndex = expressionWithoutBraces.IndexOf(':');
            if(colonIndex < 0)
            {
                Expression = expressionWithoutBraces;
            }
            else
            {
                Expression = expressionWithoutBraces.Substring(0, colonIndex);
                Format = expressionWithoutBraces.Substring(colonIndex + 1);
            }
        }

        public string Expression { get; private set; }

        public string Format { get; private set; }

        #region ITextExpression Members

        public string Eval(object o)
        {
            if(_invalidExpression)
            {
                throw new FormatException(Resources.Format_InvalidExpression);
            }

            try
            {
                if(String.IsNullOrEmpty(Format))
                {
                    return (DataBinder.Eval(o, Expression) ?? string.Empty).ToString();
                }
                return (DataBinder.Eval(o, Expression, "{0:" + Format + "}") ?? string.Empty);
            }
            catch(HttpException e)
            {
                throw new FormatException(
                    String.Format(CultureInfo.InvariantCulture, Resources.Format_CouldNotFormatExpression, Expression,
                                  Format), e);
            }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI.WebControls;
using System.Xml;
using Sgml;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;
using Subtext.Framework.Services;
using Velocit.RegularExpressions;

namespace Subtext.Framework.Text
{
    /// <summary>
    /// Static class used for parsing, formatting, and validating HTML.
    /// </summary>
    public static class HtmlHelper
    {
        static readonly Regex AnchorRegex = new Regex(@"<a(\s+\w+\s*=\s*(?:""[^""]*?""|'[^']*?')(?!\w))+\s*>.*?</a>",
                                                       RegexOptions.IgnoreCase | RegexOptions.Singleline |
                                                       RegexOptions.Compiled);

        static readonly Regex HrefRegex = new Regex(@"\s+href\s*=\s*(""(?<url>[^""]*?)""|'(?<url>[^']*?)')",
                                                     RegexOptions.IgnoreCase | RegexOptions.Singleline |
                                                     RegexOptions.Compiled);

        static readonly Regex RelRegex = new Regex(@"\s+rel\s*=\s*(""[^""]*?\btag\b.*?""|'[^']*?\btag\b.*?')",
                                                    RegexOptions.IgnoreCase | RegexOptions.Singleline |
                                                    RegexOptions.Compiled);

        /// <summary>
        /// Replaces the host in the given url with the new host.
        /// </summary>
        /// <param name="originalUrl"></param>
        /// <param name="newHost"></param>
        /// <returns></returns>
        public static string ReplaceHost(string originalUrl, string newHost)
        {
            const string pattern = @"(https?://).*?((:\d+)?/.*)?$";
            string replacement = string.Format("$1{0}$2", newHost);
            return Regex.Replace(originalUrl, pattern, replacement, RegexOptions.IgnoreCase | RegexOptions.Compiled);
        }

        /// <summary>
        /// Appends a CSS class to a control.
        /// </summary>
        /// <param name="control">The control.</param>
        /// <param name="newClass">The new class.</param>
        public static void AppendCssClass(WebControl control, string newClass)
        {
            if(control == null)
            {
                throw new ArgumentNullException("control");
            }

            if(newClass == null)
            {
                throw new ArgumentNullException("newClass");
            }

            string existingClasses = control.CssClass;
            if(String.IsNullOrEmpty(existingClasses))
            {
                control.CssClass = newClass;
                return;
            }

            string[] classes = existingClasses.Split(' ');
            foreach(string attributeValue in classes)
            {
                if(String.Equals(attributeValue, newClass, StringComparison.Ordinal))
                {
                    //value's already in there.
                    return;
                }
            }
            control.CssClass += " " + newClass;
        }

        /// <summary>
        /// Removes a CSS class to a control.
        /// </summary>
        /// <param name="control">The control.</param>
        /// <param name="classToRemove">The new class.</param>
        public static void RemoveCssClass(WebControl control, string classToRemove)
        {
            if(control == null)
            {
                throw new ArgumentNullException("control");
            }

            if(classToRemove == null)
            {
                throw new ArgumentNullException("classToRemove");
            }

            string existingClasses = control.CssClass;
            if(String.IsNullOrEmpty(existingClasses))
            {
                return; //nothing to remove
            }

            string[] classes = existingClasses.Split(new[] {" ", "\t", "\r\n", "\n", "\r"},
                                                     StringSplitOptions.RemoveEmptyEntries);
            string newClasses = string.Empty;
            foreach(string cssClass in classes)
            {
                if(!String.Equals(cssClass, classToRemove, StringComparison.Ordinal))
                {
                    newClasses += cssClass + " ";
                }
            }

            if(newClasses.EndsWith(" "))
            {
                newClasses = newClasses.Substring(0, newClasses.Length - 1);
            }
            control.CssClass = newClasses;
        }

        /// <summary>
        /// Appends the attribute value to the control appropriately.
        /// </summary>
        /// <param name="control"></param>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public static void AppendAttributeValue(WebControl control, string name, string value)
        {
            string existingValue = control.Attributes[name];
            if(String.IsNullOrEmpty(existingValue))
            {
                control.Attributes[name] = value;
                return;
            }
            string[] attributeValues = control.Attributes[name].Split(' ');
            foreach(string attributeValue in attributeValues)
            {
                if(String.Equals(attributeValue, value, StringComparison.Ordinal))
                {
                    //value's already in there.
                    return;
                }
            }
            control.Attributes[name] += " " + value;
        }

        /// <summary>
        /// Returns a string with all HTML tags and comments removed.
        /// </summary>
        /// <param name="html"></param>
        /// <returns></returns>
        public static string RemoveHtml(string html)
        {
            //Yeah, this is ugly, but it's perf optimized! ;)
            if(html == null)
            {
                return string.Empty;
            }

            var strippedHtml = new char[html.Length];
            bool inHtmlTag = false;
            int cleanCount = 0;

            for(int i = 0; i < html.Length; i++)
            {
                char current = html[i];

                if(!inHtmlTag)
                {
                    if(current == '<')
                    {
                        if(NextCharBeginsHtmlTag(html, i))
                        {
                            inHtmlTag = true;
                            continue;
                        }
                    }
                }
                else
                {
                    //in html tag
                    if(current == '>')
                    {
                        inHtmlTag = false;
                    }
                    if(current == '<')
                    {
                        if(!NextCharBeginsHtmlTag(html, i))
                        {
                            strippedHtml[cleanCount++] = current;
                            inHtmlTag = false;
                        }
                        else
                        {
                            continue;
                        }
                    }
                    if(current == '=')
                    {
                        //Potentially in attribute value...
                        i++;
                        bool foundAttrStart = false;
                        char attrStartDelimiter = char.MinValue;

                        // We'll just "eat" the attribute here:
                        while(i < html.Length)
                        {
                            char currentAttrChar = html[i];

                            //Find start delimiter...
                            if(!foundAttrStart)
                            {
                                if(IsAttributeValueStartCharacter(currentAttrChar))
                                {
                                    attrStartDelimiter = currentAttrChar;
                                    foundAttrStart = true;
                                    i++;
                                    continue;
                                }
                            }
                            else
                            {
                                //Find end delimiter...
                                if(IsAttributeValueEndCharacter(currentAttrChar, attrStartDelimiter))
                                {
                                    //Special case. The '>' ended the attr value and the tag
                                    //in the case of unquoted attr value
                                    if(currentAttrChar == '>')
                                    {
                                        inHtmlTag = false;
                                    }
                                    break;
                                }
                            }
                            i++;
                        }
                    }
                    continue;
                }

                strippedHtml[cleanCount++] = current;
            }

            return new String(strippedHtml, 0, cleanCount);
        }

        private static bool NextCharBeginsHtmlTag(string html, int i)
        {
            return i + 1 < html.Length && IsHtmlTagBeginCharacter(html[i + 1]);
        }

        private static bool IsAttributeValueStartCharacter(char c)
        {
            return !Char.IsWhiteSpace(c) || c == '\'' || c == '"';
        }

        private static bool IsAttributeValueEndCharacter(char c, char attributeStartChar)
        {
            if(attributeStartChar == '\'' || attributeStartChar == '"')
            {
                return c == attributeStartChar;
            }

            return Char.IsWhiteSpace(c) || c == '>';
        }

        private static bool IsHtmlTagBeginCharacter(char c)
        {
            return c == '!' || c == '/' || IsEnglishLetter(c);
        }

        private static bool IsEnglishLetter(char nextChar)
        {
            return ('a' <= nextChar && nextChar <= 'z') || ('A' <= nextChar && nextChar <= 'Z');
        }


        /// <summary>
        /// Tests the specified string looking for illegal characters 
        /// or html tags.
        /// </summary>
        /// <param name="s">S.</param>
        /// <returns></returns>
        public static bool HasIllegalContent(string s)
        {
            if(String.IsNullOrEmpty(s))
            {
                return false;
            }
            if(s.IndexOf("<script", StringComparison.InvariantCultureIgnoreCase) > -1
               || s.IndexOf("&#60script", StringComparison.InvariantCultureIgnoreCase) > -1
               || s.IndexOf("&60script", StringComparison.InvariantCultureIgnoreCase) > -1
               || s.IndexOf("%60script", StringComparison.InvariantCultureIgnoreCase) > -1)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Wraps an anchor tag around all urls. Makes sure not to wrap already 
        /// wrapped urls.
        /// </summary>
        /// <param name="html">Html containing urls to convert.</param>
        /// <returns></returns>
        public static string ConvertUrlsToHyperLinks(string html)
        {
            if(html == null)
            {
                throw new ArgumentNullException("html");
            }

            if(html.Length == 0)
            {
                return string.Empty;
            }

            var xhtmlConverter = new XhtmlConverter(text =>
                {
                    const string pattern = @"((https?|ftp)://|www\.)[\w]+(.[\w]+)([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])";
                    MatchCollection matches =
                        Regex.Matches(text, pattern,
                                      RegexOptions.
                                          IgnoreCase |
                                      RegexOptions.Compiled);
                    foreach(Match m in matches)
                    {
                        string httpPortion = string.Empty;
                        if(!m.Value.Contains("://"))
                        {
                            httpPortion = "http://";
                        }

                        text =
                            text.Replace(m.Value,
                                         string.Format(CultureInfo.InvariantCulture,
                                                       "<a rel=\"nofollow external\" href=\"{0}{1}\" title=\"{1}\">{2}</a>",
                                                       httpPortion, m.Value, ShortenUrl(m.Value, 50))
                                );
                    }
                    return text;
                });

            return xhtmlConverter.Transform(html);
        }

        private static IEnumerable<Func<string, string>> GetShorteners(int max)
        {
            yield return url => url; // identity
            yield return url => url.RightAfter("://");
            yield return ReplacePathSegmentsWithElipses;
            yield return url => url.LeftBefore("#", StringComparison.Ordinal);
            yield return url => url.LeftBefore("?", StringComparison.Ordinal);
            yield return ChopLastSegment;
            yield return url => url.Chomp("/", StringComparison.Ordinal);
            yield return url =>
                {
                    if(url.Length > 8)
                    {
                        url = url.Substring(0, max - 3) + "...";
                    }
                    else
                    {
                        url = url.Substring(0, max);
                    }
                    return url;
                };
        }

        private static string ReplacePathSegmentsWithElipses(string urlAfterProtocol)
        {
            // examples:
            //  example.com/foo/bar/baz/ => example.com/.../baz/
            //  example.com/foo/bar/baz => example.com/.../baz
            //  example.com/foo/bar#baz => example.com/.../bar#baz
            //  example.com/foo/bar/baz/?beels => example.com/.../baz/?beels
            //  example.com/foobeels.txt => example.com/foobeels.txt

            int lastIndex = urlAfterProtocol.IndexOf('?');
            if(lastIndex < 0)
            {
                lastIndex = urlAfterProtocol.IndexOf('#');
            }
            if(lastIndex < 0)
            {
                lastIndex = urlAfterProtocol.Length;
            }

            // First slash after domain name
            int firstSlashIndex = urlAfterProtocol.IndexOf('/');
            if(firstSlashIndex < 0)
            {
                return urlAfterProtocol;
            }

            // ignore query and fragment
            string urlWithoutTrailingStuff = urlAfterProtocol.Substring(0, lastIndex);
            urlWithoutTrailingStuff = urlWithoutTrailingStuff.Chomp("/", StringComparison.Ordinal);

            int lastSlashIndex = urlWithoutTrailingStuff.LastIndexOf('/');
            if(lastSlashIndex < 0)
            {
                return urlAfterProtocol;
            }

            if(lastSlashIndex < firstSlashIndex + 5)
            {
                return urlAfterProtocol;
            }
            return urlAfterProtocol.Substring(0, firstSlashIndex) + "/..." + urlAfterProtocol.Substring(lastSlashIndex);
        }

        private static string ChopLastSegment(string urlWithoutProtocolNorQuery)
        {
            urlWithoutProtocolNorQuery = urlWithoutProtocolNorQuery.Chomp("/", StringComparison.OrdinalIgnoreCase);
            int lastIndex = urlWithoutProtocolNorQuery.LastIndexOf('/');
            if(lastIndex > -1)
            {
                urlWithoutProtocolNorQuery = urlWithoutProtocolNorQuery.Substring(0, lastIndex);
            }
            return urlWithoutProtocolNorQuery;
        }


        /// <summary>
        /// Shortens a url for display.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <param name="max">Maximum size for the url. Anything longer gets shortened.</param>
        /// <returns></returns>
        public static string ShortenUrl(this string url, int max)
        {
            if(url == null)
            {
                throw new ArgumentNullException("url");
            }

            if(max < 5)
            {
                throw new ArgumentOutOfRangeException("max", max, Resources.ArgumentException_TooShortUrl);
            }

            foreach(var shortener in GetShorteners(max))
            {
                url = shortener(url);
                if(url.Length <= max)
                {
                    return url;
                }
            }

            return url;
        }

        /// <summary>
        /// The only HTML we will allow is hyperlinks. 
        /// We will however, check for line breaks and replace 
        /// them with <br />
        /// </summary>
        /// <returns></returns>
        public static string SafeFormat(string stringToTransform, HttpServerUtilityBase server)
        {
            if(stringToTransform == null)
            {
                throw new ArgumentNullException("stringToTransform");
            }

            stringToTransform = HttpUtility.HtmlEncode(stringToTransform);
            return stringToTransform.Replace(Environment.NewLine, "<br />");
        }

        /// <summary>
        /// Checks the text and prepends "http://" if it doesn't have it already.
        /// </summary>
        /// <param name="text">Text.</param>
        /// <returns></returns>
        public static Uri EnsureUrl(this string text)
        {
            if(text == null)
            {
                return null;
            }

            text = text.Trim();

            if(String.IsNullOrEmpty(text))
            {
                return null;
            }

            if(!text.StartsWith("http://", StringComparison.InvariantCultureIgnoreCase))
            {
                text = string.Format("http://{0}", text);
            }

            return new Uri(text);
        }

        /// <summary>
        /// Filters text to only allow defined HTML.
        /// </summary>
        /// <param name="text">Text.</param>
        /// <returns></returns>
        public static string ConvertToAllowedHtml(string text)
        {
            if(text == null)
            {
                throw new ArgumentNullException("text");
            }

            NameValueCollection allowedHtmlTags = Config.Settings.AllowedHtmlTags;
            return ConvertToAllowedHtml(allowedHtmlTags, text);
        }

        /// <summary>
        /// Filters text to only allow defined HTML.
        /// </summary>
        /// <param name="allowedHtmlTags">The allowed html tags.</param>
        /// <param name="text">Text.</param>
        /// <returns></returns>
        public static string ConvertToAllowedHtml(NameValueCollection allowedHtmlTags, string text)
        {
            if(allowedHtmlTags == null || allowedHtmlTags.Count == 0)
            {
                //This indicates that the AllowableCommentHtml configuration is either missing or
                //has no values, therefore just strip the text as normal.
                return HtmlSafe(text);
            }
            var regex = new HtmlTagRegex();
            MatchCollection matches = regex.Matches(text);

            if(matches.Count == 0)
            {
                return HtmlSafe(text);
            }

            var sb = new StringBuilder();

            int currentIndex = 0;
            foreach(Match match in matches)
            {
                //Append text before the match.
                if(currentIndex < match.Index)
                {
                    sb.Append(HtmlSafe(text.Substring(currentIndex, match.Index - currentIndex)));
                }

                string tagName = match.Groups["tagname"].Value.ToLower(CultureInfo.InvariantCulture);

                //check each match against the list of allowable tags.
                if(allowedHtmlTags.Get(tagName) == null)
                {
                    sb.Append(HtmlSafe(match.Value));
                }
                else
                {
                    bool isEndTag = match.Groups["endTag"].Value.Length > 0;
                    if(isEndTag)
                    {
                        sb.AppendFormat("</{0}>", tagName);
                    }
                    else
                    {
                        sb.Append("<" + tagName);
                        sb.Append(FilterAttributes(tagName, match, allowedHtmlTags) + ">");
                    }
                }
                currentIndex = match.Index + match.Length;
            }
            //add the remaining text.
            if(currentIndex < text.Length)
            {
                sb.Append(HtmlSafe(text.Substring(currentIndex)));
            }

            var converter = new XhtmlConverter();
            return converter.Transform(sb.ToString());
        }

        private static string HtmlSafe(string text)
        {
            //replace &, <, >, and line breaks with <br />
            text = text.Replace("&", "&amp;");
            text = text.Replace("<", "&lt;");
            text = text.Replace(">", "&gt;");
            text = text.Replace("\r", string.Empty);
            text = text.Replace("\n", "<br />");
            return text;
        }

        /// <summary>
        /// Removes any non-permitted attributes for the given tagName. The permitted attributes 
        /// are determined by the given allowedHtml collection.
        /// </summary>
        /// <param name="tagName"></param>
        /// <param name="match"></param>
        /// <param name="allowedHtml"></param>
        /// <returns></returns>
        /// <remarks>This will be a high volume method, so make it as efficient as possible</remarks>
        private static string FilterAttributes(string tagName, Match match, NameValueCollection allowedHtml)
        {
            string allowedAttributesText = allowedHtml[tagName];

            if(!string.IsNullOrEmpty(allowedAttributesText))
            {
                var attributesStringBuilder = new StringBuilder();

                //look to see which tag's attributes we are matching
                char[] splitter = {','};

                NameValueCollection attributes = GetAttributeNameValues(match);

                string[] allowedAttrs = allowedHtml[tagName].ToLower(CultureInfo.InvariantCulture).Split(splitter);

                // go thru each matched attribute, and determine if it's allowed
                foreach(string attributeName in attributes.Keys)
                {
                    foreach(string allowedAttr in allowedAttrs)
                    {
                        if(String.Equals(allowedAttr.Trim(), attributeName, StringComparison.InvariantCultureIgnoreCase))
                        {
                            // found an allowed attribute, so get the attribute value
                            string attrValue = attributes[attributeName];

                            // and now add the full attribute (key=value) to be returned
                            attributesStringBuilder.Append(" " + attributeName.ToLower(CultureInfo.InvariantCulture) + "=\"" + attrValue +
                                          "\"");
                        }
                    }
                }
                return attributesStringBuilder.ToString();
            }
            return string.Empty;
        }

        public static IEnumerable<string> GetAttributeValues(this string html, string tagName, string attributeName)
        {
            var reader = new SgmlReader
            {
                DocType = "html",
                WhitespaceHandling = WhitespaceHandling.All,
                InputStream = new StringReader(string.Format("<html>{0}</html>", html))
            };

            while(reader.Read() && !reader.EOF)
            {
                if(reader.NodeType == XmlNodeType.Element && reader.LocalName == tagName)
                {
                    yield return reader.GetAttribute(attributeName);
                }
            }
        }

        private static NameValueCollection GetAttributeNameValues(Match match)
        {
            CaptureCollection nameCaptures = match.Groups["attName"].Captures;
            CaptureCollection valueCaptures = match.Groups["attVal"].Captures;

            var attributes = new NameValueCollection();

            if(nameCaptures.Count == valueCaptures.Count)
            {
                for(int i = 0; i < nameCaptures.Count; i++)
                {
                    attributes.Add(nameCaptures[i].Value, valueCaptures[i].Value);
                }
                return attributes;
            }

            if(valueCaptures.Count == 0)
            {
                return attributes;
            }

            //this is a much more complicated issue.  
            //One of the attribute names doesn't have a value.
            //so we need to match them up somehow.
            int valueIndex = 0;
            for(int i = 0; i < nameCaptures.Count; i++)
            {
                Capture currentNameCapture = nameCaptures[i];
                string name = currentNameCapture.Value;

                if(valueIndex == valueCaptures.Count)
                {
                    //No more values to worry about.
                    continue;
                }

                Capture currentValueCapture = valueCaptures[valueIndex];

                //Peek ahead.
                if(i < nameCaptures.Count - 1)
                {
                    Capture peekAhead = nameCaptures[i + 1];
                    if(peekAhead.Index > currentValueCapture.Index &&
                       currentValueCapture.Index > currentNameCapture.Index)
                    {
                        attributes.Add(name, currentValueCapture.Value);
                        //We are on the right value.
                        valueIndex++;
                        continue;
                    }
                }
                else
                {
                    //we're on the last item.
                    if(currentValueCapture.Index > currentNameCapture.Index)
                    {
                        attributes.Add(name, currentValueCapture.Value);
                        //We are on the right value.
                        valueIndex++;
                        continue;
                    }
                }
            }
            return attributes;
        }


        /// <summary>
        /// Returns a string collection of URLs within the specified text.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <returns></returns>
        public static ICollection<string> GetLinks(string text)
        {
            var links = new List<string>();
            const string sPattern = @"(?:[hH][rR][eE][fF]\s*=)" +
                                    @"(?:[\s""']*)(?!#|[Mm]ailto|[lL]ocation.|[jJ]avascript|.*css|.*this\.)" +
                                    @"(.*?)(?:[\s>""'])";

            var r = new Regex(sPattern, RegexOptions.IgnoreCase);
            for(Match m = r.Match(text); m.Success; m = m.NextMatch())
            {
                if(m.Groups.ToString().Length > 0)
                {
                    string link = m.Groups[1].ToString();
                    if(!links.Contains(link))
                    {
                        links.Add(link);
                    }
                }
            }
            return links;
        }

        /// <summary>
        /// Parses the URI.
        /// </summary>
        /// <param name="uri">The URI.</param>
        /// <returns></returns>
        public static Uri ParseUri(this string uri)
        {
            if(uri == null)
            {
                return null;
            }

            try
            {
                return new Uri(uri);
            }
            catch(UriFormatException)
            {
                return null;
            }
        }

        /// <summary>
        /// Parses some html and returns a string collection of the tag names contained 
        /// within the HTML.
        /// </summary>
        /// <param name="html"></param>
        /// <returns></returns>
        public static IList<string> ParseTags(this string html)
        {
            var tags = new List<string>();
            if(String.IsNullOrEmpty(html))
            {
                return tags;
            }

            var loweredTags = new List<string>();

            foreach(Match m in AnchorRegex.Matches(html))
            {
                string anchorHtml = m.Value;
                if(!RelRegex.IsMatch(anchorHtml))
                {
                    continue;
                }

                Match urlMatch = HrefRegex.Match(anchorHtml);
                if(urlMatch.Success)
                {
                    string urlStr = urlMatch.Groups["url"].Value;
                    if(urlStr.EndsWith("/default.aspx", StringComparison.InvariantCultureIgnoreCase))
                    {
                        urlStr = urlStr.Substring(0, urlStr.Length - 13);
                    }
                    Uri url;
                    if(Uri.TryCreate(urlStr, UriKind.RelativeOrAbsolute, out url))
                    {
                        string[] seg = url.Segments;
                        string tag = HttpUtility.UrlDecode(seg[seg.Length - 1].Replace("/", ""));

                        //Keep a list of lowered tags so we can prevent duplicates without modifying capitalization
                        string loweredTag = tag.ToLower(CultureInfo.InvariantCulture);
                        if(!loweredTags.Contains(loweredTag))
                        {
                            loweredTags.Add(loweredTag);
                            tags.Add(tag);
                        }
                    }
                }
            }
            return tags;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Text
{
    public interface ITextExpression
    {
        string Eval(object o);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Text
{
    public class LiteralFormat : ITextExpression
    {
        public LiteralFormat(string literalText)
        {
            LiteralText = literalText;
        }

        public string LiteralText { get; private set; }

        public string Eval(object o)
        {
            string literalText = LiteralText
                .Replace("{{", "{")
                .Replace("}}", "}");
            return literalText;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using Subtext.Framework.Properties;

// adapted from namespace Haack.Text

namespace Subtext.Framework.Text
{
    /// <summary>
    /// Static class with useful string manipulation methods.
    /// </summary>
    public static class StringHelper
    {
        private static readonly Regex NumericRegex = new Regex(@"^\d+$", RegexOptions.Compiled);
        private static readonly Regex SplitWordsRegex = new Regex(@"\W+", RegexOptions.Compiled);

        public static string NullIfEmpty(this string s)
        {
            if(String.IsNullOrEmpty(s))
            {
                return null;
            }
            return s;
        }

        public static string Remove(this string original, string textToRemove, int occurrenceCount,
                                    StringComparison comparison)
        {
            if(!original.Contains(textToRemove, comparison))
            {
                return original;
            }

            string result = original;
            for(int i = 0; i < occurrenceCount; i++)
            {
                result = result.LeftBefore(textToRemove, comparison) + result.RightAfter(textToRemove, comparison);
                if(!result.Contains(textToRemove, comparison))
                {
                    return result;
                }
            }
            return result;
        }

        /// <summary>
        /// Removes any double instances of the specified character. 
        /// So "--" becomes "-" if the character is '-'.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <param name="character">The character.</param>
        /// <returns></returns>
        public static string RemoveDoubleCharacter(this string text, char character)
        {
            if(text == null)
            {
                throw new ArgumentNullException("text");
            }
            if(character == char.MinValue)
            {
                return text;
            }
            var newString = new char[text.Length];
            int i = 0;

            bool lastCharIsOurChar = false;
            foreach(char c in text)
            {
                if(c != character || !lastCharIsOurChar)
                {
                    newString[i] = c;
                    i++;
                }
                lastCharIsOurChar = (c == character);
            }

            return new string(newString, 0, i);
        }

        public static IEnumerable<string> SplitIntoWords(this string source)
        {
            return SplitWordsRegex.Split(source.Trim());
        }

        /// <summary>
        /// Converts text to pascal case...
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        public static string ToPascalCase(this string text)
        {
            if(text == null)
            {
                throw new ArgumentNullException("text");
            }

            if(text.Length == 0)
            {
                return text;
            }

            string[] words = text.Split(' ');
            for(int i = 0; i < words.Length; i++)
            {
                if(words[i].Length > 0)
                {
                    string word = words[i];
                    char firstChar = char.ToUpper(word[0], CultureInfo.InvariantCulture);
                    words[i] = firstChar + word.Substring(1);
                }
            }
            return string.Join(string.Empty, words);
        }

        /// <summary>
        /// Returns a string containing a specified number of characters from the left side of a string.
        /// </summary>
        /// <param name="str">Required. String expression from which the leftmost characters are returned.</param>
        /// <param name="length">Required. Integer greater than 0. Numeric expression 
        /// indicating how many characters to return. If 0, a zero-length string ("") 
        /// is returned. If greater than or equal to the number of characters in Str, 
        /// the entire string is returned. If str is null, this returns null.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
        /// <exception cref="ArgumentNullException">Thrown if str is null.</exception>
        public static string Left(this string str, int length)
        {
            if(str == null)
                return null;
            if(length >= str.Length)
            {
                return str;
            }

            return str.Substring(0, length);
        }

        /// <summary>
        /// Returns a string containing a specified number of characters from the right side of a string.
        /// </summary>
        /// <param name="original">Required. String expression from which the rightmost characters are returned.</param>
        /// <param name="length">Required. Integer greater than 0. Numeric expression 
        /// indicating how many characters to return. If 0, a zero-length string ("") 
        /// is returned. If greater than or equal to the number of characters in Str, 
        /// the entire string is returned. If str is null, this returns null.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
        /// <exception cref="ArgumentNullException">Thrown if str is null.</exception>
        public static string Right(this string original, int length)
        {
            if(original == null)
            {
                throw new ArgumentNullException("original");
            }

            if(length < 0)
            {
                throw new ArgumentOutOfRangeException("length", length,
                                                      Resources.ArgumentOutOfRange_LengthMustNotBeNegative);
            }

            if(original.Length == 0 || length == 0)
            {
                return String.Empty;
            }

            if(length >= original.Length)
            {
                return original;
            }

            return original.Substring(original.Length - length);
        }

        /// <summary>
        /// Returns a string containing every character within a string after the 
        /// first occurrence of another string.
        /// </summary>
        /// <param name="original">Required. String expression from which the rightmost characters are returned.</param>
        /// <param name="search">The string where the end of it marks the 
        /// characters to return.  If the string is not found, the whole string is 
        /// returned.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string RightAfter(this string original, string search)
        {
            return RightAfter(original, search, StringComparison.InvariantCulture);
        }

        /// <summary>
        /// Returns a string containing every character within a string after the 
        /// first occurrence of another string.
        /// </summary>
        /// <param name="original">Required. String expression from which the rightmost characters are returned.</param>
        /// <param name="search">The string where the end of it marks the 
        /// characters to return.  If the string is not found, the whole string is 
        /// returned.</param>
        /// <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string RightAfter(this string original, string search, StringComparison comparisonType)
        {
            if(original == null)
            {
                throw new ArgumentNullException("original");
            }

            if(search == null)
            {
                throw new ArgumentNullException("search");
            }

            //Shortcut.
            if(search.Length > original.Length || search.Length == 0)
            {
                return original;
            }

            int searchIndex = original.IndexOf(search, 0, comparisonType);

            if(searchIndex < 0)
            {
                return original;
            }

            return Right(original, original.Length - (searchIndex + search.Length));
        }

        /// <summary>
        /// Returns a string containing every character within a string after the 
        /// last occurrence of another string.
        /// </summary>
        /// <param name="original">Required. String expression from which the rightmost characters are returned.</param>
        /// <param name="search">The string where the end of it marks the 
        /// characters to return.  If the string is not found, the whole string is 
        /// returned.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string RightAfterLast(this string original, string search)
        {
            return RightAfterLast(original, search, original.Length - 1, StringComparison.InvariantCulture);
        }

        /// <summary>
        /// Returns a string containing every character within a string after the
        /// last occurrence of another string.
        /// </summary>
        /// <param name="original">Required. String expression from which the rightmost characters are returned.</param>
        /// <param name="search">The string where the end of it marks the
        /// characters to return.  If the string is not found, the whole string is
        /// returned.</param>
        /// <param name="startIndex">The start index.</param>
        /// <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string RightAfterLast(this string original, string search, int startIndex,
                                            StringComparison comparisonType)
        {
            if(original == null)
            {
                throw new ArgumentNullException("original");
            }
            if(search == null)
            {
                throw new ArgumentNullException("search");
            }

            //Shortcut.
            if(search.Length > original.Length || search.Length == 0)
            {
                return original;
            }

            int searchIndex = original.LastIndexOf(search, startIndex, comparisonType);

            if(searchIndex < 0)
            {
                return original;
            }

            return Right(original, original.Length - (searchIndex + search.Length));
        }

        /// <summary>
        /// Returns a string containing every character within a string before the 
        /// first occurrence of another string.
        /// </summary>
        /// <param name="str">Required. String expression from which the leftmost characters are returned.</param>
        /// <param name="search">The string where the beginning of it marks the 
        /// characters to return.  If the string is not found, the whole string is 
        /// returned.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string LeftBefore(string str, string search)
        {
            return LeftBefore(str, search, StringComparison.InvariantCulture);
        }

        /// <summary>
        /// Returns a string containing every character within a string before the 
        /// first occurrence of another string.
        /// </summary>
        /// <param name="original">Required. String expression from which the leftmost characters are returned.</param>
        /// <param name="search">The string where the beginning of it marks the 
        /// characters to return.  If the string is not found, the whole string is 
        /// returned.</param>
        /// <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException">Thrown if str or searchstring is null.</exception>
        public static string LeftBefore(this string original, string search, StringComparison comparisonType)
        {
            if(original == null)
            {
                throw new ArgumentNullException("original");
            }
            if(search == null)
            {
                throw new ArgumentNullException("search");
            }
            //Shortcut.
            if(search.Length > original.Length || search.Length == 0)
            {
                return original;
            }
            int searchIndex = original.IndexOf(search, 0, comparisonType);

            if(searchIndex < 0)
            {
                return original;
            }
            return original.Left(searchIndex);
        }

        /// <summary>
        /// Returns true if the the specified container string contains the 
        /// contained string.
        /// </summary>
        /// <param name="container">Container.</param>
        /// <param name="contained">Contained.</param>
        /// <param name="comparison">Case sensitivity.</param>
        /// <returns></returns>
        public static bool Contains(this string container, string contained, StringComparison comparison)
        {
            return container.IndexOf(contained, comparison) >= 0;
        }

        /// <summary>
        /// Determines whether the specified text is a numeric... or to be 
        /// more precise, if the text is an integer.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <returns>
        /// 	<c>true</c> if the specified text is numeric; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsNumeric(this string text)
        {
            return NumericRegex.IsMatch(text);
        }

        public static string MailToEncode(string s)
        {
            return HttpUtility.UrlEncode(HttpUtility.HtmlAttributeEncode(HtmlHelper.RemoveHtml(s).Replace("\"", "'"))).Replace("+", " ");
        }

        public static string MailToBodyEncode(string body)
        {
            return MailToEncode(body.Replace(Environment.NewLine, "%0A"));
        }

        public static string NamedFormat(this string format, object source)
        {
            if(format == null)
            {
                throw new ArgumentNullException("format");
            }
            string[] formattedStrings = (from expression in format.SplitFormat()
                                         select expression.Eval(source)).ToArray();
            return String.Join(string.Empty, formattedStrings);
        }

        private static IEnumerable<ITextExpression> SplitFormat(this string format)
        {
            int exprEndIndex = -1;
            int expStartIndex;

            do
            {
                expStartIndex = format.IndexOfExpressionStart(exprEndIndex + 1);
                if(expStartIndex < 0)
                {
                    //everything after last end brace index.
                    if(exprEndIndex + 1 < format.Length)
                    {
                        yield return new LiteralFormat(
                            format.Substring(exprEndIndex + 1));
                    }
                    break;
                }

                if(expStartIndex - exprEndIndex - 1 > 0)
                {
                    //everything up to next start brace index
                    yield return new LiteralFormat(format.Substring(exprEndIndex + 1
                                                                    , expStartIndex - exprEndIndex - 1));
                }

                int endBraceIndex = format.IndexOfExpressionEnd(expStartIndex + 1);
                if(endBraceIndex < 0)
                {
                    //rest of string, no end brace (could be invalid expression)
                    yield return new FormatExpression(format.Substring(expStartIndex));
                }
                else
                {
                    exprEndIndex = endBraceIndex;
                    //everything from start to end brace.
                    yield return new FormatExpression(format.Substring(expStartIndex
                                                                       , endBraceIndex - expStartIndex + 1));
                }
            } while(expStartIndex > -1);
        }

        static int IndexOfExpressionStart(this string format, int startIndex)
        {
            int index = format.IndexOf('{', startIndex);
            if(index == -1)
            {
                return index;
            }

            //peek ahead.
            if(index + 1 < format.Length)
            {
                char nextChar = format[index + 1];
                if(nextChar == '{')
                {
                    return IndexOfExpressionStart(format, index + 2);
                }
            }

            return index;
        }

        static int IndexOfExpressionEnd(this string format, int startIndex)
        {
            int endBraceIndex = format.IndexOf('}', startIndex);
            if(endBraceIndex == -1)
            {
                return endBraceIndex;
            }
            //start peeking ahead until there are no more braces...
            // }}}}
            int braceCount = 0;
            for(int i = endBraceIndex + 1; i < format.Length; i++)
            {
                if(format[i] == '}')
                {
                    braceCount++;
                }
                else
                {
                    break;
                }
            }
            if(braceCount % 2 == 1)
            {
                return IndexOfExpressionEnd(format, endBraceIndex + braceCount + 1);
            }

            return endBraceIndex;
        }

        /// <summary>
        /// Returns a new String with the last character removed. 
        /// If the string ends with \r\n, both characters are removed.
        /// </summary>
        /// <remarks>
        /// "string\r\n".chop   #=> "string"
        /// "string\n\r".chop   #=> "string\n"
        /// "string\n".chop     #=> "string"
        /// "string".chop       #=> "strin"
        /// "x".chop.chop       #=> ""
        /// </remarks>
        /// <param name="text"></param>
        /// <returns></returns>
        public static string Chop(this string text)
        {
            if(String.IsNullOrEmpty(text))
            {
                return text;
            }
            bool chopped = false;
            if(text.EndsWith("\n", StringComparison.Ordinal))
            {
                text = text.Substring(0, text.Length - 1);
                chopped = true;
            }
            if(text.EndsWith("\r", StringComparison.Ordinal))
            {
                text = text.Substring(0, text.Length - 1);
                chopped = true;
            }
            if(!chopped)
            {
                text = text.Substring(0, text.Length - 1);
            }
            return text;
        }

        public static string Chomp(this string text)
        {
            return text.Chomp(null, StringComparison.Ordinal);
        }

        /// <summary>
        /// Returns a new String with the last character removed. 
        /// If the string ends with \r\n, both characters are removed.
        /// </summary>
        /// <remarks>
        /// "hello".chomp            #=> "hello"
        /// "hello\n".chomp          #=> "hello"
        /// "hello\r\n".chomp        #=> "hello"
        /// "hello\n\r".chomp        #=> "hello\n"
        /// "hello\r".chomp          #=> "hello"
        /// "hello \n there".chomp   #=> "hello \n there"
        /// "hello".chomp("llo")     #=> "he"
        /// </remarks>
        public static string Chomp(this string text, string separator, StringComparison comparisonType)
        {
            if(String.IsNullOrEmpty(text))
            {
                return text;
            }

            if(text.EndsWith("\n", StringComparison.Ordinal))
            {
                text = text.Substring(0, text.Length - 1);
            }

            if(text.EndsWith("\r", StringComparison.Ordinal))
            {
                text = text.Substring(0, text.Length - 1);
            }

            if(!String.IsNullOrEmpty(separator))
            {
                if(text.EndsWith(separator, comparisonType))
                {
                    text = text.Substring(0, text.Length - separator.Length);
                }
            }
            return text;
        }

        public static string ToYesNo(this bool value)
        {
            return value ? "Yes" : "No";
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using Subtext.Extensibility;
using Subtext.Framework.com.community_credit.www;
using Subtext.Framework.Components;
using Subtext.Framework.Logging;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Tracking
{
    public static class CommunityCreditNotification
    {
        static readonly Log Log = new Log();

        public static void AddCommunityCredits(Entry entry, UrlHelper urlHelper, Blog blog)
        {
            string result;

            bool commCreditsEnabled;

            if(!bool.TryParse(ConfigurationManager.AppSettings["CommCreditEnabled"], out commCreditsEnabled))
            {
                return;
            }

            if(commCreditsEnabled && entry.IsActive)
            {
                var wsCommunityCredit = new AffiliateServices();

                string url = urlHelper.EntryUrl(entry).ToFullyQualifiedUrl(blog).ToString();
                string category = String.Empty;
                if(entry.PostType == PostType.BlogPost)
                {
                    category = "Blog";
                }
                else if(entry.PostType == PostType.Story)
                {
                    category = "Article";
                }
                string description = "Blogged about: " + entry.Title;

                string firstName = string.Empty;
                string lastName = blog.Author;
                string email = blog.Email;
                string affiliateCode = ConfigurationManager.AppSettings["CommCreditAffiliateCode"];
                string affiliateKey = ConfigurationManager.AppSettings["CommCreditAffiliateKey"];

                Log.InfoFormat("Sending notification to community credit for url {0} in category {1} for user {2}", url,
                               category, email);

                result = wsCommunityCredit.AddCommunityCredit(email, firstName, lastName, description, url, category,
                                                              affiliateCode, affiliateKey);

                Log.InfoFormat("Response Received was: {0}", result);
                if(!result.Equals("Success"))
                {
                    throw new CommunityCreditNotificationException(result);
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Tracking
{
    public class CommunityCreditNotificationException : ApplicationException
    {
        public CommunityCreditNotificationException()
        {
        }

        public CommunityCreditNotificationException(string message) : base(message)
        {
        }

        public CommunityCreditNotificationException(string message, Exception innerException)
            : base(message, innerException)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Threading;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Util;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for Notification.
    /// </summary>
    public static class NotificationServices
    {
        /// <summary>
        /// Posts trackbacks and pingbacks for the specified entry.
        /// </summary>
        public static void Run(Entry entry, Blog blog, UrlHelper urlHelper)
        {
            if(!blog.TrackbacksEnabled)
            {
                return;
            }

            if(!Config.Settings.Tracking.EnablePingBacks && !Config.Settings.Tracking.EnableTrackBacks)
            {
                return;
            }

            if(entry != null)
            {
                var notify = new Notifier
                {
                    FullyQualifiedUrl = urlHelper.BlogUrl(),
                    BlogName = blog.Title,
                    Title = entry.Title,
                    PostUrl = urlHelper.EntryUrl(entry).ToFullyQualifiedUrl(blog),
                    Description = entry.HasDescription ? entry.Description : entry.Title,
                    Text = entry.Body
                };

                //This could take a while, do it on another thread
                ThreadHelper.FireAndForget(notify.Notify, "Exception occured while attempting trackback notification");
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Class used to send a remote notification such as to Weblogs.com or a 
    /// trackback/pingback.
    /// </summary>
    public class Notifier
    {
        static readonly Log Log = new Log();

        public string Description { get; set; }

        public string BlogName { get; set; }

        public string Title { get; set; }

        public string FullyQualifiedUrl { get; set; }

        public Uri PostUrl { get; set; }

        public string Text { get; set; }

        /// <summary>
        /// Notifies the specified state.
        /// </summary>
        /// <param name="state">The state.</param>
        public void Notify(object state)
        {
            try
            {
                Notify();
            }
            catch(Exception e)
            {
                Log.Warn("Had a problem with notification.", e);
            }
        }

        void Notify()
        {
            Configuration.Tracking track = Config.Settings.Tracking;

            //First, ping weblogs.com
            try
            {
                PingWeblogsDotCom(track);
            }
            catch(HttpException e)
            {
                Log.Warn("Had a problem pinging weblogs.com. continuing.", e);
            }

            //Get the links from the last post
            ICollection<string> links = HtmlHelper.GetLinks(Text);

            //Do we have links
            if(links == null || links.Count == 0)
            {
                return;
            }

            //Create our notification Components
            using(var pbnp = new PingBackNotificatinProxy())
            {
                //for each link, try to pingback and/or trackback
                foreach(string link in links)
                {
                    //get the page text
                    Uri url = link.ParseUri();
                    if(url == null)
                    {
                        continue;
                    }

                    string pageText = HttpHelper.GetPageText(url);
                    if(pageText == null || !track.EnableTrackBacks)
                    {
                        continue;
                    }

                    if(track.EnablePingBacks &&
                       !TrackBackNotificationProxy.TrackBackPing(pageText, url, Title, PostUrl, BlogName, Description))
                    {
                        Log.DebugFormat("Trackback failed to '{0}'. Let's try a PingBack.", url);
                        pbnp.Ping(pageText, PostUrl, url);
                    }
                }
            }
        }

        private void PingWeblogsDotCom(Configuration.Tracking track)
        {
            if(track.PingWeblogs)
            {
                using(var weblogs = new WeblogsNotificatinProxy())
                {
                    weblogs.Ping(BlogName, FullyQualifiedUrl);
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
// Originally based off of code by Simon Fell http://www.pocketsoap.com/weblog/ 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Text.RegularExpressions;
using CookComputing.XmlRpc;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for WeblogsNotificatinProxy.
    /// </summary>
    public class PingBackNotificatinProxy : XmlRpcClientProtocol
    {
        public string ErrorMessage
        {
            get { return "NoError"; }
        }

        public bool Ping(string pageText, Uri sourceUri, Uri targetUri)
        {
            if(sourceUri == null)
            {
                throw new ArgumentNullException("sourceURI");
            }

            if(targetUri == null)
            {
                throw new ArgumentNullException("targetURI");
            }

            string pingbackUrl = GetPingBackUrl(pageText, sourceUri);
            if(pingbackUrl != null)
            {
                Url = pingbackUrl;
                Notify(sourceUri.ToString(), targetUri.ToString());
                return true;
            }
            return false;
        }

        private static string GetPingBackUrl(string pageText, Uri postUrl)
        {
            if(!Regex.IsMatch(pageText, postUrl.ToString(), RegexOptions.IgnoreCase | RegexOptions.Singleline))
            {
                if(pageText != null)
                {
                    const string pattern = "<link rel=\"pingback\" href=\"([^\"]+)\" ?/?>";
                    var regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                    Match match = regex.Match(pageText);
                    if(match.Success)
                    {
                        return match.Result("$1");
                    }
                }
            }
            return null;
        }

        [XmlRpcMethod("pingback.ping")]
        public void Notify(string sourceURI, string targetURI)
        {
            Invoke("Notifiy", new object[] {sourceURI, targetURI});
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
// Originally based off of code by Simon Fell http://www.pocketsoap.com/weblog/ 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using CookComputing.XmlRpc;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Components;
using Subtext.Framework.Email;
using Subtext.Framework.Properties;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Util;
using Subtext.Framework.XmlRpc;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Service used to receive pingbacks from remote clients.
    /// </summary>
    public class PingBackService : SubtextXmlRpcService
    {
        public PingBackService(ISubtextContext context)
            : base(context)
        {
        }

        /// <summary>
        /// Method called by a remote client to ping this server.
        /// </summary>
        /// <param name="sourceURI">Source URI.</param>
        /// <param name="targetURI">Target URI.</param>
        /// <returns></returns>
        [XmlRpcMethod("pingback.ping", Description = "Pingback server implementation")]
        public string pingBack(string sourceURI, string targetURI)
        {
            if(!Blog.TrackbacksEnabled)
            {
                return "Pingbacks are not enabled for this site.";
            }

            string pageTitle;

            // GetPostIDFromUrl returns the postID
            int? id = SubtextContext.RequestContext.GetIdFromRequest();
            if(id == null)
            {
                throw new XmlRpcFaultException(33, Resources.XmlRcpFault_DidNotLinkToPermalink);
            }

            Uri sourceUrl = sourceURI.ParseUri();
            Uri targetUrl = targetURI.ParseUri();

            // does the sourceURI actually contain the permalink ?
            if(sourceUrl == null || targetUrl == null ||
               !Verifier.SourceContainsTarget(sourceUrl, targetUrl, out pageTitle))
            {
                throw new XmlRpcFaultException(17, Resources.XmlRcpFault_InvalidLink);
            }

            //PTR = Pingback - TrackBack - Referral
            var trackback = new Trackback(id.Value, HtmlHelper.SafeFormat(pageTitle, SubtextContext.HttpContext.Server),
                                          new Uri(sourceURI), string.Empty,
                                          HtmlHelper.SafeFormat(pageTitle, SubtextContext.HttpContext.Server),
                                          Blog.TimeZone.Now);
            ICommentSpamService feedbackService = null;
            if(Blog.FeedbackSpamServiceEnabled)
            {
                feedbackService = new AkismetSpamService(Blog.FeedbackSpamServiceKey, Blog, null, Url);
            }
            var commentService = new CommentService(SubtextContext, new CommentFilter(SubtextContext, feedbackService));
            commentService.Create(trackback, true/*runFilters*/);

            //TODO: Create this using IoC container
            var emailService = new EmailService(EmailProvider.Instance(), new EmbeddedTemplateEngine(), SubtextContext);
            emailService.EmailCommentToBlogAuthor(trackback);

            return String.Format(CultureInfo.InvariantCulture, Resources.XmlRpcMessage_ThanksForThePingback, sourceURI);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Event arguments for the SourceVerification event.
    /// </summary>
    public class SourceVerificationEventArgs : EventArgs
    {
        readonly Uri _entryUrl;
        readonly Uri _sourceUrl;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceVerificationEventArgs"/> class.
        /// </summary>
        /// <param name="sourceUrl">The source URL.</param>
        /// <param name="entryUrl">The entry URL.</param>
        public SourceVerificationEventArgs(Uri sourceUrl, Uri entryUrl)
        {
            _sourceUrl = sourceUrl;
            _entryUrl = entryUrl;
        }

        /// <summary>
        /// Gets the source URL.
        /// </summary>
        /// <value>The source URL.</value>
        public Uri SourceUrl
        {
            get { return _sourceUrl; }
        }

        /// <summary>
        /// Gets the entry URL.
        /// </summary>
        /// <value>The entry URL.</value>
        public Uri EntryUrl
        {
            get { return _entryUrl; }
        }

        /// <summary>
        /// Gets a value indicating whether this <see cref="SourceVerificationEventArgs"/> is verified.
        /// </summary>
        /// <value><c>true</c> if verified; otherwise, <c>false</c>.</value>
        public bool Verified { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Xml;
using Subtext.Extensibility.Interfaces;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Components;
using Subtext.Framework.Email;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Logging;
using Subtext.Framework.Properties;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Util;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Service used to receive trackbacks from remote clients.
    /// </summary>
    public class TrackBackHandler : SubtextHttpHandler
    {
        static readonly Log Log = new Log();

        public TrackBackHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        public override void ProcessRequest()
        {
            if(!SubtextContext.Blog.TrackbacksEnabled)
            {
                return;
            }

            try
            {
                HandleTrackback(SubtextContext);
            }
            catch(BaseCommentException e)
            {
                Log.Info("Comment exception occurred.", e);
            }
        }

        private void HandleTrackback(ISubtextContext subtextContext)
        {
            HttpContextBase httpContext = subtextContext.RequestContext.HttpContext;
            httpContext.Response.ContentType = "text/xml";

            Entry entry;

            int? id = subtextContext.RequestContext.GetIdFromRequest();
            if(id != null)
            {
                entry = subtextContext.Repository.GetEntry(id.Value, true /* activeOnly */, false
                    /* includeCategories */);
            }
            else
            {
                string slug = subtextContext.RequestContext.GetSlugFromRequest();
                entry = subtextContext.Repository.GetEntry(slug, true /* activeOnly */, false /* includeCategories */);
            }

            if(entry == null)
            {
                Log.Info(string.Format(CultureInfo.InvariantCulture, Resources.Log_CouldNotExtractEntryId,
                                       httpContext.Request.Path));
                SendTrackbackResponse(httpContext, 1, Resources.TrackbackResponse_EntryIdMissing);
                return;
            }

            if(httpContext.Request.HttpMethod == "POST")
            {
                CreateTrackbackAndSendResponse(subtextContext, entry, entry.Id);
            }
            else
            {
                SendTrackbackRss(subtextContext, entry, entry.Id);
            }
        }

        private static void SendTrackbackRss(ISubtextContext context, Entry entry, int postId)
        {
            var writer = new XmlTextWriter(context.RequestContext.HttpContext.Response.Output) {Formatting = Formatting.Indented};

            string url = context.UrlHelper.TrackbacksUrl(postId).ToFullyQualifiedUrl(context.Blog).ToString();

            writer.WriteStartDocument();
            writer.WriteStartElement("response");
            writer.WriteElementString("error", "0");
            writer.WriteStartElement("rss");
            writer.WriteAttributeString("version", "0.91");
            writer.WriteStartElement("channel");
            writer.WriteElementString("title", entry.Title);
            writer.WriteElementString("link", url);
            writer.WriteElementString("description", string.Empty);
            writer.WriteElementString("language", "en-us");

            writer.WriteEndElement(); // channel
            writer.WriteEndElement(); // rss 
            writer.WriteEndElement(); // response
            writer.WriteEndDocument();
        }

        private void CreateTrackbackAndSendResponse(ISubtextContext subtextContext, IEntryIdentity entry, int entryId)
        {
            HttpContextBase context = subtextContext.RequestContext.HttpContext;
            string title = SafeParam(context, "title");
            string excerpt = SafeParam(context, "excerpt");
            string urlText = SafeParam(context, "url");
            string blogName = SafeParam(context, "blog_name");

            Uri url = urlText.ParseUri();
            if(url == null)
            {
                SendTrackbackResponse(context, 1, Resources.TrackbackResponse_NoUrl);
                return;
            }

            if(entry == null ||
               !IsSourceVerification(url,
                                     subtextContext.UrlHelper.EntryUrl(entry).ToFullyQualifiedUrl(subtextContext.Blog)))
            {
                SendTrackbackResponse(context, 2,
                                      String.Format(CultureInfo.InvariantCulture,
                                                    Resources.TrackbackResponse_NoRelevantLink, url));
                return;
            }

            var trackback = new Trackback(entryId, title, url, blogName, excerpt, Blog.TimeZone.Now);
            ICommentSpamService feedbackService = null;
            Blog blog = subtextContext.Blog;
            if(blog.FeedbackSpamServiceEnabled)
            {
                feedbackService = new AkismetSpamService(blog.FeedbackSpamServiceKey, blog, null, Url);
            }
            var commentService = new CommentService(SubtextContext, new CommentFilter(SubtextContext, feedbackService));
            commentService.Create(trackback, true/*runFilters*/);
            //TODO: Create this using IoC container
            var emailService = new EmailService(EmailProvider.Instance(), new EmbeddedTemplateEngine(), subtextContext);
            emailService.EmailCommentToBlogAuthor(trackback);
        }

        private static void SendTrackbackResponse(HttpContextBase context, int errorNumber, string errorMessage)
        {
            var d = new XmlDocument();
            XmlElement root = d.CreateElement("response");
            d.AppendChild(root);
            XmlElement er = d.CreateElement("error");
            root.AppendChild(er);
            er.AppendChild(d.CreateTextNode(errorNumber.ToString(CultureInfo.InvariantCulture)));
            if(errorMessage.Length > 0)
            {
                XmlElement msg = d.CreateElement("message");
                root.AppendChild(msg);
                msg.AppendChild(d.CreateTextNode(errorMessage));
            }
            d.Save(context.Response.Output);
            context.Response.Output.Flush();
        }

        private static string SafeParam(HttpContextBase context, string pName)
        {
            if(context.Request.Form[pName] != null)
            {
                return HtmlHelper.SafeFormat(context.Request.Form[pName], context.Server);
            }
            return string.Empty;
        }

        public event EventHandler<SourceVerificationEventArgs> SourceVerification;

        private bool IsSourceVerification(Uri sourceUrl, Uri entryUrl)
        {
            EventHandler<SourceVerificationEventArgs> handler = SourceVerification;
            if(handler != null)
            {
                var args = new SourceVerificationEventArgs(sourceUrl, entryUrl);
                handler(this, args);
                return args.Verified;
            }
            return Verifier.SourceContainsTarget(sourceUrl, entryUrl);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using System.Net;
using System.Text.RegularExpressions;
using System.Web;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for TrackBackNotificationProxy.
    /// </summary>
    public class TrackBackNotificationProxy
    {
        public static bool TrackBackPing(string pageText, Uri url, string title, Uri link, string blogname,
                                         string description)
        {
            string trackBackItem = GetTrackBackText(pageText, url, link);
            if(trackBackItem != null)
            {
                if(!trackBackItem.ToLower(CultureInfo.InvariantCulture).StartsWith("http://"))
                {
                    trackBackItem = "http://" + trackBackItem;
                }

                string parameters = "title=" + HttpUtility.HtmlEncode(title) + "&url=" +
                                    HttpUtility.HtmlEncode(link.ToString()) + "&blog_name=" +
                                    HttpUtility.HtmlEncode(blogname) + "&excerpt=" + HttpUtility.HtmlEncode(description);

                Uri trackBackUrl = trackBackItem.ParseUri();
                if(trackBackUrl != null)
                {
                    return SendPing(trackBackUrl, parameters);
                }
            }
            return true;
        }

        private static bool SendPing(Uri trackBackItem, string parameters)
        {
            HttpWebRequest request = HttpHelper.CreateRequest(trackBackItem);
            request.Method = "POST";
            request.ContentLength = parameters.Length;
            request.ContentType = "application/x-www-form-urlencoded";
            request.KeepAlive = false;
            HttpHelper.SetProxy(request);

            using(var myWriter = new StreamWriter(request.GetRequestStream()))
            {
                myWriter.Write(parameters);
            }

            var response = (HttpWebResponse)request.GetResponse();

            return (response.StatusCode == HttpStatusCode.OK);
        }

        private static string GetTrackBackText(string pageText, Uri url, Uri postUrl)
        {
            if(!Regex.IsMatch(pageText, postUrl.ToString(), RegexOptions.IgnoreCase | RegexOptions.Singleline))
            {
                const string rdfPattern = @"<rdf:\w+\s[^>]*?>(</rdf:rdf>)?";
                var regex = new Regex(rdfPattern, RegexOptions.IgnoreCase);
                
                for(Match match = regex.Match(pageText); match.Success; match = match.NextMatch())
                {
                    if(match.Groups.ToString().Length > 0)
                    {
                        string text = match.Groups[0].ToString();
                        if(text.IndexOf(url.ToString()) > 0)
                        {
                            const string trackbackPattern = "trackback:ping=\"([^\"]+)\"";
                            var reg = new Regex(trackbackPattern, RegexOptions.IgnoreCase);
                            Match m2 = reg.Match(text);
                            if(m2.Success)
                            {
                                return m2.Result("$1");
                            }
                            return text;
                        }
                    }
                }
            }

            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog is not responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
// Based off of code by Simon Fell http://www.pocketsoap.com/weblog/ 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Defines the allowable Trackback response codes.
    /// </summary>
    public enum TrackbackResponseCode
    {
        /// <summary>
        /// The trackback ping was succesful.
        /// </summary>
        Success = 0,

        /// <summary>
        /// The trackback ping was unsuccesful.
        /// </summary>
        Error = 1,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Contains static helper methods for dealing with Trackbacks and PingBacks.
    /// </summary>
    public static class TrackHelpers
    {
        //Text to insert into a file with pinkback service location
        public static string GetPingPackTag(UrlHelper urlHelper)
        {
            return string.Format(CultureInfo.InvariantCulture,
                                 "<link rel=\"pingback\" href=\"{0}Services/Pingback.aspx\"></link>",
                                 urlHelper.BlogUrl());
        }

        //Body of text to insert into a post with Trackback
        public static string TrackBackTag(Entry entry, Blog blog, UrlHelper urlHelper)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }

            Uri entryUrl = urlHelper.EntryUrl(entry).ToFullyQualifiedUrl(blog);
            return String.Format(CultureInfo.InvariantCulture, Resources.TrackbackTag, entryUrl, entryUrl, entry.Title,
                                 urlHelper.BlogUrl(), entry.Id.ToString(CultureInfo.InvariantCulture));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for TrackingUrls.
    /// </summary>
    public static class TrackingUrls
    {
        private const string ImagePattern = "<img src=\"{0}\" width=\"1\" height=\"1\" />";

        public static string AggBugImage(string url)
        {
            return String.Format(CultureInfo.InvariantCulture, ImagePattern, url);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
// Originally based off of code by Simon Fell http://www.pocketsoap.com/weblog/ 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Net;
using System.Text.RegularExpressions;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Framework.Web;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Used to verify that a trackback or pingback source actually contains a link to this site.
    /// </summary>
    public static class Verifier
    {
        private readonly static ILog Log = new Log();

        /// <summary>
        /// Checks that the contents of the source url contains the target URL.
        /// </summary>
        /// <param name="sourceUrl">The source URL.</param>
        /// <param name="targetUrl">The target URL.</param>
        /// <param name="pageTitle">The page title.</param>
        /// <returns></returns>
        public static bool SourceContainsTarget(Uri sourceUrl, Uri targetUrl, out string pageTitle)
        {
            pageTitle = string.Empty;
            string page = null;
            try
            {
                page = HttpHelper.GetPageText(sourceUrl);
            }
            catch(WebException e)
            {
                Log.Warn("Could not verify the source of a ping/trackback", e);
            }
            if(page == null || targetUrl == null)
            {
                return false;
            }

            const string pattern = @"<head.*?>.*<title.*?>(.*)</title.*?>.*</head.*?>";
            var regex = new Regex(pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline);
            Match match = regex.Match(page);
            if(match.Success)
            {
                pageTitle = match.Result("$1");
                return true;
            }
            return false;
        }

        /// <summary>
        /// Checks that the contents of the source url contains the target URL.
        /// </summary>
        /// <param name="sourceUrl">The source URL.</param>
        /// <param name="targetUrl">The target URL.</param>
        /// <returns></returns>
        public static bool SourceContainsTarget(Uri sourceUrl, Uri targetUrl)
        {
            string page;
            return SourceContainsTarget(sourceUrl, targetUrl, out page);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog isnot responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this code, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using CookComputing.XmlRpc;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for WeblogsNotificatinProxy.
    /// </summary>
    [XmlRpcUrl("http://rpc.weblogs.com/RPC2")]
    public class WeblogsNotificatinProxy : XmlRpcClientProtocol
    {
        static readonly Log Log = new Log();

        private string _errorMessage = "No Error";

        public string ErrorMessage
        {
            get { return _errorMessage; }
        }

        public bool Ping(string name, string url)
        {
            bool result = false;
            try
            {
                XmlRpcStruct rpcstruct = Notifiy(name, url);
                if(rpcstruct.ContainsKey("flerror"))
                {
                    //Weblogs.com return false if there is no error
                    //I want to return true, indicating a successful notification
                    result = !(bool)rpcstruct["flerror"];
                    if(!result)
                    {
                        if(rpcstruct.ContainsKey("message"))
                        {
                            _errorMessage = (string)rpcstruct["message"];
                        }
                        else
                        {
                            _errorMessage = "Unknown Error";
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                Log.Warn("Error while Ping: " + ex.Message);
                _errorMessage = "Error: " + ex.Message;
            }
            return result;
        }

        [XmlRpcMethod("weblogUpdates.ping")]
        public XmlRpcStruct Notifiy(string name, string url)
        {
            //TODO: IS this really supposed to be misspelled?
            return (XmlRpcStruct)Invoke("Notifiy", new object[] {name, url});
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Summary description for CacheKey.
    /// </summary>
    public enum CacheKey
    {
        None = 0,
        Control = 1,
        ControlPage = 2,
        Page = 3,
    } ;
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;

namespace Subtext.Framework.UI.Skinning
{
    public interface IContainerControl
    {
        Control LoadControl(string virtualPath);
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.UI.Skinning
{
    public interface IErrorControl
    {
        SkinControlLoadException Exception { get; set; }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;

namespace Subtext.Framework.UI.Skinning
{
    public interface ISkinControlLoader
    {
        Control LoadControl(string controlName);
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Declaration of a <code>script</code> element in the skin. Supports the capability to specify script includes in the 
    /// <code>head</code> element of the page.
    /// </summary>
    [Serializable]
    public class Script
    {
        public Script()
        {
            Type = "text/javascript";
        }

        /// <summary>
        /// Script type. Default value is <code>text/javascript</code>
        /// </summary>
        [XmlAttribute]
        public string Type { get; set; }

        /// <summary>
        /// Location of the script. Specified as relative to the skin directory
        /// </summary>
        [XmlAttribute]
        public string Src { get; set; }

        /// <summary>
        /// Whether or not to defer loading the script till page is loaded. 
        /// Be careful which scripts you use this with.
        /// </summary>
        [XmlAttribute]
        public bool Defer { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using Subtext.Framework.Web;

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Provides rendering facilities for script elements in the head element of the page
    /// </summary>
    public class ScriptElementCollectionRenderer
    {
        private readonly SkinEngine _skinEngine;

        public ScriptElementCollectionRenderer(SkinEngine skinEngine)
        {
            _skinEngine = skinEngine;
        }

        private IDictionary<string, SkinTemplate> Templates
        {
            get
            {
                var templates = _templates;
                if(templates == null)
                {
                    templates = _skinEngine.GetSkinTemplates(false /* mobile */);
                    _templates = templates;
                }
                return templates;
            }
        }
        IDictionary<string, SkinTemplate> _templates;

        private static string RenderScriptAttribute(string attributeName, string attributeValue)
        {
            return attributeValue != null ? string.Format(" {0}=\"{1}\"", attributeName, attributeValue) : String.Empty;
        }

        public static string RenderScriptElement(string skinPath, Script script)
        {
            return string.Format("<script{0}{1}{2}></script>{3}", RenderScriptAttribute("type", script.Type), RenderScriptAttribute("src", GetScriptSourcePath(skinPath, script)), RenderScriptAttribute("defer", script.Defer ? "defer" : null), Environment.NewLine);
        }

        public static string RenderScriptElement(string scriptPath)
        {
            return string.Format("<script{0}{1}></script>{2}", RenderScriptAttribute("type", "text/javascript"), RenderScriptAttribute("src", scriptPath), Environment.NewLine);
        }

        private static string GetScriptSourcePath(string skinPath, Script script)
        {
            if(script.Src.StartsWith("~"))
            {
                return HttpHelper.ExpandTildePath(script.Src);
            }
            if(script.Src.StartsWith("/") || script.Src.StartsWith("http://") || script.Src.StartsWith("https://"))
            {
                return script.Src;
            }
            return skinPath + script.Src;
        }

        /// <summary>
        /// Gets the skin path.
        /// </summary>
        /// <param name="skinTemplateFolder">Name of the skin.</param>
        /// <returns></returns>
        private static string GetSkinPath(string skinTemplateFolder)
        {
            string applicationPath = HttpContext.Current.Request.ApplicationPath;
            return string.Format("{0}/Skins/{1}/", (applicationPath == "/" ? String.Empty : applicationPath), skinTemplateFolder);
        }

        /// <summary>
        /// Renders the script element collection for thes kin key.
        /// </summary>
        /// <param name="skinKey">The skin key.</param>
        /// <returns></returns>
        public string RenderScriptElementCollection(string skinKey)
        {
            var result = new StringBuilder();

            SkinTemplate skinTemplate = Templates.ItemOrNull(skinKey);
            if(skinTemplate != null && skinTemplate.Scripts != null)
            {
                string skinPath = GetSkinPath(skinTemplate.TemplateFolder);
                if(CanScriptsBeMerged(skinTemplate))
                {
                    result.Append(RenderScriptElement(string.Format("{0}js.axd?name={1}", skinPath, skinKey)));
                }
                else
                {
                    foreach(Script script in skinTemplate.Scripts)
                    {
                        result.Append(RenderScriptElement(skinPath, script));
                    }
                }
            }
            return result.ToString();
        }

        public ScriptMergeMode GetScriptMergeMode(string skinName)
        {
            SkinTemplate skinTemplate = Templates.ItemOrNull(skinName);
            return skinTemplate.ScriptMergeMode;
        }

        public ICollection<string> GetScriptsToBeMerged(string skinName)
        {
            var scripts = new List<string>();

            SkinTemplate skinTemplate = Templates.ItemOrNull(skinName);

            if(skinTemplate != null && skinTemplate.Scripts != null)
            {
                if(CanScriptsBeMerged(skinTemplate))
                {
                    string skinPath = CreateStylePath(skinTemplate.TemplateFolder);
                    foreach(Script script in skinTemplate.Scripts)
                    {
                        if(script.Src.StartsWith("~"))
                        {
                            scripts.Add(HttpHelper.ExpandTildePath(script.Src));
                        }
                        else
                        {
                            scripts.Add(skinPath + script.Src);
                        }
                    }
                }
            }
            return scripts;
        }

        private static string CreateStylePath(string skinTemplateFolder)
        {
            string applicationPath = HttpContext.Current.Request.ApplicationPath;
            string path = string.Format("{0}/Skins/{1}/", (applicationPath == "/" ? String.Empty : applicationPath), skinTemplateFolder);
            return path;
        }

        public static bool CanScriptsBeMerged(SkinTemplate template)
        {
            if(!template.MergeScripts)
            {
                return false;
            }
            if(template.Scripts == null)
            {
                return false;
            }
            foreach(Script script in template.Scripts)
            {
                if(script.Src.Contains("?"))
                {
                    return false;
                }
                if(IsScriptRemote(script))
                {
                    return false;
                }
            }
            return true;
        }

        private static bool IsScriptRemote(Script script)
        {
            if(script.Src.StartsWith("http://") || script.Src.StartsWith("https://"))
            {
                return true;
            }
            return false;
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Web;
using System.Web.UI;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;

namespace Subtext.Framework.UI.Skinning
{
    public class SkinControlLoader : ISkinControlLoader
    {
        const string ControlLocationFormat = "~/Skins/{0}/Controls/{1}.ascx";
        const string SystemFolderName = "_System";
        const string ErrorControlName = "Error";

        public SkinControlLoader(IContainerControl container, SkinConfig skin)
        {
            Container = container;
            Skin = skin;
        }

        protected IContainerControl Container
        {
            get; 
            private set;
        }

        protected SkinConfig Skin
        {
            get;
            private set;
        }

        public Control LoadControl(string controlName)
        {
            var control = LoadControlFromSkin(controlName);
            if(control != null && control.ID != null)
            {
                control.ID = control.ID.Replace('.', '_');
            }
            return control;
        }

        Control LoadControlFromSkin(string controlName)
        {
            var result = GetLoadControlResult(Skin.TemplateFolder, controlName);
            if(result.SkinControl != null)
            {
                return result.SkinControl;
            }

            // short circuit for this specific exception.
            if(result.Exception is HttpParseException)
            {
                return GetErrorControl(new SkinControlLoadException(Resources.SkinControlLoadException_Message, result.ControlPath, result.Exception));
            }
            
            // Fallback
            var fallBack = GetLoadControlResult(SystemFolderName, controlName);
            if(fallBack.SkinControl != null)
            {
                return fallBack.SkinControl;
            }

            // Need to return the original control path and exception.
            return GetErrorControl(new SkinControlLoadException(Resources.SkinControlLoadException_Message, result.ControlPath, result.Exception));
        }

        private Control GetErrorControl(SkinControlLoadException exception)
        {
            var result = GetLoadControlResult(SystemFolderName, ErrorControlName);
            Debug.Assert(result != null, "The result should never be null");
            var control = result.SkinControl;
            if(control == null)
            {
                throw new InvalidOperationException("The system Error skin control is missing. Did you delete it by mistake? It should be located at '" + result.ControlPath + "'");
            }
            
            var errorControl = result.SkinControl as IErrorControl;
            if(errorControl != null)
            {
                errorControl.Exception = exception;
            }
            return control;
        }

        private SkinControlLoadResult GetLoadControlResult(string folderName, string controlName)
        {
            string controlPath = string.Format(ControlLocationFormat, folderName, controlName);
            try
            {
                var control = Container.LoadControl(controlPath);
                return new SkinControlLoadResult(controlPath, control, null);
            }
            catch(Exception e)
            {
                return new SkinControlLoadResult(controlPath, null, e);
            }
        }
    }
}
ï»¿using System;

namespace Subtext.Framework.UI.Skinning
{
    public class SkinControlLoadException : Exception
    {
        public SkinControlLoadException(string message, string controlPath, Exception exception) : base(message, exception)
        {
            ControlPath = controlPath;
        }

        public string ControlPath { get; private set; }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI;

namespace Subtext.Framework.UI.Skinning
{
    public class SkinControlLoadResult
    {
        public SkinControlLoadResult(string controlPath, Control control, Exception exception)
        {
            SkinControl = control;
            ControlPath = controlPath;
            Exception = exception;
        }

        public Control SkinControl { get; private set; }
        public string ControlPath { get; private set; }
        public Exception Exception { get; private set; }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security;
using System.Web;
using System.Web.Hosting;
using System.Xml.Serialization;
using Subtext.Framework.Util;

namespace Subtext.Framework.UI.Skinning
{
    public class SkinEngine
    {
        const string RootSkinsVirtualPath = "~/skins"; //Does this need to be configurable? Probably not for now.
        IDictionary<string, SkinTemplate> _mobileTemplates;
        IDictionary<string, SkinTemplate> _templates;

        public SkinEngine() : this(HostingEnvironment.VirtualPathProvider)
        {
        }

        public SkinEngine(VirtualPathProvider vpp)
        {
            VirtualPathProvider = vpp;
        }

        protected VirtualPathProvider VirtualPathProvider { get; private set; }

        public IDictionary<string, SkinTemplate> GetSkinTemplates(bool mobile)
        {
            IDictionary<string, SkinTemplate> allTemplates = mobile ? _mobileTemplates : _templates;
            if(allTemplates == null)
            {
                IEnumerable<SkinTemplate> allTemplateConfigs;
                try
                {
                    // Full trust can use VirtualPathProvider
                    VirtualDirectory skinsDirectory = VirtualPathProvider.GetDirectory(RootSkinsVirtualPath);

                    allTemplateConfigs =
                        from dir in skinsDirectory.Directories.OfType<VirtualDirectory>()
                        where !dir.Name.StartsWith("_") && !dir.Name.StartsWith(".")
                        let templates = GetSkinTemplatesFromDir(dir)
                        from template in templates
                        select template;

                    // The ToDictionary call has to be inside each try/catch block
                    // because it's the ToDictionary that actually executes the code
                    // that causes the SecurityException to be thrown. (IEnumerable
                    // is deferred until the enumeration happens). As such, you'll
                    // see this duplicated below in the catch block.
                    allTemplates = (from template in allTemplateConfigs
                                    where ((template.MobileSupport > MobileSupport.None && mobile)
                                           || (template.MobileSupport < MobileSupport.MobileOnly && !mobile))
                                    select template).ToDictionary(t => t.SkinKey, StringComparer.OrdinalIgnoreCase);

                }
                catch (SecurityException)
                {
                    // Partial trust has to use the filesystem directly
                    var skinsDir = new DirectoryInfo
                        (AppDomain.CurrentDomain.BaseDirectory
                        + Path.DirectorySeparatorChar
                        + "skins"
                        );

                    allTemplateConfigs =
                        from dir in skinsDir.GetDirectories()
                        where !dir.Name.StartsWith("_") && !dir.Name.StartsWith(".")
                        let templates = GetSkinTemplatesFromDir(dir)
                        from template in templates
                        select template;

                    allTemplates = (from template in allTemplateConfigs
                                    where ((template.MobileSupport > MobileSupport.None && mobile)
                                           || (template.MobileSupport < MobileSupport.MobileOnly && !mobile))
                                    select template).ToDictionary(t => t.SkinKey, StringComparer.OrdinalIgnoreCase);
                }

                if(!mobile)
                {
                    _templates = allTemplates;
                }
                else
                {
                    _mobileTemplates = allTemplates;
                }
            }
            return allTemplates;
        }

        private IEnumerable<SkinTemplate> GetSkinTemplatesFromDir(VirtualFileBase virtualDirectory)
        {
            string skinConfigPath = string.Format("{0}/{1}/skin.config", RootSkinsVirtualPath, virtualDirectory.Name);

            if(VirtualPathProvider.FileExists(skinConfigPath))
            {
                IEnumerable<SkinTemplate> deserializedTemplates = GetSkinTemplates(VirtualPathProvider, skinConfigPath);
                deserializedTemplates.ForEach(t => t.TemplateFolder = virtualDirectory.Name);
                return deserializedTemplates;
            }
            return new[] {new SkinTemplate {Name = virtualDirectory.Name, TemplateFolder = virtualDirectory.Name}};
        }

        private IEnumerable<SkinTemplate> GetSkinTemplatesFromDir(DirectoryInfo directory)
        {
            string skinConfigPath = directory.FullName + Path.DirectorySeparatorChar + "skin.config";

            if (File.Exists(skinConfigPath))
            {
                IEnumerable<SkinTemplate> deserializedTemplates = GetSkinTemplates(skinConfigPath);
                deserializedTemplates.ForEach(t => t.TemplateFolder = directory.Name);
                return deserializedTemplates;
            }
            return new[] { new SkinTemplate { Name = directory.Name, TemplateFolder = directory.Name } };
        }

        private static IEnumerable<SkinTemplate> GetSkinTemplates(VirtualPathProvider virtualPathProvider, string path)
        {
            VirtualFile virtualConfigFile = virtualPathProvider.GetFile(path);

            using(Stream configStream = virtualConfigFile.Open())
            {
                var templates = SerializationHelper.Load<SkinTemplates>(configStream);
                return templates.Templates;
            }
        }

        private static IEnumerable<SkinTemplate> GetSkinTemplates(string path)
        {
            var configFile = new FileInfo(path);

            using (Stream configStream = configFile.OpenRead())
            {
                var templates = SerializationHelper.Load<SkinTemplates>(configStream);
                return templates.Templates;
            }
        }

        public class SkinTemplates
        {
            [XmlElement("SkinTemplate")]
            public SkinTemplate[] Templates { get; set; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Xml.Serialization;

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Summary description for SkinTemplate.
    /// </summary>
    [Serializable]
    public class SkinTemplate
    {
        public static readonly SkinTemplate Empty = new SkinTemplate {Name = "None"};

        public SkinTemplate()
        {
            MobileSupport = MobileSupport.None;
        }

        /// <summary>
        /// This is the folder that contains the template files (*.ascx) 
        /// for the current skin.
        /// </summary>
        [XmlAttribute]
        public string TemplateFolder { get; set; }

        [XmlAttribute]
        public MobileSupport MobileSupport { get; set; }

        /// <summary>
        /// Gets or sets the stylesheet for this Skin.  Remember, 
        /// every skin template folder should include a "style.css" 
        /// file that is rendered by default, unless ExcludeDefaultStyle is set to true.
        /// </summary>
        /// <remarks>
        /// This property makes it possible to have multiple skins 
        /// use the same template folder.
        /// </remarks>
        /// <value>The secondary CSS.</value>
        [XmlAttribute]
        public string StyleSheet { get; set; }

        /// <summary>
        /// Exclude the the default style.css from being rendered in the skin.
        /// </summary>
        /// <value>Whether to exclude the default style.css or not.</value>
        [XmlAttribute]
        public bool ExcludeDefaultStyle { get; set; }

        /// <summary>
        /// Specifies the order in which the styles are rendered inside the skin.
        /// </summary>
        /// <value>The styles merge mode.</value>
        [XmlAttribute]
        public StyleMergeMode StyleMergeMode { get; set; }

        /// <summary>
        /// How to merge all scripts into one.
        /// </summary>
        /// <remarks>
        /// Even if set to None, if the list of scripts is unsafe (remote scripts or scripts with parameters)
        /// the scripts are not merged.
        /// </remarks>
        /// <value>The script merge mode.</value>
        [XmlAttribute]
        public ScriptMergeMode ScriptMergeMode { get; set; }

        /// <summary>
        /// Whether or not to merge all scripts into one.
        /// </summary>
        [XmlIgnore]
        public bool MergeScripts
        {
            get { return ScriptMergeMode != ScriptMergeMode.DontMerge; }
        }


        /// <summary>
        /// Whether or not this skin template has a secondary skin css file.
        /// </summary>
        [XmlIgnore]
        public bool HasSkinStylesheet
        {
            get { return (StyleSheet != null && StyleSheet.Trim().Length > 0); }
        }

        /// <summary>
        /// Gets the name of the skin as will be displayed in the 
        /// drop-down list in the admin section.
        /// </summary>
        [XmlAttribute]
        public string Name { get; set; }

        /// <summary>
        /// A key representing this particular skin.  A Skin 
        /// is really a combination of the TemplateFolder and 
        /// the Stylesheet specified.
        /// </summary>
        [XmlIgnore]
        public string SkinKey
        {
            get
            {
                return
                    (TemplateFolder + (!string.IsNullOrEmpty(StyleSheet) ? "-" + StyleSheet : string.Empty)).
                        ToUpper(CultureInfo.InvariantCulture);
            }
        }

        /// <summary>
        /// Collection of <code>script</code> elements, declared for the skin.
        /// </summary>
        [XmlArray("Scripts")]
        public Script[] Scripts { get; set; }

        /// <summary>
        /// Collection of stylesheet elements declared for the skin.
        /// </summary>
        [XmlArray("Styles")]
        public Style[] Styles { get; set; }
    }

    public enum MobileSupport
    {
        /// <summary>This skin does not work on mobile devices</summary>
        None = 0,
        /// <summary>This skin works for both browsers and mobile devices</summary>
        Supported = 1,
        /// <summary>This skin is only suitable for mobile devices</summary>
        MobileOnly = 2,
    }

    public enum ScriptMergeMode
    {
        /// <summary>
        /// No merging of JS files
        /// </summary>
        DontMerge = 0,
        /// <summary>
        /// Merge the js scripts
        /// </summary>
        Merge = 1
    }

    public enum StyleMergeMode
    {
        /// <summary>
        /// No merging of CSS files
        /// </summary>
        None = 0,
        /// <summary>
        /// The merged css will be rendered after the ones that cannot be merged
        /// </summary>
        /// <remarks>
        /// The order will be:
        /// <list type="ordered">
        /// <item>All not mergeable files (with title, media and condition)</item>
        /// <item>All mergeable styles inside the skin definition</item>
        /// <item>style.css (which is the main css file for the skin)</item>
        /// <item>secondary css for the skin</item>
        /// <item>custom css (the one defined in the admin)</item>
        /// </list>
        /// </remarks>
        MergedAfter = 1,
        /// <summary>
        /// The merged css will be rendered before the ones that cannot be merged
        /// </summary>
        /// <remarks>
        /// The order will be:
        /// <list type="ordered">
        /// <item>All mergeable styles inside the skin definition</item>
        /// <item>style.css (which is the main css file for the skin)</item>
        /// <item>secondary css for the skin</item>
        /// <item>All not mergeable files (with title, media and condition)</item>
        /// <item>custom css (the one defined in the admin)</item>
        /// </list>
        /// </remarks>
        MergedFirst = 2
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Declaration of a <code>style</code> element in the skin. Supports the capability 
    /// to specify css stylesheet includes in the <code>head</code> element of the page.
    /// </summary>
    [Serializable]
    public class Style
    {
        /// <summary>
        /// Location of the script. Specified as relative to the skin directory
        /// </summary>
        [XmlAttribute("href")]
        public string Href { get; set; }

        /// <summary>
        /// Title of the styesheet.
        /// </summary>
        [XmlAttribute("title")]
        public string Title { get; set; }

        /// <summary>
        /// Media for the stylesheet.  Can be a comma delimited list.
        /// </summary>
        /// <remarks>
        /// Allowed media... aural, braille, emboss, handheld, print, projection 
        /// screen, tty, tv
        /// </remarks>
        [XmlAttribute("media")]
        public string Media { get; set; }

        /// <summary>
        /// Adds a conditional comment around this stylesheet declaration. 
        /// Note that conditional comments only work in IE on Windows.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This property should only set the conditional statement. For example, 
        /// a proper value would be "if IE" and not "[if IE]".
        /// </para>
        /// <para>
        /// For more information, check out http://www.quirksmode.org/css/condcom.html
        /// </para>
        /// </remarks>
        [XmlAttribute("conditional")]
        public string Conditional { get; set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.UI.Skinning
{
    public class StyleDefinition : IEquatable<StyleDefinition>
    {
        public StyleDefinition()
        {
            Media = string.Empty;
        }

        public StyleDefinition(string href)
        {
            Href = href;
        }

        public StyleDefinition(string href, string media) : this(href)
        {
            Media = media;
        }

        public string Href { get; set; }

        public string Media { get; set; }

        public bool Equals(StyleDefinition styleDefinition)
        {
            if(styleDefinition == null)
            {
                return false;
            }
            return Equals(Href, styleDefinition.Href) && Equals(Media, styleDefinition.Media);
        }

        public override string ToString()
        {
            return string.Format("Href: {0}, Media: {1}", Href, Media);
        }

        public override bool Equals(object obj)
        {
            if(ReferenceEquals(this, obj))
            {
                return true;
            }
            return Equals(obj as StyleDefinition);
        }

        public override int GetHashCode()
        {
            return Href.GetHashCode() + 29 * Media.GetHashCode();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Web;
using Subtext.Framework.Web;

namespace Subtext.Framework.UI.Skinning
{
    /// <summary>
    /// Provides rendering facilities for stylesheet elements in the head element of the page
    /// </summary>
    public class StyleSheetElementCollectionRenderer
    {
        private readonly SkinEngine _skinEngine;

        public StyleSheetElementCollectionRenderer(SkinEngine skinEngine)
        {
            _skinEngine = skinEngine;
        }

        private IDictionary<string, SkinTemplate> Templates
        {
            get
            {
                var templates = _templates;
                if(templates == null)
                {
                    templates = _skinEngine.GetSkinTemplates(false /* mobile */);
                    _templates = templates;
                }
                return templates;
            }
        }
        IDictionary<string, SkinTemplate> _templates;


        private static string RenderStyleAttribute(string attributeName, string attributeValue)
        {
            return attributeValue != null ? string.Format(" {0}=\"{1}\"", attributeName, attributeValue) : String.Empty;
        }

        private static string RenderStyleElement(string skinPath, Style style)
        {
            return RenderStyleElement(skinPath, style, string.Empty, string.Empty);
        }

        private static string RenderStyleElement(string skinPath, string cssFilename)
        {
            string element = string.Empty;
            element += "<link";
            element +=
                string.Format("{0}{1}{2} />{3}", RenderStyleAttribute("type", "text/css"), RenderStyleAttribute("rel", "stylesheet"), RenderStyleAttribute("href", skinPath + cssFilename), Environment.NewLine);

            return element;
        }

        private static string RenderStyleElement(string skinPath, Style style, string skinName, string cssRequestParam)
        {
            string element = string.Empty;

            if(!String.IsNullOrEmpty(style.Conditional))
            {
                element = string.Format(CultureInfo.InvariantCulture, "<!--[{0}]>{1}", style.Conditional,
                                        Environment.NewLine);
            }

            element += "<link";
            if(!string.IsNullOrEmpty(style.Media) &&
               !style.Media.Equals("all", StringComparison.OrdinalIgnoreCase))
            {
                element += RenderStyleAttribute("media", style.Media);
            }

            element +=
                RenderStyleAttribute("type", "text/css") +
                RenderStyleAttribute("rel", "stylesheet") +
                RenderStyleAttribute("title", style.Title);

            if(string.IsNullOrEmpty(skinName))
            {
                element +=
                    string.Format("{0} />{1}", RenderStyleAttribute("href", GetStylesheetHrefPath(skinPath, style)), Environment.NewLine);
            }
            else
            {
                element +=
                    string.Format("{0} />{1}", RenderStyleAttribute("href", GetStylesheetHrefPath(skinPath, style, skinName, cssRequestParam)), Environment.NewLine);
            }

            if(!String.IsNullOrEmpty(style.Conditional))
            {
                element += string.Format("<![endif]-->{0}", Environment.NewLine);
            }

            return element;
        }


        /// <summary>
        /// Gets the stylesheet href path.
        /// </summary>
        /// <param name="skinPath">The skin path.</param>
        /// <param name="style">The style.</param>
        /// <returns></returns>
        public static string GetStylesheetHrefPath(string skinPath, Style style)
        {
            if(style.Href.StartsWith("~"))
            {
                return HttpHelper.ExpandTildePath(style.Href);
            }
            return style.Href.StartsWith("/") || style.Href.StartsWith("http://") || style.Href.StartsWith("https://")
                       ? style.Href
                       : skinPath + style.Href;
        }

        /// <summary>
        /// Gets the stylesheet href path.
        /// </summary>
        /// <param name="skinName">The skin name as in the key.</param>
        /// <param name="skinPath">The skin path.</param>
        /// <param name="style">The style.</param>
        /// <param name="cssRequestParam">The parameters used to request the css via the css handler.</param>
        /// <returns></returns>
        public static string GetStylesheetHrefPath(string skinPath, Style style, string skinName, string cssRequestParam)
        {
            if(IsStyleRemote(style))
            {
                return style.Href;
            }
            return string.Format("{0}css.axd?name={1}&{2}", skinPath, skinName, cssRequestParam);
        }

        private static string CreateStylePath(string skinTemplateFolder)
        {
            string applicationPath = HttpContext.Current.Request.ApplicationPath;
            string path = string.Format("{0}/Skins/{1}/", (applicationPath == "/" ? String.Empty : applicationPath), skinTemplateFolder);
            return path;
        }


        public string RenderStyleElementCollection(string skinName)
        {
            SkinTemplate skinTemplate = Templates.ItemOrNull(skinName);
            return RenderStyleElementCollection(skinName, skinTemplate);
        }

        public string RenderStyleElementCollection(string skinName, SkinTemplate skinTemplate)
        {
            var templateDefinedStyles = new StringBuilder();
            string finalStyleDefinition = string.Empty;

            var addedStyle = new List<string>();

            if(skinTemplate != null)
            {
                string skinPath = CreateStylePath(skinTemplate.TemplateFolder);

                // If skin doesn't want to be merged, just write plain css
                if(skinTemplate.StyleMergeMode == StyleMergeMode.None)
                {
                    if(skinTemplate.Styles != null)
                    {
                        foreach(Style style in skinTemplate.Styles)
                        {
                            templateDefinedStyles.Append(RenderStyleElement(skinPath, style));
                        }
                    }

                    if(!skinTemplate.ExcludeDefaultStyle)
                    {
                        templateDefinedStyles.Append(RenderStyleElement(skinPath, "style.css"));
                    }

                    if(skinTemplate.HasSkinStylesheet)
                    {
                        templateDefinedStyles.Append(RenderStyleElement(skinPath, skinTemplate.StyleSheet));
                    }

                    finalStyleDefinition = templateDefinedStyles.ToString();
                }
                else if(skinTemplate.StyleMergeMode == StyleMergeMode.MergedAfter ||
                        skinTemplate.StyleMergeMode == StyleMergeMode.MergedFirst)
                {
                    foreach(Style style in skinTemplate.Styles)
                    {
                        if(!CanStyleBeMerged(style))
                        {
                            string styleKey = BuildStyleKey(style);
                            if(!addedStyle.Contains(styleKey) || IsStyleRemote(style))
                            {
                                templateDefinedStyles.Append(RenderStyleElement(skinPath, style, skinName, styleKey));
                                addedStyle.Add(styleKey);
                            }
                        }
                    }

                    string mergedStyleLink = RenderStyleElement(skinPath, string.Format("css.axd?name={0}", skinName));
                    if(skinTemplate.StyleMergeMode == StyleMergeMode.MergedAfter)
                    {
                        finalStyleDefinition = templateDefinedStyles + mergedStyleLink;
                    }
                    else if(skinTemplate.StyleMergeMode == StyleMergeMode.MergedFirst)
                    {
                        finalStyleDefinition = mergedStyleLink + templateDefinedStyles;
                    }
                }
            }
            return Environment.NewLine + finalStyleDefinition;
        }


        private static string BuildStyleKey(Style style)
        {
            var keyBuilder = new StringBuilder();
            if(!String.IsNullOrEmpty(style.Media) && !style.Media.Equals("all", StringComparison.OrdinalIgnoreCase))
            {
                keyBuilder.AppendFormat("media={0}&", style.Media);
            }
            if(!String.IsNullOrEmpty(style.Title))
            {
                keyBuilder.AppendFormat("title={0}&", style.Title);
            }
            if(!String.IsNullOrEmpty(style.Conditional))
            {
                keyBuilder.AppendFormat("conditional={0}&", HttpUtility.UrlEncode(style.Conditional));
            }

            string key = keyBuilder.ToString();
            if(key.Length > 0)
            {
                return key.Substring(0, key.Length - 1);
            }
            return
                string.Empty;
        }

        public ICollection<StyleDefinition> GetStylesToBeMerged(string name)
        {
            return GetStylesToBeMerged(name, null, null, null);
        }

        public ICollection<StyleDefinition> GetStylesToBeMerged(string skinName, string media, string title,
                                                                string conditional)
        {
            bool normalCss = false;
            var styles = new List<StyleDefinition>();

            SkinTemplate skinTemplate = Templates.ItemOrNull(skinName);

            if((string.IsNullOrEmpty(media)) && string.IsNullOrEmpty(title) && string.IsNullOrEmpty(conditional))
            {
                normalCss = true;
            }

            if(skinTemplate != null)
            {
                string skinPath = CreateStylePath(skinTemplate.TemplateFolder);

                if(skinTemplate.Styles != null)
                {
                    foreach(Style style in skinTemplate.Styles)
                    {
                        if(normalCss)
                        {
                            if(CanStyleBeMerged(style))
                            {
                                string tmpHref;
                                if(style.Href.StartsWith("~"))
                                {
                                    tmpHref = HttpHelper.ExpandTildePath(style.Href);
                                }
                                else
                                {
                                    tmpHref = skinPath + style.Href;
                                }
                                styles.Add(new StyleDefinition(tmpHref, style.Media));
                            }
                        }
                        else
                        {
                            string tmpMedia = style.Media;
                            if(tmpMedia != null && tmpMedia.Equals("all"))
                            {
                                tmpMedia = null;
                            }
                            if(string.Compare(media, tmpMedia, StringComparison.InvariantCultureIgnoreCase) == 0 &&
                               string.Compare(title, style.Title, StringComparison.InvariantCultureIgnoreCase) == 0 &&
                               string.Compare(conditional, style.Conditional,
                                              StringComparison.InvariantCultureIgnoreCase) == 0)
                            {
                                string tmpHref;
                                if(style.Href.StartsWith("~"))
                                {
                                    tmpHref = HttpHelper.ExpandTildePath(style.Href);
                                }
                                else
                                {
                                    tmpHref = skinPath + style.Href;
                                }
                                styles.Add(new StyleDefinition(tmpHref, style.Media));
                            }
                        }
                    }
                }

                if(normalCss)
                {
                    //Main style
                    if(!skinTemplate.ExcludeDefaultStyle)
                    {
                        styles.Add(new StyleDefinition(skinPath + "style.css"));
                    }

                    //Secondary Style
                    if(skinTemplate.HasSkinStylesheet)
                    {
                        styles.Add(new StyleDefinition(skinPath + skinTemplate.StyleSheet));
                    }
                }
            }
            return styles;
        }

        public static bool CanStyleBeMerged(Style style)
        {
            if(!String.IsNullOrEmpty(style.Conditional))
            {
                return false;
            }
            if(!string.IsNullOrEmpty(style.Title))
            {
                return false;
            }
            if(IsStyleRemote(style))
            {
                return false;
            }
            return true;
        }

        private static bool IsStyleRemote(Style style)
        {
            if(style.Href.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
               style.Href.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Util
{
    public static class FileHelper
    {
        static readonly string[] ImageExtensions = {".jpg", ".jpeg", ".gif", ".png", ".bmp"};

        public static void EnsureDirectory(string directoryPath)
        {
            if(String.IsNullOrEmpty(directoryPath))
            {
                throw new ArgumentNullException("directoryPath");
            }

            string dir = Path.GetFullPath(directoryPath);
            if(!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }
        }

        public static void WriteBytesToFile(string destinationFilePath, byte[] data)
        {
            if(String.IsNullOrEmpty(destinationFilePath))
            {
                throw new ArgumentNullException("destinationFilePath");
            }

            if(!IsValidFilePath(destinationFilePath))
            {
                throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture,
                                                                  Resources.InvalidOperation_InvalidCharactersInFileName,
                                                                  destinationFilePath));
            }

            using(var stream = new FileStream(destinationFilePath, FileMode.Create))
            {
                using(var writer = new BinaryWriter(stream))
                {
                    writer.Write(data);
                }
            }
        }

        public static bool IsValidImageFilePath(string filePath)
        {
            return IsValidFilePath(filePath, ImageExtensions);
        }

        public static bool IsValidFilePath(string filePath)
        {
            char[] invalidChars = Path.GetInvalidPathChars();
            return !invalidChars.Any(c => filePath.Contains(c));
        }

        public static bool IsValidFilePath(string filePath, IEnumerable<string> extensions)
        {
            return IsValidFilePath(filePath) &&
                   extensions.Any(extension => filePath.EndsWith(extension, StringComparison.OrdinalIgnoreCase));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;

namespace Subtext.Framework.Util
{
    public static class GraphicsHelper
    {
        /// <summary>
        /// Returns an Image resized to the specified size.
        /// </summary>
        /// <param name="originalImage"></param>
        /// <param name="newSize"></param>
        /// <returns></returns>
        public static Image GetResizedImage(this Image originalImage, Size newSize)
        {
            Image resizedImage = new Bitmap(newSize.Width, newSize.Height, originalImage.PixelFormat);
            using(Graphics graphic = Graphics.FromImage(resizedImage))
            {
                graphic.CompositingQuality = CompositingQuality.HighQuality;
                graphic.SmoothingMode = SmoothingMode.HighQuality;
                graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                var thumbRectangle = new Rectangle(0, 0, newSize.Width, newSize.Height);
                graphic.DrawImage(originalImage, thumbRectangle);
            }
            return resizedImage;
        }

        public static Image FromFilePathAsUnindexedImage(string filePath)
        {
            Image originalImage = Image.FromFile(filePath);

            if((originalImage.PixelFormat & PixelFormat.Indexed) == 0)
            {
                return originalImage;
            }

            // Draw the index image to a new bitmap.  It will then be unindexed.
            Image unindexedImage = new Bitmap(originalImage.Width, originalImage.Height);
            using(Graphics graphics = Graphics.FromImage(unindexedImage))
            {
                graphics.DrawImageUnscaled(originalImage, 0, 0);
            }
            originalImage.Dispose();
            return unindexedImage;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Drawing;

namespace Subtext.Framework.Util
{
    public static class MathHelper
    {
        public static decimal GetAspectRatio(this Size size)
        {
            return GetAspectRatio(size.Width, size.Height);
        }

        public static decimal GetAspectRatio(int width, int height)
        {
            return (decimal)width / (decimal)height;
        }

        /// <summary>
        /// Returns a new size which would scale the original size to fit 
        /// within the specified maximum size while retaining its aspect 
        /// ratio.
        /// </summary>
        public static Size ScaleToFit(this Size original, int maxWidth, int maxHeight)
        {
            decimal aspectRatio = GetAspectRatio(maxWidth, maxHeight);

            decimal originalWidth = original.Width;
            decimal originalHeight = original.Height;

            if(originalWidth <= maxWidth && originalHeight <= maxHeight)
            {
                return original;
            }

            // determine the largest factor 
            decimal factor;
            if(original.GetAspectRatio() > aspectRatio)
            {
                factor = originalWidth / (decimal)maxWidth;
            }
            else
            {
                factor = originalHeight / (decimal)maxHeight;
            }

            int newWidth = Convert.ToInt32(originalWidth / factor);
            int newHeight = Convert.ToInt32(originalHeight / factor);

            return new Size(newWidth, newHeight);
        }

        /// <summary>
        /// Returns a new size which would scale the original size to fit 
        /// within the specified maximum size while retaining its aspect 
        /// ratio.
        /// </summary>
        public static Size ScaleToFit(this Size original, Size maxSize)
        {
            return original.ScaleToFit(maxSize.Width, maxSize.Height);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.Routing;

namespace Subtext.Framework.Util
{
    public static class RequestExtensions
    {
        public static DateTime GetDateFromRequest(this RequestContext requestContext)
        {
            var yearText = requestContext.RouteData.Values["year"] as string;
            var monthText = requestContext.RouteData.Values["month"] as string;
            string dayText = requestContext.RouteData.Values["day"] as string ?? "1";

            int year = Convert.ToInt32(yearText, CultureInfo.InvariantCulture);
            int month = Convert.ToInt32(monthText, CultureInfo.InvariantCulture);
            int day = Convert.ToInt32(dayText, CultureInfo.InvariantCulture);

            return new DateTime(year, month, day);
        }

        public static string GetSlugFromRequest(this RequestContext requestContext)
        {
            return requestContext.RouteData.Values["slug"] as string;
        }

        public static int? GetIdFromRequest(this RequestContext requestContext)
        {
            RouteValueDictionary routeValues = requestContext.RouteData.Values;
            int id;
            if(!routeValues.ContainsKey("id") ||
               !int.TryParse((string)routeValues["id"], out id))
            {
                return null;
            }
            return id;
        }

        public static string GetQueryFromRequest(this RequestContext requestContext)
        {
            return requestContext.HttpContext.Request.QueryString["q"];
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.IO;
using System.Reflection;
using System.Text;

namespace Subtext.Framework.Util
{
    public static class ResourceHelper
    {
        /// <summary>
        /// Unpacks an embedded resource into a Stream.  The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName">Name of the resource.</param>
        public static Stream UnpackEmbeddedResource(string resourceName)
        {
            Assembly assembly = typeof(ResourceHelper).Assembly;
            return assembly.GetManifestResourceStream(resourceName);
        }

        /// <summary>
        /// Unpacks an embedded resource as a string. The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName"></param>
        /// <param name="encoding">The path to write the file as.</param>
        public static string UnpackEmbeddedResource(string resourceName, Encoding encoding)
        {
            Stream stream = UnpackEmbeddedResource(resourceName);
            using(var reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Xml.Serialization;

namespace Subtext.Framework.Util
{
    /// <summary>
    /// Class with methods for saving and loading objects as 
    /// serialized instances.
    /// </summary>
    public static class SerializationHelper
    {
        /// <summary>
        /// Loads the specified type based on the specified stream.
        /// </summary>
        /// <param name="stream">stream containing the type.</param>
        /// <returns></returns>
        public static T Load<T>(Stream stream)
        {
            var serializer = new XmlSerializer(typeof(T));
            return (T)serializer.Deserialize(stream);
        }

        /// <summary>
        /// Serializes an object to a base64 encoded string.
        /// </summary>
        /// <param name="o"></param>
        /// <returns></returns>
        public static string SerializeToBase64String(object o)
        {
            var stream = new MemoryStream();
            var formatter = new BinaryFormatter();
            formatter.Serialize(stream, o);
            byte[] serialized = stream.ToArray();
            return Convert.ToBase64String(serialized);
        }

        /// <summary>
        /// Deserializes from base64 string.
        /// </summary>
        /// <param name="base64SerializedObject">The base64 serialized object.</param>
        /// <returns></returns>
        public static T DeserializeFromBase64String<T>(string base64SerializedObject)
        {
            byte[] serialized = Convert.FromBase64String(base64SerializedObject);
            var stream = new MemoryStream(serialized) {Position = 0};
            var formatter = new BinaryFormatter();
            object o = formatter.Deserialize(stream);
            return (T)o;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
// This class adapted from Rama Krishna Vavilala's Tag Cloud control article on 
// Code Project: http://www.codeproject.com/useritems/cloud.asp

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;

namespace Subtext.Framework.Util
{
    /// <summary>
    /// Statistical functions
    /// </summary>
    public static class Statistics
    {
        public static double Mean(this IEnumerable<double> values)
        {
            double sum = 0;
            int count = 0;

            foreach(double d in values)
            {
                sum += d;
                count++;
            }

            return sum / count;
        }

        public static double StandardDeviation(this IEnumerable<double> values, out double mean)
        {
            mean = values.Mean();
            double sumOfDiffSquares = 0;
            int count = 0;

            foreach(double d in values)
            {
                double diff = (d - mean);
                sumOfDiffSquares += diff * diff;
                count++;
            }

            return Math.Sqrt(sumOfDiffSquares / count);
        }

        public static double StandardDeviation<TValue>(this IEnumerable<TValue> values, out double mean)
        {
            var converted = new List<double>();
            foreach(TValue value in values)
            {
                converted.Add(Convert.ToDouble(value, CultureInfo.InvariantCulture));
            }
            return StandardDeviation(converted, out mean);
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Threading;
using log4net;
using Subtext.Framework.Logging;

namespace Subtext.Framework.Util
{
    public static class ThreadHelper
    {
        private readonly static ILog Log = new Log();

        public static bool FireAndForget(WaitCallback callback, string failureLogMessage)
        {
            return ThreadPool.QueueUserWorkItem(o => {
                try
                {
                    callback(o);
                }
                catch(Exception e)
                {
                    Log.Error(failureLogMessage, e);
                }
            });
        }
    }
}
#region Timezone code from DasBlog

/*This code was contributed by the DasBlog team */

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace Subtext.Framework.Util
{
    public static class TimeZones
    {
        private static readonly ReadOnlyCollection<TimeZoneInfo> _timeZones = ReadTimeZonesFromEmbeddedResource();

        private static ReadOnlyCollection<TimeZoneInfo> ReadTimeZonesFromEmbeddedResource()
        {
            Type timeZoneType = typeof(TimeZones);
            var timeZones = new List<TimeZoneInfo>();
            using(
                var rs =
                    new StreamReader(timeZoneType.Assembly.GetManifestResourceStream(timeZoneType.FullName + ".txt")))
            {
                while(!rs.EndOfStream)
                {
                    timeZones.Add(TimeZoneInfo.FromSerializedString(rs.ReadLine()));
                }
            }
            return new ReadOnlyCollection<TimeZoneInfo>(timeZones);
        }

        public static ReadOnlyCollection<TimeZoneInfo> GetTimeZones()
        {
            return _timeZones;
        }

        public static TimeZoneInfo GetById(this ReadOnlyCollection<TimeZoneInfo> timeZones, string timeZoneId)
        {
            return (from timeZone in timeZones
                    where timeZone.Id == timeZoneId
                    select timeZone).FirstOrDefault();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Infrastructure;

namespace Subtext.Framework.Util
{
    /// <summary>
    /// Class used to provide various transforms such as the 
    /// Emoticon transforms.
    /// </summary>
    public static class Transform
    {
        private static readonly ILog Log = new Log();

        /// <summary>
        /// Transforms emoticons into image references based on the 
        /// settings within the emoticons.txt file in the webroot.
        /// </summary>
        public static string EmoticonTransforms(ICache cache, string rootUrl, string formattedPost)
        {
            try
            {
                return EmoticonsTransforms(cache, rootUrl, formattedPost, GetTransformFilePath("emoticons.txt"));
            }
            catch(IOException ioe)
            {
                Log.Warn("Problem reading the emoticons.txt file", ioe);
                return formattedPost;
            }
            catch(ArgumentNullException e)
            {
                Log.Warn("Problem reading the emoticons.txt file", e);
                return formattedPost;
            }
        }

        public static string EmoticonsTransforms(ICache cache, string rootUrl, string formattedPost,
                                                 string emoticonsFilePath)
        {
            if(formattedPost == null)
            {
                throw new ArgumentNullException("formattedPost");
            }

            if(emoticonsFilePath == null)
            {
                throw new ArgumentNullException("emoticonsFilePath");
            }

            if(!File.Exists(emoticonsFilePath))
            {
                Log.Warn(
                    "Missing an emoticons.txt file in the webroot. Please download it from <a href=\"http://haacked.com/images/emoticons.zip\" title=\"Emoticons file\">here</a>.");
                return formattedPost;
            }

            IList<string> emoticonTxTable = LoadTransformFile(cache, emoticonsFilePath);
            return PerformUserTransforms(rootUrl, formattedPost, emoticonTxTable);
        }

        static string PerformUserTransforms(string rootUrl, string stringToTransform,
                                            IList<string> userDefinedTransforms)
        {
            if(userDefinedTransforms == null)
            {
                return stringToTransform;
            }

            int iLoop = 0;
            while(iLoop < userDefinedTransforms.Count)
            {
                // Special work for anchors
                stringToTransform = Regex.Replace(stringToTransform, userDefinedTransforms[iLoop],
                                                  string.Format(CultureInfo.InvariantCulture,
                                                                userDefinedTransforms[iLoop + 1], rootUrl),
                                                  RegexOptions.IgnoreCase | RegexOptions.Compiled |
                                                  RegexOptions.Multiline);

                iLoop += 2;
            }

            return stringToTransform;
        }

        private static string GetTransformFilePath(string filename)
        {
            if(String.IsNullOrEmpty(filename))
            {
                throw new ArgumentNullException("filename");
            }

            return HttpContext.Current.Request.MapPath(string.Format("~/{0}", filename));
        }

        public static IList<string> LoadTransformFile(ICache cache, string filePath)
        {
            if(cache == null)
            {
                throw new ArgumentNullException("cache");
            }

            if(filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }

            string cacheKey = string.Format("transformTable-{0}", Path.GetFileName(filePath));

            // read the transformation hashtable from the cache
            //
            var tranforms = cache[cacheKey] as IList<string>;

            if(tranforms == null)
            {
                tranforms = new List<string>();

                if(filePath.Length > 0)
                {
                    using(StreamReader sr = File.OpenText(filePath))
                    {
                        // Read through each set of lines in the text file
                        //
                        string line = sr.ReadLine();

                        while(line != null)
                        {
                            line = Regex.Escape(line);
                            string replaceLine = sr.ReadLine();

                            // make sure replaceLine != null
                            //
                            if(replaceLine == null)
                            {
                                break;
                            }

                            line = line.Replace("<CONTENTS>", "((.|\n)*?)");
                            line = line.Replace("<WORDBOUNDARY>", "\\b");
                            line = line.Replace("<", "&lt;");
                            line = line.Replace(">", "&gt;");
                            line = line.Replace("\"", "&quot;");

                            replaceLine = replaceLine.Replace("<CONTENTS>", "$1");

                            tranforms.Add(line);
                            tranforms.Add(replaceLine);

                            line = sr.ReadLine();
                        }
                    }

                    // slap the ArrayList into the cache and set its dependency to the transform file.
                    cache.Insert(cacheKey, tranforms, new CacheDependency(filePath));
                }
            }

            return tranforms;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.XPath;

namespace Subtext.Framework.Util
{
    public class XmlSerializerSectionHandler : IConfigurationSectionHandler
    {
        public object Create(object parent, object configContext, XmlNode section)
        {
            XPathNavigator nav = section.CreateNavigator();
            var typename = (string)nav.Evaluate("string(@type)");
            Type t = Type.GetType(typename);
            var ser = new XmlSerializer(t);
            return ser.Deserialize(new XmlNodeReader(section));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Notes

///////////////////////////////////////////////////////////////////////////////////////////////////
// The code in this file is freely distributable.
// 
// ASPNetWeblog is not responsible for, shall have no liability for 
// and disclaims all warranties whatsoever, expressed or implied, related to this code,
// including without limitation any warranties related to performance, security, stability,
// or non-infringement of title of the control.
// 
// If you have any questions, comments or concerns, please contact
// Scott Watermasysk, Scott@TripleASP.Net.
// 
// For more information on this control, updates, and other tools to integrate blogging 
// into your existing applications, please visit, http://aspnetweblog.com
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;

namespace Subtext.Framework
{
    /// <summary>
    /// Class used to manage version information regarding 
    /// Subtext.
    /// </summary>
    public static class VersionInfo
    {
        public static readonly Uri HomePageUrl = new Uri("http://SubtextProject.com/");
        static Version _version;

        /// <summary>
        /// Gets the version of the Subtext assembly.
        /// </summary>
        /// <value></value>
        public static Version CurrentAssemblyVersion
        {
            get
            {
                if(_version == null)
                {
                    _version = typeof(VersionInfo).Assembly.GetName().Version;
                }
                return _version;
            }
        }

        /// <summary>
        /// Gets version information that is formatted for display.
        /// </summary>
        /// <value></value>
        public static string VersionDisplayText
        {
            get { return string.Format(CultureInfo.InvariantCulture, "Subtext Version {0}", CurrentAssemblyVersion); }
        }

        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value></value>
        public static string UserAgent
        {
            get { return string.Format(CultureInfo.InvariantCulture, "{0} - {1}", VersionDisplayText, HomePageUrl); }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Net;
using System.Web;

namespace Subtext.Extensibility.Web
{
    /// <summary>
    /// An abstract base Http Handler for all your
    /// <see cref="IHttpHandler"/> needs.
    /// </summary>
    /// <remarks>
    /// <p>
    /// For the most part, classes that inherit from this
    /// class do not need to override <see cref="ProcessRequest"/>.
    /// Instead implement the abstract methods and
    /// properties and put the main business logic
    /// in the <see cref="HandleRequest"/>.
    /// </p>
    /// <p>
    /// HandleRequest should respond with a StatusCode of
    /// 200 if everything goes well, otherwise use one of
    /// the various "Respond" methods to generate an appropriate
    /// response code.  Or use the HttpStatusCode enumeration
    /// if none of these apply.
    /// </p>
    /// </remarks>
    public abstract class BaseHttpHandler : IHttpHandler
    {
        public virtual bool IsReusable
        {
            get { return false; }
        }

        /// <summary>
        /// Gets a value indicating whether this handler
        /// requires users to be authenticated.
        /// </summary>
        /// <value>
        ///    <c>true</c> if authentication is required
        ///    otherwise, <c>false</c>.
        /// </value>
        protected abstract bool RequiresAuthentication { get; }

        /// <summary>
        /// Gets the content MIME type.
        /// </summary>
        /// <value></value>
        protected abstract string ContentMimeType { get; }

        #region IHttpHandler Members

        /// <summary>
        /// Processs the incoming HTTP request.
        /// </summary>
        /// <param name="context">Context.</param>
        void IHttpHandler.ProcessRequest(HttpContext context)
        {
            SetResponseCachePolicy(context.Response.Cache);

            if(!ValidateParameters(context))
            {
                RespondInternalError(context);
                return;
            }

            if(RequiresAuthentication && !context.User.Identity.IsAuthenticated)
            {
                RespondForbidden(context);
                return;
            }

            context.Response.ContentType = ContentMimeType;

            HandleRequest(context);
        }

        /// <summary>
        /// Indicates whether or not this handler can be
        /// reused between successive requests.
        /// </summary>
        /// <remarks>
        /// Return true if this handler does not maintain
        /// any state (generally a good practice).  Otherwise
        /// returns false.
        /// </remarks>
        bool IHttpHandler.IsReusable
        {
            get { return IsReusable; }
        }

        #endregion

        /// <summary>
        /// Handles the request.  This is where you put your
        /// business logic.
        /// </summary>
        /// <remarks>
        /// <p>This method should result in a call to one 
        /// (or more) of the following methods:</p>
        /// <p><code>context.Response.BinaryWrite();</code></p>
        /// <p><code>context.Response.Write();</code></p>
        /// <p><code>context.Response.WriteFile();</code></p>
        /// <p>
        /// <code>
        /// someStream.Save(context.Response.OutputStream);
        /// </code>
        /// </p>
        /// <p>etc...</p>
        /// <p>
        /// If you want a download box to show up with a 
        /// pre-populated filename, add this call here 
        /// (supplying a real filename).
        /// </p>
        /// <p>
        /// </p>
        /// <code>Response.AddHeader("Content-Disposition"
        /// , "attachment; filename=\"" + Filename + "\"");</code>
        /// </p>
        /// </remarks>
        /// <param name="context">Context.</param>
        protected abstract void HandleRequest(HttpContext context);

        /// <summary>
        /// Validates the parameters.  Inheriting classes must
        /// implement this and return true if the parameters are
        /// valid, otherwise false.
        /// </summary>
        /// <param name="context">Context.</param>
        /// <returns><c>true</c> if the parameters are valid,
        /// otherwise <c>false</c></returns>
        protected abstract bool ValidateParameters(HttpContext context);

        /// <summary>
        /// Sets the cache policy.  Unless a handler overrides
        /// this method, handlers will not allow a respons to be
        /// cached.
        /// </summary>
        /// <param name="cache">Cache.</param>
        protected virtual void SetResponseCachePolicy(HttpCachePolicy cache)
        {
            cache.SetCacheability(HttpCacheability.NoCache);
            cache.SetNoStore();
            cache.SetExpires(DateTime.MinValue);
        }

        /// <summary>
        /// Helper method used to Respond to the request
        /// that the file was not found.
        /// </summary>
        /// <param name="context">Context.</param>
        protected void RespondFileNotFound(HttpContext context)
        {
            context.Response.StatusCode = (int)HttpStatusCode.NotFound;
            context.Response.End();
        }

        /// <summary>
        /// Helper method used to Respond to the request
        /// that an error occurred in processing the request.
        /// </summary>
        /// <param name="context">Context.</param>
        protected void RespondInternalError(HttpContext context)
        {
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            context.Response.End();
        }

        /// <summary>
        /// Helper method used to Respond to the request
        /// that the request in attempting to access a resource
        /// that the user does not have access to.
        /// </summary>
        /// <param name="context">Context.</param>
        protected void RespondForbidden(HttpContext context)
        {
            context.Response.StatusCode = (int)HttpStatusCode.Forbidden;
            context.Response.End();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Web;
using Subtext.Extensibility.Web;
using Subtext.Framework.UI.Skinning;

namespace Subtext.Framework.Web.Handlers
{
    public class CssHandler : BaseHttpHandler
    {
        private static readonly StyleSheetElementCollectionRenderer StyleRenderer =
            new StyleSheetElementCollectionRenderer(new SkinEngine());

        protected new bool IsReusable
        {
            get { return false; }
        }

        protected override bool RequiresAuthentication
        {
            get { return false; }
        }

        protected override string ContentMimeType
        {
            get { return "text/css"; }
        }

        protected override void HandleRequest(HttpContext context)
        {
            context.Response.ContentEncoding = Encoding.UTF8;

            string skinName = context.Request.Params["name"];
            string skinMedia = context.Request.Params["media"];
            string skinTitle = context.Request.Params["title"];
            string skinConditional = context.Request.Params["conditional"];

            var styles =
                (List<StyleDefinition>)
                StyleRenderer.GetStylesToBeMerged(skinName, skinMedia, skinTitle, skinConditional);

            //Append all styles into one file

            context.Response.Write(string.Format("/*{0}", Environment.NewLine));
            foreach(StyleDefinition style in styles)
            {
                context.Response.Write(style + Environment.NewLine);
            }
            context.Response.Write(string.Format("*/{0}", Environment.NewLine));

            foreach(StyleDefinition style in styles)
            {
                context.Response.Write(Environment.NewLine + "/* " + style + " */" + Environment.NewLine);
                string path = context.Server.MapPath(style.Href);
                if(File.Exists(path))
                {
                    string cssFile = File.ReadAllText(path);
                    // Normalize path.
                    cssFile = cssFile.Replace("url(../images", "url(../../images");
                    cssFile = cssFile.Replace("url(../Images", "url(../../Images");
                    if(!String.IsNullOrEmpty(style.Media) && styles.Count > 1)
                    {
                        context.Response.Write("@media " + style.Media + "{\r\n");
                        context.Response.Write(cssFile);
                        context.Response.Write("\r\n}");
                    }
                    else
                    {
                        context.Response.Write(cssFile);
                    }
                }
                else
                {
                    context.Response.Write(Environment.NewLine + "/* CSS file at " + path +
                                           " doesn't exist so cannot be included in the merged CSS file. */" +
                                           Environment.NewLine);
                }
            }

            SetHeaders(styles, context);
        }


        private static void SetHeaders(IEnumerable<StyleDefinition> styles, HttpContext context)
        {
            foreach(StyleDefinition style in styles)
            {
                context.Response.AddFileDependency(context.Server.MapPath(style.Href));
            }

            context.Response.Cache.VaryByParams["name"] = true;
            context.Response.Cache.VaryByParams["media"] = true;
            context.Response.Cache.VaryByParams["title"] = true;
            context.Response.Cache.VaryByParams["conditional"] = true;

            context.Response.Cache.SetValidUntilExpires(true);
            // Client-side caching
            context.Response.Cache.SetLastModifiedFromFileDependencies();
            context.Response.Cache.SetCacheability(HttpCacheability.Public);
        }

        protected override void SetResponseCachePolicy(HttpCachePolicy cache)
        {
            return;
        }

        protected override bool ValidateParameters(HttpContext context)
        {
            string skinName = context.Request.Params["name"];
            if(String.IsNullOrEmpty(skinName))
            {
                return false;
            }
            return true;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Web;
using Subtext.Extensibility.Web;
using Subtext.Framework.UI.Skinning;

namespace Subtext.Framework.Web.Handlers
{
    public class JsHandler : BaseHttpHandler
    {
        private static readonly ScriptElementCollectionRenderer ScriptRenderer =
            new ScriptElementCollectionRenderer(new SkinEngine());

        public override bool IsReusable
        {
            get { return false; }
        }

        protected override bool RequiresAuthentication
        {
            get { return false; }
        }

        protected override string ContentMimeType
        {
            get { return "text/javascript"; }
        }

        protected override void HandleRequest(HttpContext context)
        {
            context.Response.ContentEncoding = Encoding.UTF8;

            string skinName = context.Request.Params["name"];

            var scripts = (List<string>)ScriptRenderer.GetScriptsToBeMerged(skinName);

            //Append all styles into one file

            context.Response.Write("/*" + Environment.NewLine);
            foreach(string script in scripts)
            {
                context.Response.Write(script + Environment.NewLine);
            }
            context.Response.Write("*/" + Environment.NewLine);

            foreach(string script in scripts)
            {
                context.Response.Write(Environment.NewLine + "/* " + script + " */" + Environment.NewLine);
                string path = context.Server.MapPath(script);
                if(File.Exists(path))
                {
                    string jsFile = File.ReadAllText(context.Server.MapPath(script));
                    context.Response.Write(jsFile);
                }
                else
                {
                    context.Response.Write(Environment.NewLine + "/* JS file at " + path +
                                           " doesn't exist so cannot be included in the merged JS file. */" +
                                           Environment.NewLine);
                }
            }

            SetHeaders(scripts, context);
        }


        private static void SetHeaders(IEnumerable<string> styles, HttpContext context)
        {
            foreach(string style in styles)
            {
                context.Response.AddFileDependency(context.Server.MapPath(style));
            }

            context.Response.Cache.VaryByParams["name"] = true;

            context.Response.Cache.SetValidUntilExpires(true);
            // Client-side caching
            context.Response.Cache.SetLastModifiedFromFileDependencies();
            context.Response.Cache.SetCacheability(HttpCacheability.Public);
        }


        protected override void SetResponseCachePolicy(HttpCachePolicy cache)
        {
            return;
        }

        protected override bool ValidateParameters(HttpContext context)
        {
            string skinName = context.Request.Params["name"];
            if(String.IsNullOrEmpty(skinName))
            {
                return false;
            }
            return true;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.Text;
using System.Web;
using System.Xml;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Web.Handlers
{
    /// <summary>
    /// HttpHandler for rendering the Really Simple Syndication (RSD) Format.
    /// </summary>
    /// <remarks>
    /// The specs for RSD can be found here. http://cyber.law.harvard.edu/blogs/gems/tech/rsd.html
    /// </remarks>
    public class RsdHandler : SubtextHttpHandler
    {
        public RsdHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        /// <summary>
        /// Handles the request.  This is where you put your
        /// business logic.
        /// </summary>
        /// <remarks>
        /// <p>This method should result in a call to one 
        /// (or more) of the following methods:</p>
        /// <p><code>context.Response.BinaryWrite();</code></p>
        /// <p><code>context.Response.Write();</code></p>
        /// <p><code>context.Response.WriteFile();</code></p>
        /// <p>
        /// <code>
        /// someStream.Save(context.Response.OutputStream);
        /// </code>
        /// </p>
        /// <p>etc...</p>
        /// <p>
        /// If you want a download box to show up with a 
        /// pre-populated filename, add this call here 
        /// (supplying a real filename).
        /// </p>
        /// <p>
        /// </p>
        /// <code>Response.AddHeader("Content-Disposition"
        /// , "attachment; filename=\"" + Filename + "\"");</code>
        /// </p>
        /// </remarks>
        public override void ProcessRequest()
        {
            if(Blog == null)
            {
                return;
            }
            HttpResponseBase response = SubtextContext.HttpContext.Response;
            response.Charset = "utf-8";
            response.ContentType = "text/xml";
            var settings = new XmlWriterSettings {Indent = true, IndentChars = "  ", Encoding = Encoding.UTF8};
            XmlWriter writer = XmlWriter.Create(response.OutputStream, settings);
            WriteRsd(writer, Blog, Url);
        }

        /// <summary>
        /// Writes the RSD for the specified blog into the XmlWriter.
        /// </summary>
        public void WriteRsd(XmlWriter writer, Blog blog, UrlHelper urlHelper)
        {
            writer.WriteStartDocument();
            writer.WriteStartElement("rsd", "http://archipelago.phrasewise.com/rsd");
            writer.WriteAttributeString("version", "1.0");
            writer.WriteStartElement("service");
            writer.WriteElementString("engineName", "Subtext");
            writer.WriteElementString("engineLink", "http://subtextproject.com/");
            writer.WriteElementString("homePageLink", urlHelper.BlogUrl().ToFullyQualifiedUrl(blog).ToString());

            writer.WriteStartElement("apis");

            //When we have more than one API, we'll list them here.
            writer.WriteStartElement("api");
            writer.WriteAttributeString("name", "MetaWeblog");
            writer.WriteAttributeString("preferred", "true");
            writer.WriteAttributeString("apiLink", urlHelper.MetaWeblogApiUrl(blog).ToString());
            writer.WriteAttributeString("blogID", blog.Id.ToString(CultureInfo.InvariantCulture));
            writer.WriteEndElement(); // </api>

            writer.WriteEndElement(); // </apis>

            writer.WriteEndElement(); // </service>
            writer.WriteEndElement(); // </rsd>
            writer.WriteEndDocument();
            writer.Flush();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace Subtext.Framework.Web.Handlers
{
    public abstract class SubtextHttpHandler : ISubtextHandler
    {
        AdminUrlHelper _adminUrlHelper;

        protected SubtextHttpHandler(ISubtextContext subtextContext)
        {
            SubtextContext = subtextContext;
        }

        public Blog Blog
        {
            get { return SubtextContext.Blog; }
        }

        public UrlHelper Url
        {
            get { return SubtextContext.UrlHelper; }
        }

        public ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        public AdminUrlHelper AdminUrl
        {
            get
            {
                if(_adminUrlHelper == null)
                {
                    _adminUrlHelper = new AdminUrlHelper(Url);
                }
                return _adminUrlHelper;
            }
        }

        public ISubtextContext SubtextContext { get; protected set; }

        public bool IsReusable
        {
            get { return false; }
        }

        public void ProcessRequest(HttpContext context)
        {
            ProcessRequest();
        }

        public abstract void ProcessRequest();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Configuration;
using System.IO;
using System.Net;
using System.Text;
using System.Web;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using Subtext.Framework.Properties;

namespace Subtext.Framework.Web
{
    /// <summary>
    /// Static containing helper methods for HTTP operations.
    /// </summary>
    public static class HttpHelper
    {
        private const int DefaultTimeout = 60000;

        private static readonly string UserAgent = string.Format("{0} ({1}; .NET CLR {2})", VersionInfo.UserAgent, Environment.OSVersion, Environment.Version);

        private const string Referer = @"http://SubtextProject.com/Services/default.htm";

        /// <summary>
        /// Sets the file not found response.
        /// </summary>
        public static void SetFileNotFoundResponse()
        {
            if(HttpContext.Current != null && HttpContext.Current.Response != null)
            {
                SetFileNotFoundResponse(Config.GetFileNotFoundPage());
            }
        }

        /// <param name="fileNotFoundPage">The file not found page.</param>
        private static void SetFileNotFoundResponse(string fileNotFoundPage)
        {
            HttpContext.Current.Response.StatusCode = 404;
            if(fileNotFoundPage != null)
            {
                HttpContext.Current.Response.Redirect(fileNotFoundPage, true);
            }
        }

        public static void RedirectPermanent(this HttpResponseBase response, string url)
        {
            response.StatusCode = 301;
            response.StatusDescription = "301 Moved Permanently";
            response.RedirectLocation = url;
            response.End();
        }

        /// <summary>
        /// Gets if modified since date.
        /// </summary>
        /// <returns></returns>
        public static DateTime GetIfModifiedSinceDateUtc(HttpRequestBase request)
        {
            if(request != null)
            {
                string ifModified = request.Headers["If-Modified-Since"];
                if(!string.IsNullOrEmpty(ifModified))
                {
                    return DateTimeHelper.ParseUnknownFormatUtc(ifModified);
                }
            }
            return NullValue.NullDateTime;
        }


        /// <summary>
        /// Creates an <see cref="HttpWebRequest" /> for the specified URL..
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <returns></returns>
        public static HttpWebRequest CreateRequest(Uri url)
        {
            WebRequest req = WebRequest.Create(url);
            SetProxy(req);
            var wreq = req as HttpWebRequest;
            if(null != wreq)
            {
                wreq.UserAgent = UserAgent;
                wreq.Referer = Referer;
                wreq.Timeout = DefaultTimeout;
            }
            return wreq;
        }

        /// <summary>
        /// Returns an <see cref="HttpWebResponse" /> for the specified URL.
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <returns></returns>
        public static HttpWebResponse GetResponse(Uri url)
        {
            HttpWebRequest request = CreateRequest(url);

            return (HttpWebResponse)request.GetResponse();
        }

        /// <summary>
        /// Returns the text of the page specified by the URL..
        /// </summary>
        /// <param name="url">The URL.</param>
        /// <returns></returns>
        public static string GetPageText(Uri url)
        {
            HttpWebResponse response = GetResponse(url);
            using(Stream s = response.GetResponseStream())
            {
                string enc = response.ContentEncoding;
                if(enc == null || enc.Trim().Length == 0)
                {
                    enc = "us-ascii";
                }
                Encoding encode = Encoding.GetEncoding(enc);
                using(var sr = new StreamReader(s, encode))
                {
                    return sr.ReadToEnd();
                }
            }
        }

        /// <summary>
        /// Returns the IP Address of the user making the current request.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <returns></returns>
        public static IPAddress GetUserIpAddress(HttpContextBase context)
        {
            if(context == null)
            {
                return IPAddress.None;
            }

            string result = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if(String.IsNullOrEmpty(result))
            {
                result = HttpContext.Current.Request.UserHostAddress;
            }
            else
            {
                // Requests behind a proxy might contain multiple IP 
                // addresses in the forwarding header.
                if(result.IndexOf(",", StringComparison.Ordinal) > 0)
                {
                    result = StringHelper.LeftBefore(result, ",");
                }
            }

            IPAddress ipAddress;
            if(IPAddress.TryParse(result, out ipAddress))
            {
                return ipAddress;
            }
            return IPAddress.None;
        }

        /// <summary>
        /// Combines Two Web Paths much like the Path.Combine method.
        /// </summary>
        /// <param name="uriOne">The URI one.</param>
        /// <param name="uriTwo">The URI two.</param>
        /// <returns></returns>
        public static string CombineWebPaths(string uriOne, string uriTwo)
        {
            string newUri = (uriOne + uriTwo);
            return newUri.Replace("//", "/");
        }

        /// <summary>
        /// Determines whether the request is for a static file.
        /// </summary>
        /// <returns>
        /// 	<c>true</c> if [is static file request]; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsStaticFileRequest(this HttpRequestBase request)
        {
            if(request == null)
            {
                throw new ArgumentNullException("request");
            }

            return request.Url.IsStaticFileRequest();
        }

        /// <summary>
        /// Determines whether the request is for a static file.
        /// </summary>
        /// <returns>
        /// 	<c>true</c> if [is static file request]; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsStaticFileRequest(this Uri url)
        {
            string filePath = url.AbsolutePath;

            return filePath.EndsWith(".css", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".js", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".gif", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".png", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".xml", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".txt", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".html", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".htm", StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Sets the proxy on the request if a proxy is configured in Web.config.
        /// </summary>
        /// <param name="request"></param>
        public static void SetProxy(WebRequest request)
        {
            IWebProxy proxy = GetProxy();
            if(proxy != null)
            {
                request.Proxy = proxy;
            }
        }

        internal static IWebProxy GetProxy()
        {
            if(String.IsNullOrEmpty(ConfigurationManager.AppSettings["ProxyHost"]))
            {
                return null;
            }

            string proxyHost = ConfigurationManager.AppSettings["ProxyHost"];

            int proxyPort;
            IWebProxy proxy = int.TryParse(ConfigurationManager.AppSettings["ProxyPort"], out proxyPort) ? new WebProxy(proxyHost, proxyPort) : new WebProxy(proxyHost);
            if(!String.IsNullOrEmpty(ConfigurationManager.AppSettings["ProxyUsername"]))
            {
                proxy.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ProxyUsername"],
                                                          ConfigurationManager.AppSettings["ProxyPassword"]);
            }
            return proxy;
        }

        /// <summary>
        /// If the URL is is the format ~/SomePath, this 
        /// method expands the tilde using the app path.
        /// </summary>
        /// <param name="path"></param>
        public static string ExpandTildePath(string path)
        {
            if(String.IsNullOrEmpty(path))
            {
                return string.Empty;
            }

            string reference = path;
            if(reference.Substring(0, 2) == "~/")
            {
                string appPath = HttpContext.Current.Request.ApplicationPath ?? string.Empty;
                if(appPath.EndsWith("/", StringComparison.Ordinal))
                {
                    appPath = appPath.Left(appPath.Length - 1);
                }
                return appPath + reference.Substring(1);
            }
            return path;
        }

        /// <summary>
        /// If the URL is is the format ~/SomePath, this 
        /// method expands the tilde using the app path.
        /// </summary>
        public static VirtualPath ExpandTildePath(this HttpContextBase httpContext, string path)
        {
            if(String.IsNullOrEmpty(path))
            {
                return string.Empty;
            }

            string reference = path;
            if(reference.Substring(0, 2) == "~/")
            {
                string appPath = httpContext.Request.ApplicationPath ?? string.Empty;

                if(appPath.EndsWith("/", StringComparison.Ordinal))
                {
                    appPath = appPath.Left(appPath.Length - 1);
                }
                return appPath + reference.Substring(1);
            }
            return path;
        }

        /// <summary>
        /// gets the bytes for the posted file
        /// </summary>
        /// <returns></returns>
        public static byte[] GetFileStream(this HttpPostedFile httpPostedFile)
        {
            if(httpPostedFile != null)
            {
                int contentLength = httpPostedFile.ContentLength;
                var input = new byte[contentLength];
                Stream file = httpPostedFile.InputStream;
                file.Read(input, 0, contentLength);
                return input;
            }
            return null;
        }

        /// <summary>
        /// Returns a MimeType from a URL
        /// </summary>
        /// <param name="fullUrl">The URL to check for a mime type</param>
        /// <returns>A string representation of the mimetype</returns>
        public static string GetMimeType(this string fullUrl)
        {
            string extension = Path.GetExtension(fullUrl);

            if(string.IsNullOrEmpty(extension))
            {
                return string.Empty;
            }

            switch(extension.ToUpperInvariant())
            {
                case ".PNG":
                    return "image/png";
                case ".JPG":
                case ".JPEG":
                    return "image/jpeg";
                case ".BMP":
                    return "image/bmp";
                case ".GIF":
                    return "image/gif";
                default:
                    return "none";
            }
        }

        public static string GetSafeFileName(this string text)
        {
            if(string.IsNullOrEmpty(text))
            {
                throw new ArgumentNullException("text");
            }
            var badChars = Path.GetInvalidFileNameChars();
            foreach(var badChar in badChars)
            {
                if(text.Contains(badChar))
                {
                    text = text.Replace(string.Format("{0}", badChar), string.Empty);
                }
            }
            return text;
        }

        /// <summary>
        /// From Jason Block @ http://www.angrycoder.com/article.aspx?cid=5&y=2003&m=4&d=15
        /// Basically, it's [Request.UrlReferrer] doing a lazy initialization of its internal 
        /// _referrer field, which is a Uri-type class. That is, it's not created until it's 
        /// needed. The point is that there are a couple of spots where the UriFormatException 
        /// could leak through. One is in the call to GetKnownRequestHeader(). _wr is a field 
        /// of type HttpWorkerRequest. 36 is the value of the HeaderReferer constant - since 
        /// that's being blocked in this case, it may cause that exception to occur. However, 
        /// HttpWorkerRequest is an abstract class, and it took a trip to the debugger to find 
        /// out that _wr is set to a System.Web.Hosting.ISAPIWorkerRequestOutOfProc object. 
        /// This descends from System.Web.Hosting.ISAPIWorkerRequest, and its implementation 
        /// of GetKnownRequestHeader() didn't seem to be the source of the problem. 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public static Uri GetUriReferrerSafe(this HttpRequestBase request)
        {
            try
            {
                return request.UrlReferrer;
            }
            catch(UriFormatException)
            {
                return null;
            }
        }

        public static void HandleFileNotFound(this HttpContextBase httpContext, bool usingIntegratedPipeline)
        {
            var response = httpContext.Response;
            var request = httpContext.Request;

            string url = request.GetFileNotFoundRedirectUrl(usingIntegratedPipeline);
            if(!String.IsNullOrEmpty(url))
            {
                response.Redirect(url, true);
            }
            else
            {
                response.StatusCode = 404;
                response.StatusDescription = Resources.FileNotFound;
            }
        }

        public static string GetFileNotFoundRedirectUrl(this HttpRequestBase request, bool usingIntegratedPipeline)
        {
            if(usingIntegratedPipeline || (request.QueryString == null || request.QueryString.Count == 0))
            {
                return null;   
            }

            string key = request.QueryString.Keys[0];
            if(key != null && key.Equals("referrer", StringComparison.InvariantCultureIgnoreCase))
                return null;


            string queryString = request.QueryString[0];            
            if(string.IsNullOrEmpty(queryString))
            {
                return null;
            }

            if(!queryString.Contains(";"))
            {
                return null;
            }
            string urlText = queryString.RightAfter(";");
            if(String.IsNullOrEmpty(urlText))
            {
                return null;
            }

            Uri uri = urlText.ParseUri();
            if(uri == null)
            {
                return null;
            }
            string extension = Path.GetExtension(uri.AbsolutePath);
            if(string.IsNullOrEmpty(extension))
            {
                string uriAbsolutePath = uri.AbsolutePath;
                if(!uriAbsolutePath.EndsWith("/"))
                {
                    uriAbsolutePath += "/";
                }
                return uriAbsolutePath + "default.aspx";
            }
            return null;
        }

        /// <summary>
        /// Strips the surrounding slashes from the specified string.
        /// </summary>
        /// <param name="target">The target.</param>
        /// <returns></returns>
        public static string StripSurroundingSlashes(string target)
        {
            if(target == null)
            {
                throw new ArgumentNullException("target");
            }

            if(target.EndsWith("/"))
            {
                target = target.Remove(target.Length - 1, 1);
            }
            if(target.StartsWith("/"))
            {
                target = target.Remove(0, 1);
            }

            return target;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Security.Principal;
using System.Web;
using System.Web.Security;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Framework.Security;

namespace Subtext.Framework.Web.HttpModules
{
    /// <summary>pa
    /// Handles the AuthenticateRequest event of a request.  Decrypts the authentication 
    /// token and sets up the current user as a GeneralPrinciple, attaching its roles.  
    /// </summary>
    public class AuthenticationModule : IHttpModule
    {
        private readonly static ILog Log = new Log();

        public void Init(HttpApplication context)
        {
            context.AuthenticateRequest += OnAuthenticateRequest;
        }

        public void Dispose()
        {
            //Do Nothing...
        }

        public void AuthenticateRequest(HttpContextBase httpContext, BlogRequest blogRequest)
        {
            if(blogRequest.RequestLocation == RequestLocation.StaticFile)
            {
                return;
            }

            HttpCookie authCookie = httpContext.Request.SelectAuthenticationCookie(blogRequest.Blog);
            FormsAuthenticationTicket authTicket = GetFormsAuthenticationTicket(authCookie);
            HandleFormsAuthenticationTicket(blogRequest, httpContext, authTicket);
        }

        public void HandleFormsAuthenticationTicket(BlogRequest blogRequest, HttpContextBase httpContext, FormsAuthenticationTicket authTicket)
        {
            if(authTicket != null)
            {
                if(FormsAuthentication.SlidingExpiration)
                {
                    FormsAuthentication.RenewTicketIfOld(authTicket);
                }

                // When the ticket was created, the UserData property was assigned a
                // pipe delimited string of role names.
                SetHttpContextUser(httpContext, authTicket);
            }
            else
            {
                httpContext.Response.Cookies.Add(httpContext.Request.GetExpiredCookie(blogRequest.Blog));
                //if(blogRequest.RequestLocation != RequestLocation.LoginPage && blogRequest.RequestLocation == RequestLocation.)
                //{
                //    RedirectToLogin(blogRequest, httpContext);
                //}
            }
        }

        public FormsAuthenticationTicket GetFormsAuthenticationTicket(HttpCookie authCookie)
        {
            if(null == authCookie)
            {
                if(Log.IsDebugEnabled)
                {
                    Log.Debug("There is no authentication cookie.");
                }
                return null;
            }

            FormsAuthenticationTicket authTicket;
            try
            {
                authTicket = FormsAuthentication.Decrypt(authCookie.Value);
            }
            catch(Exception ex)
            {
                Log.Error("Could not decrypt the authentication cookie.", ex);
                return null;
            }

            if(null == authTicket)
            {
                Log.Warn("Could not decrypt the authentication cookie. No exception was thrown.");
                return null;
            }

            if(authTicket.Expired)
            {
                if(Log.IsDebugEnabled)
                {
                    Log.Debug("Authentication ticket expired.");
                }
                return null;
            }
            return authTicket;
        }

        private static void SetHttpContextUser(HttpContextBase httpContext, FormsAuthenticationTicket authTicket)
        {
            string[] roles = authTicket.UserData.Split(new[] {'|'});
            // Create an Identity object
            var id = new FormsIdentity(authTicket);

            // This principal will flow throughout the request.
            var principal = new GenericPrincipal(id, roles);
            // Attach the new principal object to the current HttpContext object
            httpContext.User = principal;
            if(Log.IsDebugEnabled)
            {
                Log.Debug(string.Format("Authentication succeeded. Current.User={0}; {1}", id.Name, authTicket.UserData));
            }
        }

        void OnAuthenticateRequest(object sender, EventArgs e)
        {
            var context = new HttpContextWrapper(((HttpApplication)sender).Context);
            AuthenticateRequest(context, BlogRequest.Current);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework.Configuration;
using Subtext.Framework.Format;
using Subtext.Framework.Text;

namespace Subtext.Framework.Web.HttpModules
{
    /// <summary>
    /// Represents the state of the current blog request.
    /// </summary>
    public class BlogRequest
    {
        public const string BlogRequestKey = "Subtext__CurrentRequest";
        public const int DefaultPort = 80;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogRequest"/> class.
        /// </summary>
        public BlogRequest(string host, string subfolder, Uri url, bool isLocal, RequestLocation requestLocation,
                           string applicationPath)
        {
            Host = host;
            Subfolder = subfolder;
            RawUrl = url;
            IsLocal = isLocal;
            RequestLocation = requestLocation;
            ApplicationPath = applicationPath;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogRequest"/> class.
        /// </summary>
        /// <param name="host">The host.</param>
        /// <param name="subfolder">The subfolder.</param>
        /// <param name="url">The raw requested URL</param>
        /// <param name="isLocal">True if this request is a local machine request.</param>
        public BlogRequest(string host, string subfolder, Uri url, bool isLocal)
            : this(host, subfolder, url, isLocal, RequestLocation.Blog, "/")
        {
        }

        public BlogRequest(HttpRequestBase request)
            : this(HostFromRequest(request)
                   , SubfolderFromRequest(request)
                   , request.Url
                   , request.IsLocal
                   , DetermineRequestLocation(request)
                   , request.ApplicationPath
                )
        {
        }

        /// <summary>
        /// Gets or sets the current blog request.
        /// </summary>
        /// <value>The current.</value>
        public static BlogRequest Current
        {
            get {
                if (HttpContext.Current == null) {
                    return null;
                }
                return (BlogRequest)HttpContext.Current.Items[BlogRequestKey]; 
            }
            set {
                if (HttpContext.Current != null)
                {
                    HttpContext.Current.Items[BlogRequestKey] = value;
                }
            }
        }

        public RequestLocation RequestLocation { get; private set; }

        public bool IsLocal { get; private set; }

        public Blog Blog { get; set; }

        /// <summary>
        /// Gets the host.
        /// </summary>
        /// <value>The host.</value>
        public string Host { get; private set; }

        /// <summary>
        /// Gets the host.
        /// </summary>
        /// <value>The host.</value>
        public string Subfolder { get; private set; }

        public string ApplicationPath { get; private set; }

        public Uri RawUrl { get; private set; }

        public bool IsHostAdminRequest
        {
            get { return RequestLocation == RequestLocation.HostAdmin || RequestLocation == RequestLocation.Upgrade; }
        }

        // The request is for a location in which a blog is required.
        public bool BlogNotRequired
        {
            get
            {
                return RequestLocation != RequestLocation.Blog
                       && RequestLocation != RequestLocation.LoginPage
                    /* && RequestLocation != EmbeddedResource */;
            }
        }

        private static RequestLocation DetermineRequestLocation(HttpRequestBase request)
        {
            if(IsStaticFileRequest(request))
            {
                return RequestLocation.StaticFile;
            }
            if(IsLogin(request))
            {
                return RequestLocation.LoginPage;
            }
            if(IsForgotPassword(request))
            {
                return RequestLocation.LoginPage;
            }
            if(IsSystemMessage(request))
            {
                return RequestLocation.SystemMessages;
            }
            if(IsUpgrade(request))
            {
                return RequestLocation.Upgrade;
            }
            if(IsHostAdmin(request))
            {
                return RequestLocation.HostAdmin;
            }
            if(IsInstallation(request))
            {
                return RequestLocation.Installation;
            }
            if(IsSkins(request))
            {
                return RequestLocation.Skins;
            }
            if(IsEmbeddedResource(request))
            {
                return RequestLocation.EmbeddedResource;
            }
            return RequestLocation.Blog;
        }

        private static bool IsStaticFileRequest(HttpRequestBase request)
        {
            string filePath = request.FilePath;

            return filePath.EndsWith(".css", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".js", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".gif", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".png", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".xml", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".txt", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".html", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith(".htm", StringComparison.OrdinalIgnoreCase)
                   || filePath.Contains("/images/", StringComparison.OrdinalIgnoreCase);
        }

        private static bool IsEmbeddedResource(HttpRequestBase request)
        {
            string filePath = request.FilePath;

            return filePath.EndsWith("ScriptResource.axd", StringComparison.OrdinalIgnoreCase)
                   || filePath.EndsWith("WebResource.axd", StringComparison.OrdinalIgnoreCase);
        }

        private static bool IsInSpecialDirectory(HttpRequestBase request, string folderName)
        {
            string appPath = request.ApplicationPath ?? string.Empty;

            if(!appPath.EndsWith("/", StringComparison.Ordinal))
            {
                appPath += "/";
            }
            string path = request.Path;
            if(!path.EndsWith("/", StringComparison.Ordinal))
            {
                path += "/";
            }
            appPath += folderName + "/";

            return path.StartsWith(appPath, StringComparison.OrdinalIgnoreCase);
        }

        private static bool IsLogin(HttpRequestBase request)
        {
            return (request.Path ?? string.Empty).EndsWith("Login.aspx", StringComparison.OrdinalIgnoreCase);
        }

        private static bool IsForgotPassword(HttpRequestBase request)
        {
            return (request.Path ?? string.Empty).EndsWith("ForgotPassword.aspx", StringComparison.OrdinalIgnoreCase);
        }

        private static bool IsSystemMessage(HttpRequestBase request)
        {
            return IsInSpecialDirectory(request, "SystemMessages");
        }

        private static bool IsSkins(HttpRequestBase request)
        {
            return IsInSpecialDirectory(request, "Skins");
        }

        private static bool IsHostAdmin(HttpRequestBase request)
        {
            return IsInSpecialDirectory(request, "HostAdmin");
        }

        private static bool IsUpgrade(HttpRequestBase request)
        {
            return IsInSpecialDirectory(request, "HostAdmin/Upgrade");
        }

        private static bool IsInstallation(HttpRequestBase request)
        {
            return IsInSpecialDirectory(request, "Install");
        }

        private static string SubfolderFromRequest(HttpRequestBase request)
        {
            string subfolder = UrlFormats.GetBlogSubfolderFromRequest(request.RawUrl, request.ApplicationPath) ?? string.Empty;
            if(!String.IsNullOrEmpty(subfolder) && !Config.IsValidSubfolderName(subfolder))
            {
                subfolder = string.Empty;
            }
            return subfolder;
        }

        private static string HostFromRequest(HttpRequestBase request)
        {
            string host = request.Url.Host;

            if(request.IsLocal && request.Url.Host == "127.0.0.1") // For testing.
            {
                return "localhost";
            }

            if(String.IsNullOrEmpty(host))
            {
                host = request.Params["HTTP_HOST"].LeftBefore(":", StringComparison.OrdinalIgnoreCase);
            }

            return host;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;

namespace Subtext.Framework.Web.HttpModules
{
    /// <summary>
    /// Examines incoming http requests and adds Subtext specific as well as blog 
    /// specific information to the context.
    /// </summary>
    public class BlogRequestModule : IHttpModule
    {
        public BlogRequestModule()
            : this(new BlogLookupService(ObjectProvider.Instance(), HostInfo.Instance))
        {
        }

        public BlogRequestModule(IBlogLookupService blogLookup)
        {
            BlogLookup = blogLookup;
        }

        protected IBlogLookupService BlogLookup { get; private set; }

        /// <summary>
        /// Initializes a module and prepares it to handle
        /// requests.
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        public void Init(HttpApplication context)
        {
            context.BeginRequest += MapUrlToBlogStatus;
        }

        /// <summary>
        /// Disposes of the resources (other than memory) used by the
        /// module that implements <see langword="IHttpModule."/>
        /// </summary>
        public void Dispose()
        {
            //Do Nothing.
        }

        /// <summary>
        /// Maps the incoming URL to the corresponding blog. If no blog matches, then 
        /// makes sure any host application settings are still set.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        private void MapUrlToBlogStatus(object sender, EventArgs e)
        {
            BlogRequest.Current = ConvertRequestToBlogRequest(new HttpContextWrapper(HttpContext.Current));
        }

        public BlogRequest ConvertRequestToBlogRequest(HttpContextBase httpContext)
        {
            string redirectUrl = httpContext.Request.GetFileNotFoundRedirectUrl(HttpRuntime.UsingIntegratedPipeline);
            if(!String.IsNullOrEmpty(redirectUrl))
            {
                httpContext.Response.Redirect(redirectUrl);
            }

            // REVIEW: Maybe the BlogLookup.Lookup should take in an HttpContextBase 
            // and return the BlogRequest as part of the result.
            var blogRequest = new BlogRequest(httpContext.Request);
            if(blogRequest.BlogNotRequired)
            {
                return blogRequest;
            }
            BlogLookupResult result = BlogLookup.Lookup(blogRequest);

            if(result == null)
            {
                if(blogRequest.RequestLocation != RequestLocation.LoginPage)
                {
                    httpContext.Response.Redirect("~/install/BlogNotConfiguredError.aspx", true);
                }
                return blogRequest;
            }

            if(result.Blog == null && result.AlternateUrl != null)
            {
                httpContext.Response.RedirectPermanent(result.AlternateUrl.ToString());
                return null;
            }

            if(result.Blog != null && !result.Blog.IsActive && blogRequest.RequestLocation == RequestLocation.Blog)
            {
                httpContext.Response.Redirect("~/SystemMessages/BlogNotActive.aspx", true);
                return null;
            }

            blogRequest.Blog = result.Blog;
            return blogRequest;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO.Compression;
using System.Web;

namespace Subtext.Framework.Web.HttpModules
{
    public class CompressionModule : IHttpModule
    {
        private const string Deflate = "deflate";
        private const string Gzip = "gzip";

        /// <summary>
        /// Disposes of the resources (other than memory) used by the module 
        /// that implements <see cref="T:System.Web.IHttpModule"></see>.
        /// </summary>
        void IHttpModule.Dispose()
        {
            // Nothing to dispose; 
        }

        /// <summary>
        /// Initializes a module and prepares it to handle requests.
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpApplication"></see> 
        /// that provides access to the methods, properties, and events common to 
        /// all application objects within an ASP.NET application.
        /// </param>
        void IHttpModule.Init(HttpApplication context)
        {
            context.PostReleaseRequestState += ContextPostReleaseRequestState;
        }

        /// <summary>
        /// Handles the BeginRequest event of the context control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        static void ContextPostReleaseRequestState(object sender, EventArgs e)
        {
            var app = (HttpApplication)sender;
            if(app.Request.Path.Contains("css.axd") || app.Request.Path.Contains("js.axd"))
            {
                if(IsEncodingAccepted(Gzip))
                {
                    app.Response.Filter = new GZipStream(app.Response.Filter, CompressionMode.Compress);
                    SetEncoding(Gzip);
                }
                else if(IsEncodingAccepted(Deflate))
                {
                    app.Response.Filter = new DeflateStream(app.Response.Filter, CompressionMode.Compress);
                    SetEncoding(Deflate);
                }
            }
            else if(app.Request.Path.Contains("WebResource.axd"))
            {
                app.Response.Cache.SetExpires(DateTime.Now.AddDays(30));
            }
        }

        /// <summary>
        /// Checks the request headers to see if the specified
        /// encoding is accepted by the client.
        /// </summary>
        private static bool IsEncodingAccepted(string encoding)
        {
            return HttpContext.Current.Request.Headers["Accept-encoding"] != null &&
                   HttpContext.Current.Request.Headers["Accept-encoding"].Contains(encoding);
        }

        /// <summary>
        /// Adds the specified encoding to the response headers.
        /// </summary>
        /// <param name="encoding"></param>
        private static void SetEncoding(string encoding)
        {
            HttpContext.Current.Response.AppendHeader("Content-encoding", encoding);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Globalization;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Security;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;

namespace Subtext.Framework.Web.HttpModules
{
    /// <summary>
    /// Summary description for BasicAuthenticationModule
    /// </summary>
    public class FormToBasicAuthenticationModule : IHttpModule
    {
        public void Init(HttpApplication app)
        {
            app.AuthenticateRequest += OnAuthenticateRequest;
            app.EndRequest += OnEndRequest;
        }

        public void Dispose()
        {
            // do nothing
        }

        private void OnEndRequest(Object sender, EventArgs e)
        {
            var context = new HttpContextWrapper(((HttpApplication)sender).Context);
            HandleEndRequest(context);
        }

        public void HandleEndRequest(HttpContextBase context)
        {
            if(!String.IsNullOrEmpty(SecurityHelper.CurrentUserName)
               || context.Request.IsStaticFileRequest()
               || !(context.Response.StatusCode == 302
                    &&
                    context.Response.RedirectLocation.IndexOf(FormsAuthentication.LoginUrl,
                                                              StringComparison.OrdinalIgnoreCase) == 0))
            {
                return;
            }

            if(!Regex.IsMatch(context.Request.Path, @"Rss\.axd"))
            {
                return;
            }

            string authHeader = context.Request.Headers["Authorization"];
            if(String.IsNullOrEmpty(authHeader))
            {
                SendAuthRequest(context);
            }
        }

        private static void SendAuthRequest(HttpContextBase context)
        {
            Debug.WriteLine("Auth");
            context.Response.StatusCode = 401;

            context.Response.AddHeader("WWW-Authenticate",
                                       String.Format(CultureInfo.InvariantCulture, "Basic realm=\"{0}\"",
                                                     Config.CurrentBlog.Title));
//			context.ApplicationInstance.CompleteRequest();
        }

        public void AuthenticateRequest(Blog blog, HttpContextBase context)
        {
            string authHeader = context.Request.Headers["Authorization"];
            if(String.IsNullOrEmpty(authHeader))
            {
                return;
            }

            if(authHeader.IndexOf("Basic ") == 0)
            {
                byte[] bytes = Convert.FromBase64String(authHeader.Remove(0, 6));

                string authString = Encoding.Default.GetString(bytes);
                string[] usernamepassword = authString.Split(':');

                if(context.Authenticate(blog, usernamepassword[0], usernamepassword[1], false))
                {
                    context.User = new GenericPrincipal(new GenericIdentity(usernamepassword[0]), null);
                }
                else
                {
                    SendAuthRequest(context);
                }
            }
        }

        private void OnAuthenticateRequest(object sender, EventArgs e)
        {
            var context = new HttpContextWrapper(((HttpApplication)sender).Context);
            AuthenticateRequest(Config.CurrentBlog, context);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Infrastructure;

namespace Subtext.Framework.Web.HttpModules
{
    /// <summary>
    /// Checks to see if the blog needs an upgrade.
    /// </summary>
    public class InstallationCheckModule : IHttpModule
    {
        public InstallationCheckModule() : this(null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallationCheckModule"/> class.
        /// </summary>
        public InstallationCheckModule(IInstallationManager installationManager)
        {
            InstallationManager = installationManager ?? Bootstrapper.ServiceLocator.GetService<IInstallationManager>();
        }

        public IInstallationManager InstallationManager { get; private set; }

        /// <summary>
        /// Initializes a module and prepares it to handle
        /// requests.
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, 
        /// and events common to all application objects within an ASP.NET application</param>
        public void Init(HttpApplication context)
        {
            context.BeginRequest += HandleInstallationUpdates;
        }

        /// <summary>
        /// Disposes of the resources (other than memory) used by the
        /// module that implements <see langword="IHttpModule."/>
        /// </summary>
        public void Dispose()
        {
            //Do nothing.
        }

        /// <summary>
        /// Checks the installation status and redirects if necessary.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        private void HandleInstallationUpdates(object sender, EventArgs e)
        {
            var context = new HttpContextWrapper(((HttpApplication)sender).Context);
            HandleInstallationStatus(context, BlogRequest.Current, HostInfo.Instance);
        }

        public void HandleInstallationStatus(HttpContextBase context, BlogRequest blogRequest, HostInfo hostInfo)
        {
            string redirectUrl = GetInstallationRedirectUrl(blogRequest, hostInfo);
            if(!String.IsNullOrEmpty(redirectUrl))
            {
                context.Response.Redirect(redirectUrl);
            }
        }

        /// <summary>
        /// Checks the installation status and redirects if necessary.
        /// </summary>
        public string GetInstallationRedirectUrl(BlogRequest blogRequest, HostInfo hostInfo)
        {
            const string installUrl = "~/install/default.aspx";

            // Bypass for static files.
            if(blogRequest.RawUrl.IsStaticFileRequest())
            {
                return null;
            }

            if(hostInfo == null && blogRequest.RequestLocation != RequestLocation.Installation)
            {
                return installUrl;
            }

            // Want to redirect to install if installation is required, 
            // or if we're missing a HostInfo record.
            if((InstallationManager.InstallationActionRequired(VersionInfo.CurrentAssemblyVersion, null) || hostInfo == null))
            {
                InstallationState state = InstallationManager.GetInstallationStatus(VersionInfo.CurrentAssemblyVersion);
                if(state == InstallationState.NeedsInstallation
                   && !blogRequest.IsHostAdminRequest
                   && blogRequest.RequestLocation != RequestLocation.Installation)
                {
                    return installUrl;
                }

                if(state == InstallationState.NeedsUpgrade)
                {
                    if(blogRequest.RequestLocation != RequestLocation.Upgrade
                       && blogRequest.RequestLocation != RequestLocation.LoginPage
                       && blogRequest.RequestLocation != RequestLocation.SystemMessages
                       && blogRequest.RequestLocation != RequestLocation.HostAdmin)
                    {
                        return "~/SystemMessages/UpgradeInProgress.aspx";
                    }
                }
            }
            return null;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.Web.HttpModules
{
    public enum RequestLocation
    {
        Blog,
        HostAdmin,
        LoginPage,
        SystemMessages,
        Installation,
        Upgrade,
        Skins,
        StaticFile,
        EmbeddedResource,
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using Ninject;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services.SearchEngine;

namespace Subtext.Framework.Web.Handlers
{
    public class SubtextPage : Page, ISubtextHandler
    {
        AdminUrlHelper _adminUrlHelper;

        public Blog Blog
        {
            get { return SubtextContext.Blog; }
        }

        [Inject]
        public ISubtextContext SubtextContext { get; set; }

        [Inject]
        public ISearchEngineService SearchEngineService { get; set; }

        public UrlHelper Url
        {
            get { return SubtextContext.UrlHelper; }
        }

        public ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        public AdminUrlHelper AdminUrl
        {
            get
            {
                if(_adminUrlHelper == null)
                {
                    _adminUrlHelper = new AdminUrlHelper(Url);
                }
                return _adminUrlHelper;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.XmlRpc
{
    public struct BlogInfo
    {
        public string blogid;
        public string blogName;
        public string url;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.XmlRpc
{
    public struct Category
    {
        public string categoryId;
        public string categoryName;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.XmlRpc
{
    public struct CategoryInfo
    {
        public string categoryid;
        public string description;
        public string htmlUrl;
        public string rssUrl;
        public string title;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using CookComputing.XmlRpc;

namespace Subtext.Framework.XmlRpc
{
    // TODO: following attribute is a temporary workaround
    [XmlRpcMissingMapping(MappingAction.Ignore)]
    public struct Enclosure
    {
        public int length;
        public string type;
        public string url;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using CookComputing.XmlRpc;

namespace Subtext.Framework.XmlRpc
{
    public interface IMetaWeblog
    {
        [XmlRpcMethod("metaWeblog.editPost", Description = "Updates and existing post to a designated blog "
                                                           + "using the metaWeblog API. Returns true if completed.")]
        bool editPost(string postid, string username, string password, Post post, bool publish);

        [XmlRpcMethod("metaWeblog.getCategories",
            Description = "Retrieves a list of valid categories for a post "
                          + "using the metaWeblog API. Returns the metaWeblog categories "
                          + "struct collection.")]
        CategoryInfo[] getCategories(string blogid, string username, string password);

        [XmlRpcMethod("metaWeblog.getPost",
            Description = "Retrieves an existing post using the metaWeblog "
                          + "API. Returns the metaWeblog struct.")]
        Post getPost(string postid, string username, string password);

        [XmlRpcMethod("metaWeblog.getRecentPosts",
            Description = "Retrieves a list of the most recent existing post "
                          + "using the metaWeblog API. Returns the metaWeblog struct collection.")]
        Post[] getRecentPosts(string blogid, string username, string password, int numberOfPosts);

        [XmlRpcMethod("metaWeblog.newPost",
            Description = "Makes a new post to a designated blog using the "
                          + "metaWeblog API. Returns postid as a string.")]
        string newPost(string blogid, string username, string password, Post post, bool publish);

        [XmlRpcMethod("metaWeblog.newMediaObject",
            Description = "Uploads an image, movie, song, or other media "
                          + "using the metaWeblog API. Returns the metaObject struct.")]
        mediaObjectInfo newMediaObject(object blogid, string username, string password, mediaObject mediaobject);

        [XmlRpcMethod("blogger.deletePost",
            Description = "Deletes a post.")]
        [return: XmlRpcReturnValue(Description = "Always returns true.")]
        bool deletePost(string appKey, string postid, string username, string password,
                        [XmlRpcParameter(
                            Description = "Where applicable, this specifies whether the blog "
                                          + "should be republished after the post has been deleted.")] bool publish);

        [XmlRpcMethod("blogger.getUsersBlogs",
            Description = "Returns information on all the blogs a given user "
                          + "is a member.")]
        BlogInfo[] getUsersBlogs(string appKey, string username, string password);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using CookComputing.XmlRpc;

namespace Subtext.Framework.XmlRpc
{
    public struct WordpressCategory
    {
        public string name;
    }

    public interface IWordPressApi
    {
        [XmlRpcMethod("wp.newCategory",
            Description = "Adds a new category to the blog engine.")]
        int newCategory(
            string blogid,
            string username,
            string password,
            WordpressCategory category);

        [XmlRpcMethod("wp.newPage", Description = "Adds a new page/article to the blog engine.")]
        int newPage(
            string blog_id,
            string username,
            string password,
            Post content,
            bool publish);

        [XmlRpcMethod("wp.editPage", Description = "Adds a new page/article to the blog engine.")]
        int editPage(
            string blog_id,
            string page_id,
            string username,
            string password,
            Post content,
            bool publish);

        [XmlRpcMethod("wp.getPages", Description = "Get an array of all the pages on a blog.")]
        Post[] getPages(
            string blog_id,
            string username,
            string password,
            int numberOfPosts
            );

        [XmlRpcMethod("wp.getPage", Description = "Get the page identified by the page id.")]
        Post getPage(
            string blog_id,
            string page_id,
            string username,
            string password
            );

        [XmlRpcMethod("wp.deletePage", Description = "Removes a page from the blog.")]
        bool deletePage(
            string blog_id,
            string username,
            string password,
            string page_id);
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Framework.XmlRpc
{
    public struct mediaObject
    {
        public Byte[] bits;
        public string name;
        public string type;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Framework.XmlRpc
{
    public struct mediaObjectInfo
    {
        public string url;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CookComputing.XmlRpc;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Properties;
using Subtext.Framework.Routing;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Framework.Tracking;
using Subtext.Framework.Util;

//Need to find a method that has access to context, so we can terminate the request if AllowServiceAccess == false.
//Users will be able to access the metablogapi page, but will not be able to make a request, but the page should not be visible

namespace Subtext.Framework.XmlRpc
{
    /// <summary>
    /// Implements the MetaBlog API.
    /// </summary>
    public class MetaWeblog : SubtextXmlRpcService, IMetaWeblog, IWordPressApi
    {
        static readonly Log Log = new Log();

        public MetaWeblog(ISubtextContext context) : this(context, context.ServiceLocator.GetService<IEntryPublisher>())
        {
        }

        public MetaWeblog(ISubtextContext context, IEntryPublisher entryPublisher)
            : base(context)
        {
            EntryPublisher = entryPublisher;
        }

        protected IEntryPublisher EntryPublisher
        {
            get; 
            private set;
        }

        private Entry GetBlogPost(string pageId)
        {
            Entry entry = Repository.GetEntry(Int32.Parse(pageId, CultureInfo.InvariantCulture), false /*activeOnly*/, true /*includeCategories*/);
            if(entry == null)
            {
                return null;
            }
            entry.Blog = Blog;
            return entry;
        }

        public BlogInfo[] getUsersBlogs(string appKey, string username, string password)
        {
            Blog info = Blog;
            ValidateUser(username, password, info.AllowServiceAccess);

            var bi = new[] {
                new BlogInfo
                {
                    blogid = info.Id.ToString(CultureInfo.InvariantCulture),
                    blogName = info.Title,
                    url = Url.BlogUrl().ToFullyQualifiedUrl(info).ToString()
                }
            };
            return bi;
        }

        public bool deletePost(string appKey, string postid, string username, string password,
                               [XmlRpcParameter(
                                   Description =
                                   "Where applicable, this specifies whether the blog should be republished after the post has been deleted."
                                   )] bool publish)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            try
            {
                Repository.DeleteEntry(Int32.Parse(postid, CultureInfo.InvariantCulture));
                return true;
            }
            catch
            {
                throw new XmlRpcFaultException(1,
                                               String.Format(CultureInfo.InvariantCulture,
                                                             Resources.XmlRpcFault_CannotDeletePost, postid));
            }
        }

        public bool editPost(string postid, string username, string password, Post post, bool publish)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            Entry entry = GetBlogPost(postid);
            if(entry != null)
            {
                entry.Author = Blog.Author;
                entry.Email = Blog.Email;
                entry.Categories.Clear();
                post.CopyValuesTo(entry);
                entry.IncludeInMainSyndication = true;
                entry.PostType = PostType.BlogPost;

                //User trying to change future dating.
                if(publish && post.dateCreated != null &&
                   Blog.TimeZone.IsInFuture(post.dateCreated.Value, TimeZoneInfo.Utc))
                {
                    entry.DateSyndicated = post.dateCreated.Value;
                }
                entry.IsActive = publish;

                entry.DateModified = Blog.TimeZone.Now;

                EntryPublisher.Publish(entry);
                
                if(entry.Enclosure == null)
                {
                    if(post.enclosure != null)
                    {
                        Components.Enclosure enclosure = post.enclosure.Value.CopyValuesToEnclosure();
                        enclosure.EntryId = entry.Id;
                        Repository.Create(enclosure);
                    }
                }
                else // if(entry.Enclosure != null)
                {
                    if(post.enclosure != null)
                    {
                        Components.Enclosure enclosure = entry.Enclosure;
                        post.enclosure.Value.CopyValuesTo(enclosure);
                        Repository.Update(enclosure);
                    }
                    else
                    {
                        Repository.DeleteEnclosure(entry.Enclosure.Id);
                    }
                }
            }
            return true;
        }

        public Post getPost(string postid, string username, string password)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            Entry entry = GetBlogPost(postid);
            if(entry == null)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_CouldNotFindEntry);
            }
            var post = new Post
            {
                link = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                description = entry.Body,
                excerpt = entry.Description ?? string.Empty,
                dateCreated = entry.DateCreated,
                postid = entry.Id,
                title = entry.Title,
                permalink = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                categories = new string[entry.Categories.Count]
            };

            if(entry.Enclosure != null)
            {
                post.enclosure = new Enclosure
                {
                    length = (int)entry.Enclosure.Size,
                    type = entry.Enclosure.MimeType,
                    url = entry.Enclosure.Url
                };
            }

            if(entry.HasEntryName)
            {
                post.wp_slug = entry.EntryName;
            }

            entry.Categories.CopyTo(post.categories, 0);

            return post;
        }

        public Post[] getRecentPosts(string blogid, string username, string password, int numberOfPosts)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            ICollection<Entry> entries = Repository.GetEntries(numberOfPosts, PostType.BlogPost, PostConfig.IsActive, true);

            IEnumerable<Post> posts = from entry in entries
                                      select new Post
                                      {
                                          dateCreated = entry.DateCreated,
                                          description = entry.Body,
                                          excerpt = entry.Description,
                                          link = Url.EntryUrl(entry),
                                          permalink = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                                          title = entry.Title,
                                          postid = entry.Id.ToString(CultureInfo.InvariantCulture),
                                          userid = entry.Body.GetHashCode().ToString(CultureInfo.InvariantCulture),
                                          wp_slug = (entry.HasEntryName ? entry.EntryName : null),
                                          categories = (entry.Categories ?? new string[0]).ToArray(),
                                          enclosure = (entry.Enclosure == null
                                                           ? new Enclosure()
                                                           : new Enclosure
                                                           {
                                                               length = (int)entry.Enclosure.Size,
                                                               url = entry.Enclosure.Url,
                                                               type = entry.Enclosure.MimeType
                                                           })
                                      };

            return posts.ToArray();
        }

        public CategoryInfo[] getCategories(string blogid, string username, string password)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            ICollection<LinkCategory> categories = Repository.GetCategories(CategoryType.PostCollection, false);
            if(categories == null)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_NoCategories);
            }

            IEnumerable<CategoryInfo> categoryInfos = from category in categories
                                                      select new CategoryInfo
                                                      {
                                                          categoryid =
                                                              category.Id.ToString(CultureInfo.InvariantCulture),
                                                          title = category.Title,
                                                          htmlUrl =
                                                              Url.CategoryUrl(category).ToFullyQualifiedUrl(Blog).
                                                              ToString(),
                                                          rssUrl =
                                                              Url.CategoryRssUrl(category).ToFullyQualifiedUrl(Blog).
                                                              ToString(),
                                                          description = category.Title
                                                      };

            return categoryInfos.ToArray();
        }

        /// <summary>
        /// Creates a new post.  The publish boolean is used to determine whether the item 
        /// should be published or not.
        /// </summary>
        /// <param name="blogid">The blogid.</param>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="post">The post.</param>
        /// <param name="publish">if set to <c>true</c> [publish].</param>
        /// <returns></returns>
        public string newPost(string blogid, string username, string password, Post post, bool publish)
        {
            return PostContent(username, password, ref post, publish, PostType.BlogPost);
        }

        public mediaObjectInfo newMediaObject(object blogid, string username, string password, mediaObject mediaobject)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);
            string imageDirectory = Url.ImageDirectoryPath(Blog);
            try
            {
                // newMediaObject allows files to be overwritten
                // The media object's name can have extra folders appended so we check for this here too.
                FileHelper.EnsureDirectory(Path.Combine(imageDirectory,
                                                        mediaobject.name.Substring(0,
                                                                                   mediaobject.name.LastIndexOf("/",
                                                                                                                StringComparison
                                                                                                                    .
                                                                                                                    Ordinal) +
                                                                                   1).Replace("/", "\\")));
                string imageFilePhysicalPath = Path.Combine(imageDirectory, mediaobject.name);
                FileHelper.WriteBytesToFile(imageFilePhysicalPath, mediaobject.bits);
            }
            catch(IOException)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_ErrorSavingFile);
            }

            mediaObjectInfo media;
            media.url = Url.ImageUrl(Blog, mediaobject.name);
            return media;
        }

        // w.bloggar workarounds/nominal MT support - HACKS

        // w.bloggar is not correctly implementing metaWeblogAPI on its getRecentPost call, it wants 
        // an instance of blogger.getRecentPosts at various time. 
        // 
        // What works better with w.bloggar is to tell it to use MT settings. For w.bloggar users 
        // with metaWeblog configured, we'll throw a more explanatory exception than method not found.

        // Wordpress API

        #region IWordPressApi Members

        public int newCategory(string blogid, string username, string password, WordpressCategory category)
        {
            var newCategory = new LinkCategory
            {
                CategoryType = CategoryType.PostCollection,
                Title = category.name,
                IsActive = true,
                Description = category.name
            };

            newCategory.Id = Links.CreateLinkCategory(newCategory);

            return newCategory.Id;
        }

        public int newPage(string blog_id, string username, string password, Post content, bool publish)
        {
            return Convert.ToInt32(PostContent(username, password, ref content, publish, PostType.Story),
                                   CultureInfo.InvariantCulture);
        }

        public int editPage(string blog_id, string page_id, string username, string password, Post content, bool publish)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            Entry entry = GetBlogPost(page_id);
            if(entry != null)
            {
                entry.Author = Blog.Author;
                entry.Email = Blog.Email;
                entry.Body = content.description;
                entry.Title = content.title;
                entry.Description = content.excerpt ?? string.Empty;
                entry.IncludeInMainSyndication = true;

                if(content.categories != null)
                {
                    entry.Categories.AddRange(content.categories);
                }

                entry.PostType = PostType.Story;
                entry.IsActive = publish;

                if(!string.IsNullOrEmpty(content.wp_slug))
                {
                    entry.EntryName = content.wp_slug;
                }

                entry.DateModified = Blog.TimeZone.Now;
                EntryPublisher.Publish(entry);
            }
            return Convert.ToInt32(page_id, CultureInfo.InvariantCulture);
        }

        public Post[] getPages(string blog_id, string username, string password, int numberOfPosts)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            ICollection<Entry> entries = Repository.GetEntries(numberOfPosts, PostType.Story, PostConfig.IsActive, true);
            IEnumerable<Post> posts = from entry in entries
                                      select new Post
                                      {
                                          dateCreated = entry.DateCreated,
                                          description = entry.Body,
                                          excerpt = entry.Description ?? string.Empty,
                                          link = Url.EntryUrl(entry),
                                          permalink = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                                          title = entry.Title,
                                          postid = entry.Id.ToString(CultureInfo.InvariantCulture),
                                          userid = entry.Body.GetHashCode().ToString(CultureInfo.InvariantCulture),
                                          wp_slug = (entry.HasEntryName ? entry.EntryName : null),
                                          categories = (entry.Categories ?? new string[0]).ToArray(),
                                          enclosure = (entry.Enclosure == null
                                                           ? new Enclosure()
                                                           : new Enclosure
                                                           {
                                                               length = (int)entry.Enclosure.Size,
                                                               url = entry.Enclosure.Url,
                                                               type = entry.Enclosure.MimeType
                                                           })
                                      };

            return posts.ToArray();
        }

        public Post getPage(string blog_id, string page_id, string username, string password)
        {
            Blog info = Blog;
            ValidateUser(username, password, info.AllowServiceAccess);

            Entry entry = GetBlogPost(page_id);
            var post = new Post
            {
                link = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                description = entry.Body,
                excerpt = entry.Description ?? string.Empty,
                dateCreated = entry.DateCreated,
                postid = entry.Id,
                title = entry.Title,
                permalink = Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(),
                categories = new string[entry.Categories.Count]
            };
            entry.Categories.CopyTo(post.categories, 0);
            if(entry.HasEntryName)
            {
                post.wp_slug = entry.EntryName;
            }
            if(entry.Enclosure != null)
            {
                post.enclosure = new Enclosure
                {
                    length = (int)entry.Enclosure.Size,
                    type = entry.Enclosure.MimeType,
                    url = entry.Enclosure.Url
                };
            }

            return post;
        }

        public bool deletePage(string blog_id, string username, string password, string page_id)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            try
            {
                Repository.DeleteEntry(Int32.Parse(page_id, CultureInfo.InvariantCulture));
                return true;
            }
            catch
            {
                throw new XmlRpcFaultException(1,
                                               String.Format(CultureInfo.InvariantCulture,
                                                             Resources.XmlRpcFault_CannotDeletePage, page_id));
            }
        }

        #endregion

        private void ValidateUser(string username, string password, bool allowServiceAccess)
        {
            if(!Config.Settings.AllowServiceAccess || !allowServiceAccess)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_WebServiceNotEnabled);
            }

            bool isValid = SecurityHelper.IsValidUser(Blog, username, password);
            if(!isValid)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_UsernameAndPasswordInvalid);
            }
        }

        private string PostContent(string username, string password, ref Post post, bool publish, PostType postType)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            var entry = new Entry(postType) {PostType = postType, IsActive = publish, Author = Blog.Author, Email = Blog.Email};
            post.CopyValuesTo(entry);
            entry.AllowComments = true;
            entry.DisplayOnHomePage = true;

            DateTime dateTimeInPost = post.dateCreated != null ? post.dateCreated.Value : DateTime.UtcNow;
            // Store in the blog's timezone
            dateTimeInPost = Blog.TimeZone.FromUtc(dateTimeInPost);

            entry.DateCreated = entry.DateModified = Blog.TimeZone.Now;
            if(publish)
            {
                entry.DateSyndicated = dateTimeInPost;
            }

            entry.IncludeInMainSyndication = true;
            entry.IsAggregated = true;
            entry.SyndicateDescriptionOnly = false;

            int postId;
            try
            {
                //TODO: Review whether keywords should be true.
                postId = EntryPublisher.Publish(entry);
                if(Blog.TrackbacksEnabled)
                {
                    NotificationServices.Run(entry, Blog, Url);
                }

                if(post.enclosure != null)
                {
                    Components.Enclosure enclosure = post.enclosure.Value.CopyValuesToEnclosure();
                    enclosure.EntryId = postId;
                    Repository.Create(enclosure);
                }

                AddCommunityCredits(entry);
            }
            catch(Exception e)
            {
                throw new XmlRpcFaultException(0, e.Message + " " + e.StackTrace);
            }
            if(postId < 0)
            {
                throw new XmlRpcFaultException(0, Resources.XmlRpcFault_AddPostFailed);
            }
            return postId.ToString(CultureInfo.InvariantCulture);
        }

        private void AddCommunityCredits(Entry entry)
        {
            try
            {
                CommunityCreditNotification.AddCommunityCredits(entry, Url, Blog);
            }
            catch(CommunityCreditNotificationException ex)
            {
                Log.WarnFormat(Resources.XmlRpcWarn_CommunityCredits,
                               Url.EntryUrl(entry).ToFullyQualifiedUrl(Blog).ToString(), ex.Message);
            }
            catch(Exception ex)
            {
                Log.Error(Resources.XmlRpcError_CommunityCredits, ex);
            }
        }

        [XmlRpcMethod("mt.getCategoryList",
            Description = "Gets a list of active categories for a given blog as an array of MT category struct.")]
        public MtCategory[] GetCategoryList(string blogid, string username, string password)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            ICollection<LinkCategory> lcc = Repository.GetCategories(CategoryType.PostCollection, false);
            if(lcc == null)
            {
                throw new XmlRpcFaultException(0, "No categories exist");
            }

            var categories = new MtCategory[lcc.Count];
            int i = 0;
            foreach(LinkCategory linkCategory in lcc)
            {
                var category = new MtCategory(linkCategory.Id.ToString(CultureInfo.InvariantCulture),
                                               linkCategory.Title);
                categories[i] = category;
                i++;
            }
            return categories;
        }

        [XmlRpcMethod("mt.setPostCategories",
            Description = "Sets the categories for a given post.")]
        public bool SetPostCategories(string postid, string username, string password,
                                      MtCategory[] categories)
        {
            ValidateUser(username, password, Blog.AllowServiceAccess);

            if(categories != null && categories.Length > 0)
            {
                int postId = Int32.Parse(postid, CultureInfo.InvariantCulture);

                IEnumerable<int> categoryIds = from category in categories
                                               select int.Parse(category.categoryId, CultureInfo.InvariantCulture);

                if(categoryIds.Any())
                {
                    Repository.SetEntryCategoryList(postId, categoryIds);
                }
            }

            return true;
        }

        [XmlRpcMethod("mt.getPostCategories",
            Description = "Sets the categories for a given post.")]
        public MtCategory[] GetPostCategories(string postid, string userName, string password)
        {
            ValidateUser(userName, password, Blog.AllowServiceAccess);

            int postId = Int32.Parse(postid, CultureInfo.InvariantCulture);
            ICollection<Link> postCategories = Repository.GetLinkCollectionByPostId(postId);
            var categories = new MtCategory[postCategories.Count];
            if(postCategories.Count > 0)
            {
                // REFACTOR: Might prefer seeing a dictionary come back straight from the provider.
                // for now we'll build our own catid->catTitle lookup--we need it below bc collection
                // from post is going to be null for title.
                ICollection<LinkCategory> cats = Repository.GetCategories(CategoryType.PostCollection, false);
                var catLookup = new Hashtable(cats.Count);
                foreach(LinkCategory currentCat in cats)
                {
                    catLookup.Add(currentCat.Id, currentCat.Title);
                }

                int i = 0;
                foreach(Link link in postCategories)
                {
                    var category = new MtCategory(link.CategoryId.ToString(CultureInfo.InvariantCulture),
                                                   (string)catLookup[link.CategoryId]);

                    categories[i] = category;
                    i++;
                }
            }

            return categories;
        }

        /// <summary>
        /// Retrieve information about the text formatting plugins supported by the server.
        /// </summary>
        /// <returns>
        /// an array of structs containing String key and String label. 
        /// key is the unique string identifying a text formatting plugin, 
        /// and label is the readable description to be displayed to a user. 
        /// key is the value that should be passed in the mt_convert_breaks 
        /// parameter to newPost and editPost.
        /// </returns>
        [XmlRpcMethod("mt.supportedTextFilters",
            Description = "Retrieve information about the text formatting plugins supported by the server.")]
        public MtTextFilter[] GetSupportedTextFilters()
        {
            return new[] {new MtTextFilter("test", "test"),};
        }

        #region Nested type: BloggerPost

        public struct BloggerPost
        {
            public string content;
            public DateTime dateCreated;
            public string postid;
            public string userid;
        }

        #endregion

        // we'll also add a couple structs and methods to give us nominal MT API-level support.
        // by doing this we'll allow w.bloggar to run against .Text using w.b's MT configuration.

        #region Nested type: MtCategory

        public struct MtCategory
        {
            public string categoryId;
            [XmlRpcMissingMapping(MappingAction.Ignore)] public string categoryName;
            [XmlRpcMissingMapping(MappingAction.Ignore)] public bool isPrimary;

            /// <summary>
            /// Initializes a new instance of the <see cref="MtCategory"/> class.
            /// </summary>
            /// <param name="category">The category.</param>
            public MtCategory(string category)
            {
                categoryId = category;
                categoryName = category;
                isPrimary = false;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="MtCategory"/> class.
            /// </summary>
            /// <param name="id">The id.</param>
            /// <param name="category">The category.</param>
            public MtCategory(string id, string category)
            {
                categoryId = id;
                categoryName = category;
                isPrimary = false;
            }
        }

        #endregion

        #region Nested type: MtTextFilter

        /// <summary>
        /// Represents a text filter returned by mt.supportedTextFilters.
        /// </summary>
        [XmlRpcMissingMapping(MappingAction.Ignore)]
        public struct MtTextFilter
        {
            public string key;
            public string label;

            /// <summary>
            /// Initializes a new instance of the <see cref="MtTextFilter"/> class.
            /// </summary>
            /// <param name="key">The key.</param>
            /// <param name="label">The label.</param>
            public MtTextFilter(string key, string label)
            {
                this.key = key;
                this.label = label;
            }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Components;

namespace Subtext.Framework.XmlRpc
{
    public static class MetaWeblogExtensions
    {
        public static void CopyValuesTo(this Enclosure source, Components.Enclosure enclosure)
        {
            enclosure.Url = source.url;
            enclosure.MimeType = source.type;
            enclosure.Size = source.length;
        }

        public static void CopyValuesTo(this Post post, Entry entry)
        {
            entry.Body = post.description;
            entry.Title = post.title;

            if (post.excerpt != null)
            {
                entry.Description = post.excerpt;
            }

            if(post.categories != null)
            {
                entry.Categories.AddRange(post.categories);
            }
            if(!string.IsNullOrEmpty(post.wp_slug))
            {
                entry.EntryName = post.wp_slug;
            }
        }

        public static Components.Enclosure CopyValuesToEnclosure(this Enclosure source)
        {
            var enclosure = new Components.Enclosure();
            source.CopyValuesTo(enclosure);
            return enclosure;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using CookComputing.XmlRpc;

namespace Subtext.Framework.XmlRpc
{
    [XmlRpcMissingMapping(MappingAction.Ignore)]
    public struct Post
    {
        [XmlRpcMember("categories", Description = "Contains categories for the post.")] public string[] categories;

        [XmlRpcMissingMapping(MappingAction.Error)] [XmlRpcMember(Description = "Required when posting.")] public
            DateTime? dateCreated;

        [XmlRpcMissingMapping(MappingAction.Error)] [XmlRpcMember(Description = "Required when posting.")] public string
            description;

        public Enclosure? enclosure;
        [XmlRpcMember("mt_excerpt")] public string excerpt;
        public string link;
        public string permalink;

        [XmlRpcMember(
            Description = "Not required when posting. Depending on server may "
                          + "be either string or integer. "
                          + "Use Convert.ToInt32(postid) to treat as integer or "
                          + "Convert.ToString(postid) to treat as string")] public object postid;

        public Source source;

        [XmlRpcMissingMapping(MappingAction.Error)] [XmlRpcMember(Description = "Required when posting.")] public string
            title;

        public string userid;
        public string wp_slug;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using CookComputing.XmlRpc;

namespace Subtext.Framework.XmlRpc
{
    // TODO: following attribute is a temporary workaround
    [XmlRpcMissingMapping(MappingAction.Ignore)]
    public struct Source
    {
        public string name;
        public string url;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Routing;
using CookComputing.XmlRpc;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace Subtext.Framework.XmlRpc
{
    public abstract class SubtextXmlRpcService : XmlRpcService
    {
        protected SubtextXmlRpcService(ISubtextContext context)
        {
            SubtextContext = context;
        }

        protected ISubtextContext SubtextContext { get; private set; }

        protected Blog Blog
        {
            get { return SubtextContext.Blog; }
        }

        protected UrlHelper Url
        {
            get { return SubtextContext.UrlHelper; }
        }

        protected ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        protected RouteValueDictionary RouteValues
        {
            get { return SubtextContext.RequestContext.RouteData.Values; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//

[assembly: AssemblyTitle("Subtext.Providers.RichTextEditor.FCKeditor")]
[assembly: AssemblyDescription("Implements the RichTextEditor Provider using the FCKeditor project")]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(false)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, Execution = true)]#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Reflection;
using System.Resources;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Web;

namespace Subtext.Providers.BlogEntryEditor.FCKeditor
{
    /// <summary>
    /// Implements the BlogEntryEditorProvider abstract provider to allow the 
    /// user use the FCKEditor control for editing blog posts.
    /// </summary>
    public class FckBlogEntryEditorProvider : BlogEntryEditorProvider
    {
        private static readonly ResourceManager rm =
            new ResourceManager("Subtext.Providers.BlogEntryEditor.FCKeditor.resources.ErrorMessages",
                                Assembly.GetExecutingAssembly());

        static string _fileAllowedExtensions = string.Empty;

        readonly FredCK.FCKeditorV2.FCKeditor _fckCtl = new FredCK.FCKeditorV2.FCKeditor();
        //There's a good reason to do this early.

        string _imageBrowserURL = string.Empty;
        string _imageConnectorURL = string.Empty;
        string _linkBrowserURL = string.Empty;
        string _linkConnectorURL = string.Empty;
        string _skin = string.Empty;
        string _toolbarSet = string.Empty;
        string _webFormFolder = string.Empty;

        public override Control RichTextEditorControl
        {
            get { return _fckCtl; }
        }

        public override string Text
        {
            get { return _fckCtl.Value; }
            set { _fckCtl.Value = value; }
        }

        public override string Xhtml
        {
            get { return Text; }
        }

        public static string ImageAllowedExtensions { get; private set; }

        public static string FileAllowedExtensions { get; private set; }

        public override void Initialize(string name, NameValueCollection configValue)
        {
            if(name == null)
            {
                throw new ArgumentNullException("name", rm.GetString("nameNeeded"));
            }

            if(configValue == null)
            {
                throw new ArgumentNullException("configValue", rm.GetString("configNeeded"));
            }

            if(configValue["WebFormFolder"] != null)
            {
                _webFormFolder = configValue["WebFormFolder"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("WebFormFolderNeeded"));
            }

            if(configValue["ImageBrowserURL"] != null)
            {
                _imageBrowserURL = configValue["ImageBrowserURL"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("ImageBrowserURLNeeded"));
            }

            if(configValue["LinkBrowserURL"] != null)
            {
                _linkBrowserURL = configValue["LinkBrowserURL"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("LinkBrowserURLNeeded"));
            }

            if(configValue["ImageConnectorURL"] != null)
            {
                _imageConnectorURL = configValue["ImageConnectorURL"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("ImageConnectorURLNeeded"));
            }

            if(configValue["LinkConnectorURL"] != null)
            {
                _linkConnectorURL = configValue["LinkConnectorURL"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("LinkConnectorURLNeeded"));
            }


            if(configValue["FileAllowedExtensions"] != null)
            {
                FileAllowedExtensions = configValue["FileAllowedExtensions"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("FileAllowedExtensionsNeeded"));
            }


            if(configValue["ImageAllowedExtensions"] != null)
            {
                ImageAllowedExtensions = configValue["ImageAllowedExtensions"];
            }
            else
            {
                throw new InvalidOperationException(rm.GetString("ImageAllowedExtensionsNeeded"));
            }

            if(configValue["ToolbarSet"] != null)
            {
                _toolbarSet = configValue["ToolbarSet"];
            }

            if(configValue["Skin"] != null)
            {
                _skin = configValue["Skin"];
            }

            base.Initialize(name, configValue);
        }

        public override void InitializeControl(object context)
        {
            var subtextContext = context as ISubtextContext;
            _fckCtl.ID = ControlId;
            if(!String.IsNullOrEmpty(_webFormFolder))
            {
                _fckCtl.BasePath = HttpHelper.ExpandTildePath(_webFormFolder);
            }

            if(Width != Unit.Empty)
            {
                _fckCtl.Width = Width;
            }
            if(Height != Unit.Empty)
            {
                _fckCtl.Height = Height;
            }
            if(_toolbarSet.Length != 0)
            {
                _fckCtl.ToolbarSet = _toolbarSet;
            }
            if(_skin.Length != 0)
            {
                _fckCtl.SkinPath = _fckCtl.BasePath + "editor/skins/" + _skin + "/";
            }
            // Compute user image gallery url
            string blogSubFolder = subtextContext.Blog.Subfolder;
            string currentImageConnector = _imageConnectorURL;
            string currentLinkConnector = _linkConnectorURL;
            if(blogSubFolder.Length > 0)
            {
                currentImageConnector = _imageConnectorURL.Replace("~/", "~/" + blogSubFolder + "/");
                currentLinkConnector = _linkConnectorURL.Replace("~/", "~/" + blogSubFolder + "/");
            }

            _fckCtl.ImageBrowserURL = String.Format(HttpHelper.ExpandTildePath(_imageBrowserURL),
                                                    HttpHelper.ExpandTildePath(currentImageConnector));
            _fckCtl.LinkBrowserURL = String.Format(HttpHelper.ExpandTildePath(_linkBrowserURL),
                                                   HttpHelper.ExpandTildePath(currentLinkConnector));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
///Part of this code derives from the original FileBrowserConnector shipped with 
///the original FredCK.FCKeditorV2, which is redistributed with the following license

#region Original License

/*
 * FCKeditor - The text editor for internet
 * Copyright (C) 2003-2005 Frederico Caldeira Knabben
 * 
 * Licensed under the terms of the GNU Lesser General Public License:
 * 		http://www.opensource.org/licenses/lgpl-license.php
 * 
 * For further information visit:
 * 		http://www.fckeditor.net/
 * 
 * "Support Open Source software. What about a donation today?"
 * 
 * 
 * File Authors:
 * 		Frederico Caldeira Knabben (fredck@fckeditor.net)
 */

#endregion

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Net;
using System.Security;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Xml;
using FredCK.FCKeditorV2;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Providers.BlogEntryEditor.FCKeditor
{
    /// <summary>
    /// Used to provide file management functionality for FCKEditor.
    /// </summary>
    public class FileBrowserConnector : SubtextPage
    {
        protected override void OnInit(EventArgs e)
        {
            if(!SubtextContext.User.IsInRole("Admins"))
            {
                SubtextContext.HttpContext.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                SubtextContext.HttpContext.Response.End();
            }
            base.OnInit(e);
        }

        protected override void OnLoad(EventArgs e)
        {
            // Get the main request informaiton.
            string sCommand = Request.QueryString["Command"];
            if(sCommand == null)
            {
                return;
            }

            string sResourceType = Request.QueryString["Type"];
            if(sResourceType == null)
            {
                return;
            }

            string sCurrentFolder = Request.QueryString["CurrentFolder"];
            if(sCurrentFolder == null)
            {
                return;
            }

            // Check the current folder syntax (must begin and start with a slash).
            if(!sCurrentFolder.EndsWith("/"))
            {
                sCurrentFolder += "/";
            }
            if(!sCurrentFolder.StartsWith("/"))
            {
                sCurrentFolder = "/" + sCurrentFolder;
            }

            // File Upload doesn't have to return XML, so it must be intercepted before anything.
            if(sCommand == "FileUpload")
            {
                FileUpload(sResourceType, sCurrentFolder);
                return;
            }

            // Cleans the response buffer.
            Response.ClearHeaders();
            Response.Clear();

            // Prevent the browser from caching the result.
            Response.CacheControl = "no-cache";

            // Set the response format.
            Response.ContentEncoding = Encoding.UTF8;
            Response.ContentType = "text/xml";

            var oXML = new XmlDocument();
            XmlNode oConnectorNode = CreateBaseXml(oXML, sCommand, sResourceType, sCurrentFolder);

            if(CreateImageFolder(oConnectorNode))
            {
                if(sResourceType.Equals("Image"))
                {
                    // Execute the required command.
                    switch(sCommand)
                    {
                        case "GetFolders":
                            GetFolders(oConnectorNode, sCurrentFolder);
                            break;
                        case "GetFoldersAndFiles":
                            GetFolders(oConnectorNode, sCurrentFolder);
                            GetFiles(oConnectorNode, sResourceType, sCurrentFolder);
                            break;
                        case "CreateFolder":
                            CreateFolder(oConnectorNode, sResourceType, sCurrentFolder);
                            break;
                    }
                }
                else if(sResourceType.Equals("Posts"))
                {
                    // Execute the required command.
                    switch(sCommand)
                    {
                        case "GetFolders":
                            GetCategories(oConnectorNode, sCurrentFolder);
                            break;
                        case "GetFoldersAndFiles":
                            GetCategories(oConnectorNode, sCurrentFolder);
                            GetPosts(oConnectorNode, sCurrentFolder);
                            break;
                        case "CreateFolder":
                            CreateFolder(oConnectorNode, sResourceType, sCurrentFolder);
                            break;
                    }
                }
                else if(sResourceType.Equals("File"))
                {
                    // Execute the required command.
                    switch(sCommand)
                    {
                        case "GetFolders":
                            GetFolders(oConnectorNode, sCurrentFolder);
                            break;
                        case "GetFoldersAndFiles":
                            GetFolders(oConnectorNode, sCurrentFolder);
                            GetFiles(oConnectorNode, sResourceType, sCurrentFolder);
                            break;
                        case "CreateFolder":
                            CreateFolder(oConnectorNode, sResourceType, sCurrentFolder);
                            break;
                    }
                }
            }

            // Output the resulting XML.
            Response.Write(oXML.OuterXml);

            Response.End();

            base.OnLoad(e);
        }

        private void GetFolders(XmlNode connectorNode, string currentFolder)
        {
            // Map the virtual path to the local server path.
            string sServerDir = ServerMapFolder(currentFolder, Url.ImageDirectoryUrl(Blog));

            // Create the "Folders" node.
            XmlNode oFoldersNode = XmlUtil.AppendElement(connectorNode, "Folders");

            var oDir = new DirectoryInfo(sServerDir);
            DirectoryInfo[] aSubDirs = oDir.GetDirectories();

            for(int i = 0; i < aSubDirs.Length; i++)
            {
                // Create the "Folders" node.
                XmlNode oFolderNode = XmlUtil.AppendElement(oFoldersNode, "Folder");
                XmlUtil.SetAttribute(oFolderNode, "name", aSubDirs[i].Name);
            }
        }

        private void GetFiles(XmlNode connectorNode, string resourceType, string currentFolder)
        {
            // Map the virtual path to the local server path.
            string sServerDir = ServerMapFolder(currentFolder, Url.ImageDirectoryUrl(Blog));

            // Create the "Files" node.
            XmlNode oFilesNode = XmlUtil.AppendElement(connectorNode, "Files");

            var oDir = new DirectoryInfo(sServerDir);
            FileInfo[] aFiles = oDir.GetFiles();

            for(int i = 0; i < aFiles.Length; i++)
            {
                if(Regex.IsMatch(aFiles[i].Extension, GetAllowedExtension(resourceType), RegexOptions.IgnoreCase))
                {
                    Decimal iFileSize = Math.Round((Decimal)aFiles[i].Length / 1024);
                    if(iFileSize < 1 && aFiles[i].Length != 0)
                    {
                        iFileSize = 1;
                    }

                    // Create the "File" node.
                    XmlNode oFileNode = XmlUtil.AppendElement(oFilesNode, "File");
                    XmlUtil.SetAttribute(oFileNode, "name", aFiles[i].Name);
                    XmlUtil.SetAttribute(oFileNode, "size", iFileSize.ToString(CultureInfo.InvariantCulture));
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes",
            Justification =
                "The error number is used to create an error node in the XML document, so we need to catch a general exception as well."
            )]
        private void CreateFolder(XmlNode connectorNode, string resourceType, string currentFolder)
        {
            string sErrorNumber = "0";

            if(resourceType.Equals("Posts"))
            {
                sErrorNumber = "103";
            }
            else
            {
                string sNewFolderName = Request.QueryString["NewFolderName"];

                if(sNewFolderName == null || sNewFolderName.Length == 0)
                {
                    sErrorNumber = "102";
                }
                else
                {
                    // Map the virtual path to the local server path of the current folder.
                    string sServerDir = ServerMapFolder(currentFolder, Url.ImageDirectoryUrl(Blog));

                    try
                    {
                        Util.CreateDirectory(Path.Combine(sServerDir, sNewFolderName));
                    }
                    catch(ArgumentException)
                    {
                        sErrorNumber = "102";
                    }
                    catch(PathTooLongException)
                    {
                        sErrorNumber = "102";
                    }
                    catch(IOException)
                    {
                        sErrorNumber = "101";
                    }
                    catch(SecurityException)
                    {
                        sErrorNumber = "103";
                    }
                    catch(Exception)
                    {
                        sErrorNumber = "110";
                    }
                }
            }

            // Create the "Error" node.
            XmlNode oErrorNode = XmlUtil.AppendElement(connectorNode, "Error");
            XmlUtil.SetAttribute(oErrorNode, "number", sErrorNumber);
        }

        private void FileUpload(string resourceType, string currentFolder)
        {
            string sErrorNumber = "0";
            string sFileName = "";

            if(!resourceType.Equals("Posts"))
            {
                HttpPostedFile oFile = Request.Files["NewFile"];

                if(oFile != null)
                {
                    // Map the virtual path to the local server path.
                    string sServerDir = ServerMapFolder(currentFolder, Url.ImageDirectoryUrl(Blog));

                    // Get the uploaded file name.
                    sFileName = Path.GetFileName(oFile.FileName);

                    int iCounter = 0;

                    while(true)
                    {
                        string sFilePath = Path.Combine(sServerDir, sFileName);

                        if(File.Exists(sFilePath))
                        {
                            iCounter++;
                            sFileName =
                                Path.GetFileNameWithoutExtension(oFile.FileName)
                                + "(" + iCounter + ")"
                                + Path.GetExtension(oFile.FileName);

                            sErrorNumber = "201";
                        }
                        else
                        {
                            oFile.SaveAs(sFilePath);
                            break;
                        }
                    }
                }
                else
                {
                    sErrorNumber = "202";
                }
            }
            else
            {
                sErrorNumber = "203";
            }

            Response.Clear();
            Response.Write("<script type=\"text/javascript\">");
            Response.Write("window.parent.frames['frmUpload'].OnUploadCompleted(" + sErrorNumber + ",'" +
                           sFileName.Replace("'", "\\'") + "') ;");
            Response.Write("</script>");

            Response.End();
        }

        private XmlNode CreateBaseXml(XmlDocument xml, string command, string resourceType, string currentFolder)
        {
            // Create the XML document header.
            xml.AppendChild(xml.CreateXmlDeclaration("1.0", "utf-8", null));

            // Create the main "Connector" node.
            XmlNode connectorNode = XmlUtil.AppendElement(xml, "Connector");
            XmlUtil.SetAttribute(connectorNode, "command", command);
            XmlUtil.SetAttribute(connectorNode, "resourceType", resourceType);

            // Add the current folder node.
            if(!resourceType.Equals("Posts"))
            {
                XmlNode oCurrentNode = XmlUtil.AppendElement(connectorNode, "CurrentFolder");
                XmlUtil.SetAttribute(oCurrentNode, "path", currentFolder);
                XmlUtil.SetAttribute(oCurrentNode, "url", Url.ImageDirectoryUrl(Blog) + currentFolder);
            }
            else
            {
                XmlNode currentNode = XmlUtil.AppendElement(connectorNode, "CurrentFolder");
                XmlUtil.SetAttribute(currentNode, "path", currentFolder);
                XmlUtil.SetAttribute(currentNode, "url", "");
            }

            return connectorNode;
        }

        private string ServerMapFolder(string folderPath, string imageDirectoryUrl)
        {
            // Get the resource type directory.
            string imageDirectoryPath = Server.MapPath(imageDirectoryUrl);

            // Return the resource type directory combined with the required path.
            return Path.Combine(imageDirectoryPath, folderPath.TrimStart('/'));
        }

        private static string GetUrlFromPath(string folderPath, string imageDirectoryUrl)
        {
            return imageDirectoryUrl + folderPath.Substring(1);
        }

        private static string GetAllowedExtension(string resourceType)
        {
            string extStr = string.Empty;
            if(resourceType.Equals("File"))
            {
                extStr = FckBlogEntryEditorProvider.FileAllowedExtensions;
            }
            else if(resourceType.Equals("Image"))
            {
                extStr = FckBlogEntryEditorProvider.ImageAllowedExtensions;
            }
            return extStr;
        }

        private bool CreateImageFolder(XmlNode connectorNode)
        {
            bool retval;
            string imageDirectoryPath = Url.ImageDirectoryPath(Blog);
            try
            {
                if(!Directory.Exists(imageDirectoryPath))
                {
                    Directory.CreateDirectory(imageDirectoryPath);
                }
                retval = true;
            }
            catch(Exception)
            {
                // Create the "Error" node.
                XmlNode errorNode = XmlUtil.AppendElement(connectorNode, "Error");
                XmlUtil.SetAttribute(errorNode, "number", "1");
                XmlUtil.SetAttribute(errorNode, "text",
                                     "Cannot create folder: " + imageDirectoryPath + "." + Environment.NewLine +
                                     "Write access to this folder is required to initialize the image storage");
                retval = false;
            }
            return retval;
        }

        #region Post Type Handler

        private static void GetCategories(XmlNode connectorNode, string currentFolder)
        {
            if(currentFolder.Equals("/"))
            {
                ICollection<LinkCategory> catList = Links.GetCategories(CategoryType.PostCollection, ActiveFilter.None);

                // Create the "Folders" node.
                XmlNode oFoldersNode = XmlUtil.AppendElement(connectorNode, "Folders");

                foreach(LinkCategory category in catList)
                {
                    // Create the "Folders" node.
                    XmlNode oFolderNode = XmlUtil.AppendElement(oFoldersNode, "Folder");
                    XmlUtil.SetAttribute(oFolderNode, "name", category.Title);
                }
            }
        }

        private void GetPosts(XmlNode connectorNode, string currentFolder)
        {
            IPagedCollection<EntryStatsView> posts;
            if(currentFolder.Equals("/"))
            {
                posts = Repository.GetEntries(PostType.BlogPost, -1, 0, 1000);
            }
            else
            {
                string categoryName = currentFolder.Substring(1, currentFolder.Length - 2);
                LinkCategory cat = ObjectProvider.Instance().GetLinkCategory(categoryName, false);
                posts = Repository.GetEntries(PostType.BlogPost, cat.Id, 0, 1000);
            }

            // Create the "Files" node.
            XmlNode oFilesNode = XmlUtil.AppendElement(connectorNode, "Files");
            foreach(var entry in posts)
            {
                // Create the "File" node.
                if(entry.IsActive)
                {
                    XmlNode oFileNode = XmlUtil.AppendElement(oFilesNode, "File");

                    //TODO: Seriously refactor.
                    var urlHelper = new UrlHelper(null, null);

                    XmlUtil.SetAttribute(oFileNode, "name",
                                         string.Format(CultureInfo.InvariantCulture, "{0}|{1}", entry.Title,
                                                       urlHelper.EntryUrl(entry).ToFullyQualifiedUrl(Config.CurrentBlog)));
                    XmlUtil.SetAttribute(oFileNode, "size", entry.DateModified.ToShortDateString());
                }
            }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Net;
using Ninject;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace Subtext.Providers.BlogEntryEditor.FCKeditor
{
    public class Uploader : FredCK.FCKeditorV2.Uploader, ISubtextHandler
    {
        #region ISubtextHandler Members

        [Inject]
        public ISubtextContext SubtextContext { get; set; }

        public UrlHelper Url
        {
            get { return SubtextContext.UrlHelper; }
        }

        public ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        public AdminUrlHelper AdminUrl
        {
            get { return new AdminUrlHelper(Url); }
        }

        #endregion

        protected override void OnInit(EventArgs e)
        {
            if(!SubtextContext.User.IsInRole("Admins"))
            {
                SubtextContext.HttpContext.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                SubtextContext.HttpContext.Response.End();
            }
            base.OnInit(e);
            base.OnInit(e);
        }
    }
}/*
 * FCKeditor - The text editor for internet
 * Copyright (C) 2003-2005 Frederico Caldeira Knabben
 * 
 * Licensed under the terms of the GNU Lesser General Public License:
 * 		http://www.opensource.org/licenses/lgpl-license.php
 * 
 * For further information visit:
 * 		http://www.fckeditor.net/
 * 
 * "Support Open Source software. What about a donation today?"
 * 
 * File Name: XmlUtil.cs
 * 	Useful tools for XML.
 * 
 * File Authors:
 * 		Frederico Caldeira Knabben (fredck@fckeditor.net)
 */

using System.Xml;

namespace FredCK.FCKeditorV2
{
    internal sealed class XmlUtil
    {
        private XmlUtil()
        {
        }

        public static XmlNode AppendElement(XmlNode node, string newElementName)
        {
            return AppendElement(node, newElementName, null);
        }

        public static XmlNode AppendElement(XmlNode node, string newElementName, string innerValue)
        {
            XmlNode oNode;

            if(node.GetType() == typeof(XmlDocument))
            {
                oNode = node.AppendChild(((XmlDocument)node).CreateElement(newElementName));
            }
            else
            {
                oNode = node.AppendChild(node.OwnerDocument.CreateElement(newElementName));
            }

            if(innerValue != null)
            {
                oNode.AppendChild(node.OwnerDocument.CreateTextNode(innerValue));
            }

            return oNode;
        }

        public static XmlAttribute CreateAttribute(XmlDocument xmlDocument, string name, string value)
        {
            XmlAttribute oAtt = xmlDocument.CreateAttribute(name);
            oAtt.Value = value;
            return oAtt;
        }

        public static void SetAttribute(XmlNode node, string attributeName, string attributeValue)
        {
            if(node.Attributes[attributeName] != null)
            {
                node.Attributes[attributeName].Value = attributeValue;
            }
            else
            {
                node.Attributes.Append(CreateAttribute(node.OwnerDocument, attributeName, attributeValue));
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Articles
{
    public partial class Articles : MasterPage
    {
        protected AdminPageTemplate AdminMasterPage
        {
            get { return Master as AdminPageTemplate; }
        }

        protected override void OnLoad(EventArgs e)
        {
            BindLocalUI();
            base.OnLoad(e);
        }

        private void BindLocalUI()
        {
            var newPostLink = new HyperLink {Text = Resources.Label_NewArticle, NavigateUrl = "Edit.aspx"};
            AdminMasterPage.AddToActions(newPostLink);

            HyperLink lnkEditCategories = Utilities.CreateHyperLink(Resources.Label_EditCategories,
                                                                    string.Format(CultureInfo.InvariantCulture
                                                                                  , "{0}?{1}={2}"
                                                                                  , "../" + Constants.URL_EDITCATEGORIES
                                                                                  , Keys.QRYSTR_CATEGORYTYPE
                                                                                  , categoryLinks.CategoryType));
            AdminMasterPage.AddToActions(lnkEditCategories);

            LinkButton lkbRebuildTags = Utilities.CreateLinkButton(Resources.Label_RebuildAllTags);
            lkbRebuildTags.CausesValidation = false;
            lkbRebuildTags.Click += OnRebuildTagsClick;
            AdminMasterPage.AddToActions(lkbRebuildTags);
        }

        private static void OnRebuildTagsClick(object sender, EventArgs e)
        {
            ObjectProvider.Instance().RebuildAllTags();
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Articles {
    
    
    public partial class Articles {
        
        /// <summary>
        /// categoryLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.CategoryLinkList categoryLinks;
        
        /// <summary>
        /// postsContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder postsContent;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Articles
{
    public partial class Default : AdminPage
    {
        public Default()
        {
            TabSectionId = "Articles";
        }

        protected override void OnLoad(EventArgs e)
        {
            entries.HeaderText = Resources.Label_Articles;
            string message = Request.QueryString["message"];
            if(!string.IsNullOrEmpty(message))
            {
                Messages.ShowMessage(message);
            }
            base.OnLoad(e);
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Articles {
    
    
    public partial class Default {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// entries control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.EntriesList entries;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.Admin.Pages;

namespace Subtext.Web.Admin.Articles
{
    public partial class Edit : ConfirmationPage
    {
        public Edit()
        {
            TabSectionId = "Articles";
            IsInEdit = true;
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Articles {
    
    
    public partial class Edit {
        
        /// <summary>
        /// Editor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.EntryEditor Editor;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Security;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Summary description for Comments.
    /// </summary>
    public partial class Comments : AdminOptionsPage
    {
        bool IsPageValid
        {
            get
            {
                if(txtCommentDelayIntervalMinutes.Text.Length > 0)
                {
                    ValidateIntegerRange(Resources.CommentValidation_CommentDelay, txtCommentDelayIntervalMinutes.Text,
                                         0, 3600, Resources.CommentValidation_CommentDelayTooSmall,
                                         Resources.CommentValidation_CommentDelayTooBig);
                }

                if(txtDaysTillCommentsClosed.Text.Length > 0)
                {
                    ValidateInteger(Resources.CommentValidation_DaysTillClose, txtDaysTillCommentsClosed.Text, 0,
                                    int.MaxValue);
                }

                if(txtNumberOfRecentComments.Text.Length > 0)
                {
                    ValidateInteger(Resources.CommentValidation_RecentCommentsCount, txtNumberOfRecentComments.Text, 0,
                                    int.MaxValue);
                }

                if(txtRecentCommentsLength.Text.Length > 0)
                {
                    ValidateInteger(Resources.CommentValidation_LengthOfRecentComment, txtRecentCommentsLength.Text, 0,
                                    int.MaxValue);
                }

                if(!String.IsNullOrEmpty(txtAkismetAPIKey.Text))
                {
                    var akismet = new AkismetSpamService(txtAkismetAPIKey.Text, Blog, null, Url);
                    try
                    {
                        if(!akismet.VerifyApiKey())
                        {
                            Messages.ShowError(Resources.Comments_CouldNotVerifyAkismetKey);
                            return false;
                        }
                    }
                    catch(SecurityException e)
                    {
                        Messages.ShowError(string.Format(CultureInfo.InvariantCulture,
                                                         Resources.Comments_AkismetRequiresPermissionType,
                                                         e.PermissionType));
                        return false;
                    }
                }

                return true;
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lkbPost.Click += this.lkbPost_Click;
            this.Load += this.Page_Load;
        }

        #endregion

        protected override void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);
            ManageHiddenSettings();
        }

        protected override void BindLocalUI()
        {
            Blog info = Config.CurrentBlog;

            chkEnableComments.Checked = info.CommentsEnabled;
            chkEnableCommentModeration.Checked = info.ModerationEnabled;
            chkEnableTrackbacks.Checked = info.TrackbacksEnabled;
            chkCoCommentEnabled.Checked = info.CoCommentsEnabled;
            chkAllowDuplicates.Checked = info.DuplicateCommentsEnabled;
            chkEnableCaptcha.Checked = info.CaptchaEnabled;

            txtAkismetAPIKey.Text = info.FeedbackSpamServiceKey;

            if(info.DaysTillCommentsClose > -1 && info.DaysTillCommentsClose < int.MaxValue)
            {
                txtDaysTillCommentsClosed.Text = info.DaysTillCommentsClose.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                txtDaysTillCommentsClosed.Text = string.Empty;
            }

            if(info.CommentDelayInMinutes > 0 && info.CommentDelayInMinutes < int.MaxValue)
            {
                txtCommentDelayIntervalMinutes.Text = info.CommentDelayInMinutes.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                txtCommentDelayIntervalMinutes.Text = string.Empty;
            }

            if(info.NumberOfRecentComments > 0 && info.NumberOfRecentComments < int.MaxValue)
            {
                txtNumberOfRecentComments.Text = info.NumberOfRecentComments.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                txtNumberOfRecentComments.Text = string.Empty;
            }

            if(info.RecentCommentsLength > 0 && info.RecentCommentsLength < int.MaxValue)
            {
                txtRecentCommentsLength.Text = info.RecentCommentsLength.ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                txtRecentCommentsLength.Text = string.Empty;
            }

            base.BindLocalUI();
        }

        private void ManageHiddenSettings()
        {
            chkEnableComments.Attributes["onclick"] = "toggleHideOnCheckbox(this, 'otherSettings');";

            string startupScript = "<script type=\"text/javascript\">"
                                   + Environment.NewLine + "var checkbox = document.getElementById('" +
                                   chkEnableComments.ClientID + "');"
                                   + Environment.NewLine + " toggleHideOnCheckbox(checkbox, 'otherSettings');"
                                   + Environment.NewLine + "</script>";

            Type ctype = GetType();
            Page.ClientScript.RegisterStartupScript(ctype, "startupScript", startupScript);
        }

        private void SaveSettings()
        {
            try
            {
                UpdateConfiguration();
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION, Resources.Comments_SettingsFailed, ex.Message));
            }
        }

        private void UpdateConfiguration()
        {
            if(IsPageValid)
            {
                Blog info = Blog;

                info.CommentsEnabled = chkEnableComments.Checked;
                info.ModerationEnabled = chkEnableCommentModeration.Checked;
                info.CoCommentsEnabled = chkCoCommentEnabled.Checked;
                info.TrackbacksEnabled = chkEnableTrackbacks.Checked;
                info.DuplicateCommentsEnabled = chkAllowDuplicates.Checked;
                info.CaptchaEnabled = chkEnableCaptcha.Checked;

                info.CommentDelayInMinutes = txtCommentDelayIntervalMinutes.Text.Length == 0 ? 0 : int.Parse(txtCommentDelayIntervalMinutes.Text);

                if(txtDaysTillCommentsClosed.Text.Length > 0)
                {
                    info.DaysTillCommentsClose = ValidateInteger(Resources.CommentValidation_DaysTillClose,
                                                                 txtDaysTillCommentsClosed.Text, 0, int.MaxValue);
                }
                else
                {
                    info.DaysTillCommentsClose = int.MaxValue;
                }

                if(txtNumberOfRecentComments.Text.Length > 0)
                {
                    info.NumberOfRecentComments = ValidateInteger(Resources.CommentValidation_RecentCommentsCount,
                                                                  txtNumberOfRecentComments.Text, 0, int.MaxValue);
                }
                else
                {
                    info.NumberOfRecentComments = int.MaxValue;
                }

                if(txtRecentCommentsLength.Text.Length > 0)
                {
                    info.RecentCommentsLength = ValidateInteger(Resources.CommentValidation_LengthOfRecentComment,
                                                                txtRecentCommentsLength.Text, 0, int.MaxValue);
                }
                else
                {
                    info.RecentCommentsLength = int.MaxValue;
                }

                info.FeedbackSpamServiceKey = txtAkismetAPIKey.Text;
                Repository.UpdateConfigData(info);
                Messages.ShowMessage(Resources.Comments_SettingsUpdated);
            }
        }

        private void lkbPost_Click(object sender, EventArgs e)
        {
            SaveSettings();
        }

        static int ValidateInteger(string fieldName, string value, int minAllowedValue, int maxAllowedValue)
        {
            return ValidateIntegerRange(fieldName, value, minAllowedValue, maxAllowedValue,
                                        Resources.Message_ValueTooSmall, Resources.Message_ValueTooBig);
        }

        static int ValidateIntegerRange(string fieldName, string value, int minAllowedValue, int maxAllowedValue,
                                 string tooSmallFormatMessage, string tooBigFormatMessage)
        {
            try
            {
                int theNumber = int.Parse(value);
                if(theNumber < minAllowedValue)
                {
                    throw new ArgumentException(string.Format(tooSmallFormatMessage, fieldName, minAllowedValue),
                                                fieldName);
                }
                if(theNumber > maxAllowedValue)
                {
                    throw new ArgumentException(string.Format(tooBigFormatMessage, fieldName, maxAllowedValue),
                                                fieldName);
                }
                return theNumber;
            }
            catch(FormatException)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.Message_ValueMustBePositive, fieldName),
                    fieldName);
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Comments {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// chkEnableComments control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEnableComments;
        
        /// <summary>
        /// HelpToolTip1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip1;
        
        /// <summary>
        /// chkEnableTrackbacks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEnableTrackbacks;
        
        /// <summary>
        /// Helptooltip5 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip5;
        
        /// <summary>
        /// chkEnableCommentModeration control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEnableCommentModeration;
        
        /// <summary>
        /// helpCommentModeration control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip helpCommentModeration;
        
        /// <summary>
        /// chkCoCommentEnabled control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkCoCommentEnabled;
        
        /// <summary>
        /// Helptooltip6 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip6;
        
        /// <summary>
        /// chkEnableCaptcha control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEnableCaptcha;
        
        /// <summary>
        /// helpCaptcha control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip helpCaptcha;
        
        /// <summary>
        /// chkAllowDuplicates control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkAllowDuplicates;
        
        /// <summary>
        /// Helptooltip4 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip4;
        
        /// <summary>
        /// hlpAkismet control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip hlpAkismet;
        
        /// <summary>
        /// txtAkismetAPIKey control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtAkismetAPIKey;
        
        /// <summary>
        /// HelpToolTip2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip2;
        
        /// <summary>
        /// txtCommentDelayIntervalMinutes control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtCommentDelayIntervalMinutes;
        
        /// <summary>
        /// Helptooltip3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip3;
        
        /// <summary>
        /// txtDaysTillCommentsClosed control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtDaysTillCommentsClosed;
        
        /// <summary>
        /// Helptooltip7 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip7;
        
        /// <summary>
        /// txtNumberOfRecentComments control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtNumberOfRecentComments;
        
        /// <summary>
        /// Helptooltip8 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip8;
        
        /// <summary>
        /// txtRecentCommentsLength control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtRecentCommentsLength;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.UI.Skinning;
using Subtext.Framework.Util;
using Subtext.Infrastructure;

namespace Subtext.Web.Admin.Pages
{
    public partial class Configure : AdminOptionsPage
    {
        // abstract out at a future point for i18n
        private const string FailureMessage = "Configuration update failed.";
        private const string SuccessMessage = "Your configuration was successfully updated.";
        private IList<SkinTemplate> _mobileSkins;
        private ICollection<SkinTemplate> _skins;

        public CategoryType CategoryType
        {
            get { return (CategoryType)ViewState["CategoryType"]; }
            set { ViewState["CategoryType"] = value; }
        }

        protected ICollection<SkinTemplate> Skins
        {
            get
            {
                if(_skins == null)
                {
                    var engine = new SkinEngine();
                    IDictionary<string, SkinTemplate> templates = engine.GetSkinTemplates(false /* mobile */);
                    _skins = templates.Values;
                    foreach(SkinTemplate template in _skins)
                    {
                        if(template.MobileSupport == MobileSupport.Supported)
                        {
                            template.Name += " (mobile ready)";
                        }
                    }
                }
                return _skins;
            }
        }

        protected ICollection<SkinTemplate> MobileSkins
        {
            get
            {
                if(_mobileSkins == null)
                {
                    var engine = new SkinEngine();
                    IDictionary<string, SkinTemplate> templates = engine.GetSkinTemplates(true /* mobile */);
                    _mobileSkins = new List<SkinTemplate>(templates.Values);
                    _mobileSkins.Insert(0, SkinTemplate.Empty);
                }
                return _mobileSkins;
            }
        }

        private ITimeZone SelectedTimeZone
        {
            get
            {
                string timeZoneId = String.IsNullOrEmpty(ddlTimezone.SelectedValue)
                                        ? TimeZone.CurrentTimeZone.StandardName
                                        : ddlTimezone.SelectedValue;

                return new TimeZoneWrapper(TimeZones.GetTimeZones().GetById(timeZoneId));
            }
        }

        protected override void BindLocalUI()
        {
            txbTitle.Text = Blog.Title;
            txbSubtitle.Text = Blog.SubTitle;
            txbAuthor.Text = Blog.Author;
            txbAuthorEmail.Text = Blog.Email;
            txbUser.Text = Blog.UserName;
            txbNews.Text = Blog.News;
            ckbShowEmailonRssFeed.Checked = Blog.ShowEmailAddressInRss;
            txbGenericTrackingCode.Text = Blog.TrackingCode;
            ckbAllowServiceAccess.Checked = Blog.AllowServiceAccess;
            chkAutoGenerate.Checked = Blog.AutoFriendlyUrlEnabled;
            ddlTimezone.DataSource = TimeZones.GetTimeZones();
            ddlTimezone.DataTextField = "DisplayName";
            ddlTimezone.DataValueField = "Id";
            ddlTimezone.DataBind();
            ListItem selectedItem = ddlTimezone.Items.FindByValue(Blog.TimeZoneId.ToString(CultureInfo.InvariantCulture));
            if(selectedItem != null)
            {
                selectedItem.Selected = true;
            }

            ListItem languageItem = ddlLangLocale.Items.FindByValue(Blog.Language);
            if(languageItem != null)
            {
                languageItem.Selected = true;
            }

            if(Blog.Skin.HasCustomCssText)
            {
                txbSecondaryCss.Text = Blog.Skin.CustomCssText;
            }

            //TODO: Move to a general DataBind() call.
            int count = Config.Settings.ItemCount;
            int increment = 1;
            for(int i = 1; i <= count; i = i + increment)
                //starting with 25, the list items increment by 5. Example: 1,2,3,...24,25,30,35,...,45,50.
            {
                ddlItemCount.Items.Add(new ListItem(i.ToString(CultureInfo.InvariantCulture),
                                                    i.ToString(CultureInfo.InvariantCulture)));
                if(i == 25)
                {
                    increment = 5;
                }
            }

            if(Blog.ItemCount <= count)
            {
                ddlItemCount.Items.FindByValue(Blog.ItemCount.ToString(CultureInfo.InvariantCulture)).Selected = true;
            }

            //int 0 = "All" items
            int categoryListPostCount = Config.Settings.CategoryListPostCount;
            int maxDropDownItems = categoryListPostCount;
            if(maxDropDownItems <= 0)
            {
                maxDropDownItems = 50; //since 0 represents "All", this provides some other options in the ddl.
            }
            ddlCategoryListPostCount.Items.Add(new ListItem("All".ToString(CultureInfo.InvariantCulture),
                                                            0.ToString(CultureInfo.InvariantCulture)));
            increment = 1;
            for(int j = 1; j <= maxDropDownItems; j = j + increment)
                //starting with 25, the list items increment by 5. Example: 1,2,3,...24,25,30,35,...,45,50.
            {
                ddlCategoryListPostCount.Items.Add(new ListItem(j.ToString(CultureInfo.InvariantCulture),
                                                                j.ToString(CultureInfo.InvariantCulture)));
                if(j == 25)
                {
                    increment = 5;
                }
            }

            if(Blog.CategoryListPostCount <= maxDropDownItems)
            {
                ddlCategoryListPostCount.Items.FindByValue(
                    Blog.CategoryListPostCount.ToString(CultureInfo.InvariantCulture)).Selected = true;
            }

            UpdateTime();
            
            base.BindLocalUI();
        }

        private void BindPost()
        {
            try
            {
                Blog.Title = txbTitle.Text;
                Blog.SubTitle = txbSubtitle.Text;
                Blog.Author = txbAuthor.Text;
                Blog.Email = txbAuthorEmail.Text;
                Blog.UserName = txbUser.Text;
                Blog.ShowEmailAddressInRss = ckbShowEmailonRssFeed.Checked;
                Blog.TimeZoneId = ddlTimezone.SelectedItem.Value;
                Blog.Subfolder = Blog.Subfolder;
                Blog.Host = Blog.Host;
                Blog.Id = Blog.Id;

                Blog.ItemCount = Int32.Parse(ddlItemCount.SelectedItem.Value);
                Blog.CategoryListPostCount = Int32.Parse(ddlCategoryListPostCount.SelectedItem.Value);
                Blog.Language = ddlLangLocale.SelectedItem.Value;

                Blog.AllowServiceAccess = ckbAllowServiceAccess.Checked;

                Blog.Skin.CustomCssText = txbSecondaryCss.Text.Trim();

                Blog.News = NormalizeString(txbNews.Text);
                Blog.TrackingCode = NormalizeString(txbGenericTrackingCode.Text);

                Blog.AutoFriendlyUrlEnabled = chkAutoGenerate.Checked;
                Repository.UpdateConfigData(Blog);

                Messages.ShowMessage(SuccessMessage);
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION, FailureMessage, ex.Message));
            }
        }

        private static string NormalizeString(string text)
        {
            string tmp = text.Trim();
            return tmp.Length == 0 ? null : tmp;
        }

        protected void btnPost_Click(object sender, EventArgs e)
        {
            BindPost();
        }

        protected void ddlTimezone_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateTime();
        }

        private void UpdateTime()
        {
            lblServerTimeZone.Text = string.Format(CultureInfo.InvariantCulture, "{0} ({1})",
                                                   TimeZone.CurrentTimeZone.StandardName,
                                                   TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now));
            lblServerTime.Text = DateTime.Now.ToString("yyyy/MM/dd hh:mm tt");
            lblUtcTime.Text = DateTime.UtcNow.ToString("yyyy/MM/dd hh:mm tt");
            lblCurrentTime.Text = SelectedTimeZone.Now.ToString("yyyy/MM/dd hh:mm tt");
        }

        #region Web Form Designer generated code

        protected override void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);

            ViewState["CategoryId"] = NullValue.NullInt32;
            ViewState["CategoryType"] = Constants.DEFAULT_CATEGORYTYPE;
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.ddlTimezone.SelectedIndexChanged += ddlTimezone_SelectedIndexChanged;
            this.btnPost.Click += btnPost_Click;
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Configure {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// txbSubtitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbSubtitle;
        
        /// <summary>
        /// txbUser control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbUser;
        
        /// <summary>
        /// txbAuthor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbAuthor;
        
        /// <summary>
        /// txbAuthorEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbAuthorEmail;
        
        /// <summary>
        /// ckbShowEmailonRssFeed control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbShowEmailonRssFeed;
        
        /// <summary>
        /// ckbAllowServiceAccess control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbAllowServiceAccess;
        
        /// <summary>
        /// chkAutoGenerate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkAutoGenerate;
        
        /// <summary>
        /// Helptooltip4 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip4;
        
        /// <summary>
        /// hlpTimeZone control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip hlpTimeZone;
        
        /// <summary>
        /// ddlTimezone control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlTimezone;
        
        /// <summary>
        /// lblCurrentTime control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal lblCurrentTime;
        
        /// <summary>
        /// lblServerTime control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal lblServerTime;
        
        /// <summary>
        /// lblServerTimeZone control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal lblServerTimeZone;
        
        /// <summary>
        /// lblUtcTime control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal lblUtcTime;
        
        /// <summary>
        /// ddlLangLocale control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlLangLocale;
        
        /// <summary>
        /// ddlItemCount control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlItemCount;
        
        /// <summary>
        /// ddlCategoryListPostCount control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlCategoryListPostCount;
        
        /// <summary>
        /// HelpToolTip1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip1;
        
        /// <summary>
        /// txbSecondaryCss control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbSecondaryCss;
        
        /// <summary>
        /// txbNews control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbNews;
        
        /// <summary>
        /// txbGenericTrackingCode control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbGenericTrackingCode;
        
        /// <summary>
        /// btnPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnPost;
    }
}
using System;
using Subtext.Web.Admin.Pages;

namespace Subtext.Web.Admin.WebUI
{
    public partial class Credits : AdminPage
    {
        public Credits()
        {
            TabSectionId = "Credits";
        }

        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.WebUI {
    
    
    public partial class Credits {
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;

namespace Subtext.Web.Admin.Pages
{
    public partial class Customize : AdminOptionsPage
    {
        private int _pageIndex;

        protected bool ContainsTags { get; private set; }

        protected override void OnLoad(EventArgs e)
        {
            if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
            {
                _pageIndex = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            base.OnLoad(e);
        }

        protected override void BindLocalUI()
        {
            Blog blog = Config.CurrentBlog;
            IPagedCollection<MetaTag> tags = MetaTags.GetMetaTagsForBlog(blog, _pageIndex, resultsPager.PageSize);

            ContainsTags = tags.Count > 0;

            // we want to databind either way so we can alter the DOM via JavaScript and AJAX requests.
            MetatagRepeater.DataSource = tags;
            MetatagRepeater.DataBind();

            resultsPager.ItemCount = tags.MaxItems;
            resultsPager.PageSize = Preferences.ListingItemCount;
            resultsPager.PageIndex = _pageIndex;

            base.BindLocalUI();
        }

        protected static MetaTag EvalTag(object dataItem)
        {
            return (MetaTag)dataItem;
        }

        protected static string EvalName(object dataItem)
        {
            var tag = dataItem as MetaTag;

            return tag == null ? string.Empty : tag.Name;
        }

        protected static string EvalContent(object dataItem)
        {
            var tag = dataItem as MetaTag;

            return tag == null ? string.Empty : tag.Content;
        }

        protected static string EvalHttpEquiv(object dataItem)
        {
            var tag = dataItem as MetaTag;

            return tag == null ? string.Empty : tag.HttpEquiv;
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Customize {
        
        /// <summary>
        /// MetatagRepeater control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater MetatagRepeater;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Components;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Summary description for _default.
    /// </summary>
    public class HomePageDefault : AdminPage
    {
        public HomePageDefault()
        {
            TabSectionId = "dashboard";
        }


        protected BlogStatistics Statistics { get; private set; }

        public int CategoryCount
        {
            get { return Repository.GetActiveCategories().Count; }
        }

        public int IndexedEntryCount
        {
            get { return SearchEngine.GetIndexedEntryCount(Blog.Id); }
        }

        protected override void OnLoad(EventArgs e)
        {
            Statistics = Repository.GetBlogStatistics(Blog.Id);
            base.OnLoad(e);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    public partial class EditArticles : ConfirmationPage
    {
        public EditArticles()
        {
            TabSectionId = "Articles";
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            BindLocalUI();
        }

        private void BindLocalUI()
        {
            // REFACTOR: we're duplicating this in both Articles and Posts for the sake
            // of wireup. There's a structural issue btw Page and Container.
            LinkButton lkbNewPost = Utilities.CreateLinkButton("New Article");
            lkbNewPost.CausesValidation = false;
            lkbNewPost.Click += lkbNewPost_Click;
            AdminMasterPage.AddToActions(lkbNewPost);

            // REFACTOR: Structural issue btw Page and Container.
            HyperLink lnkEditCategories = Utilities.CreateHyperLink(Resources.Label_EditCategories,
                                                                    string.Format(CultureInfo.InvariantCulture,
                                                                                  "{0}?{1}={2}",
                                                                                  Constants.URL_EDITCATEGORIES,
                                                                                  Keys.QRYSTR_CATEGORYTYPE,
                                                                                  categoryLinks.CategoryType));
            AdminMasterPage.AddToActions(lnkEditCategories);
        }

        private void lkbNewPost_Click(object sender, EventArgs e)
        {
            Editor.EditNewEntry();
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditArticles {
        
        /// <summary>
        /// categoryLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.CategoryLinkList categoryLinks;
        
        /// <summary>
        /// Editor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.EntryEditor Editor;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Admin.Commands;
using Subtext.Web.Properties;
using CategoryTypeEnum = Subtext.Framework.Components.CategoryType;

namespace Subtext.Web.Admin.Pages
{
    public partial class EditCategories : AdminPage
    {
        protected CategoryTypeEnum CategoryType
        {
            get
            {
                if(ViewState["CategoryType"] != null)
                {
                    return (CategoryType)ViewState["CategoryType"];
                }
                return CategoryType.None;
            }
            set { ViewState["CategoryType"] = value; }
        }

        protected override void OnLoad(EventArgs e)
        {
            if(!IsPostBack)
            {
                if(null != Request.QueryString[Keys.QRYSTR_CATEGORYTYPE])
                {
                    CategoryType =
                        (CategoryType)Enum.Parse(typeof(CategoryType), Request.QueryString[Keys.QRYSTR_CATEGORYTYPE]);
                }
                else
                {
                    CategoryType = CategoryType.LinkCollection;
                }

                if(CategoryType == CategoryType.LinkCollection)
                {
                    TabSectionId = "Links";
                }

                ckbNewIsActive.Checked = Preferences.AlwaysCreateIsActive;

                BindLocalUI();
                BindList();
            }
            else
            {
                if(CategoryType == CategoryType.LinkCollection)
                {
                    TabSectionId = "Links";
                }
            }
            base.OnLoad(e);
        }

        // REFACTOR: Maybe. Some sections can be inferred from the catType, but not the not cat pages.
        private void BindLocalUI()
        {
            switch(CategoryType)
            {
                case CategoryType.PostCollection:
                    TabSectionId = "Posts";
                    break;

                case CategoryType.StoryCollection:
                    TabSectionId = "Articles";
                    break;

                case CategoryType.LinkCollection:
                    TabSectionId = "Links";
                    break;

                case CategoryType.ImageCollection:
                    TabSectionId = "Galleries";
                    // TODO: redirect to galleries? or just have original link stay there?
                    break;

                default:
                    TabSectionId = "Posts";
                    break;
            }
        }

        private void BindList()
        {
            ICollection<LinkCategory> cats = Repository.GetCategories(CategoryType, false /*activeOnly*/);
            dgrItems.DataSource = cats;
            dgrItems.DataKeyField = "Id";
            dgrItems.DataBind();
        }

        private void ToggleAddNew(bool showAddNew)
        {
            Add.Visible = showAddNew;
            valtxbNewTitleRequired.Enabled = showAddNew;
        }

        private void PersistCategory(LinkCategory category)
        {
            try
            {
                if(category.Id > 0)
                {
                    Repository.UpdateLinkCategory(category);
                    Messages.ShowMessage(string.Format(CultureInfo.InvariantCulture, "Category \"{0}\" was updated.",
                                                       category.Title));
                }
                else
                {
                    category.Id = Links.CreateLinkCategory(category);
                    Messages.ShowMessage(string.Format(CultureInfo.InvariantCulture, "Category \"{0}\" was added.",
                                                       category.Title));
                }
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", ex.Message));
            }
        }

        private void ConfirmDelete(int categoryID, string categoryTitle)
        {
            var command = new DeleteCategoryCommand(categoryID, categoryTitle)
            {
                ExecuteSuccessMessage = string.Format(CultureInfo.InvariantCulture, "Category \"{0}\" was deleted.",
                                                      categoryTitle)
            };
            Messages.ShowMessage(command.Execute());
            BindList();
        }

        override protected void OnInit(EventArgs e)
        {
            dgrItems.CancelCommand += dgrCategories_CancelCommand;
            dgrItems.EditCommand += dgrCategories_EditCommand;
            dgrItems.UpdateCommand += dgrCategories_UpdateCommand;
            dgrItems.DeleteCommand += dgrCategories_DeleteCommand;
            base.OnInit(e);
        }

        private void dgrCategories_EditCommand(object source, DataGridCommandEventArgs e)
        {
            dgrItems.EditItemIndex = e.Item.ItemIndex;
            BindList();
            Messages.Clear();
            ToggleAddNew(false);
        }

        private void dgrCategories_UpdateCommand(object source, DataGridCommandEventArgs e)
        {
            var title = e.Item.FindControl("txbTitle") as TextBox;
            var isActive = e.Item.FindControl("ckbIsActive") as CheckBox;
            var txbDescription = e.Item.FindControl("txbDescription") as TextBox;

            if(null == title || null == isActive)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_EditCategoriesControlsNotFound);
            }

            if(Page.IsValid)
            {
                if(Utilities.IsNullorEmpty(title.Text))
                {
                    Messages.ShowError(Resources.Message_CategoryMustHaveTitle);
                    return;
                }

                int id = Convert.ToInt32(dgrItems.DataKeys[e.Item.ItemIndex]);

                LinkCategory existingCategory = SubtextContext.Repository.GetLinkCategory(id, false);
                existingCategory.Description = txbDescription.Text;
                existingCategory.Title = title.Text;
                existingCategory.IsActive = isActive.Checked;

                if(id != 0)
                {
                    PersistCategory(existingCategory);
                }

                dgrItems.EditItemIndex = -1;
                BindList();
                ToggleAddNew(true);
            }
        }

        private void dgrCategories_DeleteCommand(object source, DataGridCommandEventArgs e)
        {
            int id = Convert.ToInt32(dgrItems.DataKeys[e.Item.ItemIndex]);
            LinkCategory lc = SubtextContext.Repository.GetLinkCategory(id, false);
            ConfirmDelete(id, lc.Title);
        }

        private void dgrCategories_CancelCommand(object source, DataGridCommandEventArgs e)
        {
            dgrItems.EditItemIndex = -1;
            BindList();
            Messages.Clear();
            ToggleAddNew(true);
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                var newCategory = new LinkCategory
                {
                    CategoryType = CategoryType,
                    Title = txbNewTitle.Text,
                    IsActive = ckbNewIsActive.Checked,
                    Description = txbNewDescription.Text
                };
                PersistCategory(newCategory);

                Response.Redirect(Request.RawUrl);
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditCategories {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// Edit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Edit;
        
        /// <summary>
        /// dgrItems control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgrItems;
        
        /// <summary>
        /// Add control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Add;
        
        /// <summary>
        /// valtxbNewTitleRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valtxbNewTitleRequired;
        
        /// <summary>
        /// txbNewTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbNewTitle;
        
        /// <summary>
        /// ckbNewIsActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbNewIsActive;
        
        /// <summary>
        /// txbNewDescription control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbNewDescription;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using ICSharpCode.SharpZipLib.Zip;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Web;
using Subtext.Web.Admin.Commands;
using Subtext.Web.Properties;
using Image=Subtext.Framework.Components.Image;

namespace Subtext.Web.Admin.Pages
{
    public partial class EditGalleries : AdminPage
    {
        protected bool IsListHidden;
        // jsbright added to support prompting for new file name

        protected EditGalleries()
        {
            TabSectionId = "Galleries";
        }

        private int CategoryId
        {
            get
            {
                if(null != ViewState["CategoryId"])
                {
                    return (int)ViewState["CategoryId"];
                }
                return NullValue.NullInt32;
            }
            set { ViewState["CategoryId"] = value; }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if(!Config.Settings.AllowImages)
            {
                Response.Redirect(AdminUrl.Home());
            }

            if(!IsPostBack)
            {
                HideImages();
                ShowResults();
                BindList();
                ckbIsActiveImage.Checked = Preferences.AlwaysCreateIsActive;
                ckbNewIsActive.Checked = Preferences.AlwaysCreateIsActive;

                if(null != Request.QueryString[Keys.QRYSTR_CATEGORYID])
                {
                    CategoryId = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_CATEGORYID]);
                    BindGallery(CategoryId);
                }
            }
        }

        private void BindList()
        {
            // TODO: possibly, later on, add paging support a la other cat editors
            ICollection<LinkCategory> selectionList = Links.GetCategories(CategoryType.ImageCollection,
                                                                          ActiveFilter.None);
            dgrSelectionList.DataSource = selectionList;
            dgrSelectionList.DataKeyField = "Id";
            dgrSelectionList.DataBind();

            dgrSelectionList.Visible = selectionList.Count > 0; //need not be shown when there are no galleries...
        }

        private void BindGallery()
        {
            // HACK: reverse the call order with the overloaded version
            BindGallery(CategoryId);
        }

        private void BindGallery(int galleryId)
        {
            CategoryId = galleryId;
            LinkCategory selectedGallery = SubtextContext.Repository.GetLinkCategory(galleryId, false);
            ICollection<Image> imageList = Images.GetImagesByCategoryId(galleryId, false);

            plhImageHeader.Controls.Clear();
            if (selectedGallery != null)
            {
                string galleryTitle = string.Format(CultureInfo.InvariantCulture, "{0} - {1} " + Resources.Label_Images,
                                                    selectedGallery.Title, imageList.Count);
                plhImageHeader.Controls.Add(new LiteralControl(galleryTitle));
            }
            else //invalid gallery
            {
                Messages.ShowError("The gallery does not exist anymore. Please update your bookmarks.");
                return;
            }

            rprImages.DataSource = imageList;
            rprImages.DataBind();

            ShowImages();

            if(AdminMasterPage != null)
            {
                string title = string.Format(CultureInfo.InvariantCulture, Resources.EditGalleries_ViewingGallery,
                                             selectedGallery.Title);
                AdminMasterPage.Title = title;
            }

            AddImages.Collapsed = !Preferences.AlwaysExpandAdvanced;
        }

        private void ShowResults()
        {
            Results.Visible = true;
        }

        private void HideResults()
        {
            Results.Visible = false;
        }

        private void ShowImages()
        {
            HideResults();
            ImagesDiv.Visible = true;
        }

        private void HideImages()
        {
            ShowResults();
            ImagesDiv.Visible = false;
        }

        protected string EvalImageUrl(object potentialImage)
        {
            var image = potentialImage as Image;
            if(image != null)
            {
                image.Blog = Blog;
                return Url.GalleryImageUrl(image, image.ThumbNailFile);
            }
            return String.Empty;
        }

        protected string EvalImageNavigateUrl(object potentialImage)
        {
            var image = potentialImage as Image;
            if(image != null)
            {
                return Url.GalleryImagePageUrl(image);
            }
            return String.Empty;
        }

        protected string EvalImageTitle(object potentialImage)
        {
            const int targetHeight = 138;
            const int maxImageHeight = 120;
            const int charPerLine = 19;
            const int lineHeightPixels = 16;

            var image = potentialImage as Image;
            if(image != null)
            {
                // do a rough calculation of how many chars we can shoehorn into the title space
                // we have to back into an estimated thumbnail height right now with aspect * max
                double aspectRatio = (double)image.Height / image.Width;
                if(aspectRatio > 1 || aspectRatio <= 0)
                {
                    aspectRatio = 1;
                }
                var allowedChars = (int)((targetHeight - maxImageHeight * aspectRatio)
                                         / lineHeightPixels * charPerLine);

                return Utilities.Truncate(image.Title, allowedChars);
            }
            return String.Empty;
        }

        // REFACTOR: duplicate from category editor; generalize a la EntryEditor
        private void PersistCategory(LinkCategory category)
        {
            try
            {
                if(category.Id > 0)
                {
                    Repository.UpdateLinkCategory(category);
                    Messages.ShowMessage(string.Format(CultureInfo.InvariantCulture, Resources.Message_CategoryUpdated,
                                                       category.Title));
                }
                else
                {
                    category.Id = Links.CreateLinkCategory(category);
                    Messages.ShowMessage(string.Format(CultureInfo.InvariantCulture, Resources.Message_CategoryAdded,
                                                       category.Title));
                }
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", ex.Message));
            }
        }

        /// <summary>
        /// We're being asked to upload and store an image on the server (re-sizing and
        /// all of that). Ideally this will work. It may not. We may have to ask
        /// the user for an alternative file name. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void OnAddImage(object sender, EventArgs e)
        {
            string fileName = ImageFile.PostedFile.FileName;

            string extension = Path.GetExtension(fileName);
            if(extension.Equals(".zip", StringComparison.OrdinalIgnoreCase))
            {
                // Handle as an archive
                PersistImageArchive();
                return;
            }

            // If there was no dot, or extension wasn't ZIP, then treat as a single image
            PersistImage(fileName);
        }


        private void PersistImageArchive()
        {
            List<string> goodFiles = new List<string>(),
                         badFiles = new List<string>(),
                         updatedFiles = new List<string>();

            byte[] archiveData = ImageFile.PostedFile.GetFileStream();

            using(var memoryStream = new MemoryStream(archiveData))
            {
                using(var zip = new ZipInputStream(memoryStream))
                {
                    ZipEntry theEntry;
                    while((theEntry = zip.GetNextEntry()) != null)
                    {
                        string fileName = Path.GetFileName(theEntry.Name);

                        // TODO: Filter for image types?
                        if(!String.IsNullOrEmpty(fileName))
                        {
                            byte[] fileData;

                            var image = new Image
                            {
                                Blog = Blog,
                                CategoryID = CategoryId,
                                Title = fileName,
                                IsActive = ckbIsActiveImage.Checked,
                                FileName = Path.GetFileName(fileName),
                                Url = Url.ImageGalleryDirectoryUrl(Blog, CategoryId),
                                LocalDirectoryPath = Url.GalleryDirectoryPath(Blog, CategoryId)
                            };

                            // Read the next file from the Zip stream
                            using(var currentFileData = new MemoryStream((int)theEntry.Size))
                            {
                                int size = 2048;
                                var data = new byte[size];
                                while(true)
                                {
                                    size = zip.Read(data, 0, data.Length);
                                    if(size > 0)
                                    {
                                        currentFileData.Write(data, 0, size);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }

                                fileData = currentFileData.ToArray();
                            }

                            try
                            {
                                // If it exists, update it
                                if(File.Exists(image.OriginalFilePath))
                                {
                                    Images.Update(image, fileData);
                                    updatedFiles.Add(theEntry.Name);
                                }
                                else
                                {
                                    // Attempt insertion as a new image
                                    int imageId = Images.InsertImage(image, fileData);
                                    if(imageId > 0)
                                    {
                                        goodFiles.Add(theEntry.Name);
                                    }
                                    else
                                    {
                                        // Wrong format, perhaps?
                                        badFiles.Add(theEntry.Name);
                                    }
                                }
                            }
                            catch(Exception ex)
                            {
                                badFiles.Add(theEntry.Name + " (" + ex.Message + ")");
                            }
                        }
                    }
                }
            }

            // Construct and display the status message of added/updated/deleted images
            string status = string.Format(CultureInfo.InvariantCulture,
                                          Resources.EditGalleries_ArchiveProcessed +
                                          @"<br />
                <b><a onclick=""javascript:ToggleVisibility(document.getElementById('ImportAddDetails'))"">" +
                                          Resources.Label_Adds +
                                          @" ({0})</a></b><span id=""ImportAddDetails"" style=""display:none""> : <br />&nbsp;&nbsp;{1}</span><br />
                <b><a onclick=""javascript:ToggleVisibility(document.getElementById('ImportUpdateDetails'))"">" +
                                          Resources.Label_Updates +
                                          @"  ({2})</a></b><span id=""ImportUpdateDetails"" style=""display:none""> : <br />&nbsp;&nbsp;{3}</span><br />
                <b><a onclick=""javascript:ToggleVisibility(document.getElementById('ImportErrorDetails'))"">" +
                                          Resources.Label_Errors +
                                          @" ({4})</a></b><span id=""ImportErrorDetails"" style=""display:none""> : <br />&nbsp;&nbsp;{5}</span>",
                                          goodFiles.Count,
                                          (goodFiles.Count > 0
                                               ? string.Join("<br />&nbsp;&nbsp;", goodFiles.ToArray())
                                               : "none"),
                                          updatedFiles.Count,
                                          (updatedFiles.Count > 0
                                               ? string.Join("<br />&nbsp;&nbsp;", updatedFiles.ToArray())
                                               : "none"),
                                          badFiles.Count,
                                          (badFiles.Count > 0
                                               ? string.Join("<br />&nbsp;&nbsp;", badFiles.ToArray())
                                               : "none"));

            Messages.ShowMessage(status);
            txbImageTitle.Text = String.Empty;

            // if we're successful we need to revert back to our standard view
            PanelSuggestNewName.Visible = false;
            PanelDefaultName.Visible = true;

            // re-bind the gallery; note we'll skip this step if a correctable error occurs.
            BindGallery();
        }

        /// <summary>
        /// The user is providing the file name here. 
        /// </summary>
        protected void OnAddImageUserProvidedName(object sender, EventArgs e)
        {
            if(TextBoxImageFileName.Text.Length == 0)
            {
                Messages.ShowError(Resources.EditGalleries_ValidFilenameRequired);
                return;
            }

            PersistImage(TextBoxImageFileName.Text);
        }

        /// <summary>
        /// A fancy term for saving the image to disk :-). We'll take the image and try to save
        /// it. This currently puts all images in the same directory which can cause a conflict
        /// if the file already exists. So we'll add in a way to take a new file name. 
        /// </summary>
        private void PersistImage(string fileName)
        {
            if(Page.IsValid)
            {
                var image = new Image
                {
                    Blog = Blog,
                    CategoryID = CategoryId,
                    Title = txbImageTitle.Text,
                    IsActive = ckbIsActiveImage.Checked,
                    FileName = Path.GetFileName(fileName),
                    Url = Url.ImageGalleryDirectoryUrl(Blog, CategoryId),
                    LocalDirectoryPath = Url.GalleryDirectoryPath(Blog, CategoryId)
                };

                try
                {
                    if(File.Exists(image.OriginalFilePath))
                    {
                        // tell the user we can't accept this file.
                        Messages.ShowError(Resources.EditGalleries_FileAlreadyExists);

                        // switch around our GUI.
                        PanelSuggestNewName.Visible = true;
                        PanelDefaultName.Visible = false;

                        AddImages.Collapsed = false;
                        // Unfortunately you can't set ImageFile.PostedFile.FileName. At least suggest
                        // a name for the new file.
                        TextBoxImageFileName.Text = image.FileName;
                        return;
                    }

                    int imageId = Images.InsertImage(image, ImageFile.PostedFile.GetFileStream());
                    if(imageId > 0)
                    {
                        Messages.ShowMessage(Resources.EditGalleries_ImageAdded);
                        txbImageTitle.Text = String.Empty;
                    }
                    else
                    {
                        Messages.ShowError(Constants.RES_FAILUREEDIT + " " + Resources.EditGalleries_ProblemPosting);
                    }
                }
                catch(Exception ex)
                {
                    Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", ex.Message));
                }
            }

            // if we're successful we need to revert back to our standard view
            PanelSuggestNewName.Visible = false;
            PanelDefaultName.Visible = true;

            // re-bind the gallery; note we'll skip this step if a correctable error occurs.
            BindGallery();
        }

        private void DeleteGallery(int categoryId, string categoryTitle)
        {
            var command = new DeleteGalleryCommand(Url.ImageGalleryDirectoryUrl(Blog, categoryId), categoryId,
                                                   categoryTitle)
            {
                ExecuteSuccessMessage = String.Format(CultureInfo.CurrentCulture, "Gallery '{0}' deleted",
                                                      categoryTitle)
            };
            Messages.ShowMessage(command.Execute());
            BindList();
        }

        private void DeleteImage(int imageId)
        {
            Image image = Repository.GetImage(imageId, false /* activeOnly */);
            var command = new DeleteImageCommand(image, Url.ImageGalleryDirectoryUrl(Blog, image.CategoryID))
            {
                ExecuteSuccessMessage = string.Format(CultureInfo.CurrentCulture, "Image '{0}' deleted",
                                                      image.OriginalFile)
            };
            Messages.ShowMessage(command.Execute());
            BindGallery();
        }

        override protected void OnInit(EventArgs e)
        {
            dgrSelectionList.ItemCommand += dgrSelectionList_ItemCommand;
            dgrSelectionList.CancelCommand += dgrSelectionList_CancelCommand;
            dgrSelectionList.EditCommand += dgrSelectionList_EditCommand;
            dgrSelectionList.UpdateCommand += dgrSelectionList_UpdateCommand;
            dgrSelectionList.DeleteCommand += dgrSelectionList_DeleteCommand;
            rprImages.ItemCommand += rprImages_ItemCommand;
            base.OnInit(e);
        }

        private void dgrSelectionList_ItemCommand(object source, DataGridCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "view":
                    int galleryId = Convert.ToInt32(e.CommandArgument);
                    BindGallery(galleryId);
                    break;
                default:
                    break;
            }
        }

        private void dgrSelectionList_EditCommand(object source, DataGridCommandEventArgs e)
        {
            HideImages();
            dgrSelectionList.EditItemIndex = e.Item.ItemIndex;
            BindList();
            Messages.Clear();
        }

        private void dgrSelectionList_UpdateCommand(object source, DataGridCommandEventArgs e)
        {
            var title = e.Item.FindControl("txbTitle") as TextBox;
            var desc = e.Item.FindControl("txbDescription") as TextBox;

            var isActive = e.Item.FindControl("ckbIsActive") as CheckBox;

            if(Page.IsValid && null != title && null != isActive)
            {
                int id = Convert.ToInt32(dgrSelectionList.DataKeys[e.Item.ItemIndex]);

                LinkCategory existingCategory = SubtextContext.Repository.GetLinkCategory(id, false);
                existingCategory.Title = title.Text;
                existingCategory.IsActive = isActive.Checked;
                if(desc != null)
                {
                    existingCategory.Description = desc.Text;
                }

                if(id != 0)
                {
                    PersistCategory(existingCategory);
                }

                dgrSelectionList.EditItemIndex = -1;
                BindList();
            }
        }

        private void dgrSelectionList_DeleteCommand(object source, DataGridCommandEventArgs e)
        {
            int id = Convert.ToInt32(dgrSelectionList.DataKeys[e.Item.ItemIndex]);
            LinkCategory lc = SubtextContext.Repository.GetLinkCategory(id, false);
            if (lc != null)
            {
                DeleteGallery(id, lc.Title);
            }
            else
            {
                Messages.ShowError("The gallery does not exist. Possibly you refreshed the page after deleting the gallery?");
            }
            BindList();
        }

        private void dgrSelectionList_CancelCommand(object source, DataGridCommandEventArgs e)
        {
            dgrSelectionList.EditItemIndex = -1;
            BindList();
            Messages.Clear();
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            var newCategory = new LinkCategory
            {
                CategoryType = CategoryType.ImageCollection,
                Title = txbNewTitle.Text,
                IsActive = ckbNewIsActive.Checked,
                Description = txbNewDescription.Text
            };
            PersistCategory(newCategory);

            BindList();
            txbNewTitle.Text = String.Empty;
            ckbNewIsActive.Checked = Preferences.AlwaysCreateIsActive;
        }

        private void rprImages_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "deleteimage":
                    DeleteImage(Convert.ToInt32(e.CommandArgument));
                    break;
                default:
                    break;
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditGalleries {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// Results control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Results;
        
        /// <summary>
        /// dgrSelectionList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DataGrid dgrSelectionList;
        
        /// <summary>
        /// Add control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel Add;
        
        /// <summary>
        /// txbNewTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbNewTitle;
        
        /// <summary>
        /// ckbNewIsActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbNewIsActive;
        
        /// <summary>
        /// txbNewDescription control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbNewDescription;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
        
        /// <summary>
        /// ImagesDiv control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder ImagesDiv;
        
        /// <summary>
        /// AddImages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel AddImages;
        
        /// <summary>
        /// ImageFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlInputFile ImageFile;
        
        /// <summary>
        /// txbImageTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbImageTitle;
        
        /// <summary>
        /// ckbIsActiveImage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbIsActiveImage;
        
        /// <summary>
        /// PanelDefaultName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder PanelDefaultName;
        
        /// <summary>
        /// lbkAddImage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lbkAddImage;
        
        /// <summary>
        /// PanelSuggestNewName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Panel PanelSuggestNewName;
        
        /// <summary>
        /// TextBoxImageFileName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox TextBoxImageFileName;
        
        /// <summary>
        /// lbkNewFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lbkNewFile;
        
        /// <summary>
        /// plhImageHeader control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plhImageHeader;
        
        /// <summary>
        /// rprImages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprImages;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Web;
using Subtext.Web.Properties;
using Image=Subtext.Framework.Components.Image;

namespace Subtext.Web.Admin.Pages
{
    public partial class EditImage : AdminPage
    {
        protected const string VskeyImageid = "ImageId";
        protected string GalleryTitle;
        protected Image _image;
        protected int _imageID;

        public EditImage()
        {
            TabSectionId = "Galleries";
        }

        private int ImageId
        {
            get
            {
                if(ViewState[VskeyImageid] == null || NullValue.NullInt32 == (int)ViewState[VskeyImageid])
                {
                    if(null != Request.QueryString[Keys.QRYSTR_IMAGEID])
                    {
                        ViewState[VskeyImageid] = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_IMAGEID]);
                    }
                }
                return (int)ViewState[VskeyImageid];
            }
        }

        public Image Image
        {
            get
            {
                if(_image == null)
                {
                    _image = Repository.GetImage(ImageId, false /* activeOnly */);
                }

                if(_image == null)
                {
                    throw new InvalidOperationException(Resources.InvalidOperation_ImageUndefined);
                }

                return _image;
            }
        }

        public override void DataBind()
        {
            BindImage();
            base.DataBind();
        }

        private void BindImage()
        {
            ICollection<LinkCategory> selectionList = Links.GetCategories(CategoryType.ImageCollection,
                                                                          ActiveFilter.None);
            if(selectionList.Count > 0)
            {
                ddlGalleries.DataSource = selectionList;
                ddlGalleries.DataValueField = "Id";
                ddlGalleries.DataTextField = "Title";

                lnkThumbnail.ImageUrl = EvalImageUrl(Image);
                lnkThumbnail.NavigateUrl = EvalImageNavigateUrl(Image);
                lnkThumbnail.Visible = true;

                ckbPublished.Checked = Image.IsActive;

                SetGalleryInfo(Image);

                ddlGalleries.DataBind();

                ListItem listItem =
                    ddlGalleries.Items.FindByValue(_image.CategoryID.ToString(CultureInfo.InvariantCulture));
                if(listItem != null)
                {
                    ddlGalleries.SelectedIndex = ddlGalleries.Items.IndexOf(listItem);
                }
                // HACK: we're disabling this until we do something with/around the provider
                // that will let us actually move the files too.
                ddlGalleries.Enabled = false;

                if(AdminMasterPage != null)
                {
                    string title = string.Format(CultureInfo.InvariantCulture, Resources.EditGalleries_EditImage,
                                                 Image.Title);
                    AdminMasterPage.Title = title;
                }
            }
        }

        protected void SetGalleryInfo(Image image)
        {
            GalleryTitle = SubtextContext.Repository.GetLinkCategory(image.CategoryID, false).Title;
        }

        protected string EvalImageUrl(object imageObject)
        {
            if(imageObject is Image)
            {
                var image = (Image)imageObject;
                image.Blog = Blog;
                return Url.GalleryImageUrl(image);
            }
            return String.Empty;
        }

        protected string EvalImageNavigateUrl(object imageObject)
        {
            if(imageObject is Image)
            {
                var image = (Image)imageObject;
                return Url.GalleryImagePageUrl(image);
            }
            return String.Empty;
        }

        protected string GetImageGalleryUrl()
        {
            return string.Format(CultureInfo.InvariantCulture, "{0}?{1}={2}", Constants.URL_EDITGALLERIES,
                                 Keys.QRYSTR_CATEGORYID, Image.CategoryID);
        }

        private void UpdateImage()
        {
            if(Page.IsValid)
            {
                _image = Repository.GetImage(ImageId, false /* activeOnly */);
                _image.CategoryID = Convert.ToInt32(ddlGalleries.SelectedItem.Value);
                _image.Title = txbTitle.Text;
                _image.IsActive = ckbPublished.Checked;

                try
                {
                    Images.UpdateImage(_image);

                    // would need to also move files for this to work here. should happen
                    // in the provider though.

                    Messages.ShowMessage(Resources.EditGalleries_ImageUpdated);
                    BindImage();
                }
                catch(Exception ex)
                {
                    Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", ex.Message));
                }
            }
        }

        private void ReplaceImage()
        {
            if(Page.IsValid)
            {
                _image = Repository.GetImage(ImageId, false /* activeOnly */);
                _image.CategoryID = Convert.ToInt32(ddlGalleries.SelectedItem.Value);
                _image.Title = txbTitle.Text;
                _image.IsActive = ckbPublished.Checked;

                try
                {
                    _image.FileName = Path.GetFileName(ImageFile.PostedFile.FileName);
                    _image.Url = Url.ImageGalleryDirectoryUrl(Blog, _image.CategoryID);
                    _image.LocalDirectoryPath = Url.GalleryDirectoryPath(Blog, _image.CategoryID);
                    Images.Update(_image, ImageFile.PostedFile.GetFileStream());

                    Messages.ShowMessage(Resources.EditGalleries_ImageUpdated);
                    BindImage();
                }
                catch(Exception ex)
                {
                    Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", ex.Message));
                }
            }
        }

        override protected void OnInit(EventArgs e)
        {
            ViewState[VskeyImageid] = NullValue.NullInt32;
        }

        protected void lbkReplaceImage_Click(object sender, EventArgs e)
        {
            ReplaceImage();
        }

        protected void lkbUpdateImage_Click(object sender, EventArgs e)
        {
            UpdateImage();
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditImage {
        
        /// <summary>
        /// categoryLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.CategoryLinkList categoryLinks;
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// headerLiteral control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl headerLiteral;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// ddlGalleries control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlGalleries;
        
        /// <summary>
        /// ckbPublished control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbPublished;
        
        /// <summary>
        /// lnkThumbnail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink lnkThumbnail;
        
        /// <summary>
        /// lkbUpdateImage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbUpdateImage;
        
        /// <summary>
        /// ImageFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlInputFile ImageFile;
        
        /// <summary>
        /// lbkAddImage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lbkAddImage;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Admin.Commands;

namespace Subtext.Web.Admin.Pages
{
    // TODO: import - reconcile duplicates
    // TODO: CheckAll client-side, confirm bulk delete (add cmd)

    public partial class EditKeyWords : AdminOptionsPage
    {
        private const string VSKEY_KEYWORDID = "LinkID";

        private bool _isListHidden = false;
        private int _resultsPageNumber;

        #region Accessors

        public int KeyWordID
        {
            get
            {
                if(ViewState[VSKEY_KEYWORDID] != null)
                {
                    return (int)ViewState[VSKEY_KEYWORDID];
                }
                else
                {
                    return NullValue.NullInt32;
                }
            }
            set { ViewState[VSKEY_KEYWORDID] = value; }
        }

        #endregion

        private new void Page_Load(object sender, EventArgs e)
        {
            //BindLocalUI(); //no need to call

            if(!IsPostBack)
            {
                if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
                {
                    _resultsPageNumber = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
                }

                resultsPager.PageSize = Preferences.ListingItemCount;
                resultsPager.PageIndex = _resultsPageNumber;

                BindList();
                //BindImportExportCategories();
            }
        }

/*
		private void BindLocalUI()
		{
			//wasn't working. I have added a button to GUI for this. - GY
			LinkButton lkbNewLink = Utilities.CreateLinkButton("New KeyWord");
			lkbNewLink.Click += new System.EventHandler(lkbNewKeyWord_Click);
			lkbNewLink.CausesValidation =false;
			PageContainer.AddToActions(lkbNewLink);
		}
*/

        private void BindList()
        {
            Edit.Visible = false;

            IPagedCollection<KeyWord> selectionList = Repository.GetPagedKeyWords(_resultsPageNumber,
                                                                                resultsPager.PageSize);

            if(selectionList.Count > 0)
            {
                resultsPager.ItemCount = selectionList.MaxItems;
                rprSelectionList.DataSource = selectionList;
                rprSelectionList.DataBind();
            }
        }

        private void BindLinkEdit()
        {
            KeyWord kw = Repository.GetKeyWord(KeyWordID);

            Results.Visible = false;
            Edit.Visible = true;

            txbTitle.Text = kw.Title;
            txbUrl.Text = kw.Url;
            txbWord.Text = kw.Word;
            txbRel.Text = kw.Rel;
            txbText.Text = kw.Text;


            chkNewWindow.Checked = kw.OpenInNewWindow;
            chkFirstOnly.Checked = kw.ReplaceFirstTimeOnly;
            chkCaseSensitive.Checked = kw.CaseSensitive;

            if(AdminMasterPage != null)
            {
                string title = string.Format(CultureInfo.InvariantCulture, "Editing KeyWord \"{0}\"", kw.Title);
                AdminMasterPage.Title = title;
            }
        }

        private void UpdateLink()
        {
            string successMessage = Constants.RES_SUCCESSNEW;

            try
            {
                var keyword = new KeyWord
                {
                    Title = txbTitle.Text,
                    Url = txbUrl.Text,
                    Text = txbText.Text,
                    OpenInNewWindow = chkNewWindow.Checked,
                    ReplaceFirstTimeOnly = chkFirstOnly.Checked,
                    CaseSensitive = chkCaseSensitive.Checked,
                    Rel = txbRel.Text,
                    Word = txbWord.Text
                };

                if(KeyWordID > 0)
                {
                    successMessage = Constants.RES_SUCCESSEDIT;
                    keyword.Id = KeyWordID;
                    Repository.UpdateKeyWord(keyword);
                }
                else
                {
                    KeyWordID = Repository.InsertKeyWord(keyword);
                }

                if(KeyWordID > 0)
                {
                    BindList();
                    Messages.ShowMessage(successMessage);
                }
                else
                {
                    Messages.ShowError(Constants.RES_FAILUREEDIT
                                       + " There was a baseline problem posting your KeyWord.");
                }
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Constants.RES_FAILUREEDIT, ex.Message));
            }
            finally
            {
                Results.Visible = true;
            }
        }

        private void ResetPostEdit(bool showEdit)
        {
            KeyWordID = NullValue.NullInt32;

            Results.Visible = !showEdit;
            Edit.Visible = showEdit;

            txbTitle.Text = string.Empty;
            txbText.Text = string.Empty;
            txbUrl.Text = string.Empty;
            txbRel.Text = string.Empty;
            txbWord.Text = string.Empty;
            chkNewWindow.Checked = false;
            chkFirstOnly.Checked = false;
            chkCaseSensitive.Checked = false;
        }

        private void ConfirmDelete(int keywordId, string keyword)
        {
            var command = new DeleteKeyWordCommand(keywordId, keyword)
            {
                ExecuteSuccessMessage = String.Format(CultureInfo.CurrentCulture, "Keyword '{0}' deleted", keyword)
            };
            Messages.ShowMessage(command.Execute());
            BindList();
        }

        // REFACTOR
        public string CheckHiddenStyle()
        {
            if(_isListHidden)
            {
                return Constants.CSSSTYLE_HIDDEN;
            }
            else
            {
                return String.Empty;
            }
        }

        protected void rprSelectionList_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "edit":
                    KeyWordID = Convert.ToInt32(e.CommandArgument);
                    BindLinkEdit();
                    break;
                case "delete":
                    int id = Convert.ToInt32(e.CommandArgument);
                    KeyWord kw = Repository.GetKeyWord(id);
                    ConfirmDelete(id, kw.Word);
                    break;
                default:
                    break;
            }
        }

        protected void lkbCancel_Click(object sender, EventArgs e)
        {
            ResetPostEdit(false);
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            UpdateLink();
        }

        protected void btnCreate_Click(object sender, EventArgs e)
        {
            ResetPostEdit(true);
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditKeyWords {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;

        /// <summary>
        /// Results control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Results;
        
        /// <summary>
        /// rprSelectionList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprSelectionList;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// btnCreate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnCreate;
        
        /// <summary>
        /// Edit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel Edit;
        
        /// <summary>
        /// RequiredFieldValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator1;
        
        /// <summary>
        /// txbWord control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbWord;
        
        /// <summary>
        /// Requiredfieldvalidator2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator Requiredfieldvalidator2;
        
        /// <summary>
        /// txbText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbText;
        
        /// <summary>
        /// Requiredfieldvalidator3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator Requiredfieldvalidator3;
        
        /// <summary>
        /// txbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbUrl;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// txbRel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbRel;
        
        /// <summary>
        /// chkNewWindow control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkNewWindow;
        
        /// <summary>
        /// chkFirstOnly control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkFirstOnly;
        
        /// <summary>
        /// chkCaseSensitive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkCaseSensitive;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
        
        /// <summary>
        /// lkbCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbCancel;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Web.Admin.Commands;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    // TODO: import - reconcile duplicates
    // TODO: CheckAll client-side, confirm bulk delete (add cmd)

    public partial class EditLinks : AdminPage
    {
        private const string VSKEY_LINKID = "LinkID";

        private bool _isListHidden = false;

        protected CheckBoxList cklCategories;
        private int _resultsPageNumber = 0;

        public EditLinks()
        {
            TabSectionId = "Links";
        }

        private int? filterCategoryID
        {
            get
            {
                if(ViewState["filterCategoryID"] == null)
                {
                    return null;
                }
                else
                {
                    return (int)ViewState["filterCategoryID"];
                }
            }
            set { ViewState["filterCategoryID"] = value; }
        }

        public int LinkID
        {
            get
            {
                if(ViewState[VSKEY_LINKID] != null)
                {
                    return (int)ViewState[VSKEY_LINKID];
                }
                else
                {
                    return NullValue.NullInt32;
                }
            }
            set { ViewState[VSKEY_LINKID] = value; }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            rprSelectionList.Visible = true;
            headerLiteral.Visible = true;
            BindLocalUI();

            if(!IsPostBack)
            {
                if(Request.QueryString[Keys.QRYSTR_PAGEINDEX] != null)
                {
                    _resultsPageNumber = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
                }

                if(Request.QueryString[Keys.QRYSTR_CATEGORYID] != null)
                {
                    filterCategoryID = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_CATEGORYID]);
                }

                resultsPager.PageSize = Preferences.ListingItemCount;
                resultsPager.PageIndex = _resultsPageNumber;

                if(filterCategoryID != null)
                {
                    resultsPager.UrlFormat += string.Format(CultureInfo.InvariantCulture, "&{0}={1}",
                                                            Keys.QRYSTR_CATEGORYID, filterCategoryID);
                }

                BindList();
            }
        }

        private void BindLocalUI()
        {
            LinkButton lkbNewLink = Utilities.CreateLinkButton("New Link");
            lkbNewLink.Click += lkbNewLink_Click;
            lkbNewLink.CausesValidation = false;
            AdminMasterPage.AddToActions(lkbNewLink);
            HyperLink lnkEditCategories = Utilities.CreateHyperLink(Resources.Label_EditCategories,
                                                                    string.Format(CultureInfo.InvariantCulture,
                                                                                  "{0}?{1}={2}",
                                                                                  Constants.URL_EDITCATEGORIES,
                                                                                  Keys.QRYSTR_CATEGORYTYPE,
                                                                                  CategoryType.LinkCollection));
            AdminMasterPage.AddToActions(lnkEditCategories);
        }

        private void BindList()
        {
            Edit.Visible = false;

            IPagedCollection<Link> selectionList = Repository.GetPagedLinks(filterCategoryID, _resultsPageNumber,
                                                                            resultsPager.PageSize, true);

            if(selectionList.Count > 0)
            {
                resultsPager.ItemCount = selectionList.MaxItems;
                rprSelectionList.DataSource = selectionList;
                rprSelectionList.DataBind();
            }
            else
            {
                // TODO: no existing items handling. add label and indicate no existing items. pop open edit.
            }
        }

        private void BindLinkEdit()
        {
            Link currentLink = Repository.GetLink(LinkID);

            rprSelectionList.Visible = false;
            headerLiteral.Visible = false;
            //			ImportExport.Visible = false;
            Edit.Visible = true;

            lblEntryID.Text = currentLink.Id.ToString(CultureInfo.InvariantCulture);
            txbTitle.Text = currentLink.Title;
            txbUrl.Text = currentLink.Url;
            txbRss.Text = currentLink.Rss;
            txtXfn.Text = currentLink.Relation;

            chkNewWindow.Checked = currentLink.NewWindow;
            ckbIsActive.Checked = currentLink.IsActive;

            BindLinkCategories();
            ddlCategories.Items.FindByValue(currentLink.CategoryId.ToString(CultureInfo.InvariantCulture)).Selected =
                true;

            if(AdminMasterPage != null)
            {
                string title = string.Format(CultureInfo.InvariantCulture, "Editing Link \"{0}\"", currentLink.Title);
                AdminMasterPage.Title = title;
            }
        }

        public void BindLinkCategories()
        {
            ICollection<LinkCategory> selectionList = Links.GetCategories(CategoryType.LinkCollection, ActiveFilter.None);
            if(selectionList != null && selectionList.Count != 0)
            {
                ddlCategories.DataSource = selectionList;
                ddlCategories.DataValueField = "Id";
                ddlCategories.DataTextField = "Title";
                ddlCategories.DataBind();
            }
            else
            {
                Messages.ShowError(Resources.EditLinks_NeedToAddCategoryFirst);
                Edit.Visible = false;
            }
        }

        private void UpdateLink()
        {
            string successMessage = Constants.RES_SUCCESSNEW;

            try
            {
                var link = new Link
                {
                    Title = txbTitle.Text,
                    Url = txbUrl.Text,
                    Rss = txbRss.Text,
                    IsActive = ckbIsActive.Checked,
                    CategoryId = Convert.ToInt32(ddlCategories.SelectedItem.Value),
                    NewWindow = chkNewWindow.Checked,
                    Id = Config.CurrentBlog.Id,
                    Relation = txtXfn.Text
                };

                if(LinkID > 0)
                {
                    successMessage = Constants.RES_SUCCESSEDIT;
                    link.Id = LinkID;
                    Repository.UpdateLink(link);
                }
                else
                {
                    LinkID = Repository.CreateLink(link);
                }

                if(LinkID > 0)
                {
                    BindList();
                    Messages.ShowMessage(successMessage);
                }
                else
                {
                    Messages.ShowError(Constants.RES_FAILUREEDIT
                                       + " There was a baseline problem posting your link.");
                }
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Constants.RES_FAILUREEDIT, ex.Message));
            }
            finally
            {
                rprSelectionList.Visible = true;
                headerLiteral.Visible = true;
            }
        }

        private void ResetPostEdit(bool showEdit)
        {
            LinkID = NullValue.NullInt32;

            rprSelectionList.Visible = !showEdit;
            headerLiteral.Visible = !showEdit;
            Edit.Visible = showEdit;

            lblEntryID.Text = String.Empty;
            txbTitle.Text = String.Empty;
            txbUrl.Text = String.Empty;
            txbRss.Text = String.Empty;
            chkNewWindow.Checked = false;

            ckbIsActive.Checked = Preferences.AlwaysCreateIsActive;

            if(showEdit)
            {
                BindLinkCategories();
            }

            ddlCategories.SelectedIndex = -1;
        }

        private void ConfirmDelete(int linkID, string linkTitle)
        {
            var command = new DeleteLinkCommand(linkID, linkTitle)
            {
                ExecuteSuccessMessage = String.Format(CultureInfo.CurrentCulture, "Link '{0}' deleted", linkTitle)
            };
            Messages.ShowMessage(command.Execute());
            BindList();
        }

        private void ImportOpml()
        {
            if(OpmlImportFile.PostedFile.FileName.Trim().Length > 0)
            {
                OpmlItemCollection importedLinks = OpmlProvider.Import(OpmlImportFile.PostedFile.InputStream);

                if(importedLinks.Count > 0)
                {
                    var command = new ImportLinksCommand(importedLinks,
                                                         Int32.Parse(ddlImportExportCategories.SelectedItem.Value));
                    Messages.ShowMessage(command.Execute());
                }

                BindList();
            }
        }

        // REFACTOR
        public string CheckHiddenStyle()
        {
            if(_isListHidden)
            {
                return Constants.CSSSTYLE_HIDDEN;
            }
            else
            {
                return String.Empty;
            }
        }

        override protected void OnInit(EventArgs e)
        {
            rprSelectionList.ItemCommand += new RepeaterCommandEventHandler(rprSelectionList_ItemCommand);
            base.OnInit(e);
        }

        protected void lkbImportOpml_Click(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                ImportOpml();
            }
        }

        private void rprSelectionList_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "edit":
                    LinkID = Convert.ToInt32(e.CommandArgument);
                    BindLinkEdit();
                    break;

                case "delete":
                    int id = Convert.ToInt32(e.CommandArgument);
                    Link link = Repository.GetLink(id);
                    ConfirmDelete(id, link.Title);
                    break;

                default:
                    break;
            }
        }

        protected void lkbCancel_Click(object sender, EventArgs e)
        {
            ResetPostEdit(false);
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            UpdateLink();
        }

        private void lkbNewLink_Click(object sender, EventArgs e)
        {
            ResetPostEdit(true);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditLinks {
        
        /// <summary>
        /// categoryLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.CategoryLinkList categoryLinks;
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// headerLiteral control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl headerLiteral;
        
        /// <summary>
        /// rprSelectionList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprSelectionList;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// ImportExport control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel ImportExport;
        
        /// <summary>
        /// OpmlImportFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlInputFile OpmlImportFile;
        
        /// <summary>
        /// ddlImportExportCategories control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlImportExportCategories;
        
        /// <summary>
        /// lkbImportOpml control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbImportOpml;
        
        /// <summary>
        /// Edit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Edit;
        
        /// <summary>
        /// lblEntryID control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEntryID;
        
        /// <summary>
        /// RequiredFieldValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator1;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// Requiredfieldvalidator2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator Requiredfieldvalidator2;
        
        /// <summary>
        /// txbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbUrl;
        
        /// <summary>
        /// txbRss control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbRss;
        
        /// <summary>
        /// txtXfn control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtXfn;
        
        /// <summary>
        /// ddlCategories control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlCategories;
        
        /// <summary>
        /// ckbIsActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbIsActive;
        
        /// <summary>
        /// chkNewWindow control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkNewWindow;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
        
        /// <summary>
        /// lkbCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbCancel;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Logging;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Controls;

namespace Subtext.Web.Admin.Pages
{
    public partial class ErrorLog : StatsPage
    {
        private int _logPageNumber;

        public ErrorLog()
        {
            TabSectionId = "Stats";
        }

        protected override void OnLoad(EventArgs e)
        {
            LoadPage();
            base.OnLoad(e);
        }

        private void LoadPage()
        {
            if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
            {
                _logPageNumber = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            resultsPager.PageSize = Preferences.ListingItemCount;
            resultsPager.PageIndex = _logPageNumber;

            BindList();
        }

        private void BindList()
        {
            IPagedCollection<LogEntry> logEntries = LoggingProvider.Instance().GetPagedLogEntries(
                resultsPager.PageIndex, resultsPager.PageSize);
            resultsPager.ItemCount = logEntries.MaxItems;
            LogPage.DataSource = logEntries;
            LogPage.DataBind();
        }

        private void btnClearLog_Click(object sender, EventArgs e)
        {
            LoggingProvider.Instance().ClearLog();
            resultsPager.PageIndex = 0; //Back to first page.
            BindList();
        }

        private void BindListForExcel()
        {
            IPagedCollection<LogEntry> logEntries = LoggingProvider.Instance().GetPagedLogEntries(0, int.MaxValue - 1);
            LogPage.DataSource = logEntries;
            LogPage.DataBind();
        }

        private void btnExportToExcel_Click(object sender, EventArgs e)
        {
            BindListForExcel();
            ControlHelper.ExportToExcel(LogPage, "SubtextErrorLog.xls");
        }

        override protected void OnInit(EventArgs e)
        {
            btnClearLog.Click += btnClearLog_Click;
            btnExportToExcel.Click += btnExportToExcel_Click;
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class ErrorLog {
        
        /// <summary>
        /// LogPage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.RepeaterWithEmptyDataTemplate LogPage;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// btnExportToExcel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnExportToExcel;
        
        /// <summary>
        /// btnClearLog control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnClearLog;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;

namespace Subtext.Web.Admin.Pages
{
    public class Export : AdminPage
    {
        private void Page_Load(object sender, EventArgs e)
        {
            string command = Request.QueryString["command"].ToLower(CultureInfo.InvariantCulture);

            switch(command)
            {
                case "opml":
                    ExportLinksToOpml();
                    break;
                default:
                    break;
            }
        }

        public void ExportLinksToOpml()
        {
            //TODO: Implement
//			PagedLinkCollection pagedAllLinks = Links.GetPagedLinks(1, 1);
//			LinkCollection allLinks = Links.GetPagedLinks(1, pagedAllLinks.MaxItems);	
//			XmlDocument doc = OpmlProvider.Export(allLinks);
//
//			Response.Clear();
//			Response.ContentEncoding = System.Text.Encoding.UTF8;
//			Response.AppendHeader("Content-Disposition", "attachment; filename=links.opml");
////			Response.AppendHeader("Content-Length", doc.OuterXml.Length.ToString());
//			Response.ContentType = "application/octet-stream";
//
//			XmlTextWriter writer = new XmlTextWriter(Response.OutputStream, Response.ContentEncoding);
//			writer.Formatting = Formatting.Indented;
//			writer.Indentation = 4;
//			writer.IndentChar = ' ';
//			doc.Save(writer);
//			writer.Flush();
//			
//			Response.End();
//			writer.Close();
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Web;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Properties;
using Subtext.Web.UI.Controls;

namespace Subtext.Web.Admin.Feedback
{
    public partial class Default : ConfirmationPage
    {
        FeedbackStatusFlag _feedbackStatusFilter;
        int _pageIndex;
        FeedbackState _uiState;

        public Default()
        {
            TabSectionId = "Feedback";
        }

        protected new FeedbackMaster Master
        {
            get { return base.Master as FeedbackMaster; }
        }

        public FeedbackState FeedbackState
        {
            get
            {
                return _uiState;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _feedbackStatusFilter = Master.FeedbackStatus;
            _uiState = FeedbackState.GetUiState(_feedbackStatusFilter);
            filterTypeDropDown.SelectedValue = Master.FeedbackType.ToString();

            BindUserInterface();
            if(!IsPostBack)
            {
                if(!Contact.SendContactMessageToFeedback)
                {
                    filterTypeDropDown.Items.RemoveAt(3);
                }

                BindList();
            }
            base.OnLoad(e);
        }

        private void BindUserInterface()
        {
            headerLiteral.InnerText = _uiState.HeaderText;
            btnEmpty.Visible = _uiState.Emptyable;
            btnEmpty.ToolTip = _uiState.EmptyToolTip;
        }

        private void BindList()
        {
            noCommentsMessage.Visible = false;
            if(Request.QueryString[Keys.QRYSTR_PAGEINDEX] != null)
            {
                _pageIndex = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            resultsPager.UrlFormat = "Default.aspx?pg={0}&status=" + _feedbackStatusFilter;
            resultsPager.PageSize = Preferences.ListingItemCount;
            resultsPager.PageIndex = _pageIndex;

            // Deleted is a special case.  If a feedback has the deleted 
            // bit set, it is in the trash no matter what other bits are set.
            FeedbackStatusFlag excludeFilter = _feedbackStatusFilter == FeedbackStatusFlag.Deleted ? FeedbackStatusFlag.None : FeedbackStatusFlag.Deleted;

            IPagedCollection<FeedbackItem> selectionList = Repository.GetPagedFeedback(_pageIndex
                                                                                       , resultsPager.PageSize
                                                                                       , _feedbackStatusFilter
                                                                                       , excludeFilter
                                                                                       , Master.FeedbackType);

            if(selectionList.Count > 0)
            {
                resultsPager.Visible = true;

                resultsPager.ItemCount = selectionList.MaxItems;
                feedbackRepeater.DataSource = selectionList;
                feedbackRepeater.DataBind();
            }
            else
            {
                resultsPager.Visible = false;
                noCommentsMessage.Text = _uiState.NoCommentsHtml;
                feedbackRepeater.Controls.Clear();
                noCommentsMessage.Visible = true;

                btnEmpty.Visible = false;
            }
            Master.BindCounts();
        }

        /// <summary>
        /// Gets the body of the feedback represented by the dataItem.
        /// </summary>
        /// <param name="dataItem"></param>
        /// <returns></returns>
        protected static string GetBody(object dataItem)
        {
            var feedbackItem = (FeedbackItem)dataItem;
            if(feedbackItem.FeedbackType != FeedbackType.PingTrack)
            {
                return feedbackItem.Body;
            }
            return string.Format(CultureInfo.InvariantCulture,
                                 "{0}<br /><a target=\"_blank\" title=\"{3}: {1}\"  href=\"{2}\">Pingback/TrackBack</a>",
                                 feedbackItem.Body, feedbackItem.Title, feedbackItem.SourceUrl, Resources.Label_View);
        }

        /// <summary>
        /// Returns the author during data binding. If the author specified 
        /// an email address, includes that.
        /// </summary>
        /// <param name="dataItem"></param>
        /// <returns></returns>
        protected static string GetAuthor(object dataItem)
        {
            var feedbackItem = (FeedbackItem)dataItem;
            return string.Format(@"<span title=""{0}"">{1}</span>", feedbackItem.IpAddress, feedbackItem.Author);
        }

        /// <summary>
        /// Gets the title.
        /// </summary>
        /// <param name="dataItem">The data item.</param>
        /// <returns></returns>
        protected string GetTitle(object dataItem)
        {
            var feedbackItem = (FeedbackItem)dataItem;
            string feedbackUrl = Url.FeedbackUrl(feedbackItem);
            if(!String.IsNullOrEmpty(feedbackUrl))
            {
                return string.Format(@"<a href=""{0}"" title=""{0}"">{1}</a>", feedbackUrl, feedbackItem.Title);
            }

            return feedbackItem.Title;
        }

        /// <summary>
        /// Returns the author during data binding. If the author specified 
        /// an email address, includes that.
        /// </summary>
        /// <param name="dataItem"></param>
        /// <returns></returns>
        protected static string GetAuthorInfo(object dataItem)
        {
            var feedback = (FeedbackItem)dataItem;
            string authorInfo = string.Empty;
            string safeEmail = HttpUtility.HtmlAttributeEncode(feedback.Email);

            if(!string.IsNullOrEmpty(feedback.Email) && feedback.Email.IndexOf("@") > 0)
            {
                string safeAuthor = StringHelper.MailToEncode(feedback.Author);
                string safeTitle = StringHelper.MailToEncode(feedback.Title);
                string safeBody = StringHelper.MailToBodyEncode(feedback.Body);

                string mailToUrl = safeEmail
                                   + "&subject=re:" + safeTitle
                                   + "&body=----------%0A"
                                   + "From: " + safeAuthor + " (" + safeEmail + ")%0A"
                                   + "Sent: " + StringHelper.MailToEncode(feedback.DateCreated.ToString()) + "%0A"
                                   + "Subject: " + safeTitle.Replace("+", " ") + "%0A%0A"
                                   + safeBody;
                authorInfo +=
                    string.Format(
                        @"<a href=""mailto:{0}"" title=""{1}""><img src=""{2}"" alt=""{1}"" border=""0"" class=""email"" /></a>",
                        mailToUrl, safeEmail, HttpHelper.ExpandTildePath("~/images/email.gif"));
            }

            if(feedback.SourceUrl != null)
            {
                authorInfo +=
                    string.Format(@"<a href=""{0}"" title=""{1}""><img src=""{2}"" alt=""{1}"" border=""0"" /></a>",
                                  feedback.SourceUrl, feedback.SourceUrl, HttpHelper.ExpandTildePath("~/images/permalink.gif"));
            }

            return authorInfo;
        }

        protected void OnEmptyClick(object sender, EventArgs e)
        {
            FeedbackItem.Destroy(_feedbackStatusFilter);
            BindList();
        }


        /// <summary>
        /// Event handler for the approve button click event. 
        /// Approves the checked comments.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void OnApproveClick(object sender, EventArgs e)
        {
            if(ApplyActionToCheckedFeedback(FeedbackItem.Approve) == 0)
            {
                Messages.ShowMessage(Resources.Feedback_NothingToApprove, true);
                return;
            }

            BindList();
        }

        /// <summary>
        /// Event handler for the Delete button Click event.  Deletes 
        /// the checked comments.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void OnDeleteClick(object sender, EventArgs e)
        {
            if(ApplyActionToCheckedFeedback((item, service) => FeedbackItem.Delete(item)) == 0)
            {
                Messages.ShowMessage(Resources.Feedback_NothingToDelete, true);
                return;
            }
            BindList();
        }

        /// <summary>
        /// Called when the confirm spam button is clicked.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        protected void OnConfirmSpam(object sender, EventArgs e)
        {
            if(ApplyActionToCheckedFeedback(FeedbackItem.ConfirmSpam) == 0)
            {
                Messages.ShowMessage(Resources.Feedback_NothingFlaggedAsSpam, true);
                return;
            }
            BindList();
        }

        private int ApplyActionToCheckedFeedback(Action<FeedbackItem, ICommentSpamService> action)
        {
            ICommentSpamService feedbackService = null;
            if(Blog.FeedbackSpamServiceEnabled)
            {
                feedbackService = new AkismetSpamService(Config.CurrentBlog.FeedbackSpamServiceKey, Config.CurrentBlog,
                                                         null, Url);
            }

            int actionsApplied = 0;
            foreach(RepeaterItem item in feedbackRepeater.Items)
            {
                // Get the checkbox from the item or the alternating item.
                var deleteCheck = item.FindControl("chkDelete") as CheckBox ?? item.FindControl("chkDeleteAlt") as CheckBox;

                if(deleteCheck != null && deleteCheck.Checked)
                {
                    // Get the FeedbackId from the item or the alternating item.
                    var feedbackId = item.FindControl("FeedbackId") as HtmlInputHidden ?? item.FindControl("FeedbackIdAlt") as HtmlInputHidden;

                    int id;
                    if(feedbackId != null && int.TryParse(feedbackId.Value, out id))
                    {
                        FeedbackItem feedbackItem = FeedbackItem.Get(id);
                        if(feedbackItem != null)
                        {
                            actionsApplied++;

                            action(feedbackItem, feedbackService);
                        }
                    }
                }
            }
            return actionsApplied;
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Feedback {
    
    
    public partial class Default {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// filterTypeDropDown control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList filterTypeDropDown;
        
        /// <summary>
        /// headerLiteral control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl headerLiteral;
        
        /// <summary>
        /// noCommentsMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal noCommentsMessage;
        
        /// <summary>
        /// feedbackRepeater control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater feedbackRepeater;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// btnEmpty control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnEmpty;
    }
}
using System;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Web.Admin.Pages;

namespace Subtext.Web.Admin.Feedback
{
    public partial class EditPage : ConfirmationPage
    {
        int _feedbackId = NullValue.NullInt32;

        public EditPage()
        {
            TabSectionId = "Feedback";
        }

        bool ReturnToOriginalPost
        {
            get
            {
                string returnText = Request.QueryString["return-to-post"] ?? "false";
                return String.Equals(returnText, "true", StringComparison.InvariantCultureIgnoreCase);
            }
        }

        protected string CancelUrl
        {
            get
            {
                if(FeedbackId > -1 && ReturnToOriginalPost)
                {
                    // We came from outside the post, let's go there.
                    FeedbackItem updatedFeedback = FeedbackItem.Get(FeedbackId);
                    if(updatedFeedback != null)
                    {
                        return Url.FeedbackUrl(updatedFeedback);
                    }
                }
                //Go back to the list.
                return Master.ListUrl();
            }
        }

        public int FeedbackId
        {
            get
            {
                if(_feedbackId == NullValue.NullInt32)
                {
                    string feedbackIdText = Request.QueryString["FeedbackID"] ?? " ";
                    int id;
                    if(int.TryParse(feedbackIdText, out id))
                    {
                        _feedbackId = id;
                    }
                }
                return _feedbackId;
            }
        }

        protected new FeedbackMaster Master
        {
            get { return base.Master as FeedbackMaster; }
        }

        protected override void OnLoad(EventArgs e)
        {
            if(FeedbackId == NullValue.NullInt32)
            {
                Response.Redirect(CancelUrl);
                return;
            }

            if(!IsPostBack)
            {
                BindFeedbackEdit();
            }
            base.OnLoad(e);
        }

        private void BindFeedbackEdit()
        {
            FeedbackItem currentFeedback = FeedbackItem.Get(FeedbackId);
            if(currentFeedback == null)
            {
                Response.Redirect("./");
                return;
            }

            SetConfirmation();
            lblName.Text = currentFeedback.Author;
            lblEmail.Text = currentFeedback.Email;
            if(currentFeedback.Email.Length > 0)
            {
                hlAuthorEmail.NavigateUrl = "mailto:" + currentFeedback.Email;
            }

            hlEntryLink.NavigateUrl = Url.FeedbackUrl(currentFeedback);
            hlEntryLink.Text = Url.FeedbackUrl(currentFeedback);
            if(currentFeedback.SourceUrl != null)
            {
                txbWebsite.Text = currentFeedback.SourceUrl.ToString();
            }

            txbTitle.Text = currentFeedback.Title;

            richTextEditor.Text = currentFeedback.Body;
        }

        private void SetConfirmation()
        {
            var confirmPage = (ConfirmationPage)Page;
            confirmPage.IsInEdit = true;
            confirmPage.Message = "You will lose any unsaved content";

            lkbPost.Attributes.Add("OnClick", BypassFunctionName);
        }

        private void UpdateFeedback()
        {
            Uri feedbackWebsite = null;
            valtxbWebsite.IsValid = !(txbWebsite.Text.Length > 0) || Uri.TryCreate(txbWebsite.Text, UriKind.RelativeOrAbsolute, out feedbackWebsite);

            if(Page.IsValid)
            {
                FeedbackItem updatedFeedback = FeedbackItem.Get(FeedbackId);
                updatedFeedback.Title = txbTitle.Text;
                updatedFeedback.Body = richTextEditor.Text;
                if(feedbackWebsite != null)
                {
                    updatedFeedback.SourceUrl = feedbackWebsite;
                }
                FeedbackItem.Update(updatedFeedback);
                Cacher.InvalidateFeedback(updatedFeedback.Entry, SubtextContext);
                if(ReturnToOriginalPost)
                {
                    Response.Redirect(Url.FeedbackUrl(updatedFeedback));
                    return;
                }

                
                Messages.ShowMessage(Constants.RES_SUCCESSEDIT, false);
            }
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            UpdateFeedback();
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Feedback {
    
    
    public partial class EditPage {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// Edit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Edit;
        
        /// <summary>
        /// hlAuthorEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink hlAuthorEmail;
        
        /// <summary>
        /// lblName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblName;
        
        /// <summary>
        /// lblEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmail;
        
        /// <summary>
        /// hlEntryLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink hlEntryLink;
        
        /// <summary>
        /// valTitleRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valTitleRequired;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// valtxbWebsite control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CustomValidator valtxbWebsite;
        
        /// <summary>
        /// txbWebsite control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbWebsite;
        
        /// <summary>
        /// valtbBodyRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valtbBodyRequired;
        
        /// <summary>
        /// richTextEditor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.RichTextEditor richTextEditor;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
    }
}
using System;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.UI.Controls;

namespace Subtext.Web.Admin.Feedback
{
    public partial class FeedbackMaster : AdminMasterPage
    {
        FeedbackCounts _counts;
        FeedbackType _feedbackType = (FeedbackType)(-1);
        int page = NullValue.NullInt32;
        FeedbackStatusFlag _status = (FeedbackStatusFlag)(-1);

        public string CurrentQuery
        {
            get { return GetCurrentQuery(PageIndex, FeedbackStatus, FeedbackType); }
        }

        public int PageIndex
        {
            get
            {
                if(page == NullValue.NullInt32)
                {
                    string pageText = Request.QueryString["pg"] ?? "0";
                    page = Convert.ToInt32(pageText);
                }
                return page;
            }
        }

        public FeedbackType FeedbackType
        {
            get
            {
                if(_feedbackType == (FeedbackType)(-1))
                {
                    string typeText = Request.QueryString["type"] ?? Preferences.GetFeedbackItemFilter(FeedbackStatus);
                    try
                    {
                        _feedbackType = (FeedbackType)Enum.Parse(typeof(FeedbackType), typeText);
                        if(_feedbackType == FeedbackType.ContactPage && !Contact.SendContactMessageToFeedback)
                        {
                            _feedbackType = FeedbackType.None;
                        }
                    }
                    catch(ArgumentException)
                    {
                        //Grab it from the cookie.
                        _feedbackType = FeedbackType.None;
                    }
                }
                Preferences.SetFeedbackItemFilter(_feedbackType.ToString(), FeedbackStatus);
                return _feedbackType;
            }
        }

        public FeedbackStatusFlag FeedbackStatus
        {
            get
            {
                if(_status == (FeedbackStatusFlag)(-1))
                {
                    string filter = Request.QueryString["status"] ?? "Approved";
                    try
                    {
                        _status = (FeedbackStatusFlag)Enum.Parse(typeof(FeedbackStatusFlag), filter, true);
                    }
                    catch(ArgumentException)
                    {
                        _status = FeedbackStatusFlag.Approved;
                    }
                }
                return _status;
            }
        }

        protected FeedbackCounts Counts
        {
            get { return _counts; }
        }

        public string ListUrl()
        {
            return ListUrl(PageIndex, FeedbackStatus, FeedbackType);
        }

        public string ListUrl(FeedbackType filter)
        {
            return ListUrl(PageIndex, FeedbackStatus, filter);
        }

        public string ListUrl(FeedbackStatusFlag status, int pageIndex)
        {
            return ListUrl(pageIndex, status, FeedbackType);
        }

        //For master page only...
        protected string GetListUrl(FeedbackStatusFlag status)
        {
            return "Default.aspx?status=" + status;
        }

        public string ListUrl(FeedbackStatusFlag status)
        {
            return ListUrl(PageIndex, status, FeedbackType);
        }

        public string ListUrl(int page, FeedbackStatusFlag status, FeedbackType type)
        {
            return "Default.aspx?" + GetCurrentQuery(page, status, type);
        }

        public string GetCurrentQuery(int page, FeedbackStatusFlag status, FeedbackType type)
        {
            const string query = "page={0}&status={1}&type={2}";
            return String.Format(query, page, status, type);
        }

        public void BindCounts()
        {
            _counts = FeedbackItem.GetFeedbackCounts();
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Feedback {
    
    
    public partial class FeedbackMaster {
        
        /// <summary>
        /// head control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder head;
        
        /// <summary>
        /// feedbackContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder feedbackContent;
    }
}
using System;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;

namespace Subtext.Web.Admin.Feedback
{
    public class FeedbackState
    {
        public bool Approvable = true;
        public string ApproveText = Resources.Label_Approve;
        public bool Deletable = true;
        public string DeleteToolTip = string.Empty;
        public bool Destroyable;
        public bool Emptyable;
        public string EmptyToolTip = string.Empty;
        public string HeaderText = string.Empty;
        public string NoCommentsHtml = Resources.Label_NoApprovedComments;
        public bool Spammable = true;

        public static FeedbackState GetUiState(FeedbackStatusFlag status)
        {
            //We've reduced multiple switch statements to one, 
            //that's good enough in my book.
            switch(status)
            {
                case FeedbackStatusFlag.Approved:
                    return new ApprovedFeedbackState();

                case FeedbackStatusFlag.NeedsModeration:
                    return new NeedsModerationState();

                case FeedbackStatusFlag.FlaggedAsSpam:
                    return new FlaggedAsSpamState();

                case FeedbackStatusFlag.Deleted:
                    return new DeletedState();

                default:
                    throw new InvalidOperationException(String.Format(Resources.InvalidOperation_InvalidFeedbackStatus,
                                                                      status));
            }
        }
    }

    public class ApprovedFeedbackState : FeedbackState
    {
        public ApprovedFeedbackState()
        {
            HeaderText = Resources.Label_Comments;
            Approvable = false;
        }
    }

    public class NeedsModerationState : FeedbackState
    {
        public NeedsModerationState()
        {
            HeaderText = Resources.Label_CommentsPendingModeratorApproval;
            NoCommentsHtml = Resources.Label_NoCommentsNeedModeration;
        }
    }

    public class FlaggedAsSpamState : FeedbackState
    {
        public FlaggedAsSpamState()
        {
            HeaderText = Resources.Label_CommentsFlaggedAsSpam;
            DeleteToolTip = Resources.Label_TrashesSpam;
            Spammable = false;
            Emptyable = true;
            EmptyToolTip = Resources.Label_DestroySpamTooltip;
            NoCommentsHtml = Resources.Label_NoCommentsFlaggedAsSpam;
        }
    }

    public class DeletedState : FeedbackState
    {
        public DeletedState()
        {
            HeaderText = Resources.Label_CommentsInTrash;
            Spammable = false;
            Deletable = false;
            DeleteToolTip = Resources.Label_TrashesSpam;
            Destroyable = true;
            Emptyable = true;
            EmptyToolTip = Resources.Label_DestroyTrashTooltip;
            ApproveText = Resources.Label_Undelete;
            NoCommentsHtml = Resources.Label_NoCommentsInTrash;
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using log4net;
using Ninject;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Services.SearchEngine;
using Subtext.ImportExport;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    public partial class FullTextSearch : AdminOptionsPage
    {
        private readonly static ILog Log = new Log();

        protected override void BindLocalUI()
        {
            UpdateIndexSize();
            base.BindLocalUI();
        }

        private void UpdateIndexSize()
        {
            ltrPostIndexedCount.Text = SearchEngine.GetIndexedEntryCount(Blog.Id).ToString();
        }

        protected void btnRebuild_Click(object sender, EventArgs e)
        {
            var indexingService = SubtextContext.ServiceLocator.GetService<IIndexingService>();
            try
            {
                var errors = indexingService.RebuildIndex();
                if(errors.Count()==0)
                    Messages.ShowMessage(Resources.FullTextSearch_ReindexingCompleted);
                else
                {
                    string errormessages = string.Empty;
                    foreach (var error in errors)
                    {
                        errormessages += String.Format("<li>Unable to index post with id {0}: {1}</li>",error.Entry.EntryId,error.Exception.Message);
                    }
                    Messages.ShowError(String.Format(Resources.FullTextSearch_ReindexingCompletedWithErrorsFormat, errormessages));
                }
            }
            catch(Exception ex)
            {
                Log.Error(Resources.FullTextSearch_ReindexingFailed, ex);
                Messages.ShowError(ex.Message, true);
            }
            UpdateIndexSize();
        }
    }
}
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class FullTextSearch {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// ltrPostIndexedCount control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ltrPostIndexedCount;
        
        /// <summary>
        /// btnRebuild control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnRebuild;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using log4net;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Logging;
using Subtext.ImportExport;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Renders the page used to import and export blog data using 
    /// the BlogML format proposed in 
    /// <see href="http://markitup.com/Posts/PostsByCategory.aspx?categoryId=5751cee9-5b20-4db1-93bd-7e7c66208236">this blog</see>
    /// </summary>
    public partial class ImportExportPage : AdminOptionsPage
    {
        private readonly static ILog Log = new Log();

        protected override void OnInit(EventArgs e)
        {
            Load += Page_Load;
            base.OnInit(e);
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            Response.Redirect(AdminUrl.Export(chkEmbedAttach.Checked));
        }

        protected void btnLoad_Click(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                try
                {
                    //Temporarily extend script timeout for large BlogML imports
                    if(Server.ScriptTimeout < 3600)
                    {
                        Server.ScriptTimeout = 3600;
                    }
                    LoadBlogML();
                }
                catch(InvalidOperationException)
                {
                    Messages.ShowError(Resources.ImportExport_InvalidBlogMLFile, true);
                }
            }
        }

        private void LoadBlogML()
        {
            ISubtextContext context = SubtextContext;
            var importService = context.ServiceLocator.GetService<IBlogImportService>();
            
            try
            {
                importService.ImportBlog(importBlogMLFile.PostedFile.InputStream);
            }
            catch(BlogImportException e)
            {
                Log.Error(Resources.ImportExport_ImportFailed, e);
                Messages.ShowError(e.Message, true);
            }
            finally
            {
                importBlogMLFile.PostedFile.InputStream.Close();
            }

            Messages.ShowMessage(Resources.ImportExport_ImportSuccess);
        }

        protected void btnClearContent_Click(object sender, EventArgs e)
        {
            if(chkClearContent.Checked)
            {
                chkClearContent.Checked = false;
                chkClearContent.Visible = false;
                btnClearContent.Visible = false;

                Blog.ClearBlogContent(Config.CurrentBlog.Id);
                msgpnlClearContent.ShowMessage(Resources.ImportExport_ContentObliterated);
            }
            else
            {
                msgpnlClearContent.ShowError(Resources.ImportExport_CheckContinueToClearContent);
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class ImportExportPage {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// chkEmbedAttach control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEmbedAttach;
        
        /// <summary>
        /// btnSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSave;
        
        /// <summary>
        /// hypBlogMLFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink hypBlogMLFile;
        
        /// <summary>
        /// blogMLFileRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator blogMLFileRequired;
        
        /// <summary>
        /// importBlogMLFile control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.FileUpload importBlogMLFile;
        
        /// <summary>
        /// fileRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator fileRequired;
        
        /// <summary>
        /// btnLoad control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnLoad;
        
        /// <summary>
        /// uppnlClearContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Panel uppnlClearContent;
        
        /// <summary>
        /// msgpnlClearContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel msgpnlClearContent;
        
        /// <summary>
        /// chkClearContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkClearContent;
        
        /// <summary>
        /// btnClearContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnClearContent;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;

namespace Subtext.Web.Admin.Pages
{
    public partial class AdminOptionsPage : AdminPage
    {
        public AdminOptionsPage()
        {
            TabSectionId = "Options";
        }

        protected virtual void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
            {
                BindLocalUI();
            }
            BindActionsListUI();
        }

        protected virtual void BindActionsListUI()
        {
            HyperLink lnkConfigure = Utilities.CreateHyperLink("Configure", "Configure.aspx");
            HyperLink lnkSkins = Utilities.CreateHyperLink("Skins", "Skins.aspx");
            HyperLink lnkCustomize = Utilities.CreateHyperLink("Meta Tags", "Customize.aspx");
            HyperLink lnkPreferences = Utilities.CreateHyperLink("Preferences", "Preferences.aspx");
            HyperLink lnkSyndication = Utilities.CreateHyperLink("Syndication", "Syndication.aspx");
            HyperLink lnkComments = Utilities.CreateHyperLink("Comments", "Comments.aspx");
            HyperLink linkKeyWords = Utilities.CreateHyperLink("Key Words", "EditKeyWords.aspx");
            HyperLink lnkSecurity = Utilities.CreateHyperLink("Security", "Security.aspx");
            HyperLink lnkImportExport = Utilities.CreateHyperLink("Import/Export", "ImportExport.aspx");
            HyperLink lnkFullTextSearch = Utilities.CreateHyperLink("FullText Search", "FullTextSearch.aspx");


            // Add the buttons to the PageContainer.
            AdminMasterPage.ClearActions();
            AdminMasterPage.AddToActions(lnkConfigure);
            AdminMasterPage.AddToActions(lnkSkins);
            AdminMasterPage.AddToActions(lnkComments);
            AdminMasterPage.AddToActions(lnkSyndication);
            AdminMasterPage.AddToActions(lnkSecurity);
            AdminMasterPage.AddToActions(linkKeyWords);
            AdminMasterPage.AddToActions(lnkCustomize);
            AdminMasterPage.AddToActions(lnkPreferences);
            AdminMasterPage.AddToActions(lnkImportExport);
            AdminMasterPage.AddToActions(lnkFullTextSearch);
        }

        protected virtual void BindLocalUI()
        {
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class AdminOptionsPage {
    }
}
using System;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Posts
{
    public partial class Default : AdminPage
    {
        public Default()
        {
            TabSectionId = "Posts";
        }

        protected override void OnLoad(EventArgs e)
        {
            entries.HeaderText = Resources.Label_Entries;
            string message = Request.QueryString["message"];
            if(!string.IsNullOrEmpty(message))
            {
                Messages.ShowMessage(message);
            }
            base.OnLoad(e);
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Posts {
    
    
    public partial class Default {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// entries control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.EntriesList entries;
    }
}
using Subtext.Web.Admin.Pages;

namespace Subtext.Web.Admin.Posts
{
    public partial class Edit : ConfirmationPage
    {
        public Edit()
        {
            TabSectionId = "Posts";
            IsInEdit = true;
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Posts {
    
    
    public partial class Edit {
        
        /// <summary>
        /// Editor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.EntryEditor Editor;
    }
}
using System;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Posts
{
    public partial class Posts : AdminMasterPage
    {
        protected AdminPageTemplate AdminMasterPage
        {
            get { return Master as AdminPageTemplate; }
        }

        protected override void OnLoad(EventArgs e)
        {
            BindLocalUI();
            base.OnLoad(e);
        }

        private void BindLocalUI()
        {
            var newPostLink = new HyperLink {Text = Resources.Label_NewPost, NavigateUrl = AdminUrl.PostsEdit()};
            AdminMasterPage.AddToActions(newPostLink);

            HyperLink lnkEditCategories = Utilities.CreateHyperLink(Resources.Label_EditCategories,
                                                                    AdminUrl.EditCategories(categoryLinks.CategoryType));
            AdminMasterPage.AddToActions(lnkEditCategories);

            LinkButton lkbRebuildTags = Utilities.CreateLinkButton(Resources.Label_RebuildAllTags);
            lkbRebuildTags.CausesValidation = false;
            lkbRebuildTags.Click += OnRebuildTagsClick;
            AdminMasterPage.AddToActions(lkbRebuildTags);
        }

        private void OnRebuildTagsClick(object sender, EventArgs e)
        {
            Repository.RebuildAllTags();
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Posts {
    
    
    public partial class Posts {
        
        /// <summary>
        /// categoryLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.UserControls.CategoryLinkList categoryLinks;
        
        /// <summary>
        /// postsContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder postsContent;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.Admin.Pages
{
    public partial class EditPreferences : AdminOptionsPage
    {
        protected override void BindLocalUI()
        {
            ddlPublished.SelectedIndex = -1;
            ddlPublished.Items.FindByValue(Preferences.AlwaysCreateIsActive ? "true" : "false").Selected = true;

            ddlExpandAdvanced.SelectedIndex = -1;
            ddlExpandAdvanced.Items.FindByValue(Preferences.AlwaysExpandAdvanced ? "true" : "false").Selected = true;

            base.BindLocalUI();
        }

        protected void lkbUpdate_Click(object sender, EventArgs e)
        {
            bool published = Boolean.Parse(ddlPublished.SelectedItem.Value);
            Preferences.AlwaysCreateIsActive = published;

            bool alwaysExpand = Boolean.Parse(ddlExpandAdvanced.SelectedItem.Value);
            Preferences.AlwaysExpandAdvanced = alwaysExpand;
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class EditPreferences {
        
        /// <summary>
        /// ddlPublished control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlPublished;
        
        /// <summary>
        /// ddlExpandAdvanced control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlExpandAdvanced;
        
        /// <summary>
        /// lkbUpdate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbUpdate;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI.WebControls;
using log4net;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    public partial class Referrers : StatsPage
    {
        private readonly static ILog Log = new Log();
        private int _entryId = NullValue.NullInt32;
        private bool _isListHidden = false;
        private int _pageIndex;

        public Referrers()
        {
            TabSectionId = "Stats";
        }

        private int EntryId
        {
            get { return (int)ViewState["EntryId"]; }
            set { ViewState["EntryId"] = value; }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
            {
                if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
                {
                    _pageIndex = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
                }

                if(null != Request.QueryString["EntryId"])
                {
                    _entryId = Convert.ToInt32(Request.QueryString["EntryId"]);
                }

                resultsPager.PageSize = Preferences.ListingItemCount;
                resultsPager.PageIndex = _pageIndex;

                BindList();
            }
        }

        protected override void BindLocalUI()
        {
            if(_entryId == NullValue.NullInt32)
            {
                //SetReferalDesc("Referrals");
            }
            else
            {
                SetReferalDesc("Entry", _entryId.ToString(CultureInfo.InvariantCulture));
            }
            base.BindLocalUI();
        }

        private void BindList()
        {
            IPagedCollection<Referrer> referrers;

            if(_entryId == NullValue.NullInt32)
            {
                referrers = Repository.GetPagedReferrers(_pageIndex, resultsPager.PageSize, NullValue.NullInt32);
            }
            else
            {
                resultsPager.UrlFormat += string.Format(CultureInfo.InvariantCulture, "&{0}={1}", "EntryId", _entryId);
                referrers = Repository.GetPagedReferrers(_pageIndex, resultsPager.PageSize, _entryId);
            }

            if(referrers != null && referrers.Count > 0)
            {
                resultsPager.ItemCount = referrers.MaxItems;
                rprSelectionList.DataSource = referrers;
                rprSelectionList.DataBind();
            }
        }

        private void SetReferalDesc(string selection, string title)
        {
            if(AdminMasterPage != null)
            {
                string bctitle = string.Format(CultureInfo.InvariantCulture, Resources.Label_Viewing + " {0}:{1}",
                                               selection, title);
                AdminMasterPage.Title = bctitle;
            }
        }

        public string CheckHiddenStyle()
        {
            if(_isListHidden)
            {
                return Constants.CSSSTYLE_HIDDEN;
            }
            else
            {
                return String.Empty;
            }
        }

        public string GetTitle(object dataItem)
        {
            if(dataItem is Referrer)
            {
                var referrer = (Referrer)dataItem;

                if(referrer.PostTitle != null)
                {
                    if(referrer.PostTitle.Trim().Length <= 50)
                    {
                        return "<a href=\"../posts/" + referrer.EntryId + ".aspx\" target=\"_new\">" +
                               referrer.PostTitle + "</a>";
                    }
                    return "<a href=\"../posts/" + referrer.EntryId + ".aspx\" target=\"_new\">" +
                           referrer.PostTitle.Substring(0, 50) + "</a>";
                }
                return "Unknown";
            }
            return "Unknown";
        }

        public string GetReferrer(object dataItem)
        {
            if(dataItem is Referrer)
            {
                var referrer = (Referrer)dataItem;
                string urlEncodedReferrerUrl = Uri.EscapeUriString(referrer.ReferrerUrl);

                // Chop it here because otherwise we could end up with a badly HTML encoded string if the chop appears after the encoding
                string htmlEncodedReferrerUrl = referrer.ReferrerUrl.Length > 50 ? referrer.ReferrerUrl.Substring(0, 50) : referrer.ReferrerUrl;

                return "<a href=\"" + urlEncodedReferrerUrl + "\" target=\"_new\">" +
                       HttpUtility.HtmlEncode(htmlEncodedReferrerUrl) + "</a>";
            }
            else
            {
                return "Unknown";
            }
        }

        private void rprSelectionList_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "create":
                    object[] args = e.CommandArgument.ToString().Split('|');
                    EntryId = Int32.Parse(args[0].ToString(), CultureInfo.InvariantCulture);
                    txbUrl.Text = args[1].ToString();
                    Edit.Visible = true;
                    Results.Visible = false;
                    txbTitle.Text = string.Empty;
                    txbBody.Text = string.Empty;
                    break;

                default:
                    break;
            }
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            try
            {
                var entry = new Trackback(EntryId, txbTitle.Text, txbUrl.Text.EnsureUrl(), string.Empty,
                                          txbBody.Text.Trim().Length > 0 ? txbBody.Text.Trim() : txbTitle.Text,
                                          Config.CurrentBlog.TimeZone.Now);
                var commentService = new CommentService(SubtextContext, null);

                if(commentService.Create(entry, true/*runFilters*/) > 0)
                {
                    ICommentSpamService feedbackService = null;
                    if(Config.CurrentBlog.FeedbackSpamServiceEnabled)
                    {
                        feedbackService = new AkismetSpamService(Config.CurrentBlog.FeedbackSpamServiceKey,
                                                                 Config.CurrentBlog, null, Url);
                    }
                    var filter = new CommentFilter(SubtextContext, feedbackService);
                    filter.FilterAfterPersist(entry);
                    Messages.ShowMessage(Constants.RES_SUCCESSNEW);
                    Edit.Visible = false;
                    Results.Visible = true;
                }
                else
                {
                    Messages.ShowError(Constants.RES_FAILUREEDIT
                                       + " There was a baseline problem posting your Trackback.");
                }
            }
            catch(Exception ex)
            {
                Log.Error(ex.Message, ex);
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Constants.RES_FAILUREEDIT, ex.Message));
            }
        }

        protected void lkbCancel_Click(object sender, EventArgs e)
        {
            Edit.Visible = false;
            Results.Visible = true;
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.rprSelectionList.ItemCommand +=
                new System.Web.UI.WebControls.RepeaterCommandEventHandler(this.rprSelectionList_ItemCommand);
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Referrers {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// Results control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Results;
        
        /// <summary>
        /// rprSelectionList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprSelectionList;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// Edit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder Edit;
        
        /// <summary>
        /// RequiredFieldValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator1;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// Requiredfieldvalidator3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator Requiredfieldvalidator3;
        
        /// <summary>
        /// txbUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbUrl;
        
        /// <summary>
        /// txbBody control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbBody;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
        
        /// <summary>
        /// lkbCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbCancel;
    }
}
using System;
using Subtext.Web.Admin.WebUI;

namespace Subtext.Web.Admin.Pages
{
    public partial class RssFeeds : StatsPage
    {
        public RssFeeds()
        {
            TabSectionId = "Stats";
        }

        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class RssFeeds {
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Summary description for Password.
    /// </summary>
    public partial class Security : AdminOptionsPage
    {
        protected Label Message;
        protected ValidationSummary ValidationSummary1;

        protected override void BindLocalUI()
        {
            if(!String.IsNullOrEmpty(Blog.OpenIdUrl))
            {
                tbOpenIDURL.Text = Blog.OpenIdUrl;
            }
            
            tbOpenIDServer.Text = Blog.OpenIdServer;
            tbOpenIDDelegate.Text = Blog.OpenIdDelegate;

            base.BindLocalUI();
        }

        protected void btnSaveOptions_Click(object sender, EventArgs e)
        {
            string openIdUrl = tbOpenIDURL.Text == "http://" ? string.Empty : tbOpenIDURL.Text;
            Blog.OpenIdUrl = openIdUrl;
                
            Repository.UpdateConfigData(Blog);
        }

        protected void btnChangePassword_Click(object sender, EventArgs e)
        {
            string failureMessage = Resources.Security_PasswordNotUpdated;
            if(Page.IsValid)
            {
                if(SecurityHelper.IsValidPassword(SubtextContext.Blog, tbCurrent.Text))
                {
                    if(tbPassword.Text == tbPasswordConfirm.Text)
                    {
                        SecurityHelper.UpdatePassword(tbPassword.Text);

                        Messages.ShowMessage(Resources.Security_PasswordUpdated);
                    }
                    else
                    {
                        Messages.ShowError(failureMessage);
                    }
                }
                else
                {
                    Messages.ShowError(failureMessage);
                }
            }
            else
            {
                Messages.ShowError(failureMessage);
            }
        }

        protected void OnSavePassthroughClick(object sender, EventArgs e)
        {
            Blog.OpenIdServer = tbOpenIDServer.Text;
            Blog.OpenIdDelegate = tbOpenIDDelegate.Text;

            Repository.UpdateConfigData(Blog);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Security {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// RequiredFieldValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator1;
        
        /// <summary>
        /// tbCurrent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbCurrent;
        
        /// <summary>
        /// RequiredFieldValidator5 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator5;
        
        /// <summary>
        /// CompareValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CompareValidator CompareValidator1;
        
        /// <summary>
        /// tbPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbPassword;
        
        /// <summary>
        /// RequiredFieldValidator6 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator6;
        
        /// <summary>
        /// tbPasswordConfirm control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbPasswordConfirm;
        
        /// <summary>
        /// btnChangePassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnChangePassword;
        
        /// <summary>
        /// tbOpenIDURL control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbOpenIDURL;
        
        /// <summary>
        /// btnSaveOptions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSaveOptions;
        
        /// <summary>
        /// hlpOpenID control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip hlpOpenID;
        
        /// <summary>
        /// tbOpenIDServer control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbOpenIDServer;
        
        /// <summary>
        /// tbOpenIDDelegate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbOpenIDDelegate;
        
        /// <summary>
        /// saveOpenIdPassthroughButton control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button saveOpenIdPassthroughButton;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Security;
using Jayrock.JsonRpc;
using Jayrock.JsonRpc.Web;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;

namespace Subtext.Web.Admin.Services.Ajax
{
    //NOTE: This uses Jayrock for Ajax services. Please see http://jayrock.berlios.de/ for more info   
    public class AjaxServices : JsonRpcHandler
    {
        public override void ProcessRequest()
        {
            if(!User.IsInRole("Admins"))
            {
                throw new SecurityException();
            }
            base.ProcessRequest();
        }

        [JsonRpcMethod("addMetaTagForBlog")]
        public MetaTag AddMetaTagForBlog(string content, string name, string httpEquiv)
        {
            var newTag = new MetaTag(content) {Name = name, HttpEquiv = httpEquiv, BlogId = Config.CurrentBlog.Id, DateCreated = DateTime.Now};

            MetaTags.Create(newTag);

            return newTag;
        }

        [JsonRpcMethod("updateMetaTag")]
        public MetaTag UpdateMetaTag(MetaTag updatedTag)
        {
            updatedTag.BlogId = Config.CurrentBlog.Id;
            MetaTags.Update(updatedTag);

            return updatedTag;
        }

        [JsonRpcMethod("deleteMetaTag")]
        public bool DeleteMetaTag(int id)
        {
            return MetaTags.Delete(id);
        }

        [JsonRpcMethod("detectMimeType")]
        public string DetectMimeType(string url)
        {
            return MimeTypesMapper.Mappings.ParseUrl(url);
        }

        [JsonRpcMethod("getTimeZoneInfo")]
        public ServerTimeZoneInfo GetTimeZoneInfo(string timeZoneText)
        {
            return new ServerTimeZoneInfo(timeZoneText);
        }
    }
}using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.UI.Skinning;
using Subtext.Framework.Web;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin
{
    public partial class Skins : AdminOptionsPage
    {
        private ICollection<SkinTemplate> _mobileSkins;
        private IEnumerable<SkinTemplate> _skins;

        protected override void OnLoad(EventArgs e)
        {
            if(String.IsNullOrEmpty(Request.Form["SkinKey"]))
            {
                BindLocalUI();
            }
            else
            {
                OnSaveSkinClicked();
            }
            base.OnLoad(e);
        }

        protected IEnumerable<SkinTemplate> SkinTemplates
        {
            get
            {
                if(_skins == null)
                {
                    var skinEngine = new SkinEngine();
                    var skins = from skin in skinEngine.GetSkinTemplates(false /* mobile */).Values
                             where skin.SkinKey != "AGGREGATE" orderby skin.Name
                             select skin;
                    foreach(SkinTemplate template in skins)
                    {
                        if(template.MobileSupport == MobileSupport.Supported)
                        {
                            template.Name += Resources.Skins_MobileReady;
                        }
                    }
                    _skins = skins;
                }
                return _skins;
            }
        }

        protected ICollection<SkinTemplate> MobileSkinTemplates
        {
            get
            {
                if(_mobileSkins == null)
                {
                    var skinEngine = new SkinEngine();
                    var skins = new List<SkinTemplate>(skinEngine.GetSkinTemplates(true /* mobile */).Values);
                    skins.Insert(0, SkinTemplate.Empty);
                    _mobileSkins = skins;
                }
                return _mobileSkins;
            }
        }

        protected override void BindLocalUI()
        {
            skinRepeater.DataSource = SkinTemplates;
            mobileSkinRepeater.DataSource = MobileSkinTemplates;
            DataBind();
        }

        protected SkinTemplate EvalSkin(object o)
        {
            return o as SkinTemplate;
        }

        protected string GetSkinClientId(object o)
        {
            return (o as SkinTemplate).SkinKey.Replace(".", "_");
        }

        protected string EvalChecked(object o)
        {
            if(IsSelectedSkin(o))
            {
                return "checked=\"checked\"";
            }
            return string.Empty;
        }

        protected string EvalSelected(object o)
        {
            if(IsSelectedSkin(o))
            {
                return " selected";
            }
            return string.Empty;
        }

        private bool IsSelectedSkin(object o)
        {
            string currentSkin = (o as SkinTemplate).SkinKey;
            string blogSkin = SubtextContext.Blog.Skin.SkinKey;
            return String.Equals(currentSkin, blogSkin, StringComparison.OrdinalIgnoreCase);
        }

        protected string GetSkinIconImage(object o)
        {
            var skin = o as SkinTemplate;

            var imageUrls = new[]
            {
                string.Format(CultureInfo.InvariantCulture, "~/skins/{0}/SkinIcon.png", skin.TemplateFolder),
                string.Format(CultureInfo.InvariantCulture, "~/skins/{0}/{1}-SkinIcon.png", skin.TemplateFolder,
                              skin.Name),
                "~/skins/_System/SkinIcon.png"
            };

            string imageUrl = imageUrls.First(path => File.Exists(Server.MapPath(path)));
            return HttpHelper.ExpandTildePath(imageUrl);
        }

        protected void OnSaveSkinClicked()
        {
            Blog blog = SubtextContext.Blog;
            var skinEngine = new SkinEngine();
            SkinTemplate skinTemplate =
                skinEngine.GetSkinTemplates(false /* mobile */).ItemOrNull(Request.Form["SkinKey"]);
            blog.Skin.TemplateFolder = skinTemplate.TemplateFolder;
            blog.Skin.SkinStyleSheet = skinTemplate.StyleSheet;
            Repository.UpdateConfigData(blog);

            BindLocalUI();
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin {
    
    
    public partial class Skins {
        
        /// <summary>
        /// skinRepeater control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater skinRepeater;
        
        /// <summary>
        /// mobileSkinRepeater control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater mobileSkinRepeater;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.Admin.WebUI;

namespace Subtext.Web.Admin.Pages
{
    public partial class Statistics : StatsPage
    {
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Statistics {
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.Admin.WebUI;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Summary description for StatsViews.
    /// </summary>
    public partial class StatsView : StatsPage
    {
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class StatsView {
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;
using Subtext.Framework.Configuration;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Admin Page used to set syndication settings.
    /// </summary>
    public partial class Syndication : AdminOptionsPage
    {
        // abstract out at a future point for i18n
        private const string RES_FAILURE = "Syndication settings update failed.";
        private const string RES_SUCCESS = "Your syndication settings were successfully updated.";

        protected override void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);
            if(!IsPostBack)
            {
                PopulateForm();
            }
            ManageHiddenSettings();
        }

        private void PopulateForm()
        {
            Blog info = Config.CurrentBlog;

            chkEnableSyndication.Checked = info.IsAggregated;
            chkUseDeltaEncoding.Checked = info.RFC3229DeltaEncodingEnabled;
            chkUseSyndicationCompression.Checked = info.UseSyndicationCompression;
            txtFeedBurnerName.Text = info.RssProxyUrl;
            txtLicenseUrl.Text = info.LicenseUrl;
        }

        private void ManageHiddenSettings()
        {
            chkEnableSyndication.Attributes["onclick"] = "toggleHideOnCheckbox(this, 'otherSettings');";

            string startupScript = "<script type=\"text/javascript\">"
                                   + Environment.NewLine + "var checkbox = document.getElementById('" +
                                   chkEnableSyndication.ClientID + "');"
                                   + Environment.NewLine + " toggleHideOnCheckbox(checkbox, 'otherSettings');"
                                   + Environment.NewLine + "</script>";

            Type ctype = GetType();
            Page.ClientScript.RegisterStartupScript(ctype, "startupScript", startupScript);
        }

        private void SaveSettings()
        {
            try
            {
                UpdateConfiguration();
                Messages.ShowMessage(RES_SUCCESS);
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION, RES_FAILURE, ex.Message));
            }
        }

        private void UpdateConfiguration()
        {
            Blog info = Config.CurrentBlog;

            info.IsAggregated = chkEnableSyndication.Checked;
            info.UseSyndicationCompression = chkUseSyndicationCompression.Checked;
            info.RFC3229DeltaEncodingEnabled = chkUseDeltaEncoding.Checked;
            info.RssProxyUrl = txtFeedBurnerName.Text;
            info.LicenseUrl = txtLicenseUrl.Text;

            Repository.UpdateConfigData(info);
        }

        protected void lkbPost_Click(object sender, EventArgs e)
        {
            SaveSettings();
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Page.Load += new EventHandler(Page_Load);
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.Pages {
    
    
    public partial class Syndication {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// chkEnableSyndication control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkEnableSyndication;
        
        /// <summary>
        /// HelpToolTip1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip1;
        
        /// <summary>
        /// helpImg control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage helpImg;
        
        /// <summary>
        /// chkUseSyndicationCompression control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkUseSyndicationCompression;
        
        /// <summary>
        /// HelpToolTip2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip2;
        
        /// <summary>
        /// Img1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img1;
        
        /// <summary>
        /// chkUseDeltaEncoding control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkUseDeltaEncoding;
        
        /// <summary>
        /// Helptooltip4 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip4;
        
        /// <summary>
        /// Img2 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img2;
        
        /// <summary>
        /// hlpFeedburner control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip hlpFeedburner;
        
        /// <summary>
        /// Img4 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img4;
        
        /// <summary>
        /// txtFeedBurnerName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtFeedBurnerName;
        
        /// <summary>
        /// HelpToolTip3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip HelpToolTip3;
        
        /// <summary>
        /// Img3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img3;
        
        /// <summary>
        /// txtLicenseUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtLicenseUrl;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Admin.WebUI.Controls;
using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.Admin.UserControls
{
    public partial class CategoryLinkList : BaseUserControl
    {
        protected ICollection<LinkCategoryLink> categoryLinks = new List<LinkCategoryLink>();

        public CategoryLinkList()
        {
            CategoryType = CategoryType.None;
        }

        [Browsable(true)]
        [Description("Sets the type of categories to load.")]
        public CategoryType CategoryType { get; set; }

        protected void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
            {
                //Viewstate access is lost on postback for this control, so catType defaults to PostCollection.
                //So check if the catType is available in the query string and set this.catType's value to 
                //the querystring's category type enumeration
                if(!String.IsNullOrEmpty(Request.QueryString[Keys.QRYSTR_CATEGORYTYPE]))
                {
                    CategoryType =
                        (CategoryType)Enum.Parse(typeof(CategoryType), Request.QueryString[Keys.QRYSTR_CATEGORYTYPE]);
                }
                BindCategoriesRepeater();
            }
        }

        private void BindCategoriesRepeater()
        {
            //NEED TO USE ROUTING
            string baseUrl = null;

            if(CategoryType != CategoryType.None)
            {
                if(CategoryType == CategoryType.ImageCollection)
                {
                    categoryLinks.Add(new LinkCategoryLink("All Galleries", AdminUrl.EditGalleries()));
                    baseUrl = "EditGalleries.aspx";
                }
                else if(CategoryType == CategoryType.LinkCollection)
                {
                    categoryLinks.Add(new LinkCategoryLink("All Categories", AdminUrl.EditLinks()));
                    baseUrl = "EditLinks.aspx";
                }
                else if(CategoryType == CategoryType.PostCollection)
                {
                    categoryLinks.Add(new LinkCategoryLink("All Categories", AdminUrl.PostsList()));
                    baseUrl = "posts/default.aspx";
                }
                else if(CategoryType == CategoryType.StoryCollection)
                {
                    categoryLinks.Add(new LinkCategoryLink("All Categories", AdminUrl.ArticlesList()));
                    baseUrl = "articles/default.aspx";
                }

                ICollection<LinkCategory> categories = Links.GetCategories(CategoryType, ActiveFilter.None);
                foreach(LinkCategory current in categories)
                {
                    string url = string.Format(CultureInfo.InvariantCulture, "{0}?{1}={2}&{3}={4}",
                                               Url.AdminUrl(baseUrl), 
                                               Keys.QRYSTR_CATEGORYID, 
                                               current.Id, 
                                               Keys.QRYSTR_CATEGORYTYPE, 
                                               CategoryType
                                               );
                    categoryLinks.Add(new LinkCategoryLink(current.Title, url));
                }
            }
            rptCategories.DataSource = categoryLinks;
            rptCategories.DataBind();
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.UserControls {
    
    
    public partial class CategoryLinkList {
        
        /// <summary>
        /// rptCategories control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rptCategories;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Web.Admin.Commands;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Properties;
using Subtext.Web.UI.Controls;

namespace Subtext.Web.Admin.UserControls
{
    public partial class EntriesList : BaseControl
    {
        private int? categoryId = null;
        private int pageIndex = 0;

        public string HeaderText
        {
            get { return (string)ViewState["HeaderText"] ?? string.Empty; }
            set { ViewState["HeaderText"] = value; }
        }

        public string ResultsUrlFormat
        {
            get { return resultsPager.UrlFormat; }
            set { resultsPager.UrlFormat = value; }
        }

        /// <summary>
        /// Gets or sets the type of the entry.
        /// </summary>
        /// <value>The type of the entry.</value>
        public PostType EntryType
        {
            get
            {
                if(ViewState["PostType"] != null)
                {
                    return (PostType)ViewState["PostType"];
                }
                return PostType.None;
            }
            set { ViewState["PostType"] = value; }
        }

        protected override void OnInit(EventArgs e)
        {
            rprSelectionList.ItemCommand += OnItemCommand;
            base.OnInit(e);
        }

        protected override void OnLoad(EventArgs e)
        {
            if(Request.QueryString[Keys.QRYSTR_PAGEINDEX] != null)
            {
                pageIndex = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            if(Request.QueryString[Keys.QRYSTR_CATEGORYID] != null)
            {
                categoryId = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_CATEGORYID]);
            }

            resultsPager.PageSize = Preferences.ListingItemCount;
            resultsPager.PageIndex = pageIndex;

            if(categoryId != null)
            {
                string catIdQueryString = string.Format(CultureInfo.InvariantCulture, "&{0}={1}", Keys.QRYSTR_CATEGORYID,
                                                        categoryId);
                if(!resultsPager.UrlFormat.EndsWith(catIdQueryString))
                {
                    resultsPager.UrlFormat += catIdQueryString;
                }
            }

            if(!IsPostBack)
            {
                BindList();
            }

            base.OnLoad(e);
        }

        void OnItemCommand(object source, RepeaterCommandEventArgs e)
        {
            ConfirmDelete(Convert.ToInt32(e.CommandArgument));
        }

        private void ConfirmDelete(int postID)
        {
            var page = (AdminPage)Page;
            if(page != null)
            {
                var command = new DeletePostCommand(Repository, postID, page.SearchEngine);
                command.Execute();
                BindList();
            }
        }

        public string PostsEditUrl(object item)
        {
            var entry = (Entry)item;
            return AdminUrl.PostsEdit(entry.Id);
        }

        public string ArticlesEditUrl(object item)
        {
            var entry = (Entry)item;
            return AdminUrl.ArticlesEdit(entry.Id);
        }

        public string ContentEditUrl(object item)
        {
            if (((AdminPage)this.Page).TabSectionId == "Articles")
            {
                return ArticlesEditUrl(item);
            }
            else
            {
                return PostsEditUrl(item);
            }
        }

        public string ReferrersUrl(object item)
        {
            var entry = (Entry)item;
            return AdminUrl.Referrers(entry.Id);
        }

        protected string IsActiveText(object entryObject)
        {
            var entry = entryObject as Entry;

            Debug.Assert(entry != null, "Entry should never be null here");

            string active = "False";
            if(entry.IsActive)
            {
                active = "True";
                if(entry.DateSyndicated > Config.CurrentBlog.TimeZone.Now)
                {
                    active += "<em> on " + entry.DateSyndicated.ToShortDateString() + "</em>";
                }
            }
            return active;
        }

        private void BindList()
        {
            if(categoryId != null)
            {
                LinkCategory category = Repository.GetLinkCategory(categoryId, false);
                if(category != null)
                {
                    HeaderText = Resources.Label_Posts.ToUpper(CultureInfo.CurrentCulture) + " (" + category.Title + ")";
                }
            }

            IPagedCollection<EntryStatsView> selectionList = Repository.GetEntries(EntryType, categoryId, pageIndex,
                                                                                        resultsPager.PageSize);

            if(selectionList.Count > 0)
            {
                resultsPager.ItemCount = selectionList.MaxItems;
                rprSelectionList.DataSource = selectionList;
                rprSelectionList.DataBind();
                NoMessagesLabel.Visible = false;
            }

            NoMessagesLabel.Visible = selectionList.Count <= 0;
            resultsPager.Visible = rprSelectionList.Visible = selectionList.Count > 0;
        }

        protected override void OnPreRender(EventArgs e)
        {
            title.InnerText = HeaderText;
            base.OnPreRender(e);
        }

        protected EntryStatsView GetEntry(object o)
        {
            return o as EntryStatsView;
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.UserControls {
    
    
    public partial class EntriesList {
        
        /// <summary>
        /// title control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl title;
        
        /// <summary>
        /// rprSelectionList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprSelectionList;
        
        /// <summary>
        /// NoMessagesLabel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl NoMessagesLabel;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Tracking;
using Subtext.Web.Admin.Pages;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Controls;
using Subtext.Web.Properties;
using Subtext.Web.UI.Controls;

namespace Subtext.Web.Admin.UserControls
{
    public partial class EntryEditor : BaseControl
    {
        private const string CategoryTypeViewStateKey = "CategoryType";
        int? _postId;

        /// <summary>
        /// Gets or sets the type of the entry.
        /// </summary>
        /// <value>The type of the entry.</value>
        public PostType EntryType
        {
            get
            {
                if(ViewState["PostType"] != null)
                {
                    return (PostType)ViewState["PostType"];
                }
                return PostType.None;
            }
            set { ViewState["PostType"] = value; }
        }

        public int? PostId
        {
            get
            {
                if(_postId == null)
                {
                    string postIdText = Request.QueryString["PostId"];
                    int postId;
                    if(int.TryParse(postIdText, out postId))
                    {
                        _postId = postId;
                    }
                }
                return _postId;
            }
        }

        public CategoryType CategoryType
        {
            get
            {
                if(ViewState[CategoryTypeViewStateKey] != null)
                {
                    return (CategoryType)ViewState[CategoryTypeViewStateKey];
                }
                throw new InvalidOperationException(Resources.InvalidOperation_CategoryTypeNotSet);
            }
            set { ViewState[CategoryTypeViewStateKey] = value; }
        }

        //This is true if we came from a pencil edit link while viewing the post 
        //from outside the admin tool.
        private bool ReturnToOriginalPost
        {
            get { return (Request.QueryString["return-to-post"] == "true"); }
        }

        protected override void OnLoad(EventArgs e)
        {
            if(!IsPostBack)
            {
                BindCategoryList();
                SetEditorMode();

                if(PostId != null)
                {
                    BindPostEdit();
                }
                else
                {
                    BindPostCreate();
                }
            }
            base.OnLoad(e);
        }

        private void BindCategoryList()
        {
            cklCategories.DataSource = Links.GetCategories(CategoryType, ActiveFilter.None);
            cklCategories.DataValueField = "Id";
            cklCategories.DataTextField = "Title";
            cklCategories.DataBind();
        }

        private void SetConfirmation()
        {
            var confirmPage = (ConfirmationPage)Page;
            confirmPage.IsInEdit = true;
            confirmPage.Message = Resources.Message_YouWillLoseUnsavedContent;

            lkbPost.Attributes.Add("OnClick", ConfirmationPage.BypassFunctionName);
            lkUpdateCategories.Attributes.Add("OnClick", ConfirmationPage.BypassFunctionName);
            lkbCancel.Attributes.Add("OnClick", ConfirmationPage.BypassFunctionName);
        }

        private void BindPostCreate()
        {
            txbTitle.Text = string.Empty;
            richTextEditor.Text = string.Empty;

            SetConfirmation();
            SetDefaultPublishOptions();
            PopulateMimeTypeDropDown();
        }

        private void SetDefaultPublishOptions()
        {
            chkMainSyndication.Checked = true;
            ckbPublished.Checked = true;
            chkDisplayHomePage.Checked = true;
            chkComments.Checked = Config.CurrentBlog.CommentsEnabled;
        }

        private void BindPostEdit()
        {
            Debug.Assert(PostId != null, "PostId Should not be null when we call this");

            SetConfirmation();

            Entry entry = GetEntryForEditing(PostId.Value);
            if(entry == null)
            {
                ReturnToOrigin(null);
                return;
            }

            txbTitle.Text = entry.Title;
            if(!NullValue.IsNull(entry.DateSyndicated) && entry.DateSyndicated > Config.CurrentBlog.TimeZone.Now)
            {
                txtPostDate.Text = entry.DateSyndicated.ToString(CultureInfo.CurrentCulture);
            }

            VirtualPath entryUrl = Url.EntryUrl(entry);
            if (entryUrl != null)
            {
                hlEntryLink.NavigateUrl = entryUrl;
                hlEntryLink.Text = entryUrl.ToFullyQualifiedUrl(Config.CurrentBlog).ToString();
                hlEntryLink.Attributes.Add("title", "view: " + entry.Title);
            }
            else
                hlEntryLink.Text = "This post has not been published yet, so it doesn't have an URL";

            PopulateMimeTypeDropDown();
            //Enclosures
            if(entry.Enclosure != null)
            {
                Enclosure.Collapsed = false;
                txbEnclosureTitle.Text = entry.Enclosure.Title;
                txbEnclosureUrl.Text = entry.Enclosure.Url;
                txbEnclosureSize.Text = entry.Enclosure.Size.ToString();
                if(ddlMimeType.Items.FindByText(entry.Enclosure.MimeType) != null)
                {
                    ddlMimeType.SelectedValue = entry.Enclosure.MimeType;
                }
                else
                {
                    ddlMimeType.SelectedValue = "other";
                    txbEnclosureOtherMimetype.Text = entry.Enclosure.MimeType;
                }
                ddlAddToFeed.SelectedValue = entry.Enclosure.AddToFeed.ToString().ToLower();
                ddlDisplayOnPost.SelectedValue = entry.Enclosure.ShowWithPost.ToString().ToLower();
            }

            chkComments.Checked = entry.AllowComments;
            chkCommentsClosed.Checked = entry.CommentingClosed;
            SetCommentControls();
            if(entry.CommentingClosedByAge)
            {
                chkCommentsClosed.Enabled = false;
            }

            chkDisplayHomePage.Checked = entry.DisplayOnHomePage;
            chkMainSyndication.Checked = entry.IncludeInMainSyndication;
            chkSyndicateDescriptionOnly.Checked = entry.SyndicateDescriptionOnly;
            chkIsAggregated.Checked = entry.IsAggregated;

            // Advanced Options
            txbEntryName.Text = entry.EntryName;
            txbExcerpt.Text = entry.Description;

            SetEditorText(entry.Body);

            ckbPublished.Checked = entry.IsActive;

            BindCategoryList();
            for(int i = 0; i < cklCategories.Items.Count; i++)
            {
                cklCategories.Items[i].Selected = false;
            }

            ICollection<Link> postCategories = Repository.GetLinkCollectionByPostId(PostId.Value);
            if(postCategories.Count > 0)
            {
                foreach(Link postCategory in postCategories)
                {
                    ListItem categoryItem =
                        cklCategories.Items.FindByValue(postCategory.CategoryId.ToString(CultureInfo.InvariantCulture));
                    if(categoryItem == null)
                    {
                        throw new InvalidOperationException(
                            string.Format(Resources.EntryEditor_CouldNotFindCategoryInList, postCategory.CategoryId,
                                          cklCategories.Items.Count));
                    }
                    categoryItem.Selected = true;
                }
            }

            SetEditorMode();
            Advanced.Collapsed = !Preferences.AlwaysExpandAdvanced;

            var adminMasterPage = Page.Master as AdminPageTemplate;
            if(adminMasterPage != null)
            {
                string title = string.Format(CultureInfo.InvariantCulture, Resources.EntryEditor_EditingTitle,
                                             CategoryType == CategoryType.StoryCollection
                                                 ? Resources.Label_Article
                                                 : Resources.Label_Post, entry.Title);
                adminMasterPage.Title = title;
            }

            if(entry.HasEntryName)
            {
                Advanced.Collapsed = false;
                txbEntryName.Text = entry.EntryName;
            }
        }

        private void PopulateMimeTypeDropDown()
        {
            ddlMimeType.Items.Add(new ListItem(Resources.Label_Choose, "none"));
            foreach(string key in MimeTypesMapper.Mappings.List)
            {
                ddlMimeType.Items.Add(new ListItem(MimeTypesMapper.Mappings.List[key],
                                                   MimeTypesMapper.Mappings.List[key]));
            }
            ddlMimeType.Items.Add(new ListItem(Resources.Label_Other, "other"));
        }

        private void SetCommentControls()
        {
            if(!Blog.CommentsEnabled)
            {
                chkComments.Enabled = false;
                chkCommentsClosed.Enabled = false;
            }
        }

        public void EditNewEntry()
        {
            SetConfirmation();
        }

        private void ReturnToOrigin(string message)
        {
            if(ReturnToOriginalPost && PostId != null)
            {
                // We came from outside the post, let's go there.
                Entry updatedEntry = Repository.GetEntry(PostId.Value, true /*activeOnly*/, false /*includeCategories*/);
                if(updatedEntry != null)
                {
                    Response.Redirect(Url.EntryUrl(updatedEntry));
                }
            }
            else
            {
                string url = "Default.aspx";
                if(!String.IsNullOrEmpty(message))
                {
                    url += "?message=" + HttpUtility.UrlEncode(message);
                }
                Response.Redirect(url);
            }
        }

        private void UpdatePost()
        {
            DateTime postDate = NullValue.NullDateTime;

            vCustomPostDate.IsValid = string.IsNullOrEmpty(txtPostDate.Text) || DateTime.TryParse(txtPostDate.Text, out postDate);

            EnableEnclosureValidation(EnclosureEnabled());

            if(Page.IsValid)
            {
                string successMessage = Constants.RES_SUCCESSNEW;

                try
                {
                    Entry entry;
                    if(PostId == null)
                    {
                        ValidateEntryTypeIsNotNone(EntryType);
                        entry = new Entry(EntryType);
                    }
                    else
                    {
                        entry = GetEntryForEditing(PostId.Value);
                        if(entry.PostType != EntryType)
                        {
                            EntryType = entry.PostType;
                        }
                    }

                    entry.Title = txbTitle.Text;
                    entry.Body = richTextEditor.Xhtml;
                    entry.Author = Config.CurrentBlog.Author;
                    entry.Email = Config.CurrentBlog.Email;
                    entry.BlogId = Config.CurrentBlog.Id;

                    //Enclosure
                    int enclosureId = 0;
                    if(entry.Enclosure != null)
                    {
                        enclosureId = entry.Enclosure.Id;
                    }

                    if(EnclosureEnabled())
                    {
                        if(entry.Enclosure == null)
                        {
                            entry.Enclosure = new Enclosure();
                        }
                        Enclosure enc = entry.Enclosure;

                        enc.Title = txbEnclosureTitle.Text;
                        enc.Url = txbEnclosureUrl.Text;
                        enc.MimeType = ddlMimeType.SelectedValue.Equals("other") ? txbEnclosureOtherMimetype.Text : ddlMimeType.SelectedValue;
                        long size;
                        Int64.TryParse(txbEnclosureSize.Text, out size);
                        enc.Size = size;
                        enc.AddToFeed = Boolean.Parse(ddlAddToFeed.SelectedValue);
                        enc.ShowWithPost = Boolean.Parse(ddlDisplayOnPost.SelectedValue);
                    }
                    else
                    {
                        entry.Enclosure = null;
                    }

                    // Advanced options
                    entry.IsActive = ckbPublished.Checked;
                    entry.AllowComments = chkComments.Checked;
                    entry.CommentingClosed = chkCommentsClosed.Checked;
                    entry.DisplayOnHomePage = chkDisplayHomePage.Checked;
                    entry.IncludeInMainSyndication = chkMainSyndication.Checked;
                    entry.SyndicateDescriptionOnly = chkSyndicateDescriptionOnly.Checked;
                    entry.IsAggregated = chkIsAggregated.Checked;
                    entry.EntryName = txbEntryName.Text.NullIfEmpty();
                    entry.Description = txbExcerpt.Text.NullIfEmpty();
                    entry.Categories.Clear();
                    ReplaceSelectedCategoryNames(entry.Categories);

                    if(!NullValue.IsNull(postDate))
                    {
                        entry.DateSyndicated = postDate;
                    }

                    if(PostId != null)
                    {
                        successMessage = Constants.RES_SUCCESSEDIT;
                        entry.DateModified = Config.CurrentBlog.TimeZone.Now;
                        entry.Id = PostId.Value;

                        var entryPublisher = SubtextContext.ServiceLocator.GetService<IEntryPublisher>();
                        entryPublisher.Publish(entry);

                        if(entry.Enclosure == null && enclosureId != 0)
                        {
                            Enclosures.Delete(enclosureId);
                        }
                        else if(entry.Enclosure != null && entry.Enclosure.Id != 0)
                        {
                            Enclosures.Update(entry.Enclosure);
                        }
                        else if(entry.Enclosure != null && entry.Enclosure.Id == 0)
                        {
                            entry.Enclosure.EntryId = entry.Id;
                            Enclosures.Create(entry.Enclosure);
                        }

                        UpdateCategories();
                    }
                    else
                    {
                        var entryPublisher = SubtextContext.ServiceLocator.GetService<IEntryPublisher>();
                        _postId = entryPublisher.Publish(entry);
                        NotificationServices.Run(entry, Blog, Url);

                        if(entry.Enclosure != null)
                        {
                            entry.Enclosure.EntryId = PostId.Value;
                            Enclosures.Create(entry.Enclosure);
                        }

                        UpdateCategories();
                        AddCommunityCredits(entry);
                    }
                }
                catch(Exception ex)
                {
                    Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                     Constants.RES_FAILUREEDIT, ex.Message));
                    successMessage = string.Empty;
                }

                //Prepared success messages were reset in the catch block because of some error on posting the content
                if(!String.IsNullOrEmpty(successMessage))
                {
                    ReturnToOrigin(successMessage);
                }
            }
        }

        [CoverageExclude]
        private static void ValidateEntryTypeIsNotNone(PostType entryType)
        {
            Debug.Assert(entryType != PostType.None, "The entry type is none. This should be impossible!");
        }

        private bool EnclosureEnabled()
        {
            if(!String.IsNullOrEmpty(txbEnclosureUrl.Text))
            {
                return true;
            }
            if(!String.IsNullOrEmpty(txbEnclosureTitle.Text))
            {
                return true;
            }
            if(!String.IsNullOrEmpty(txbEnclosureSize.Text))
            {
                return true;
            }
            return ddlMimeType.SelectedIndex > 0;
        }

        private void EnableEnclosureValidation(bool enabled)
        {
            valEncSizeRequired.Enabled = enabled;
            valEncUrlRequired.Enabled = enabled;
            valEncMimeTypeRequired.Enabled = enabled;

            valEncOtherMimetypeRequired.Enabled = enabled && ddlMimeType.SelectedValue.Equals("other");
        }

        private void ReplaceSelectedCategoryNames(ICollection<string> sc)
        {
            sc.Clear();
            foreach(ListItem item in cklCategories.Items)
            {
                if(item.Selected)
                {
                    sc.Add(item.Text);
                }
            }
        }

        private string UpdateCategories()
        {
            try
            {
                if(PostId != null)
                {
                    string successMessage = Constants.RES_SUCCESSCATEGORYUPDATE;
                    var al = new List<int>();

                    foreach(ListItem item in cklCategories.Items)
                    {
                        if(item.Selected)
                        {
                            al.Add(int.Parse(item.Value));
                        }
                    }
                    Repository.SetEntryCategoryList(PostId.Value, al);
                    return successMessage;
                }
                
                Messages.ShowError(Constants.RES_FAILURECATEGORYUPDATE + Resources.EntryEditor_ProblemEditingPostCategories);
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Constants.RES_FAILUREEDIT, ex.Message));
            }
            return null;
        }

        private void SetEditorMode()
        {
            if(CategoryType == CategoryType.StoryCollection)
            {
                chkDisplayHomePage.Visible = false;
                chkIsAggregated.Visible = false;
                chkMainSyndication.Visible = false;
                chkSyndicateDescriptionOnly.Visible = false;
            }
        }

        private void SetEditorText(string bodyValue)
        {
            richTextEditor.Text = bodyValue;
        }

        override protected void OnInit(EventArgs e)
        {
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            lkbPost.Click += OnUpdatePostClick;
            lkUpdateCategories.Click += OnUpdateCategoriesClick;
            lkbCancel.Click += OnCancelClick;
        }

        private void OnCancelClick(object sender, EventArgs e)
        {
            if(PostId != null && ReturnToOriginalPost)
            {
                // We came from outside the post, let's go there.
                Entry updatedEntry = Repository.GetEntry(PostId.Value, true /* activeOnly */, false
                    /* includeCategories */);
                if(updatedEntry != null)
                {
                    Response.Redirect(Url.EntryUrl(updatedEntry));
                    return;
                }
            }

            ReturnToOrigin(null);
        }

        private void OnUpdatePostClick(object sender, EventArgs e)
        {
            UpdatePost();
        }

        private void OnUpdateCategoriesClick(object sender, EventArgs e)
        {
            string successMessage = UpdateCategories();
            if(successMessage != null)
            {
                ReturnToOrigin(successMessage);
            }
        }

        protected void richTextEditor_Error(object sender, RichTextEditorErrorEventArgs e)
        {
            Messages.ShowError(String.Format(Constants.RES_EXCEPTION, "TODO...", e.Exception.Message));
        }

        private void AddCommunityCredits(Entry entry)
        {
            try
            {
                CommunityCreditNotification.AddCommunityCredits(entry, Url, Blog);
            }
            catch(CommunityCreditNotificationException ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Resources.EntryEditor_ErrorSendingToCommunityCredits, ex.Message));
            }
            catch(Exception ex)
            {
                Messages.ShowError(String.Format(Constants.RES_EXCEPTION,
                                                 Resources.EntryEditor_ErrorSendingToCommunityCredits, ex.Message));
            }
        }

        private Entry GetEntryForEditing(int id)
        {
            var entry = Repository.GetEntry(id, false /*activeOnly*/, false /*includeCategories*/);
            entry.Blog = Blog;
            return entry;
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4013
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.UserControls {
    
    
    public partial class EntryEditor {
        
        /// <summary>
        /// Messages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel Messages;
        
        /// <summary>
        /// hlEntryLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink hlEntryLink;
        
        /// <summary>
        /// valTitleRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valTitleRequired;
        
        /// <summary>
        /// txbTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbTitle;
        
        /// <summary>
        /// valtbBodyRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valtbBodyRequired;
        
        /// <summary>
        /// richTextEditor control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.RichTextEditor richTextEditor;
        
        /// <summary>
        /// cklCategories control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBoxList cklCategories;
        
        /// <summary>
        /// lkbPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbPost;
        
        /// <summary>
        /// lkUpdateCategories control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkUpdateCategories;
        
        /// <summary>
        /// lkbCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button lkbCancel;
        
        /// <summary>
        /// Advanced control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel Advanced;
        
        /// <summary>
        /// ckbPublished control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox ckbPublished;
        
        /// <summary>
        /// chkComments control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkComments;
        
        /// <summary>
        /// chkCommentsClosed control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkCommentsClosed;
        
        /// <summary>
        /// chkDisplayHomePage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkDisplayHomePage;
        
        /// <summary>
        /// chkMainSyndication control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkMainSyndication;
        
        /// <summary>
        /// chkSyndicateDescriptionOnly control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkSyndicateDescriptionOnly;
        
        /// <summary>
        /// chkIsAggregated control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkIsAggregated;
        
        /// <summary>
        /// vCustomPostDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CustomValidator vCustomPostDate;
        
        /// <summary>
        /// txtPostDate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtPostDate;
        
        /// <summary>
        /// vRegexEntryName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RegularExpressionValidator vRegexEntryName;
        
        /// <summary>
        /// txbEntryName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbEntryName;
        
        /// <summary>
        /// txbExcerpt control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbExcerpt;
        
        /// <summary>
        /// Enclosure control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel Enclosure;
        
        /// <summary>
        /// txbEnclosureTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbEnclosureTitle;
        
        /// <summary>
        /// valEncUrlRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valEncUrlRequired;
        
        /// <summary>
        /// valEncUrlFormat control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RegularExpressionValidator valEncUrlFormat;
        
        /// <summary>
        /// txbEnclosureUrl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbEnclosureUrl;
        
        /// <summary>
        /// valEncSizeRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valEncSizeRequired;
        
        /// <summary>
        /// valEncSizeFormat control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RangeValidator valEncSizeFormat;
        
        /// <summary>
        /// txbEnclosureSize control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbEnclosureSize;
        
        /// <summary>
        /// valEncMimeTypeRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CompareValidator valEncMimeTypeRequired;
        
        /// <summary>
        /// ddlMimeType control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlMimeType;
        
        /// <summary>
        /// txbEnclosureOtherMimetype control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txbEnclosureOtherMimetype;
        
        /// <summary>
        /// valEncOtherMimetypeRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator valEncOtherMimetypeRequired;
        
        /// <summary>
        /// ddlDisplayOnPost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlDisplayOnPost;
        
        /// <summary>
        /// ddlAddToFeed control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlAddToFeed;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;
using Subtext.Framework.Providers;

namespace Subtext.Web.Admin.WebUI
{
    public class AdminMasterPage : MasterPage
    {
        public UrlHelper Url
        {
            get { return SubtextPage.Url; }
        }

        public AdminUrlHelper AdminUrl
        {
            get { return SubtextPage.AdminUrl; }
        }

        public SubtextPage SubtextPage
        {
            get { return Page as SubtextPage; }
        }

        public Blog Blog
        {
            get { return SubtextPage.Blog; }
        }

        public ObjectProvider Repository
        {
            get { return SubtextPage.Repository; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.ComponentModel;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Ninject;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.Admin.WebUI;
using Subtext.Web.Controls;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Base Page class for all pages in the admin tool.
    /// </summary>
    public class AdminPage : SubtextPage
    {
        private HtmlGenericControl body;

        [Inject]
        public ISearchEngineService SearchEngine { get; set; }

        protected AdminPageTemplate AdminMasterPage
        {
            get
            {
                var master = Master as AdminPageTemplate;
                if(master == null && Master != null && Master.Master != null)
                {
                    master = Master.Master as AdminPageTemplate;
                }
                return master;
            }
        }

        [Category("Page")]
        [Description("Page tab section identifier")]
        [Browsable(true)]
        public string TabSectionId { get; protected set; }

        protected override void OnInit(EventArgs e)
        {
            if(!User.IsInRole("Admins"))
            {
                string url = Url.LoginUrl(Request.Url.PathAndQuery);
                Response.Redirect(url, true);
                return;
            }
            base.OnInit(e);
        }

        protected override void OnLoad(EventArgs e)
        {
            if(Page.Master != null)
            {
                body = AdminMasterPage.FindControl("AdminSection") as HtmlGenericControl;
            }

            if(!IsPostBack)
            {
                ControlHelper.ApplyRecursively(SetTextBoxStyle, this);
                ControlHelper.ApplyRecursively(SetButtonStyle, this);
                DataBind();
            }
            base.OnLoad(e);
        }

        protected override void OnPreRender(EventArgs e)
        {
            if(body != null && !String.IsNullOrEmpty(TabSectionId))
            {
                ControlHelper.AddCssClass(body, TabSectionId);
            }
        }

        static void SetTextBoxStyle(Control control)
        {
            var textBox = control as TextBox;
            if(textBox != null)
            {
                if(textBox.TextMode == TextBoxMode.SingleLine || textBox.TextMode == TextBoxMode.Password)
                {
                    ControlHelper.AddCssClass(textBox, "textbox");
                }
                if(textBox.TextMode == TextBoxMode.MultiLine)
                {
                    ControlHelper.AddCssClass(textBox, "textarea");
                }
            }
        }

        static void SetButtonStyle(Control control)
        {
            var button = control as Button;
            if(button != null)
            {
                ControlHelper.AddCssClass(button, "button");
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Framework.Security;

namespace Subtext.Web.Admin.WebUI
{
    /// <summary>
    /// Code behind for the admin master template.
    /// </summary>
    public partial class AdminPageTemplate : AdminMasterPage
    {
        /// <summary>
        /// The title of the page.
        /// </summary>
        public string Title
        {
            get { return Page.Title; }
            set { Page.Title = value; }
        }

        /// <summary>
        /// Adds a link button to the list of possible actions.
        /// </summary>
        /// <param name="button"></param>
        public void AddToActions(LinkButton button)
        {
            AddToActions(button, string.Empty);
        }

        public void AddToActions(LinkButton button, string rssFeed)
        {
            // HACK: one without the other doesn't seem to work. If I don't add this
            // to Items it doesn't render, if I don't add to controls it doesn't get
            // wired up. 
            LinksActions.Items.Add(button);
            LinksActions.Controls.Add(button);
            if(!String.IsNullOrEmpty(rssFeed))
            {
                HyperLink rssLink = CreateAdminRssHyperlink(rssFeed);
                LinksActions.Items.Add(rssLink);
                LinksActions.Controls.Add(rssLink);
            }
        }

        private HyperLink CreateAdminRssHyperlink(string rssFeed)
        {
            var rssLink = new HyperLink();
            rssLink.NavigateUrl = rssFeed;
            rssLink.Text = "(rss)";
            return rssLink;
        }

        /// <summary>
        /// Adds a hyperlink to the list of possible actions.
        /// </summary>
        /// <param name="link"></param>
        public void AddToActions(HyperLink link)
        {
            AddToActions(link, string.Empty);
        }

        public void AddToActions(HyperLink link, string rssFeed)
        {
            LinksActions.Items.Add(link);
            if(!String.IsNullOrEmpty(rssFeed))
            {
                LinksActions.Items.Add(CreateAdminRssHyperlink(rssFeed));
            }
        }

        /// <summary>
        /// Clears the actions.
        /// </summary>
        public void ClearActions()
        {
            LinksActions.Items.Clear();
        }

        public string AjaxServicesUrl()
        {
            return AdminUrl.AjaxServices() + "?proxy";
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Admin.WebUI {
    
    
    public partial class AdminPageTemplate {
        
        /// <summary>
        /// head control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder head;
        
        /// <summary>
        /// AdminSection control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl AdminSection;
        
        /// <summary>
        /// frmMain control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm frmMain;
        
        /// <summary>
        /// LoggedInUser control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal LoggedInUser;
        
        /// <summary>
        /// galleryTab control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl galleryTab;
        
        /// <summary>
        /// MainContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MainContent;
        
        /// <summary>
        /// actionsHeading control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder actionsHeading;
        
        /// <summary>
        /// LinksActions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.LinkList LinksActions;
        
        /// <summary>
        /// categoryListHeading control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder categoryListHeading;
        
        /// <summary>
        /// categoryListLinks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder categoryListLinks;
        
        /// <summary>
        /// pageContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder pageContent;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Subtext.Framework.Text;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public abstract class ConfirmCommand
    {
        protected const string DEFAULT_CANCEL_FAILURE = "Could not cancel operation. Details: {1}";
        protected const string DEFAULT_CANCEL_SUCCESS = "Operation canceled.";
        protected const string DEFAULT_EXECUTE_FAILURE = "Operation failed. Details: {1}";
        protected const string DEFAULT_EXECUTE_SUCCESS = "Operation succeeded.";
        protected const string DEFAULT_PROMPT = "Are you sure you want to do this?";

        protected string _cancelFailureMessage;
        protected string _cancelSuccessMessage;
        protected string _executeFailureMessage;
        protected string _executeSuccessMessage;
        protected string _promptMessage;

        public virtual bool AutoRedirect { get; set; }

        public virtual string RedirectUrl { get; set; }

        public virtual string PromptMessage
        {
            get { return _promptMessage ?? DEFAULT_PROMPT; }
            set { _promptMessage = value ?? DEFAULT_PROMPT; }
        }

        public virtual string ExecuteSuccessMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_executeSuccessMessage))
                {
                    return _executeSuccessMessage;
                }
                else
                {
                    return DEFAULT_EXECUTE_SUCCESS;
                }
            }
            set { _executeSuccessMessage = value; }
        }

        public virtual string ExecuteFailureMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_executeFailureMessage))
                {
                    return _executeFailureMessage;
                }
                else
                {
                    return DEFAULT_EXECUTE_FAILURE;
                }
            }
            set { _executeFailureMessage = value; }
        }

        public virtual string CancelSuccessMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_cancelSuccessMessage))
                {
                    return _cancelSuccessMessage;
                }
                else
                {
                    return DEFAULT_CANCEL_SUCCESS;
                }
            }
            set { _cancelSuccessMessage = value; }
        }

        public virtual string CancelFailureMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_cancelFailureMessage))
                {
                    return _cancelFailureMessage;
                }
                else
                {
                    return DEFAULT_CANCEL_FAILURE;
                }
            }
            set { _cancelFailureMessage = value; }
        }

        public virtual string FormatMessage(string message)
        {
            return FormatMessage(message, null);
        }

        /// <summary>
        /// Formats the message.
        /// </summary>
        /// <param name="format">Format.</param>
        /// <param name="args">Args.</param>
        /// <returns></returns>
        public virtual string FormatMessage(string format, params object[] args)
        {
            try
            {
                return string.Format(CultureInfo.InvariantCulture, format, args);
            }
            catch(ArgumentNullException)
            {
                return format;
            }
        }

        /// <summary>
        /// Simply concatenates an array of integers for display as text 
        /// using commas.  ex... "1, 2, 3"
        /// </summary>
        /// <param name="integers">Integers.</param>
        /// <returns></returns>
        protected string GetDisplayTextFromIntArray(ICollection<int> integers)
        {
            if(integers == null || integers.Count == 0)
            {
                return string.Empty;
            }

            if(integers.Count == 2)
            {
                return integers.First() + " and " + integers.ElementAt(1);
            }

            string display = string.Empty;
            foreach(int integer in integers)
            {
                display += integer + ", ";
            }
            return display.Left(display.Length - 2);
        }

        public abstract string Cancel();
        public abstract string Execute();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public class DeleteCategoryCommand : DeleteTitledTargetCommand
    {
        public DeleteCategoryCommand(int categoryID, string categoryTitle)
        {
            _targetName = "Category";
            _targetID = categoryID;
            itemTitle = categoryTitle;
        }

        public override string Execute()
        {
            try
            {
                Links.DeleteLinkCategory(_targetID);
                return FormatMessage(ExecuteSuccessMessage, _targetName, itemTitle);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, itemTitle, ex.Message);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.Admin.Commands
{
    // TODO: derivation is fine, but expose the prompts so you can add a WARNING WILL DELETE 
    // FILES TOO message for this one (makes general sense as well)
    [Serializable]
    public class DeleteGalleryCommand : DeleteTitledTargetCommand
    {
        public DeleteGalleryCommand(string galleryDirectoryPath, int galleryId, string galleryTitle)
        {
            _targetID = galleryId;
            itemTitle = galleryTitle;
            GalleryDirectoryPath = galleryDirectoryPath;
        }

        public string GalleryDirectoryPath { get; private set; }

        public override string Execute()
        {
            try
            {
                ICollection<Image> imageList = Images.GetImagesByCategoryId(_targetID, false);

                // delete the folder
                string galleryFolder = GalleryDirectoryPath;
                if(Directory.Exists(galleryFolder))
                {
                    Directory.Delete(galleryFolder, true);
                }
                if(imageList.Count > 0)
                {
                    // delete from data provider
                    foreach(Image currentImage in imageList)
                    {
                        Images.DeleteImage(currentImage);
                    }
                }

                // finally, delete the gallery (category) itself from the data provider
                Links.DeleteLinkCategory(_targetID);
                return FormatMessage(ExecuteSuccessMessage, _targetName, itemTitle);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, _targetID, ex.Message);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public class DeleteImageCommand : DeleteTitledTargetCommand
    {
        public DeleteImageCommand(Image image, string galleryDirectoryPath)
            : this(galleryDirectoryPath, image, "Image " + image.ImageID.ToString(CultureInfo.InvariantCulture))
        {
        }

        public DeleteImageCommand(string galleryDirectoryPath, Image image, string imageTitle)
        {
            _targetName = "Image";
            itemTitle = imageTitle;
            Image = image;
        }

        public string GalleryDirectoryPath { get; private set; }
        public Image Image { get; private set; }

        public override string Execute()
        {
            try
            {
                Image currentImage = Image;

                // The following line should be fully encapsulated and handle files + data
                // For now, I commented out the file trys in the the object so it can do just
                // data without exception. I'll do the files locally until we decide to really
                // do the framework class

                Images.DeleteImage(currentImage);

                // now delete the associated files if they exist
                string galleryFolder = GalleryDirectoryPath;
                if(Directory.Exists(galleryFolder))
                {
                    DeleteFile(galleryFolder, currentImage.OriginalFile);
                    DeleteFile(galleryFolder, currentImage.ResizedFile);
                    DeleteFile(galleryFolder, currentImage.ThumbNailFile);
                }

                return FormatMessage(ExecuteSuccessMessage, _targetName, itemTitle);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, Image.ImageID, ex.Message);
            }
        }

        private void DeleteFile(string path, string filename)
        {
            string localPath = Path.Combine(path, filename);
            if(File.Exists(localPath))
            {
                File.Delete(localPath);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Providers;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public sealed class DeleteKeyWordCommand : DeleteTitledTargetCommand
    {
        public DeleteKeyWordCommand(int keyWordId, string word)
        {
            AutoRedirect = true;
            _targetName = "KeyWord";
            _targetID = keyWordId;
            itemTitle = word;
        }

        public override string Execute()
        {
            try
            {
                ObjectProvider.Instance().DeleteKeyWord(_targetID);
                return FormatMessage(ExecuteSuccessMessage, _targetName, itemTitle);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, itemTitle, ex.Message);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public sealed class DeleteLinkCommand : DeleteTitledTargetCommand
    {
        public DeleteLinkCommand(int linkId, string linkTitle)
        {
            AutoRedirect = true;
            _targetName = "Link";
            _targetID = linkId;
            itemTitle = linkTitle;
        }

        public override string Execute()
        {
            try
            {
                Links.DeleteLink(_targetID);
                return FormatMessage(ExecuteSuccessMessage, _targetName, itemTitle);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, itemTitle, ex.Message);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Providers;
using Subtext.Framework.Services.SearchEngine;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public class DeletePostCommand : DeleteTargetCommand
    {
        public DeletePostCommand(ObjectProvider repository, int postID, ISearchEngineService searchEngineService)
        {
            _targetName = "Post";
            _targetID = postID;
            Repository = repository;
            SearchEngine = searchEngineService;
        }

        public ObjectProvider Repository { get; private set; }
        public ISearchEngineService SearchEngine { get; private set; }

        public override string Execute()
        {
            try
            {
                Repository.DeleteEntry(_targetID);
                SearchEngine.RemovePost(_targetID);
                return FormatMessage(ExecuteSuccessMessage, _targetName, _targetID);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, _targetName, _targetID, ex.Message);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public abstract class DeleteTargetCommand : ConfirmCommand
    {
        protected int _targetID;
        protected string _targetName = "Item";

        protected DeleteTargetCommand()
        {
            _promptMessage = "Are you sure you want to delete {0} {1}?";
            _executeSuccessMessage = "{0} {1} was deleted.";
            _executeFailureMessage = "{0} {1} could not be deleted. Details: {2}";
            _cancelSuccessMessage = "{0} {1} will not be deleted.";
            _cancelFailureMessage = "Could not cancel deletion of {0} {1}. Details: {2}";
        }

        protected DeleteTargetCommand(int targetID)
            : this()
        {
            _targetID = targetID;
        }

        protected DeleteTargetCommand(string targetName, int targetID)
            : this()
        {
            _targetName = targetName;
            _targetID = targetID;
        }

        public override string PromptMessage
        {
            get { return FormatMessage(base.PromptMessage, _targetName, _targetID); }
            set { _promptMessage = value; }
        }

        public override string Cancel()
        {
            AutoRedirect = true;
            return FormatMessage(CancelSuccessMessage, _targetName, _targetID);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public abstract class DeleteTitledTargetCommand : DeleteTargetCommand
    {
        protected string itemTitle;

        protected DeleteTitledTargetCommand()
        {
            _promptMessage = "Are you sure you want to delete {0} \"{1}\"?";
            _executeSuccessMessage = "{0} \"{1}\" was deleted.";
            _executeFailureMessage = "{0} \"{1}\" could not be deleted. Details: {2}";
            _cancelSuccessMessage = "{0} \"{1}\" will not be deleted.";
            _cancelFailureMessage = "Could not cancel deletion of {0} \"{1}\". Details: {2}";
        }

        protected DeleteTitledTargetCommand(int targetID, string itemTitle)
            : this()
        {
            _targetID = targetID;
            this.itemTitle = itemTitle;
        }

        public override string PromptMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_promptMessage))
                {
                    return FormatMessage(_promptMessage, _targetName, itemTitle);
                }
                else
                {
                    return base.PromptMessage;
                }
            }
            set { _promptMessage = value; }
        }

        public override string Cancel()
        {
            AutoRedirect = true;
            return FormatMessage(CancelSuccessMessage, _targetName, itemTitle);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.Admin.Commands
{
    [Serializable]
    public class ImportLinksCommand : ConfirmCommand
    {
        protected ICollection<Link> _allLinks;
        protected int _categoryID = NullValue.NullInt32;
        protected OpmlItemCollection _linksToImport;

        protected ImportLinksCommand()
        {
            _promptMessage =
                "A total of {0} links were found in your file.<p/>Any existing links with the same url will be overwritten.<p/>Are you sure you want to import these links?";
            _executeSuccessMessage = "A total of {0} links were successfully imported.";
            _executeFailureMessage = "The import failed. Details: {0}";
            _cancelSuccessMessage = "These link import operation was canceled.";
            _cancelFailureMessage = "Could not cancel link import. Details: {0}";
        }

        public ImportLinksCommand(OpmlItemCollection links, int catID)
            : this()
        {
            _linksToImport = links;
            _categoryID = catID;
        }

        public override string PromptMessage
        {
            get
            {
                if(!Utilities.IsNullorEmpty(_promptMessage))
                {
                    return FormatMessage(_promptMessage, _linksToImport.Count);
                }
                else
                {
                    return base.PromptMessage;
                }
            }
            set { _promptMessage = value; }
        }

        public override string Execute()
        {
            try
            {
                // we could do this in the provider or, better yet, just make a get all links method
                //				PagedLinkCollection allLinks = Links.GetPagedLinks(1, 1);
                //				_allLinks = Links.GetPagedLinks(1, allLinks.MaxItems);

                // process import collection
                foreach(OpmlItem item in _linksToImport)
                {
                    ImportOpmlItem(item);
                }

                return FormatMessage(ExecuteSuccessMessage, _linksToImport.Count);
            }
            catch(Exception ex)
            {
                return FormatMessage(ExecuteFailureMessage, ex.Message);
            }
        }

        public override string Cancel()
        {
            AutoRedirect = false;
            return FormatMessage(CancelSuccessMessage);
        }

        private void ImportOpmlItem(OpmlItem item)
        {
            foreach(OpmlItem childItem in item.ChildItems)
            {
                ImportOpmlItem(childItem);
            }

            var newLink = new Link
            {
                Title = item.Title,
                Url = item.HtmlUrl,
                Rss = item.XmlUrl,
                CategoryId = _categoryID,
                IsActive = true,
                NewWindow = false
            };

            // TODO: let user specify and pass as command props

            // this isn't a valid collision test really
            if(!_allLinks.Contains(newLink))
            {
                Links.CreateLink(newLink);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace Subtext.Web.Admin
{
    /// <summary>
    /// Implements a strongly typed collection of <see cref="OpmlItem"/> elements.
    /// </summary>
    [Serializable]
    public class OpmlItemCollection : List<OpmlItem>
    {
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace Subtext.Web.Admin
{
    /// <summary>
    /// Implements a strongly typed collection of <see cref="PageLocation"/> elements.
    /// </summary>
    [Serializable]
    public class PageLocationCollection : List<PageLocation>
    {
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.XPath;
using Subtext.Framework.Components;

namespace Subtext.Web.Admin
{
    public static class OpmlProvider
    {
        public static IXPathNavigable Export(ICollection<Link> items)
        {
            var doc = new XmlDocument();
            XmlDeclaration declaration = doc.CreateXmlDeclaration("1.0", "utf-8", null);
            doc.AppendChild(declaration);

            XmlNode rootNode = doc.CreateElement("opml");
            doc.AppendChild(rootNode);

            XmlNode headNode = doc.CreateElement("head");
            rootNode.AppendChild(headNode);

            XmlNode bodyNode = doc.CreateElement("body");
            rootNode.AppendChild(bodyNode);

            foreach(Link currentItem in items)
            {
                XmlNode outline = doc.CreateElement("outline");

                XmlAttribute title = doc.CreateAttribute("title");
                title.Value = currentItem.Title;
                outline.Attributes.Append(title);

                XmlAttribute description = doc.CreateAttribute("description");
                description.Value = currentItem.Title;
                outline.Attributes.Append(description);

                XmlAttribute htmlurl = doc.CreateAttribute("htmlurl");
                htmlurl.Value = currentItem.Url;
                outline.Attributes.Append(htmlurl);

                XmlAttribute xmlurl = doc.CreateAttribute("xmlurl");
                xmlurl.Value = currentItem.Rss;
                outline.Attributes.Append(xmlurl);

                bodyNode.AppendChild(outline);
            }

            return doc;

            //doc.LoadXml(sw.ToString());
            //return doc.CreateNavigator();
        }

        public static void WriteOpmlItem(OpmlItem item, XmlWriter writer)
        {
            item.RenderOpml(writer);

            foreach(OpmlItem childItem in item.ChildItems)
            {
                WriteOpmlItem(childItem, writer);
            }
        }

        public static OpmlItemCollection Import(Stream fileStream)
        {
            var _currentBatch = new OpmlItemCollection();

            XmlReader reader = new XmlTextReader(fileStream);
            var doc = new XPathDocument(reader);
            XPathNavigator nav = doc.CreateNavigator();

            XPathNodeIterator outlineItems = nav.Select("/opml/body/outline");

            while(outlineItems.MoveNext())
            {
                _currentBatch.AddRange(DeserializeItem(outlineItems.Current));
            }

            return _currentBatch;
        }

        public static IEnumerable<OpmlItem> DeserializeItem(XPathNavigator nav)
        {
            var items = new List<OpmlItem>();

            if(nav.HasAttributes)
            {
                string title = nav.GetAttribute("title", "");
                if(String.IsNullOrEmpty(title))
                {
                    title = nav.GetAttribute("text", "");
                }

                string htmlUrl = nav.GetAttribute("htmlurl", "");
                if(String.IsNullOrEmpty(htmlUrl))
                {
                    htmlUrl = nav.GetAttribute("htmlUrl", "");
                }

                string xmlUrl = nav.GetAttribute("xmlurl", "");
                if(String.IsNullOrEmpty(xmlUrl))
                {
                    xmlUrl = nav.GetAttribute("xmlUrl", "");
                }

                OpmlItem currentItem = null;
                string description = nav.GetAttribute("description", "");
                if(!String.IsNullOrEmpty(title) && !String.IsNullOrEmpty(htmlUrl))
                {
                    currentItem = new OpmlItem(title, description, xmlUrl, htmlUrl);
                }

                if(null != currentItem)
                {
                    items.Add(currentItem);
                }
            }

            if(nav.HasChildren)
            {
                XPathNodeIterator childItems = nav.SelectChildren("outline", "");
                while(childItems.MoveNext())
                {
                    IEnumerable<OpmlItem> children = DeserializeItem(childItems.Current);
                    if(null != children)
                    {
                        items.InsertRange(items.Count, children);
                    }
                }
            }

            return items;
        }
    }

    [Serializable]
    [XmlRoot(ElementName = "outline", IsNullable = true)]
    public class OpmlItem
    {
        private OpmlItemCollection _childItems;
        private string _description;
        private string _htmlurl;
        private string _title;
        private string _xmlurl;

        public OpmlItem()
        {
            _childItems = new OpmlItemCollection();
        }

        public OpmlItem(string title, string description, string xmlUrl, string htmlUrl)
            : this()
        {
            _title = title;
            _description = description;
            _xmlurl = xmlUrl;
            _htmlurl = htmlUrl;
        }

        [XmlAttribute("title")]
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute("description")]
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlAttribute("xmlurl")]
        public string XmlUrl
        {
            get { return _xmlurl; }
            set { _xmlurl = value; }
        }

        [XmlAttribute("htmlurl")]
        public string HtmlUrl
        {
            get { return _htmlurl; }
            set { _htmlurl = value; }
        }

        public OpmlItemCollection ChildItems
        {
            get { return _childItems; }
            set { _childItems = value; }
        }

        internal void RenderOpml(XmlWriter writer)
        {
            writer.WriteStartElement("outline");
            writer.WriteAttributeString("title", Title);
            writer.WriteAttributeString("description", Description);
            writer.WriteAttributeString("htmlurl", HtmlUrl);
            writer.WriteAttributeString("xmlurl", XmlUrl);
            writer.WriteEndElement();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Subtext.Web.Admin
{
    // TODO: target, defaults to none; change Name to Title or Description, what does what? Desc can be ALT
    [Serializable]
    [XmlRoot(ElementName = "RootPage", IsNullable = true)]
    public class PageLocation
    {
        private PageLocationCollection _childLocations;
        private string _description;
        private string _id;
        private bool _isRoot;
        private PageLocation _parent;
        private string _target = String.Empty;
        private string _title;
        private string _url;

        public PageLocation()
        {
            _childLocations = new PageLocationCollection();
        }

        public PageLocation(Type pageType, string title, string url)
            : this()
        {
            _id = pageType.BaseType.FullName;
            _title = title;
            _url = url;
        }

        public PageLocation(string id, string title, string url)
            : this()
        {
            _id = id;
            _title = title;
            _url = url;
        }

        public PageLocation(string id, string title, string url, string description)
            : this()
        {
            _id = id;
            _title = title;
            _url = url;
            _description = description;
        }

        #region Accessors

        [XmlElement(ElementName = "Page", IsNullable = true)]
        public PageLocationCollection ChildLocations
        {
            get { return _childLocations; }
            set { _childLocations = value; }
        }

        [XmlAttribute("description")]
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        public bool IsRoot
        {
            get { return _isRoot; }
        }

        [XmlAttribute("title")]
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute("id")]
        public string ID
        {
            get { return _id; }
            set { _id = value; }
        }

        public PageLocation Parent
        {
            get { return _parent; }
        }

        public bool HasChildren
        {
            get { return _childLocations.Count > 0; }
        }

        [XmlAttribute("url")]
        public string Url
        {
            get { return _url; }
            set { _url = value; }
        }

        [XmlAttribute("target")]
        public string Target
        {
            get { return _target; }
            set { _target = value; }
        }

        #endregion

        public static PageLocation GetRootPage()
        {
            var result = new PageLocation();
            result._isRoot = true;
            return result;
        }

        public static PageLocation GetRootPage(PageLocation root)
        {
            root._isRoot = true;
            return root;
        }

        public void AppendChild(PageLocation newChild)
        {
            // TODO: Q? test != self or not?

            newChild.SetParent(this);

            if(SiteMap.Instance.ContainsID(newChild.ID))
            {
                SiteMap.Instance[newChild.ID] = newChild;
            }
            else
            {
                SiteMap.Instance.AddPage(newChild);
            }

            _childLocations.Add(newChild);
        }

        internal void SetParent(PageLocation parentPage)
        {
            _parent = parentPage;
        }

        public IEnumerable<PageLocation> GetAncestors()
        {
            return GetAncestors(false);
        }

        public IEnumerable<PageLocation> GetAncestors(bool includeSelf)
        {
            var ancestors = new List<PageLocation>();

            if(includeSelf)
            {
                ancestors.Add(this);
            }

            PageLocation currentAncestor = _parent;
            while(null != currentAncestor)
            {
                ancestors.Add(currentAncestor);
                if(currentAncestor.IsRoot)
                {
                    break;
                }
                currentAncestor = currentAncestor.Parent;
            }

            return ancestors;
        }

        // RemoveChild

        // GetBreadCrumbLinks -- preloaded and formatted?
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using log4net;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Logging;

namespace Subtext.Web.Admin
{
    // This is sort of experimental right now. Not sure it's clean enough/performant enough.
    internal static class Preferences
    {
        const int COOKIE_EXPIRY_MONTHS = 6;
        private const string COOKIES_CREATE_ISACTIVE = "AlwaysCreateItemsAsActive";
        private const string COOKIES_EXPAND_ADVANCED = "AdminCookieAlwaysExpandAdvanced";
        private const string COOKIES_FEEDBACK_FILTER = "AdminCookieFeedbackFilter";
        private const string COOKIES_FEEDBACK_SHOWONLYCOMMENTS = "AdminCookieFeedbackShowOnlyComments"; //obsolete
        private const string COOKIES_PAGE_SIZE_DEFAULT = "AdminCookieListingItemCount";
        private readonly static ILog log = new Log();

        internal static int ListingItemCount
        {
            get
            {
                if(null != HttpContext.Current.Request.Cookies[COOKIES_PAGE_SIZE_DEFAULT])
                {
                    return Int32.Parse(HttpContext.Current.Request.Cookies[COOKIES_PAGE_SIZE_DEFAULT].Value);
                }
                else
                {
                    return Constants.PAGE_SIZE_DEFAULT;
                }
            }
            set
            {
                if(value > 0)
                {
                    CreateCookie(COOKIES_PAGE_SIZE_DEFAULT, value, CookieExpiry);
                }
            }
        }

        internal static bool AlwaysExpandAdvanced
        {
            get
            {
                HttpCookie cookie = HttpContext.Current.Request.Cookies[COOKIES_EXPAND_ADVANCED];
                if(null != cookie)
                {
                    return String.Equals(cookie.Value, "true", StringComparison.InvariantCultureIgnoreCase)
                               ? true
                               : false;
                }
                else
                {
                    return Constants.ALWAYS_EXPAND_DEFAULT;
                }
            }
            set { CreateCookie(COOKIES_EXPAND_ADVANCED, value, CookieExpiry); }
        }

        internal static bool AlwaysCreateIsActive
        {
            get
            {
                HttpCookie cookie = HttpContext.Current.Request.Cookies[COOKIES_CREATE_ISACTIVE];
                if(null != cookie)
                {
                    return String.Equals(cookie.Value, "true", StringComparison.InvariantCultureIgnoreCase)
                               ? true
                               : false;
                }
                else
                {
                    return Constants.CREATE_ISACTIVE_DEFAULT;
                }
            }
            set
            {
//				if (value != Constants.CREATE_ISACTIVE_DEFAULT)
                CreateCookie(COOKIES_CREATE_ISACTIVE, value, CookieExpiry);
            }
        }

        static DateTime CookieExpiry
        {
            get { return DateTime.Now.AddMonths(COOKIE_EXPIRY_MONTHS); }
        }

        internal static string GetFeedbackItemFilter(FeedbackStatusFlag currentView)
        {
            string cookieName = COOKIES_FEEDBACK_FILTER + currentView;
            if(null != HttpContext.Current.Request.Cookies[cookieName])
            {
                return HttpContext.Current.Request.Cookies[cookieName].Value;
            }
            return FeedbackType.None.ToString();
        }

        internal static void SetFeedbackItemFilter(string value, FeedbackStatusFlag currentView)
        {
            string cookieName = COOKIES_FEEDBACK_FILTER + currentView;

            if(Enum.IsDefined(typeof(FeedbackType), value))
            {
                CreateCookie(cookieName, value, CookieExpiry);
            }
            else
            {
                log.Warn("Could not set FeedbackType value: " + value);
            }
        }

        //This is a helper. Maybe it should go in another class? 13-nov-06 mountain_sf
        internal static FeedbackType ParseFeedbackItemFilter(string value)
        {
            try
            {
                return (FeedbackType)Enum.Parse(typeof(FeedbackType), value, true);
            }
            catch(ArgumentNullException ane)
            {
                log.Warn("Could not parse FeedbackType value. Value was null.", ane);
                return FeedbackType.None;
            }
            catch(ArgumentException ae)
            {
                log.Warn("Could not parse FeedbackType value.", ae);
                return FeedbackType.None;
            }
        }

        static void CreateCookie(string name, object value, DateTime expiry)
        {
            var addingCookie = new HttpCookie(name);
            addingCookie.Value = value.ToString();
            addingCookie.Expires = expiry;
            HttpContext.Current.Response.Cookies.Add(addingCookie);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Web;
using System.Xml;
using System.Xml.Serialization;

namespace Subtext.Web.Admin
{
    public class SiteMap
    {
        protected const string DEFAULT_FILENAME = "navigation.config";

        private static readonly SiteMap _instance = new SiteMap();
        private readonly Dictionary<string, PageLocation> _pages;

        protected SiteMap()
        {
            _pages = new Dictionary<string, PageLocation>();
        }

        public static SiteMap Instance
        {
            get { return _instance; }
        }

        public PageLocation this[string index]
        {
            get
            {
                PageLocation location = null;
                _pages.TryGetValue(index, out location);
                return location;
            }
            set { _pages[index] = value; }
        }

        [XmlIgnore]
        public PageLocation Root { get; private set; }

        [XmlIgnore]
        public bool IsConfigured { get; private set; }

        public static void LoadConfiguration()
        {
            LoadConfiguration(DEFAULT_FILENAME);
        }

        // Change to ConfigHandler?
        public static void LoadConfiguration(string filePath)
        {
            string filepath = HttpContext.Current.Request.MapPath(filePath);

            var doc = new XmlDocument();
            doc.Load(filepath);

            XmlNode pageLocations = doc.SelectSingleNode("/Navigation/RootPage");
            if(null != pageLocations)
            {
                Encoding encoding = Utilities.GetEncoding(filepath);
                byte[] buffer = encoding.GetBytes(pageLocations.OuterXml);
                var stream = new MemoryStream(buffer);
                stream.Position = 0;
                var serializer = new XmlSerializer(typeof(PageLocation));
                var newRoot = (PageLocation)serializer.Deserialize(stream);
                _instance.SetRoot(PageLocation.GetRootPage(newRoot));
                _instance.PopulateLookupList();
            }

            _instance.IsConfigured = true;
        }

        public bool ContainsID(string id)
        {
            return _pages.ContainsKey(id);
        }

        public IEnumerable<PageLocation> GetAncestors(string id)
        {
            return GetAncestors(id, true);
        }

        public IEnumerable<PageLocation> GetAncestors(string id, bool includeSelf)
        {
            if(_pages.ContainsKey(id))
            {
                return _pages[id].GetAncestors(includeSelf);
            }
            else
            {
                return null;
            }
        }

        public void AddPage(PageLocation value)
        {
            _pages.Add(value.ID, value);
        }

        protected void ClearPages()
        {
            _pages.Clear();
        }

        protected void SetRoot(PageLocation root)
        {
            Root = root;
        }

        protected void PopulateLookupList()
        {
            ClearPages();
            RecursePageLocations(Root);
        }

        protected void RecursePageLocations(PageLocation currentLocation)
        {
            if(currentLocation.HasChildren)
            {
                foreach(PageLocation childLocation in currentLocation.ChildLocations)
                {
                    childLocation.SetParent(currentLocation);
                    RecursePageLocations(childLocation);
                }
            }

            AddPage(currentLocation);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Web.UI;

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Will cause the user to confirm navigating away from the current page. This behavior can be overriden.
    /// </summary>
    public class ConfirmationPage : AdminPage
    {
        const string scriptEnd = "';    }  }  function bypassCheck() {     g_blnCheckUnload  = false;   }</script>";

        const string scriptStart =
            "<script type=\"text/javascript\">g_blnCheckUnload = true;function RunOnBeforeUnload() {if (g_blnCheckUnload) {window.event.returnValue = '";

        public static readonly string BypassFunctionName = "bypassCheck();";

        private bool _IsInEdit = false;

        private string _message = "You will lose any non-saved text";

        public bool IsInEdit
        {
            get { return _IsInEdit; }
            set { _IsInEdit = value; }
        }

        public string Message
        {
            get { return _message; }
            set { _message = value; }
        }

        protected override void OnPreRender(EventArgs e)
        {
            //If we are in edit mode, register the script
            if(IsInEdit)
            {
                Type ctype = GetType();
                Page.ClientScript.RegisterClientScriptBlock(ctype
                                                            , "ConfirmationBeforeLeaving"
                                                            , string.Format(CultureInfo.InvariantCulture
                                                                            , "{0}{1}{2}"
                                                                            , scriptStart
                                                                            , Message
                                                                            , scriptEnd));
            }
            base.OnPreRender(e);
        }


        protected override void Render(HtmlTextWriter writer)
        {
            //If we are in edit mode, wire up the onbeforeunload event
            if(IsInEdit)
            {
                TextWriter tempWriter = new StringWriter();
                base.Render(new HtmlTextWriter(tempWriter));
                writer.Write(Regex.Replace(tempWriter.ToString(), "<body",
                                           "<body onbeforeunload=\"RunOnBeforeUnload()\"", RegexOptions.IgnoreCase));
            }
            else
            {
                base.Render(writer);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using Subtext.Web.Controls;

namespace Subtext.Web.Admin.WebUI
{
    // TODO: Designer, design-time enhancements
    // TODO: Collapsible property, don't add link to ctls if false -- interaction with Collapsed tests?
    // TODO: Properties should not have dependencies on each other; Setting one property should not 
    // affect other properties

    [ToolboxData("<{0}:AdvancedPanel runat=\"server\"></{0}:AdvancedPanel>")]
    public class AdvancedPanel : CollapsiblePanel
    {
        /// <summary>
        /// Creates a new <see cref="AdvancedPanel"/> instance and 
        /// sets some initial properties specific to the admin tool.
        /// </summary>
        public AdvancedPanel()
        {
            LinkImage = "~/aspx/admin/images/toggle_gray_up.gif";
            LinkImageCollapsed = "~/aspx/admin/images/toggle_gray_down.gif";
            CssClass = "section";
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;
using Subtext.Framework.Providers;

namespace Subtext.Web.Admin.WebUI.Controls
{
    public class BaseUserControl : UserControl
    {
        AdminUrlHelper _adminUrl;

        public UrlHelper Url
        {
            get { return SubtextPage.Url; }
        }

        public AdminUrlHelper AdminUrl
        {
            get
            {
                _adminUrl = _adminUrl ?? new AdminUrlHelper(Url);
                return _adminUrl;
            }
        }

        public SubtextPage SubtextPage
        {
            get { return Page as SubtextPage; }
        }

        public ISubtextContext SubtextContext
        {
            get
            {
                return SubtextPage.SubtextContext;
            }
        }

        public ObjectProvider Repository
        {
            get
            {
                if(_repository == null)
                {
                    _repository = SubtextPage.SubtextContext.Repository;
                }
                return _repository;
            }
        }

        ObjectProvider _repository;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

// Aped from: Paul Wilson @ www.wilsondotnet.com

using System.Drawing;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.Admin.WebUI
{
    [ToolboxData("<{0}:ContentRegion runat=server></{0}:ContentRegion>")]
    public class PlaceHolder : Panel
    {
        public PlaceHolder()
        {
            base.BackColor = Color.WhiteSmoke;
            base.Width = new Unit("100%", CultureInfo.InvariantCulture);
        }

        public override void RenderBeginTag(HtmlTextWriter writer)
        {
        }

        public override void RenderEndTag(HtmlTextWriter writer)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI;

namespace Subtext.Web.Admin.WebUI
{
    public class HeaderBase : Control
    {
        private string _appPath;
        private string _relativePath = String.Empty;

        public HeaderBase()
        {
            _appPath = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) +
                       HttpContext.Current.Request.ApplicationPath;
        }

        public string RelativePath
        {
            get { return _relativePath.StartsWith("/") ? _relativePath.Substring(1) : _relativePath; }
            set { _relativePath = value; }
        }

        public string AppPath
        {
            get { return _appPath.EndsWith("/") ? _appPath : _appPath + "/"; }
            set { _appPath = value; }
        }

        protected override void Render(HtmlTextWriter output)
        {
            output.Write(string.Format(CultureInfo.InvariantCulture, "<base href=\"{0}{1}/\" />", AppPath, RelativePath));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.Web.UI;

namespace Subtext.Web.Admin.WebUI
{
    /// <summary>
    /// Renders a link tag for CSS.
    /// </summary>
    public class HeaderLink : Control
    {
        private string _href;
        private string _linkType;
        private string _media = "screen";
        private string _rel;
        private string _title;

        public string Rel
        {
            get { return _rel; }
            set { _rel = value; }
        }

        public string Href
        {
            get { return Utilities.ResourcePath + _href; }
            set { _href = value; }
        }

        public string LinkType
        {
            get { return _linkType; }
            set { _linkType = value; }
        }

        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string Media
        {
            get { return _media; }
            set { _media = value; }
        }

        protected override void Render(HtmlTextWriter output)
        {
            output.Write(string.Format(CultureInfo.InvariantCulture,
                                       "<link href=\"{1}\" rel=\"{0}\" type=\"{2}\" title=\"{3}\" media=\"{4}\" />",
                                       _rel, Href, _linkType, _title, _media));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.ObjectModel;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.Admin.WebUI
{
    public class LinkList : Control
    {
        LinkControlCollection _items = new LinkControlCollection();

        public LinkControlCollection Items
        {
            get { return _items; }
        }

        protected override void Render(HtmlTextWriter output)
        {
            if(_items.Count > 0)
            {
                output.WriteBeginTag("ul");
                output.WriteAttribute("id", ClientID, false);
                output.Write(HtmlTextWriter.TagRightChar);
                foreach(WebControl currentLink in _items)
                {
                    output.RenderBeginTag(HtmlTextWriterTag.Li);
                    currentLink.RenderControl(output);
                    output.RenderEndTag();
                }
                output.WriteEndTag("ul");
            }
        }
    }

    // REFACTOR:
    // This used to be hyperlinks only, I wanted to add LinkButtons. The share
    // WebControl as an ancestor along with 13,000 other things. So this is kind 
    // of bad pool here, need to reevalutate how to get same functionality but
    // in a cleaner way.
    public sealed class LinkControlCollection : Collection<WebControl>
    {
        public LinkControlCollection() : base()
        {
        }

        public void Add(string text, string navigateUrl)
        {
            Add(text, navigateUrl, null, null);
        }

        public void Add(string text, string navigateUrl, string cssClass)
        {
            Add(text, navigateUrl, cssClass, null);
        }

        public void Add(string text, string navigateUrl, string cssClass, string target)
        {
            var adding = new HyperLink();
            adding.Text = text;
            adding.NavigateUrl = navigateUrl;
            if(null != cssClass && cssClass.Length > 0)
            {
                adding.CssClass = cssClass;
            }
            if(null != target && target.Length > 0)
            {
                adding.Target = target;
            }

            Add(adding);
        }

        public LinkButton Add(string text, EventHandler targetHandler)
        {
            return Add(text, null, targetHandler);
        }

        public LinkButton Add(string text, string cssClass, EventHandler targetHandler)
        {
            var adding = new LinkButton();
            adding.Text = text;
            adding.Click += new EventHandler(targetHandler);

            if(null != cssClass && cssClass.Length > 0)
            {
                adding.CssClass = cssClass;
            }

            Add(adding);
            return adding;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.Admin.WebUI
{
    // TODO: add clear link (display: none;) plus requried js

    [ToolboxData("<{0}:MessagePanel runat=\"server\"></{0}:MessagePanel>")]
    public class MessagePanel : Panel, INamingContainer
    {
        private const string VSKEY_ERROR = "Error";
        private const string VSKEY_MESSAGE = "Message";

        string _errorCssClass;
        string _errorIconUrl;
        string _messageCssClass;
        string _messageIconUrl;
        bool _showErrorPanel;
        bool _showMessagePanel;

        #region Accessors

        public string Message
        {
            get { return (string)ViewState[VSKEY_MESSAGE]; }
            set { ViewState[VSKEY_MESSAGE] = value; }
        }

        public string Error
        {
            get { return (string)ViewState[VSKEY_ERROR]; }
            set { ViewState[VSKEY_ERROR] = value; }
        }

        public bool ShowMessagePanel
        {
            get { return _showMessagePanel; }
            set { _showMessagePanel = value; }
        }

        public bool ShowErrorPanel
        {
            get { return _showErrorPanel; }
            set { _showErrorPanel = value; }
        }

        public string MessageCssClass
        {
            get
            {
                if(_messageCssClass == null)
                {
                    _messageCssClass = "MessagePanel";
                }
                return _messageCssClass;
            }
            set { _messageCssClass = value; }
        }

        public string ErrorCssClass
        {
            get
            {
                if(_errorCssClass == null)
                {
                    _errorCssClass = "ErrorPanel";
                }
                return _errorCssClass;
            }
            set { _errorCssClass = value; }
        }

        public string MessageIconUrl
        {
            get
            {
                if(_messageIconUrl == null)
                {
                    _messageIconUrl = "~/images/icons/ico_info.gif";
                }
                return _messageIconUrl;
            }
            set { _messageIconUrl = value; }
        }

        public string ErrorIconUrl
        {
            get
            {
                if(_errorIconUrl == null)
                {
                    _errorIconUrl = "~/images/icons/ico_critical.gif";
                }
                return _errorIconUrl;
            }
            set { _errorIconUrl = value; }
        }

        #endregion

        protected override void Render(HtmlTextWriter writer)
        {
            if(null != Page)
            {
                Page.VerifyRenderingInServerForm(this);
            }

            if(ShowErrorPanel)
            {
                Panel errorPanel = BuildPanel(Error, ErrorCssClass,
                                              Utilities.AbsolutePath(ErrorIconUrl));
                Controls.Add(errorPanel);
            }

            if(ShowMessagePanel)
            {
                Panel messagePanel = BuildPanel(Message, MessageCssClass,
                                                Utilities.AbsolutePath(MessageIconUrl));
                Controls.Add(messagePanel);
            }

            base.Render(writer);
        }

        protected virtual Panel BuildPanel(string messageText, string cssClass, string imageUrl)
        {
            var result = new Panel();

            if(null != imageUrl && cssClass.Length > 0)
            {
                result.CssClass = cssClass;
            }

            if(!string.IsNullOrEmpty(imageUrl))
            {
                var image = new Image();
                image.Attributes.Add("src", imageUrl);
                result.Controls.Add(image);
            }

            var message = new Panel();
            message.Controls.Add(new LiteralControl(messageText));
            result.Controls.Add(message);

            return result;
        }

        public void ShowMessage(string message)
        {
            ShowMessage(message, true);
        }

        public void ShowMessage(string message, bool clearExistingMessages)
        {
            if(clearExistingMessages)
            {
                Message = message;
            }
            else
            {
                Message += " " + message;
            }

            ShowMessagePanel = true;
            Visible = true;
        }

        public void ShowError(string message)
        {
            ShowError(message, true);
        }

        public void ShowError(string message, bool clearExistingMessages)
        {
            if(clearExistingMessages)
            {
                Error = message;
            }
            else
            {
                Error += " " + message;
            }

            ShowErrorPanel = true;
            Visible = true;
        }

        public void Clear()
        {
            Visible = false;
        }

        public void ResetMessages()
        {
            Message = string.Empty;
            Error = string.Empty;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Web.Admin.Pages;

namespace Subtext.Web.Admin.WebUI
{
    public class StatsPage : AdminPage
    {
        public StatsPage()
        {
            TabSectionId = "Stats";
        }

        protected virtual void BindLocalUI()
        {
            HyperLink lnkReferrals = Utilities.CreateHyperLink("Referrals", "Referrers.aspx");
            HyperLink lnkViews = Utilities.CreateHyperLink("Views", "StatsView.aspx");
            HyperLink lnkErrorLog = Utilities.CreateHyperLink("Error Log", "ErrorLog.aspx");
            HyperLink lnkRssFeed = Utilities.CreateHyperLink("Custom Feed", "RssFeeds.aspx");

            // Add the buttons to the PageContainer.
            AdminMasterPage.AddToActions(lnkReferrals, Url.AdminRssUrl("Referrers"));
            AdminMasterPage.AddToActions(lnkViews);
            AdminMasterPage.AddToActions(lnkErrorLog, Url.AdminRssUrl("Errors"));
            AdminMasterPage.AddToActions(lnkRssFeed);
        }

        protected override void OnLoad(EventArgs e)
        {
            BindLocalUI();
            base.OnLoad(e);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Web;
using Subtext.Web.Properties;

namespace Subtext.Web.Admin
{
    public static class Utilities
    {
        public static string ResourcePath
        {
            get { return HttpHelper.CombineWebPaths(HttpContext.Current.Request.ApplicationPath, "/admin/"); }
        }

        internal static string AbsolutePath(string path)
        {
            const string ADMIN_DEFAULT = "/admin";

            if(null != HttpContext.Current)
            {
                if(null != path && path.StartsWith("~"))
                {
                    string relativePath = path.Substring(1, path.Length - 1);
                    string appPath = HttpContext.Current.Request.ApplicationPath;

                    if(relativePath.StartsWith(ADMIN_DEFAULT, StringComparison.InvariantCultureIgnoreCase))
                    {
                        relativePath = relativePath.Replace(ADMIN_DEFAULT,
                                                            "admin");
                    }

                    if(relativePath.StartsWith("/"))
                    {
                        relativePath = relativePath.Substring(1, relativePath.Length - 1);
                    }

                    return string.Format(CultureInfo.InvariantCulture, "{0}{1}{2}", appPath,
                                         appPath.EndsWith("/") ? "" : "/",
                                         relativePath);
                }
                else
                {
                    return path;
                }
            }
            else
            {
                return path;
            }
        }

        internal static bool IsNullorEmpty(String test)
        {
            return (test == null || test.Length <= 0);
        }

        internal static string Truncate(string value, int numChars)
        {
            return Truncate(value, numChars, true);
        }

        internal static string Truncate(string value, int numChars, bool useSuffix)
        {
            if(value.Length > numChars)
            {
                if(useSuffix && (value.Length > numChars - Constants.TRUNCATE_SUFFIX.Length))
                {
                    return value.Substring(0, numChars - Constants.TRUNCATE_SUFFIX.Length)
                           + Constants.TRUNCATE_SUFFIX;
                }
                else
                {
                    return value.Substring(0, numChars);
                }
            }
            else
            {
                return value;
            }
        }

        internal static LinkButton CreateLinkButton(string text)
        {
            var result = new LinkButton();
            result.Text = text;
            return result;
        }

        internal static HyperLink CreateHyperLink(string text, string url)
        {
            var result = new HyperLink();
            result.Text = text;
            result.NavigateUrl = url;
            return result;
        }

        internal static WebControl CopyStyles(WebControl control, NameValueCollection styles)
        {
            foreach(string key in styles.Keys)
            {
                control.Style.Add(key, styles[key]);
            }

            return control;
        }

        internal static Encoding GetEncoding(string filepath)
        {
            Encoding result;
            FileStream file = null;
            try
            {
                file = new FileStream(filepath, FileMode.Open, FileAccess.Read, FileShare.Read);

                if(file.CanSeek)
                {
                    // get the bom, if there is one
                    var bom = new byte[4];
                    file.Read(bom, 0, 4);

                    // utf-8
                    if(bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf)
                    {
                        result = Encoding.UTF8;
                    }
                        // ucs-2le, ucs-4le, ucs-16le, utf-16, ucs-2, ucs-4
                    else if((bom[0] == 0xff && bom[1] == 0xfe) ||
                            (bom[0] == 0xfe && bom[1] == 0xff) ||
                            (bom[0] == 0 && bom[1] == 0 && bom[2] == 0xfe && bom[3] == 0xff))
                    {
                        result = Encoding.Unicode;
                    }
                        // else ascii
                    else
                    {
                        result = Encoding.ASCII;
                    }
                }
                else
                {
                    // can't detect, set to default
                    result = Encoding.ASCII;
                }

                return result;
            }
            finally
            {
                if(null != file)
                {
                    file.Close();
                }
            }
        }
    }

    internal static class Keys
    {
        internal const string QRYSTR_CATEGORYID = "catid";
        internal const string QRYSTR_CATEGORYTYPE = "catType";
        internal const string QRYSTR_IMAGEID = "imgid";
        internal const string QRYSTR_PAGEINDEX = "pg";
        internal const string SESSION_COOKIETEST = "AdminPageCookieTest";
    }

    internal static class Constants
    {
        internal const bool ALWAYS_EXPAND_DEFAULT = false;
        internal const bool CREATE_ISACTIVE_DEFAULT = true;
        internal const string CSSSTYLE_HIDDEN = "display: none;";

        internal const CategoryType DEFAULT_CATEGORYTYPE = CategoryType.PostCollection;

        internal const int PAGE_SIZE_DEFAULT = 10;
        internal const string TRUNCATE_SUFFIX = "...";

        internal const string URL_CONFIRM = "Confirm.aspx";
        internal const string URL_EDITCATEGORIES = "EditCategories.aspx";
        internal const string URL_EDITGALLERIES = "EditGalleries.aspx";

        internal static readonly string RES_EXCEPTION = Resources.Message_GenericError;

        internal static readonly string RES_FAILURECATEGORYUPDATE = Resources.Message_CategoryUpdateFailed;
        internal static readonly string RES_FAILUREEDIT = Resources.Message_PostOperationFailed;
        internal static readonly string RES_SUCCESSCATEGORYUPDATE = Resources.Message_CategoriesUpdatedSuccessful;
        internal static string RES_SUCCESSEDIT = Resources.Message_UpdateSuccessful;
        internal static string RES_SUCCESSNEW = Resources.Message_PostedSuccessful;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Web.UI.Controls;

namespace Subtext.Web
{
    /// <summary>
    /// When AggregateBlog is enabled in Web.config, this page renders contents from 
    /// all blogs which have set their blog posts to be included in the main blog.
    /// </summary>
    public partial class AggDefault : AggregatePage
    {
        protected HyperLink Hyperlink6;
        protected HyperLink Hyperlink7;

        /// <summary>
        /// Url to the aggregate page.
        /// </summary>
        protected string AggregateUrl
        {
            get { return Url.AppRoot(); }
        }

        protected override void OnLoad(EventArgs e)
        {
            //No postbacks on this page. It is output cached.
            SetStyle();
            DataBind();
            base.OnLoad(e);
        }

        protected string ImageUrl(string imageName)
        {
            return VirtualPathUtility.ToAbsolute("~/images/" + imageName);
        }

        private void SetStyle()
        {
            const string style = "<link href=\"{0}{1}\" type=\"text/css\" rel=\"stylesheet\">";
            string apppath = HttpContext.Current.Request.ApplicationPath.EndsWith("/")
                                 ? HttpContext.Current.Request.ApplicationPath
                                 : HttpContext.Current.Request.ApplicationPath + "/";
            //TODO: This is hard-coded to look in the simple skin for aggregate blogs. We should change this later.
            Style.Text = string.Format(style, apppath, "Skins/Aggregate/Simple/Style.css") + "\n" +
                         string.Format(style, apppath, "Skins/Aggregate/Simple/blue.css") + "\n" +
                         string.Format(style, apppath, "Scripts/jquery.lightbox-0.5.css");
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    public partial class AggDefault {
        
        /// <summary>
        /// title control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal title;
        
        /// <summary>
        /// Style control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal Style;
        
        /// <summary>
        /// Form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm Form1;
        
        /// <summary>
        /// TitleLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink TitleLink;
        
        /// <summary>
        /// AggSyndication1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggSyndication AggSyndication1;
        
        /// <summary>
        /// AggBlogStats1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggBlogStats AggBlogStats1;
        
        /// <summary>
        /// AggBloggers1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggBloggers AggBloggers1;
        
        /// <summary>
        /// AggPinnedPost1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggPinnedPost AggPinnedPost1;
        
        /// <summary>
        /// AggRecentPosts1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggRecentPosts AggRecentPosts1;
        
        /// <summary>
        /// AggRecentImages1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.UI.Controls.AggRecentImages AggRecentImages1;
    }
}
using System;
using System.Web.UI;

namespace Subtext.Web
{
    public partial class ForgotPassword : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    public partial class ForgotPassword {
        
        /// <summary>
        /// Master property.
        /// </summary>
        /// <remarks>
        /// Auto-generated property.
        /// </remarks>
        public new Subtext.Web.Skins._System.ForgotPassword Master {
            get {
                return ((Subtext.Web.Skins._System.ForgotPassword)(base.Master));
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;

namespace Subtext.Web.HostAdmin
{
    /// <summary>
    /// Allows the user to change the host admin password.
    /// </summary>
    public partial class ChangePassword : HostAdminPage
    {
        protected override void OnLoad(EventArgs e)
        {
            txtEmail.Text = HostInfo.Instance.Email;
            lblSuccess.Visible = false;
            emailChangedLabel.Visible = false;
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                HostInfo.SetHostPassword(HostInfo.Instance, txtNewPassword.Text);
                HostInfo.UpdateHost(HostInfo.Instance);
                lblSuccess.Visible = true;
            }
        }

        protected void OnChangeEmailButtonClick(object sender, EventArgs e)
        {
            emailChangedLabel.Visible = true;
            HostInfo.Instance.Email = txtEmail.Text;
            HostInfo.UpdateHost(HostInfo.Instance);
        }

        private void ValidatePassword(object source, ServerValidateEventArgs args)
        {
            string password = txtCurrentPassword.Text;
            if(Config.Settings.UseHashedPasswords)
            {
                password = SecurityHelper.HashPassword(password, HostInfo.Instance.Salt);
            }

            args.IsValid = password == HostInfo.Instance.Password;
        }

        override protected void OnInit(EventArgs e)
        {
            vldCurrent.ServerValidate += ValidatePassword;
            base.OnInit(e);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin {
    
    
    public partial class ChangePassword {
        
        /// <summary>
        /// emailChangedLabel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label emailChangedLabel;
        
        /// <summary>
        /// txtEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtEmail;
        
        /// <summary>
        /// lblSuccess control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblSuccess;
        
        /// <summary>
        /// validationSummary control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ValidationSummary validationSummary;
        
        /// <summary>
        /// vldCurrentPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldCurrentPassword;
        
        /// <summary>
        /// vldCurrent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CustomValidator vldCurrent;
        
        /// <summary>
        /// txtCurrentPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtCurrentPassword;
        
        /// <summary>
        /// vldNewPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldNewPassword;
        
        /// <summary>
        /// txtNewPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtNewPassword;
        
        /// <summary>
        /// vldConfirmPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldConfirmPassword;
        
        /// <summary>
        /// vldComparePasswords control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CompareValidator vldComparePasswords;
        
        /// <summary>
        /// txtConfirmPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtConfirmPassword;
        
        /// <summary>
        /// btnSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSave;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Logging;
using Subtext.Web.Admin;
using Subtext.Web.Controls;

namespace Subtext.Web.HostAdmin.Pages
{
    public partial class ErrorLog : HostAdminPage
    {
        private int logPageNumber;

        protected override void OnLoad(EventArgs e)
        {
            LoadPage();
            base.OnLoad(e);
        }

        private void LoadPage()
        {
            if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
            {
                logPageNumber = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            resultsPager.PageSize = Preferences.ListingItemCount;
            resultsPager.PageIndex = logPageNumber;

            BindList();
        }

        private void BindList()
        {
            IPagedCollection<LogEntry> logEntries = LoggingProvider.Instance().GetPagedLogEntries(
                resultsPager.PageIndex, resultsPager.PageSize);
            resultsPager.ItemCount = logEntries.MaxItems;
            LogPage.DataSource = logEntries;
            LogPage.DataBind();
        }

        private void btnClearLog_Click(object sender, EventArgs e)
        {
            LoggingProvider.Instance().ClearLog();
            resultsPager.PageIndex = 0; //Back to first page.
            BindList();
        }

        private void BindListForExcel()
        {
            IPagedCollection<LogEntry> logEntries = LoggingProvider.Instance().GetPagedLogEntries(0, int.MaxValue - 1);
            LogPage.DataSource = logEntries;
            LogPage.DataBind();
        }

        private void btnExportToExcel_Click(object sender, EventArgs e)
        {
            BindListForExcel();
            ControlHelper.ExportToExcel(LogPage, "SubtextErrorLog.xls");
        }

        protected string FormatLogger(object logger)
        {
            var loggerText = (string)logger;
            return
                loggerText.Replace("Subtext.Framework.", string.Empty).Replace("Subtext.Framework.", string.Empty).
                    Replace("Subtext.", string.Empty);
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.btnClearLog.Click += new EventHandler(this.btnClearLog_Click);
            this.btnExportToExcel.Click += new EventHandler(btnExportToExcel_Click);
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin.Pages {
    
    
    public partial class ErrorLog {
        
        /// <summary>
        /// Log control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel Log;
        
        /// <summary>
        /// LogPage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.RepeaterWithEmptyDataTemplate LogPage;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// btnExportToExcel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnExportToExcel;
        
        /// <summary>
        /// btnClearLog control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnClearLog;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.Security;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.HostAdmin
{
    public class HostAdminPage : SubtextPage
    {
        protected override void OnInit(EventArgs e)
        {
            if(!User.IsInRole("HostAdmins"))
            {
                FormsAuthentication.RedirectToLoginPage();
                return;
            }
            base.OnInit(e);
        }
    }
}using System;
using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Routing;

namespace Subtext.Web.HostAdmin
{
    /// <summary>
    /// Master page template for the host admin.
    /// </summary>
    public partial class HostAdminTemplate : MasterPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
            {
                DataBind();
            }

            if(hostAdminName != null && HostInfo.Instance != null)
            {
                hostAdminName.Text = HostInfo.Instance.HostUserName;
            }
        }

        /// <summary>
        /// Adds a control to the sidebar.
        /// </summary>
        /// <param name="control"></param>
        public void AddSidebarControl(Control control)
        {
            if(MPSidebar != null)
            {
                MPSidebar.Controls.Add(control);
            }
        }

        public UrlHelper Url
        {
            get { return (Page as HostAdminPage).Url; }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin {
    
    
    public partial class HostAdminTemplate {
        
        /// <summary>
        /// lnkStyleSheet control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink lnkStyleSheet;
        
        /// <summary>
        /// lnkCsharp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink lnkCsharp;
        
        /// <summary>
        /// lknCommon control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink lknCommon;
        
        /// <summary>
        /// lnkHelpTipCss control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink lnkHelpTipCss;
        
        /// <summary>
        /// frmMain control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm frmMain;
        
        /// <summary>
        /// hostAdminName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal hostAdminName;
        
        /// <summary>
        /// MPSectionTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MPSectionTitle;
        
        /// <summary>
        /// mnuDefault control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.MenuItem mnuDefault;
        
        /// <summary>
        /// mnuManageGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.MenuItem mnuManageGroups;
        
        /// <summary>
        /// mnuChangePassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.MenuItem mnuChangePassword;
        
        /// <summary>
        /// mnuErrorLog control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.MenuItem mnuErrorLog;
        
        /// <summary>
        /// MPSidebar control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MPSidebar;
        
        /// <summary>
        /// MPContent control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MPContent;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.HostAdmin
{
    /// <summary>
    /// Shows some diagnostic information.
    /// </summary>
    public partial class Queue : HostAdminPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //ltlActiveThreads.Text = ThreadPool.GetAvailableThreads().ToString(CultureInfo.InvariantCulture);
            //ltlWaitingCallbacks.Text = ManagedThreadPool.WaitingCallbacks.ToString(CultureInfo.InvariantCulture);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin {
    
    
    public partial class Queue {
        
        /// <summary>
        /// ltlActiveThreads control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ltlActiveThreads;
        
        /// <summary>
        /// ltlWaitingCallbacks control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ltlWaitingCallbacks;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Scripting.Exceptions;
using Subtext.Web.Properties;
using Ninject;

namespace Subtext.Web.HostAdmin.Upgrade
{
    /// <summary>
    /// Page used to create an initial configuration for the blog.
    /// </summary>
    /// <remarks>
    /// This page will ONLY be displayed if there are no 
    /// blog configurations within the database.
    /// </remarks>
    public partial class Default : HostAdminPage
    {
        [Inject]
        public IInstallationManager InstallationManager
        {
            get; 
            set;
        }

        protected override void OnLoad(EventArgs e)
        {
            if(InstallationManager.GetInstallationStatus(VersionInfo.CurrentAssemblyVersion) == InstallationState.Complete)
            {
                Response.Redirect("~/HostAdmin/Upgrade/UpgradeComplete.aspx");
            }

            btnUpgrade.Attributes["onclick"] = "this.disabled=true;"
                                               + ClientScript.GetPostBackEventReference(btnUpgrade, null);
            base.OnLoad(e);
        }

        protected void OnUpgradeClick(object sender, EventArgs e)
        {
            plcHolderUpgradeMessage.Visible = false;
            try
            {
                InstallationManager.Upgrade(VersionInfo.CurrentAssemblyVersion);
                Response.Redirect("~/HostAdmin/Upgrade/UpgradeComplete.aspx");
            }
            catch(SqlScriptExecutionException exception)
            {
                plcHolderUpgradeMessage.Visible = true;

                if(InstallationManager.IsPermissionDeniedException(exception))
                {
                    messageLiteral.Text = Resources.Upgrade_UserDoesNotHavePermission;
                    return;
                }

                messageLiteral.Text = Resources.Upgrade_SomethingWentWrongWithInstall + "<p>" + exception.Message + "</p><p>" +
                                      exception.GetType().FullName + "</p>";
                messageLiteral.Text += "<p>" + exception.StackTrace + "</p>";

                return;
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin.Upgrade {
    
    
    public partial class Default {
        
        /// <summary>
        /// plcHolderUpgradeMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plcHolderUpgradeMessage;
        
        /// <summary>
        /// messageLiteral control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal messageLiteral;
        
        /// <summary>
        /// btnUpgrade control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnUpgrade;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.HostAdmin.Upgrade
{
    /// <summary>
    /// Summary description for InstallationComplete.
    /// </summary>
    public partial class UpgradeComplete : HostAdminPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin.Upgrade {
    
    
    /// <summary>
    /// UpgradeComplete class.
    /// </summary>
    /// <remarks>
    /// Auto-generated class.
    /// </remarks>
    public partial class UpgradeComplete {
        
        /// <summary>
        /// lnkHostAdmin control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkHostAdmin;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Security;
using Subtext.Framework.Web;
using Subtext.Web.Admin;
using Subtext.Web.Admin.WebUI.Controls;
using Subtext.Web.Properties;

namespace Subtext.Web.HostAdmin.UserControls
{
    /// <summary>
    ///	User control used to create, edit and delete blogs.  
    ///	This only provides a few options for editing blogs. 
    ///	For the full options, one should visit the individual 
    ///	blog's admin tool.
    /// </summary>
    public partial class BlogsEditor : BaseUserControl
    {
        int _pageIndex;

        protected Button AddNewBlogButton = new Button();

        /// <summary>
        /// Gets or sets the blog id.
        /// </summary>
        /// <value></value>
        public int BlogId
        {
            get
            {
                if(ViewState["BlogId"] != null)
                {
                    return (int)ViewState["BlogId"];
                }
                return NullValue.NullInt32;
            }
            set { ViewState["BlogId"] = value; }
        }

        /// <summary>
        /// Gets or sets the blog id.
        /// </summary>
        /// <value></value>
        public int AliasId
        {
            get
            {
                if(ViewState["AliasId"] != null)
                {
                    return (int)ViewState["AliasId"];
                }
                return NullValue.NullInt32;
            }
            set { ViewState["AliasId"] = value; }
        }

        /// <summary>
        /// Gets or sets the number of blogs 
        /// currently in the system.
        /// </summary>
        /// <value></value>
        public int CurrentBlogCount
        {
            get
            {
                if(ViewState["CurrentBlogCount"] != null)
                {
                    return (int)ViewState["CurrentBlogCount"];
                }
                return NullValue.NullInt32;
            }
            set { ViewState["CurrentBlogCount"] = value; }
        }

        bool CreatingBlog
        {
            get { return BlogId == NullValue.NullInt32; }
        }

        protected virtual bool PageIsValid
        {
            get
            {
                bool isValidSoFar = true;

                if(CreatingBlog)
                {
                    if(IsTextBoxEmpty(txtPassword))
                    {
                        isValidSoFar = false;
                        messagePanel.ShowError(Resources.BlogsEditor_PasswordRequired + "<br />", true);
                    }
                    isValidSoFar = isValidSoFar && ValidateRequiredField(txtTitle, "Title");
                }

                if(txtPassword.Text != txtPasswordConfirm.Text)
                {
                    isValidSoFar = false;
                    messagePanel.ShowError(Resources.BlogsEditor_PasswordsDoNotMatch + "<br />", false);
                }

                // Use of single & is intentional to stop short cirtuited evaluation.
                return isValidSoFar
                       & ValidateRequiredField(txtHost, "Host Domain")
                       & ValidateRequiredField(txtUsername, "Username")
                       & ValidateFieldLength(txtHost, "Host Domain", 100)
                       & ValidateFieldLength(txtApplication, "Subfolder", 50)
                       & ValidateFieldLength(txtUsername, "Username", 50)
                       & ValidateFieldLength(txtPassword, "Password", 50)
                       & ValidateFieldLength(txtTitle, "Title", 100);
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            AddNewBlogButton.Click += OnAddNewBlogClick;

            AddNewBlogButton.CssClass = "button";
            AddNewBlogButton.Text = Resources.BlogsEditor_NewBlogLabel;
            ((HostAdminTemplate)Page.Master).AddSidebarControl(AddNewBlogButton);

            //Paging...
            if(null != Request.QueryString[Keys.QRYSTR_PAGEINDEX])
            {
                _pageIndex = Convert.ToInt32(Request.QueryString[Keys.QRYSTR_PAGEINDEX]);
            }

            if(!IsPostBack)
            {
                resultsPager.PageSize = Preferences.ListingItemCount;
                resultsPager.PageIndex = _pageIndex;
                pnlResults.Collapsible = false;
                chkShowInactive.Checked = false;
            }
            BindList();
        }

        public string GetBlogUrl(object dataItem)
        {
            var blog = dataItem as Blog;
            return Url.BlogUrl(blog);
        }

        private void BindGroups()
        {
            ddlGroups.DataSource = Config.ListBlogGroups(false);
            ddlGroups.DataBind();
        }

        private void BindList()
        {
            pnlResults.Visible = true;
            pnlEdit.Visible = false;

            ConfigurationFlags configFlags = chkShowInactive.Checked
                                                 ? ConfigurationFlags.None
                                                 : ConfigurationFlags.IsActive;

            IPagedCollection<Blog> blogs = Blog.GetBlogs(_pageIndex, resultsPager.PageSize, configFlags);

            if(blogs.Count > 0)
            {
                resultsPager.Visible = true;
                resultsPager.ItemCount = blogs.MaxItems;
                rprBlogsList.Visible = true;
                rprBlogsList.DataSource = blogs;
                rprBlogsList.DataBind();
                lblNoMessages.Visible = false;
            }
            else
            {
                resultsPager.Visible = false;
                rprBlogsList.Visible = false;
                resultsPager.Visible = false;
                lblNoMessages.Visible = true;
            }

            CurrentBlogCount = blogs.MaxItems;
        }

        void BindEdit()
        {
            pnlResults.Visible = false;
            pnlEdit.Visible = true;

            BindGroups();

            BindEditHelp();

            Blog blog;
            if(!CreatingBlog)
            {
                blog = Repository.GetBlogById(BlogId);
                txtApplication.Text = blog.Subfolder;
                txtHost.Text = blog.Host;
                txtUsername.Text = blog.UserName;
                txtPassword.Text = txtPasswordConfirm.Text = string.Empty;
                txtTitle.Text = blog.Title;
                IPagedCollection<BlogAlias> aliases = blog.GetBlogAliases(0, int.MaxValue);
                blogAliasListRepeater.DataSource = aliases;
                blogAliasListRepeater.DataBind();
                ddlGroups.Items.FindByValue(blog.BlogGroupId.ToString()).Selected = true;
            }
            else
            {
                ListItem item = ddlGroups.Items.FindByValue("1");
                if(item != null)
                {
                    item.Selected = true;
                }
            }
            txtTitle.Visible = true;

            string onChangeScript = string.Format(CultureInfo.InvariantCulture,
                                                  "onPreviewChanged('{0}', '{1}', '{2}', false);", txtHost.ClientID,
                                                  txtApplication.ClientID, virtualDirectory.ClientID);
            string onBlurScript = string.Format(CultureInfo.InvariantCulture,
                                                "onPreviewChanged('{0}', '{1}', '{2}', true);", txtHost.ClientID,
                                                txtApplication.ClientID, virtualDirectory.ClientID);

            if(!Page.ClientScript.IsStartupScriptRegistered("SetUrlPreview"))
            {
                string startupScript = "<script type=\"text/javascript\">"
                                       + Environment.NewLine
                                       + onBlurScript
                                       + Environment.NewLine
                                       + "</script>";

                Type ctype = GetType();
                Page.ClientScript.RegisterStartupScript(ctype, "SetUrlPreview", startupScript);
            }

            txtApplication.Attributes["onkeyup"] = onChangeScript;
            txtApplication.Attributes["onblur"] = onBlurScript;
            txtHost.Attributes["onkeyup"] = onChangeScript;
            txtHost.Attributes["onblur"] = onBlurScript;

            virtualDirectory.Value = HttpHelper.StripSurroundingSlashes(HttpContext.Current.Request.ApplicationPath);
        }

        // Contains the various help strings
        void BindEditHelp()
        {
            blogEditorHelp.HelpText = Resources.BlogsEditor_HelpText;
            hostDomainHelpTip.HelpText = Resources.BlogsEditor_HostDomainHelpText;
            applicationHelpTip.HelpText = Resources.BlogsEditor_ApplicationHelpTip;
        }

        protected void chkShowInactive_CheckedChanged(object sender, EventArgs e)
        {
            BindList();
        }

        private void OnAddNewBlogClick(object sender, EventArgs e)
        {
            BlogId = NullValue.NullInt32;
            txtTitle.Text = string.Empty;
            txtApplication.Text = string.Empty;
            txtHost.Text = string.Empty;
            txtUsername.Text = string.Empty;
            BindEdit();
        }

        protected void OnBlogItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "edit":
                    BlogId = Convert.ToInt32(e.CommandArgument);
                    BindEdit();
                    break;

                case "toggleactive":
                    BlogId = Convert.ToInt32(e.CommandArgument);
                    ToggleActive();
                    break;

                default:
                    break;
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            SaveConfig();
        }

        private void SaveConfig()
        {
            if(PageIsValid)
            {
                try
                {
                    if(BlogId != NullValue.NullInt32)
                    {
                        SaveBlogEdits();
                    }
                    else
                    {
                        SaveNewBlog();
                    }
                    BindList();
                    return;
                }
                catch(BaseBlogConfigurationException e)
                {
                    messagePanel.ShowError(e.Message);
                }
            }
            BindEdit();
        }

        // Saves a new blog.  Any exceptions are propagated up to the caller.
        void SaveNewBlog()
        {
            if(
                Config.CreateBlog(txtTitle.Text, txtUsername.Text, txtPassword.Text, txtHost.Text, txtApplication.Text,
                                  Int32.Parse(ddlGroups.SelectedValue)) > 0)
            {
                messagePanel.ShowMessage(Resources.BlogsEditor_BlogCreated);
            }
            else
            {
                messagePanel.ShowError(Resources.Message_UnexpectedError);
            }
        }

        // Saves changes to a blog.  Any exceptions are propagated up to the caller.
        void SaveBlogEdits()
        {
            Blog blog = Repository.GetBlogById(BlogId);

            if(blog == null)
            {
                throw new InvalidOperationException("BlogId not valid");
            }

            blog.Title = txtTitle.Text;
            blog.Host = txtHost.Text;
            blog.Subfolder = txtApplication.Text;
            blog.UserName = txtUsername.Text;
            blog.BlogGroupId = Int32.Parse(ddlGroups.SelectedValue);

            if(txtPassword.Text.Length > 0)
            {
                blog.Password = SecurityHelper.HashPassword(txtPassword.Text);
            }

            try
            {
                Repository.UpdateConfigData(blog);
                messagePanel.ShowMessage(Resources.BlogsEditor_BlogSaved);
            }
            catch(Exception)
            {
                messagePanel.ShowError(Resources.Message_UnexpectedError);
            }
        }

        static bool IsTextBoxEmpty(ITextControl textbox)
        {
            return textbox.Text.Length == 0;
        }

        bool ValidateRequiredField(ITextControl textbox, string fieldName)
        {
            if(IsTextBoxEmpty(textbox))
            {
                messagePanel.ShowError(
                    String.Format(CultureInfo.InvariantCulture, Resources.BlogsEditor_FieldRequired, fieldName) +
                    "<br />", false);
                return false;
            }
            return true;
        }

        bool ValidateFieldLength(ITextControl textbox, string fieldName, int maxLength)
        {
            if(textbox.Text.Length > maxLength)
            {
                messagePanel.ShowError(
                    String.Format(Resources.BlogsEditor_ValueTooLong, fieldName, maxLength) + "<br />", false);
                return false;
            }
            return true;
        }

        protected static string ToggleActiveString(bool active)
        {
            if(active)
            {
                return Resources.Label_Deactivate;
            }
            return Resources.Label_Activate;
        }

        void ToggleActive()
        {
            Blog blog = Repository.GetBlogById(BlogId);
            blog.IsActive = !blog.IsActive;
            try
            {
                Repository.UpdateConfigData(blog);
                if(blog.IsActive)
                {
                    messagePanel.ShowMessage(Resources.BlogsEditor_BlogActivated);
                }
                else
                {
                    messagePanel.ShowMessage(Resources.BlogsEditor_BlogDeactivated);
                }
            }
            catch(BaseBlogConfigurationException e)
            {
                messagePanel.ShowError(e.Message);
            }

            BindList();
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            messagePanel.ShowMessage(Resources.BlogsEditor_UpdateCancelled);
            BindList();
        }

        protected void SetAliasEdit(bool editing)
        {
            tdAliasHost.Visible = editing;
            btnAliasSave.Visible = editing;
            btnAliasCancel.Visible = editing;
            tdAliasApplication.Visible = editing;
            tbAliasActive.Visible = editing;

            tdAliasList.Visible = !editing;
            btnSave.Visible = !editing;
            btnCancel.Visible = !editing;
            txtHost.Enabled = !editing;
            txtPassword.Enabled = !editing;
            txtPasswordConfirm.Enabled = !editing;
            txtApplication.Enabled = !editing;
            txtTitle.Enabled = !editing;
            txtUsername.Enabled = !editing;
            blogAliasListRepeater.Visible = !editing;
        }

        protected void OnAddAliasOnClick(object sender, EventArgs e)
        {
            BindEdit();
            txtAliasApplication.Text = string.Empty;
            txtAliasHost.Text = string.Empty;
            cbAliasActive.Checked = true;
            SetAliasEdit(true);
        }

        protected void btnAliasCancel_Click(object sender, EventArgs e)
        {
            BindEdit();
            AliasId = NullValue.NullInt32;
            SetAliasEdit(false);
        }

        protected void OnItemCommand(object sender, EventArgs e)
        {
            var args = (CommandEventArgs)e;
            BlogAlias alias = Config.GetBlogAlias(Convert.ToInt32(args.CommandArgument));
            if(args.CommandName == "EditAlias")
            {
                AliasId = alias.Id;
                BindEdit();
                SetAliasEdit(true);
                txtAliasHost.Text = alias.Host;
                txtAliasApplication.Text = alias.Subfolder;
                cbAliasActive.Checked = alias.IsActive;

                Config.UpdateBlogAlias(alias);
            }

            if(args.CommandName == "DeleteAlias")
            {
                AliasId = NullValue.NullInt32;
                Config.DeleteBlogAlias(alias);
                BindEdit();
                SetAliasEdit(false);
            }
        }

        protected void btnAliasSave_Click(object sender, EventArgs e)
        {
            var alias = new BlogAlias();
            if(AliasId != NullValue.NullInt32)
            {
                alias.Id = AliasId;
            }

            alias.Host = txtAliasHost.Text;
            alias.Subfolder = txtAliasApplication.Text;
            alias.BlogId = BlogId;
            alias.IsActive = cbAliasActive.Checked;

            if(AliasId == NullValue.NullInt32)
            {
                Config.AddBlogAlias(alias);
            }
            else
            {
                Config.UpdateBlogAlias(alias);
            }

            AliasId = NullValue.NullInt32;
            BindEdit();
            SetAliasEdit(false);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin.UserControls {
    
    
    public partial class BlogsEditor {
        
        /// <summary>
        /// messagePanel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel messagePanel;
        
        /// <summary>
        /// pnlResults control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel pnlResults;
        
        /// <summary>
        /// chkShowInactive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkShowInactive;
        
        /// <summary>
        /// rprBlogsList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprBlogsList;
        
        /// <summary>
        /// lblNoMessages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl lblNoMessages;
        
        /// <summary>
        /// resultsPager control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.PagingControl resultsPager;
        
        /// <summary>
        /// pnlEdit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel pnlEdit;
        
        /// <summary>
        /// blogEditorHelp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip blogEditorHelp;
        
        /// <summary>
        /// Img3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img3;
        
        /// <summary>
        /// Helptooltip1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip Helptooltip1;
        
        /// <summary>
        /// txtTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtTitle;
        
        /// <summary>
        /// hostDomainHelpTip control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip hostDomainHelpTip;
        
        /// <summary>
        /// txtHost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtHost;
        
        /// <summary>
        /// virtualDirectory control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlInputHidden virtualDirectory;
        
        /// <summary>
        /// tdAliasHost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableCell tdAliasHost;
        
        /// <summary>
        /// hdnAliasId control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HiddenField hdnAliasId;
        
        /// <summary>
        /// txtAliasHost control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtAliasHost;
        
        /// <summary>
        /// tdAliasList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableCell tdAliasList;
        
        /// <summary>
        /// blogAliasListRepeater control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater blogAliasListRepeater;
        
        /// <summary>
        /// applicationHelpTip control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip applicationHelpTip;
        
        /// <summary>
        /// txtApplication control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtApplication;
        
        /// <summary>
        /// tdAliasApplication control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableCell tdAliasApplication;
        
        /// <summary>
        /// txtAliasApplication control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtAliasApplication;
        
        /// <summary>
        /// ddlGroups control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.DropDownList ddlGroups;
        
        /// <summary>
        /// tbAliasActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableCell tbAliasActive;
        
        /// <summary>
        /// cbAliasActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox cbAliasActive;
        
        /// <summary>
        /// helpUsername control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip helpUsername;
        
        /// <summary>
        /// txtUsername control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtUsername;
        
        /// <summary>
        /// btnAliasCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAliasCancel;
        
        /// <summary>
        /// btnAliasSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnAliasSave;
        
        /// <summary>
        /// passwordRow control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableRow passwordRow;
        
        /// <summary>
        /// helpPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip helpPassword;
        
        /// <summary>
        /// txtPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtPassword;
        
        /// <summary>
        /// passwordRowConfirm control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlTableRow passwordRowConfirm;
        
        /// <summary>
        /// txtPasswordConfirm control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtPasswordConfirm;
        
        /// <summary>
        /// btnCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnCancel;
        
        /// <summary>
        /// btnSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSave;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Providers;
using Subtext.Web.Properties;

namespace Subtext.Web.HostAdmin.UserControls
{
    /// <summary>
    ///	User control used to create, edit and delete Blog Groups.
    /// </summary>
    public partial class GroupsEditor : UserControl
    {
        const string VSKEY_GROUPID = "VS_GROUPID";

        #region Declared Controls

        protected Button btnAddNewGroup = new Button();

        #endregion

        /// <summary>
        /// Gets or sets the group id.
        /// </summary>
        /// <value></value>
        public int GroupId
        {
            get
            {
                if(ViewState[VSKEY_GROUPID] != null)
                {
                    return (int)ViewState[VSKEY_GROUPID];
                }
                else
                {
                    return NullValue.NullInt32;
                }
            }
            set { ViewState[VSKEY_GROUPID] = value; }
        }

        public bool IsActive { get; set; }

        bool CreatingGroup
        {
            get { return GroupId == NullValue.NullInt32; }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        ///		Required method for Designer support - do not modify
        ///		the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
        }

        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            btnAddNewGroup.Click += btnAddNewGroup_Click;

            btnAddNewGroup.CssClass = "button";
            btnAddNewGroup.Text = Resources.Label_NewBlogGroup;
            ((HostAdminTemplate)Page.Master).AddSidebarControl(btnAddNewGroup);

            if(!IsPostBack)
            {
                chkShowInactive.Checked = false;
            }
            BindList();
        }

        private void BindList()
        {
            pnlResults.Visible = true;
            pnlEdit.Visible = false;

            ICollection<BlogGroup> groups = Config.ListBlogGroups(!chkShowInactive.Checked);

            if(groups.Count > 0)
            {
                rprGroupsList.Visible = true;
                rprGroupsList.DataSource = groups;
                rprGroupsList.DataBind();
                lblNoMessages.Visible = false;
            }
            else
            {
                rprGroupsList.Visible = false;
                lblNoMessages.Visible = true;
            }
        }

        void BindEdit()
        {
            pnlResults.Visible = false;
            pnlEdit.Visible = true;

            BindEditHelp();

            if(!CreatingGroup)
            {
                BlogGroup group = ObjectProvider.Instance().GetBlogGroup(GroupId, false);
                if(group != null)
                {
                    txtTitle.Text = group.Title;
                    txtDescription.Text = group.Description;
                    txtDisplayOrder.Text = group.DisplayOrder.ToString(CultureInfo.InvariantCulture);
                    hfActive.Value = group.IsActive.ToString(CultureInfo.CurrentCulture);
                }
            }
        }

        // Contains the various help strings
        void BindEditHelp()
        {
            blogEditorHelp.HelpText = Resources.GroupsEditor_HelpTip;
        }

        protected void chkShowInactive_CheckedChanged(object sender, EventArgs e)
        {
            BindList();
        }

        private void btnAddNewGroup_Click(object sender, EventArgs e)
        {
            GroupId = NullValue.NullInt32;
            txtTitle.Text = string.Empty;
            txtDescription.Text = string.Empty;
            txtDisplayOrder.Text = string.Empty;
            BindEdit();
        }

        protected void rprGroupsList_ItemCommand(object source, RepeaterCommandEventArgs e)
        {
            switch(e.CommandName.ToLower(CultureInfo.InvariantCulture))
            {
                case "edit":
                    string[] arr = ((string)e.CommandArgument).Split('|');
                    GroupId = Convert.ToInt32(arr[0]);
                    IsActive = Convert.ToBoolean(arr[1]);
                    BindEdit();
                    break;

                case "toggleactive":
                    string[] arr1 = ((string)e.CommandArgument).Split('|');
                    GroupId = Convert.ToInt32(arr1[0]);
                    IsActive = Convert.ToBoolean(arr1[1]);
                    ToggleActive();
                    break;

                case "delete":
                    string[] arr2 = ((string)e.CommandArgument).Split('|');
                    GroupId = Convert.ToInt32(arr2[0]);
                    IsActive = Convert.ToBoolean(arr2[1]);
                    DeleteGroup();
                    break;

                default:
                    break;
            }
        }

        private void DeleteGroup()
        {
            if(ObjectProvider.Instance().DeleteBlogGroup(GroupId))
            {
                BindList();
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            SaveConfig();
        }

        private void SaveConfig()
        {
            try
            {
                if(GroupId != NullValue.NullInt32)
                {
                    SaveGroupEdits();
                }
                else
                {
                    SaveNewGroup();
                }
                BindList();
                return;
            }
            catch(BaseBlogConfigurationException e)
            {
                messagePanel.ShowError(e.Message);
            }
            BindEdit();
        }

        // Saves a new blog group.  Any exceptions are propagated up to the caller.
        void SaveNewGroup()
        {
            int displayOrder;
            if(!Int32.TryParse(txtDisplayOrder.Text, out displayOrder))
            {
                displayOrder = NullValue.NullInt32;
            }

            var blogGroup = new BlogGroup
            {
                Title = txtTitle.Text,
                Description = txtDescription.Text,
                IsActive = true,
                DisplayOrder = displayOrder,
            };

            if(ObjectProvider.Instance().InsertBlogGroup(blogGroup) > 0)
            {
                messagePanel.ShowMessage(Resources.GroupsEditor_BlogGroupCreated);
            }
            else
            {
                messagePanel.ShowError(Resources.Message_UnexpectedError);
            }
        }

        // Saves changes to a blog group.  Any exceptions are propagated up to the caller.
        void SaveGroupEdits()
        {
            int displayOrder;
            if(!Int32.TryParse(txtDisplayOrder.Text, out displayOrder))
            {
                displayOrder = NullValue.NullInt32;
            }

            var blogGroup = new BlogGroup
            {
                Id = GroupId,
                Title = txtTitle.Text,
                Description = txtDescription.Text,
                IsActive = Convert.ToBoolean(hfActive.Value),
                DisplayOrder = displayOrder,
            };


            if(ObjectProvider.Instance().UpdateBlogGroup(blogGroup))
            {
                messagePanel.ShowMessage(Resources.GroupsEditor_BlogGroupSaved);
            }
            else
            {
                messagePanel.ShowError(Resources.Message_UnexpectedError);
            }
        }

        protected static string ToggleActiveString(bool active)
        {
            if(active)
            {
                return Resources.Label_Deactivate;
            }
            else
            {
                return Resources.Label_Activate;
            }
        }

        void ToggleActive()
        {
            try
            {
                BlogGroup group = Config.GetBlogGroup(GroupId, false);
                var blogGroup = new BlogGroup
                {
                    Id = GroupId,
                    Title = txtTitle.Text,
                    Description = txtDescription.Text,
                    IsActive = !IsActive,
                    DisplayOrder = group.DisplayOrder,
                };

                ObjectProvider.Instance().UpdateBlogGroup(blogGroup);
            }
            catch(BaseBlogConfigurationException e)
            {
                messagePanel.ShowError(e.Message);
            }

            BindList();
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            messagePanel.ShowMessage(Resources.GroupsEditor_UpdateCancelled);
            BindList();
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.HostAdmin.UserControls {
    
    
    public partial class GroupsEditor {
        
        /// <summary>
        /// messagePanel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.MessagePanel messagePanel;
        
        /// <summary>
        /// pnlResults control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel pnlResults;
        
        /// <summary>
        /// chkShowInactive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkShowInactive;
        
        /// <summary>
        /// rprGroupsList control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Repeater rprGroupsList;
        
        /// <summary>
        /// lblNoMessages control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl lblNoMessages;
        
        /// <summary>
        /// pnlEdit control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Admin.WebUI.AdvancedPanel pnlEdit;
        
        /// <summary>
        /// blogEditorHelp control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::Subtext.Web.Controls.HelpToolTip blogEditorHelp;
        
        /// <summary>
        /// Img3 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlImage Img3;
        
        /// <summary>
        /// hfActive control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HiddenField hfActive;
        
        /// <summary>
        /// txtTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtTitle;
        
        /// <summary>
        /// RequiredFieldValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator RequiredFieldValidator1;
        
        /// <summary>
        /// txtDisplayOrder control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtDisplayOrder;
        
        /// <summary>
        /// RangeValidator1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RangeValidator RangeValidator1;
        
        /// <summary>
        /// txtDescription control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtDescription;
        
        /// <summary>
        /// btnCancel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnCancel;
        
        /// <summary>
        /// btnSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSave;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Web;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web
{
    /// <summary>
    /// Page used to create an initial configuration for the blog.
    /// </summary>
    /// <remarks>
    /// This page will ONLY be displayed if there are no 
    /// blog configurations within the database.
    /// </remarks>
    public partial class BlogNotConfiguredError : SubtextPage
    {
        protected override void OnLoad(EventArgs e)
        {
            IPagedCollection<Blog> blogs = Repository.GetPagedBlogs(null, 0, 1, ConfigurationFlags.None);

            if(blogs.Count > 0)
            {
                ltlMessage.Text =
                    "<p>"
                    + "Welcome!  The Subtext Blogging Engine has been properly installed, "
                    + "<strong>but the blog you&#8217;ve requested cannot be found</strong>."
                    + "</p>"
                    + "<p>"
                    + "If you are the Host Admin, visit the <a href=\"" +
                    HttpHelper.ExpandTildePath("~/HostAdmin/default.aspx") + "\">Host Admin</a> "
                    + "Tool to view existing blogs and if necessary, correct settings."
                    + "</p>"
                    + "<p>If you are trying to set up an aggregate blog, make sure aggregate blogs are enabled via "
                    +
                    "the Web.config file.  See <a href=\"http://subtextproject.com/Home/Docs/Configuration/ConfiguringAggregateBlogs/tabid/122/Default.aspx\" title=\"Configuring Aggregate Blogs\">this article</a> for more information.</p>";
            }
            else
            {
                ltlMessage.Text =
                    "<p>"
                    + "Welcome!  The Subtext Blogging Engine has been properly installed, "
                    + "but there are currently no blogs created on this system."
                    + "</p>"
                    + "<p>"
                    + "If you are the Host Admin, visit the <a href=\"" +
                    HttpHelper.ExpandTildePath("~/HostAdmin/default.aspx") + "\">Host Admin</a> "
                    + "Tool to view existing blogs and if necessary, correct settings."
                    + "</p>";
            }
            base.OnLoad(e);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    /// <summary>
    /// BlogNotConfiguredError class.
    /// </summary>
    /// <remarks>
    /// Auto-generated class.
    /// </remarks>
    public partial class BlogNotConfiguredError {
        
        /// <summary>
        /// ltlMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ltlMessage;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Infrastructure.Installation;

namespace Subtext.Web.Install
{
    /// <summary>
    /// Page used to create an initial configuration for the blog.
    /// </summary>
    /// <remarks>
    /// This page will ONLY be displayed if there are no 
    /// blog configurations within the database.
    /// </remarks>
    public partial class Default : InstallationBase
    {
        protected override void OnLoad(EventArgs e)
        {
            if(InstallationManager.GetInstallationStatus(VersionInfo.CurrentAssemblyVersion) == InstallationState.Complete)
            {
                Response.Redirect("InstallationComplete.aspx");
            }

            btnInstallClick.Attributes["onclick"] = "this.disabled=true;" + ClientScript.GetPostBackEventReference(btnInstallClick, null);


            litDatabaseName.Text = Config.ConnectionString.Database;
        }

        protected virtual void OnInstallClick(object sender, EventArgs e)
        {
            InstallationManager.Install(VersionInfo.CurrentAssemblyVersion);
            Response.Redirect(NextStepUrl);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Install {
    
    
    public partial class Default {
        
        /// <summary>
        /// litDatabaseName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal litDatabaseName;
        
        /// <summary>
        /// btnInstallClick control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnInstallClick;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Ninject;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.Install
{
    /// <summary>
    /// Summary description for InstallationBase.
    /// </summary>
    public class InstallationBase : SubtextPage
    {
        [Inject]
        public IInstallationManager InstallationManager
        {
            get;
            set;
        }

        static readonly string[] WizardPages =
            {
                "Default.aspx"
                , "Step02_ConfigureHost.aspx"
                , "Step03_CreateBlog.aspx"
            };

        /// <summary>
        /// Gets the next step URL.
        /// </summary>
        /// <value></value>
        public static string NextStepUrl
        {
            get
            {
                for(int i = 0; i < WizardPages.Length; i++)
                {
                    if(IsOnPage(WizardPages[i]) && i < WizardPages.Length - 1)
                    {
                        return WizardPages[i + 1];
                    }
                }
                return "InstallationComplete.aspx";
            }
        }

        /// <summary>
        /// Ons the load.
        /// </summary>
        /// <param name="e">E.</param>
        protected override void OnLoad(EventArgs e)
        {
            InstallationState status = InstallationManager.GetInstallationStatus(VersionInfo.CurrentAssemblyVersion);

            switch(status)
            {
                case InstallationState.NeedsInstallation:
                case InstallationState.NeedsUpgrade:
                    EnsureInstallStep("Default.aspx", "Step02_ConfigureHost.aspx");
                    break;

                default:
                    HostInfo info = HostInfo.LoadHost(true /* suppressException */);

                    if(info == null)
                    {
                        EnsureInstallStep("Step02_ConfigureHost.aspx");
                    }
                    if(info != null && Config.BlogCount == 0)
                    {
                        EnsureInstallStep("Step03_CreateBlog.aspx");
                    }
                    if(info != null && Config.BlogCount > 0)
                    {
                        EnsureInstallStep("InstallationComplete.aspx");
                    }
                    break;
            }

            base.OnLoad(e);
        }

        //Make sure we're on this page.
        void EnsureInstallStep(string page)
        {
            EnsureInstallStep(page, "");
        }

        void EnsureInstallStep(params string[] pages)
        {
            if(pages.Length == 0)
            {
                return;
            }

            foreach(string page in pages)
            {
                if(!string.IsNullOrEmpty(page))
                {
                    if(IsOnPage(page))
                    {
                        return;
                    }
                }
            }

            Response.Redirect(pages[0], true);
        }

        static bool IsOnPage(string page)
        {
            return HttpContext.Current.Request.Path.IndexOf(page, StringComparison.InvariantCultureIgnoreCase) >= 0;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Configuration;

namespace Subtext.Web.Install
{
    /// <summary>
    /// Summary description for InstallationComplete.
    /// </summary>
    public partial class InstallationComplete : InstallationBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            InstallationManager.ResetInstallationStatusCache();

            if(paraBlogLink != null)
            {
                paraBlogLink.Visible = false;
            }
            if(paraBlogAdminLink != null)
            {
                paraBlogAdminLink.Visible = false;
            }
            if(paraBlogmlImport != null)
            {
                paraBlogmlImport.Visible = false;
            }

            if(Config.CurrentBlog != null)
            {
                if(lnkBlog != null && paraBlogLink != null)
                {
                    paraBlogLink.Visible = true;
                    lnkBlog.HRef = Url.BlogUrl();
                }

                if(lnkBlogAdmin != null && paraBlogAdminLink != null)
                {
                    paraBlogAdminLink.Visible = true;
                    lnkBlogAdmin.HRef = AdminUrl.Home();
                }

                if(lnkBlogMl != null && paraBlogmlImport != null)
                {
                    paraBlogmlImport.Visible = true;
                    lnkBlogMl.HRef = AdminUrl.ImportExport();
                }
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Install {
    
    
    public partial class InstallationComplete {
        
        /// <summary>
        /// paraBlogLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl paraBlogLink;
        
        /// <summary>
        /// lnkBlog control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkBlog;
        
        /// <summary>
        /// paraBlogAdminLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl paraBlogAdminLink;
        
        /// <summary>
        /// lnkBlogAdmin control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkBlogAdmin;
        
        /// <summary>
        /// lnkHostAdmin control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkHostAdmin;
        
        /// <summary>
        /// paraBlogmlImport control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl paraBlogmlImport;
        
        /// <summary>
        /// lnkBlogMl control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkBlogMl;
    }
}
using System;
using System.Web.UI;

namespace Subtext.Web.Install
{
    public partial class InstallTemplate : MasterPage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Install {
    
    
    public partial class InstallTemplate {
        
        /// <summary>
        /// helpTipCss control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink helpTipCss;
        
        /// <summary>
        /// formsStyle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink formsStyle;
        
        /// <summary>
        /// installStyle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink installStyle;
        
        /// <summary>
        /// installFavicon control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink installFavicon;
        
        /// <summary>
        /// frmMain control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm frmMain;
        
        /// <summary>
        /// Content control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder Content;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;

namespace Subtext.Web.Install
{
    /// <summary>
    /// Page used to create an initial configuration for the blog.
    /// </summary>
    /// <remarks>
    /// This page will ONLY be displayed if there are no 
    /// blog configurations within the database.
    /// </remarks>
    public partial class Step02_ConfigureHost : InstallationBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            //We need to make sure that the form is ONLY displayed 
            //if there really is no Host record.
            hostForm.Visible = true;
            if(Config.BlogCount == 0)
            {
                ltlMessage.Text =
                    "<p>"
                    + "At this point, you may <strong>remove the database owner rights</strong> (dbo) from "
                    + "the database user account used to connect to the database.</p>";
            }
            else
            {
                ltlMessage.Text =
                    "<p>"
                    + "Welcome!  It appears that you have existing blogs, but no Host Admin account set up. "
                    + "We can remedy that situation quickly."
                    + "</p>"
                    + "<p>"
                    + "Just specify a username and password "
                    + "for the special Host Administrator account. "
                    + "This account can create blogs in this system. "
                    + "</p>";
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                string userName = txtUserName.Text;
                string password = txtPassword.Text;
                string email = txtEmail.Text;

                // Create the HostInfo record.
                if(HostInfo.CreateHost(userName, password, email))
                {
                    if(Config.BlogCount == 0)
                    {
                        //Changed the following method to public so all authentication tickets are handled by the same code.
                        SubtextContext.HttpContext.SetAuthenticationTicket(Blog, "HostAdmin", false, "HostAdmin");
                        string queryString = !String.IsNullOrEmpty(txtEmail.Text)
                                                 ? "?email=" + HttpUtility.UrlEncode(txtEmail.Text)
                                                 : string.Empty;
                        Response.Redirect(NextStepUrl + queryString);
                    }
                    else
                    {
                        InstallationManager.ResetInstallationStatusCache();
                        Response.Redirect("InstallationComplete.aspx");
                    }
                }
                else
                {
                    const string errorMessage = "I'm sorry, but we had a problem creating your initial "
                                                +
                                                "configuration. Please <a href=\"http://code.google.com/p/subtext/issues/\" title=\"Subtext at Google Code\">report "
                                                + "this issue</a> to the Subtext team.";

                    throw new InvalidOperationException(errorMessage);
                }
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Install {
    
    
    public partial class Step02_ConfigureHost {
        
        /// <summary>
        /// ltlMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal ltlMessage;
        
        /// <summary>
        /// hostForm control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl hostForm;
        
        /// <summary>
        /// vldHostAdminSummary control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ValidationSummary vldHostAdminSummary;
        
        /// <summary>
        /// txtUserName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtUserName;
        
        /// <summary>
        /// vldHostUsernameRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldHostUsernameRequired;
        
        /// <summary>
        /// txtEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtEmail;
        
        /// <summary>
        /// vldHostEmailRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldHostEmailRequired;
        
        /// <summary>
        /// vldHostEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RegularExpressionValidator vldHostEmail;
        
        /// <summary>
        /// txtPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtPassword;
        
        /// <summary>
        /// vldHostAdminPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldHostAdminPassword;
        
        /// <summary>
        /// txtConfirmPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox txtConfirmPassword;
        
        /// <summary>
        /// vldHostComparePassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator vldHostComparePassword;
        
        /// <summary>
        /// vldHostPasswordsMatch control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CompareValidator vldHostPasswordsMatch;
        
        /// <summary>
        /// btnSave control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSave;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Ninject;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;

namespace Subtext.Web.Install
{
    /// <summary>
    /// Page used to create an initial configuration for the blog.
    /// </summary>
    /// <remarks>
    /// This page will ONLY be displayed if there are no 
    /// blog configurations within the database.
    /// </remarks>
    public partial class Step03_CreateBlog : InstallationBase
    {
        [Inject]
        public IEntryPublisher EntryPublisher
        {
            get; 
            set;
        }

        protected override void OnLoad(EventArgs e)
        {
            btnQuickCreate.Attributes["onclick"] = "this.disabled=true;"
                                                   +
                                                   ClientScript.GetPostBackEventReference(btnQuickCreate, "");
            base.OnLoad(e);
        }

        protected void btnQuickCreate_Click(object sender, EventArgs e)
        {
            var hostInfo = HostInfo.Instance;

            // Create the blog_config record using default values 
            // and the specified user info

            //Since the password is stored as a hash, let's not hash it again.
            const bool passwordAlreadyHashed = true;
            int blogId = Config.CreateBlog("TEMPORARY BLOG NAME", hostInfo.HostUserName, hostInfo.Password,
                                           Request.Url.Host, string.Empty, passwordAlreadyHashed);
            if(blogId > -1)
            {
                var blog = Repository.GetBlogById(blogId);
                
                BlogRequest.Current.Blog = blog;
                // Need to refresh the context now that we have a blog.
                SubtextContext = Bootstrapper.ServiceLocator.GetService<ISubtextContext>();
                if(!String.IsNullOrEmpty(hostInfo.Email))
                {
                    blog.Email = hostInfo.Email;
                    Repository.UpdateConfigData(blog);
                }
                InstallationManager.CreateWelcomeContent(SubtextContext, EntryPublisher, Blog);
                

                //We probably should have creating the blog authenticate the user 
                //automatically so this redirect doesn't require a login.
                InstallationManager.ResetInstallationStatusCache();
                Response.Redirect(Url.BlogUrl());
            }
            else
            {
                const string errorMessage = "I'm sorry, but we had a problem creating your initial "
                                            +
                                            "configuration. Please <a href=\"http://code.google.com/p/subtext/issues/\" title=\"Subtext at Google Code\">report "
                                            + "this issue</a> to the Subtext team.";

                throw new InvalidOperationException(errorMessage);
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Install {
    
    
    public partial class Step03_CreateBlog {
        
        /// <summary>
        /// hostAdminlink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink hostAdminlink;
        
        /// <summary>
        /// btnQuickCreate control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnQuickCreate;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using DotNetOpenAuth.OpenId.RelyingParty;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Framework.Security;
using Subtext.Framework.Text;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.Properties;

namespace Subtext.Web.Pages
{
    /// <summary>
    /// Summary description for login.
    /// </summary>
    public partial class login : SubtextPage
    {
        private readonly static ILog Log = new Log();
        private static readonly string LoginFailedMessage = Resources.Login_Failed + "<br />";

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(!IsPostBack)
            {
                HttpCookie cookie = Request.Cookies["__OpenIdUrl__"];
                if(cookie != null)
                {
                    btnOpenIdLogin.Text = cookie.Value;
                }
            }
        }

        protected void btnLogin_Click(object sender, EventArgs e)
        {
            string returnUrl = Request.QueryString["ReturnURL"];
            if(Blog == null ||
               (returnUrl != null && returnUrl.Contains("HostAdmin", StringComparison.OrdinalIgnoreCase)))
            {
                if(!AuthenticateHostAdmin())
                {
                    Log.Warn("HostAdmin login failure for " + tbUserName.Text);
                    Message.Text = LoginFailedMessage;
                    return;
                }
                ReturnToUrl("~/HostAdmin/Default.aspx");
                return;
            }
            if(SubtextContext.HttpContext.Authenticate(Blog, tbUserName.Text, tbPassword.Text, chkRememberMe.Checked))
            {
                ReturnToUrl(AdminUrl.Home());
                return;
            }
            Log.Warn("Admin login failure for " + tbUserName.Text);
            Message.Text = LoginFailedMessage;
        }

        protected void btnOpenIdLogin_LoggingIn(object sender, OpenIdEventArgs e)
        {
            if(btnOpenIdLogin.RememberMe)
            {
                var openIdCookie = new HttpCookie("__OpenIdUrl__", btnOpenIdLogin.Text) {Expires = DateTime.Now.AddDays(14)};
                Response.Cookies.Add(openIdCookie);
            }
        }

        protected void btnOpenIdLogin_LoggedIn(object sender, OpenIdEventArgs e)
        {
            e.Cancel = true;
            if(e.Response.Status == AuthenticationStatus.Authenticated &&
               SecurityHelper.Authenticate(e.ClaimedIdentifier, btnOpenIdLogin.RememberMe))
            {
                ReturnToUrl(AdminUrl.Home());
            }
            else
            {
                openIdMessage.Text = Resources.Login_AuthenticationFailed;
            }
        }

        private void ReturnToUrl(string defaultReturnUrl)
        {
            if(!string.IsNullOrEmpty(Request.QueryString["ReturnURL"]))
            {
                if(Log.IsDebugEnabled)
                {
                    Log.Debug(string.Format("redirecting to {0}", Request.QueryString["ReturnURL"]));
                }
                Response.Redirect(Request.QueryString["ReturnURL"], false);
                return;
            }
            if(Log.IsDebugEnabled)
            {
                Log.Debug(string.Format("redirecting to {0}", defaultReturnUrl));
            }
            Response.Redirect(defaultReturnUrl, false);
            return;
        }

        private bool AuthenticateHostAdmin()
        {
            return SecurityHelper.AuthenticateHostAdmin(tbUserName.Text, tbPassword.Text, chkRememberMe.Checked);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Pages {
    
    
    public partial class login {
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
        
        /// <summary>
        /// Message control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal Message;
        
        /// <summary>
        /// UserNameLabel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label UserNameLabel;
        
        /// <summary>
        /// tbUserName control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbUserName;
        
        /// <summary>
        /// UserNameRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator UserNameRequired;
        
        /// <summary>
        /// PasswordLabel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label PasswordLabel;
        
        /// <summary>
        /// tbPassword control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox tbPassword;
        
        /// <summary>
        /// PasswordRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator PasswordRequired;
        
        /// <summary>
        /// chkRememberMe control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.CheckBox chkRememberMe;
        
        /// <summary>
        /// btnLogin control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnLogin;
        
        /// <summary>
        /// openIdMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal openIdMessage;
        
        /// <summary>
        /// btnOpenIdLogin control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::DotNetOpenAuth.OpenId.RelyingParty.OpenIdLogin btnOpenIdLogin;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Tracking;
using Subtext.Framework.Web;
using Subtext.Web.UI.Controls;

namespace Subtext.Web
{
    /// <summary>
    /// This class writes out a consolidated rss feed for every blog in the system. 
    /// This is used by hosted solutions that contain an aggregate blog.
    /// </summary>
    public class RSSPage : AggregatePage
    {
        /// <summary>
        /// Returns the "Accept-Encoding" value from the HTTP Request header. 
        /// This is a list of encodings that may be sent to the browser.
        /// </summary>
        /// <remarks>
        /// Specifically we're looking for gzip.
        /// </remarks>
        /// <value></value>
        protected string AcceptEncoding
        {
            get { return Request.Headers["Accept-Encoding"]; }
        }

        protected override void OnLoad(EventArgs e)
        {
            int? groupId = GetGroupIdFromQueryString();

            var hostInfo = HostInfo.Instance;

            if(hostInfo.AggregateBlog == null)
            {
                HttpHelper.SetFileNotFoundResponse();
                return;
            }

            ICollection<Entry> entries = Repository.GetRecentEntries(
                hostInfo.AggregateBlog.Host, groupId, 25);

            //TODO: Use our other feed generation code.
            if(entries != null && entries.Count > 0)
            {
                string rssXml = GetRSS(entries, Request.ApplicationPath);
                Response.ContentEncoding = Encoding.UTF8;
                Response.ContentType = "text/xml";
                Response.Write(rssXml);
            }
            base.OnLoad(e);
        }

        private string GetRSS(IEnumerable<Entry> entries, string appPath)
        {
            if(!appPath.EndsWith("/"))
            {
                appPath += "/";
            }

            var sw = new StringWriter();
            var writer = new XmlTextWriter(sw);

            //RSS ROOT
            writer.WriteStartElement("rss");
            writer.WriteAttributeString("version", "2.0");
            writer.WriteAttributeString("xmlns:dc", "http://purl.org/dc/elements/1.1/");
            writer.WriteAttributeString("xmlns:trackback", "http://madskills.com/public/xml/rss/module/trackback/");
            writer.WriteAttributeString("xmlns:wfw", "http://wellformedweb.org/CommentAPI/");
            writer.WriteAttributeString("xmlns:slash", "http://purl.org/rss/1.0/modules/slash/");

            //Channel
            writer.WriteStartElement("channel");
            //Channel Description
            writer.WriteElementString("title", ConfigurationManager.AppSettings["AggregateTitle"]);
            writer.WriteElementString("link", Context.Request.Url.ToString());
            writer.WriteElementString("description", ConfigurationManager.AppSettings["AggregateDescription"]);
            writer.WriteElementString("generator", VersionInfo.VersionDisplayText);

            string baseUrl = "http://{0}" + appPath + "{1}/";

            bool useAggBugs = Config.Settings.Tracking.EnableAggBugs;

            foreach(Entry entry in entries)
            {
                writer.WriteStartElement("item");
                writer.WriteElementString("title", entry.Title);

                string baselink = string.Format(baseUrl, entry.Blog.Host, entry.Blog.Subfolder);
                string link = string.Format(CultureInfo.InvariantCulture, baselink + "archive/{0:yyyy/MM/dd}/{1}.aspx",
                                            entry.DateCreated, entry.EntryName);
                writer.WriteElementString("link", link);

                DateTime entryTime = entry.DateCreated;

                writer.WriteElementString("pubDate", entry.Blog.TimeZone.ToUtc(entryTime).ToString("r"));
                writer.WriteStartElement("guid");
                writer.WriteAttributeString("isPermaLink", "true");
                writer.WriteString(link);
                writer.WriteEndElement();

                writer.WriteElementString("wfw:comment", string.Format(baselink + "comments/{0}.aspx", entry.Id));
                writer.WriteElementString("wfw:commentRss",
                                          string.Format(baselink + "comments/commentRss/{0}.aspx", entry.Id));
                writer.WriteElementString("comments", link + "#comment");
                writer.WriteElementString("slash:comments", entry.FeedBackCount.ToString(CultureInfo.InvariantCulture));
                writer.WriteElementString("trackback:ping",
                                          string.Format(baselink + "services/trackbacks/{0}.aspx", entry.Id));


                writer.WriteStartElement("source");
                writer.WriteAttributeString("url", baselink + "rss.aspx");
                writer.WriteString(entry.Blog.Title);
                writer.WriteEndElement();

                string aggText = useAggBugs
                                     ? TrackingUrls.AggBugImage(string.Format(baselink + "aggbug/{0}.aspx", entry.Id))
                                     : string.Empty;

                writer.WriteElementString("description",
                                          string.Format(CultureInfo.InvariantCulture, "{0}{1}", entry.Description,
                                                        aggText));
                writer.WriteElementString("dc:creator", entry.Author);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();

            writer.WriteEndElement();
            writer.Flush();
            writer.Close();
            sw.Close();
            return sw.ToString();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Web.UI.WebControls;
using FreeTextBoxControls;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.Admin
{
    /// <summary>
    /// Implements the FreeTextBox image gallery.
    /// </summary>
    public class ftb_imagegallery : SubtextPage
    {
        protected PlaceHolder errorMsg;
        protected Label folderName;
        protected ImageGallery imageGallery;

        protected override void OnLoad(EventArgs e)
        {
            string imageDirectoryPath = Url.ImageDirectoryPath(Blog);
            try
            {
                if(!Directory.Exists(imageDirectoryPath))
                {
                    Directory.CreateDirectory(imageDirectoryPath);
                }
            }
            catch(Exception)
            {
                imageGallery.Visible = false;
                errorMsg.Visible = true;
                folderName.Text = imageDirectoryPath;
            }

            //TODO: Fix this up....
            /*
			string currentFolder = imageGallery.CurrentImagesFolder;
	
			// modify the directories allowed
			if (currentFolder == "~/images") 
			{

				// these are the default directories FTB:ImageGallery will find
				string[] defaultDirectories = System.IO.Directory.GetDirectories(Server.MapPath(currentFolder),"*");
		
				// user defined custom directories
				string[] customDirectories = new string[] {"folder1","folder2"};
		
				// the gallery will use these images in this instance
				imageGallery.CurrentDirectories = customDirectories;
			}
	
	
			// modify the images allowed
			if (currentFolder == "~/images") 
			{

				System.IO.DirectoryInfo directoryInfo = new System.IO.DirectoryInfo(Server.MapPath(currentFolder));

				// these are the default images FTB:ImageGallery will find
				System.IO.FileInfo[] defaultImages = directoryInfo.GetFiles("*");
		
				// user defined custom images (here, we're just allowing the first two)
				System.IO.FileInfo[] customImages = new System.IO.FileInfo[2] {defaultImages[0], defaultImages[1]};
		
				// the gallery will use these images in this instance
				imageGallery.CurrentImages = customImages;
			}	
			*/
            base.OnLoad(e);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Reflection;
using System.Resources;
using System.Web.UI;
using System.Web.UI.WebControls;
using FreeTextBoxControls;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Web;

namespace Subtext.Web.Providers.BlogEntryEditor.FTB
{
    /// <summary>
    /// Summary description for FtbRichTextEditor.
    /// </summary>
    public class FtbBlogEntryEditorProvider : BlogEntryEditorProvider
    {
        private static readonly ResourceManager Rm =
            new ResourceManager("Subtext.Web.aspx.Providers.BlogEntryEditor.FTB.resources.ErrorMessages",
                                Assembly.GetExecutingAssembly());

        bool _formatHtmlTagsToXhtml;
        FreeTextBox _ftbCtl; //There's a good reason to do this early.
        bool _removeServerNamefromUrls;
        string _toolbarlayout = string.Empty;
        string _webFormFolder = string.Empty;

        public override Control RichTextEditorControl
        {
            get { return _ftbCtl; }
        }

        public override String Text
        {
            get { return _ftbCtl.Text; }
            set { _ftbCtl.Text = value; }
        }

        public override String Xhtml
        {
            get { return _ftbCtl.Xhtml; }
        }

        public override void Initialize(string name, NameValueCollection configValue)
        {
            if(name == null)
            {
                throw new ArgumentNullException("name", Rm.GetString("nameNeeded"));
            }

            if(configValue == null)
            {
                throw new ArgumentNullException("configValue", Rm.GetString("configNeeded"));
            }

            if(configValue["WebFormFolder"] != null)
            {
                _webFormFolder = configValue["WebFormFolder"];
            }
            else
            {
                throw new InvalidOperationException(Rm.GetString("WebFormFolderNeeded"));
            }

            if(configValue["toolbarlayout"] != null)
            {
                _toolbarlayout = configValue["toolbarlayout"];
            }
            if(configValue["FormatHtmlTagsToXhtml"] != null)
            {
                _formatHtmlTagsToXhtml = Boolean.Parse(configValue["FormatHtmlTagsToXhtml"]);
            }
            if(configValue["RemoveServerNamefromUrls"] != null)
            {
                _removeServerNamefromUrls = Boolean.Parse(configValue["RemoveServerNamefromUrls"]);
            }

            base.Initialize(name, configValue);
        }

        public override void InitializeControl(object context)
        {
            _ftbCtl = new FreeTextBox {ID = ControlId};

            if(Width != Unit.Empty)
            {
                _ftbCtl.Width = Width;
            }

            if(Height != Unit.Empty)
            {
                _ftbCtl.Height = Height;
            }

            if(_toolbarlayout != null && _toolbarlayout.Trim().Length != 0)
            {
                _ftbCtl.ToolbarLayout = _toolbarlayout;
            }
            _ftbCtl.FormatHtmlTagsToXhtml = _formatHtmlTagsToXhtml;
            _ftbCtl.RemoveServerNameFromUrls = _removeServerNamefromUrls;

            if(!string.IsNullOrEmpty(_webFormFolder))
            {
                _ftbCtl.ImageGalleryUrl =
                    HttpHelper.ExpandTildePath(_webFormFolder + "ftb.imagegallery.aspx?rif={0}&cif={0}");
            }
            var subtextContext = context as ISubtextContext;
            string blogImageRootPath = subtextContext.UrlHelper.ImageDirectoryUrl(subtextContext.Blog);
            _ftbCtl.ImageGalleryPath = blogImageRootPath;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Reflection;
using System.Resources;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Providers;

namespace Subtext.Web.Providers.BlogEntryEditor.PlainText
{
    /// <summary>
    /// Summary description for PlainTextRichTextEditorProvider.
    /// </summary>
    public class PlainTextBlogEntryEditorProvider : BlogEntryEditorProvider
    {
        private static ResourceManager rm =
            new ResourceManager("Subtext.Web.aspx.Providers.BlogEntryEditor.PlainText.resources.ErrorMessages",
                                Assembly.GetExecutingAssembly());

        int _cols;
        string _cssClass;
        int _rows;
        TextBox _txtCtl;

        public override Control RichTextEditorControl
        {
            get { return _txtCtl; }
        }

        public override String Text
        {
            get { return _txtCtl.Text; }
            set { _txtCtl.Text = value; }
        }

        public override String Xhtml
        {
            get { return _txtCtl.Text; }
        }

        public override void Initialize(string name, NameValueCollection configValue)
        {
            if(name == null)
            {
                throw new ArgumentNullException("name", rm.GetString("nameNeeded"));
            }
            if(configValue == null)
            {
                throw new ArgumentNullException("configValue", rm.GetString("configNeeded"));
            }
            if(configValue["rows"] != null)
            {
                _rows = Convert.ToInt32(configValue["rows"]);
            }
            if(configValue["cols"] != null)
            {
                _cols = Convert.ToInt32(configValue["cols"]);
            }
            if(configValue["cssClass"] != null)
            {
                _cssClass = configValue["cssClass"];
            }

            base.Initialize(name, configValue);
        }

        public override void InitializeControl(object context)
        {
            _txtCtl = new TextBox();
            _txtCtl.ID = ControlId;
            if(_cssClass != null && _cssClass.Trim().Length != 0)
            {
                _txtCtl.CssClass = _cssClass;
            }

            if(Width != Unit.Empty)
            {
                _txtCtl.Width = Width;
            }
            if(Height != Unit.Empty)
            {
                _txtCtl.Height = Height;
            }
            _txtCtl.TextMode = TextBoxMode.MultiLine;
            _txtCtl.Rows = _rows;
            _txtCtl.Columns = _cols;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web
{
    /// <summary>
    /// Displays the blog not active message.
    /// </summary>
    public partial class BlogNotActive : SubtextPage
    {
        protected override void OnLoad(EventArgs e)
        {
            if(!Blog.IsActive)
            {
                plcInactiveBlogMessage.Visible = true;
                plcNothingToSeeHere.Visible = false;
            }
            else
            {
                lnkBlog.HRef = Url.BlogUrl();
            }
            base.OnLoad(e);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    public partial class BlogNotActive {
        
        /// <summary>
        /// plcInactiveBlogMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plcInactiveBlogMessage;
        
        /// <summary>
        /// hostAdminLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor hostAdminLink;
        
        /// <summary>
        /// plcNothingToSeeHere control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plcNothingToSeeHere;
        
        /// <summary>
        /// lnkBlog control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlAnchor lnkBlog;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI;
using Subtext.Framework.Security;

namespace Subtext.Web
{
    /// <summary>
    /// This page presents useful information to users connecting 
    /// to the blog via "localhost".  In otherwords, on a local 
    /// installation.
    /// </summary>
    public partial class CheckYourConnectionString : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // Remote users do not get the extra information.
            if(SecurityHelper.UserIsConnectingLocally)
            {
                plcDiagnosticInfo.Visible = true;

                Exception exception = Server.GetLastError();
                Exception baseException = null;
                if(exception != null)
                {
                    baseException = exception.GetBaseException();
                }

                if(baseException != null)
                {
                    lblErrorMessage.Text = baseException.Message;
                    lblStackTrace.Text = baseException.StackTrace;
                }
                else
                {
                    lblErrorMessage.Text = "Nothing to report. There was no error.";
                }
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    /// <summary>
    /// CheckYourConnectionString class.
    /// </summary>
    /// <remarks>
    /// Auto-generated class.
    /// </remarks>
    public partial class CheckYourConnectionString {
        
        /// <summary>
        /// plcDiagnosticInfo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plcDiagnosticInfo;
        
        /// <summary>
        /// lblErrorMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblErrorMessage;
        
        /// <summary>
        /// lblStackTrace control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStackTrace;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI;
using Subtext.Framework.Security;

namespace Subtext.Web
{
    /// <summary>
    /// This page presents useful information to users connecting 
    /// to the blog via "localhost".  In otherwords, on a local 
    /// installation.
    /// </summary>
    public partial class DatabaseLoginFailed : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            // Remote users do not get the extra information.
            if(SecurityHelper.UserIsConnectingLocally)
            {
                plcDiagnosticInfo.Visible = true;

                Exception exception = Server.GetLastError();
                Exception baseException = null;
                if(exception != null)
                {
                    baseException = exception.GetBaseException();
                }

                if(baseException != null)
                {
                    lblErrorMessage.Text = baseException.Message;
                    lblStackTrace.Text = baseException.StackTrace;
                }
                else
                {
                    lblErrorMessage.Text = "Nothing to report. There was no error.";
                }
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
        }

        #endregion
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    
    /// <summary>
    /// DatabaseLoginFailed class.
    /// </summary>
    /// <remarks>
    /// Auto-generated class.
    /// </remarks>
    public partial class DatabaseLoginFailed {
        
        /// <summary>
        /// plcDiagnosticInfo control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder plcDiagnosticInfo;
        
        /// <summary>
        /// lblErrorMessage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblErrorMessage;
        
        /// <summary>
        /// lblStackTrace control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblStackTrace;
    }
}
using System;
using System.Collections.ObjectModel;
using System.Web.UI;

namespace Subtext.Web.pages.SystemMessages
{
    public partial class DeprecatedPhysicalPaths : Page
    {
        public bool IsAdminOrHostAdmin
        {
            get { return Page.User != null && (Page.User.IsInRole("Admins") || Page.User.IsInRole("HostAdmins")); }
        }

        public ReadOnlyCollection<string> DeprecatedPaths { get; private set; }

        protected override void OnLoad(EventArgs e)
        {
            DeprecatedPaths = (Context.ApplicationInstance as SubtextApplication).DeprecatedPhysicalPaths;

            base.OnLoad(e);
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.pages.SystemMessages {
    
    
    public partial class DeprecatedPhysicalPaths {
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Net.Mail;
using System.Text;
using System.Web;
using log4net;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Logging;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.Pages
{
    public partial class Error : SubtextPage
    {
        private readonly static ILog log = new Log();

        ///<summary>
        ///Raises the <see cref="E:System.Web.UI.Control.Init"></see> event to initialize the page.
        ///</summary>
        ///<param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        protected override void OnInit(EventArgs e)
        {
            Response.Clear();
            if(!IsPostBack)
            {
                Response.TrySkipIisCustomErrors = true;
                Response.StatusCode = 500;
                Response.StatusDescription = "500 Internal Server Error";

                try
                {
                    if(SubtextContext.Blog != null)
                    {
                        HomeLink.NavigateUrl = Url.BlogUrl();
                    }
                }
                catch
                {
                    HomeLink.Visible = false;
                }

                Exception exception = Server.GetLastError();
                if(exception == null || exception is HttpUnhandledException)
                {
                    if(exception == null || exception.InnerException == null)
                    {
                        // There is no exception. User probably browsed here.
                        ErrorMessageLabel.Text = "No error message available.";
                        return;
                    }
                    exception = exception.InnerException;
                }

                var exceptionMsgs = new StringBuilder();

                if(exception is FileNotFoundException)
                {
                    exceptionMsgs.Append("<p>The resource you requested could not be found.</p>");
                }
                else if(exception is SmtpException)
                {
                    log.Error("Exception handled by the Error page.", exception);
                    exceptionMsgs.Append("<p>Could not send email. Could be an issue with the mail server settings.</p>");
                }
                else if(exception is BlogInactiveException)
                {
                    log.Info("Blog Inactive Exception", exception);
                    exceptionMsgs.AppendFormat("<p>{0}</p>", exception.Message);
                }
                else
                {
                    log.Error("Exception handled by the Error page.", exception);
                    exceptionMsgs.AppendFormat("<p>{0}</p>", exception.Message);
                }

                Server.ClearError();
                ErrorMessageLabel.Text = exceptionMsgs.ToString();

                base.OnInit(e);
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Pages {
    
    
    /// <summary>
    /// Error class.
    /// </summary>
    /// <remarks>
    /// Auto-generated class.
    /// </remarks>
    public partial class Error {
        
        /// <summary>
        /// ErrorMessageLabel control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label ErrorMessageLabel;
        
        /// <summary>
        /// HomeLink control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.HyperLink HomeLink;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.UI;
using Subtext.Framework.Web;

namespace Subtext.Web.SystemMessages
{
    /// <summary>
    /// Displays a file not found message to the user.
    /// </summary>
    public partial class FileNotFound : Page
    {
        protected override void OnLoad(EventArgs e)
        {
            var httpContext = new HttpContextWrapper(HttpContext.Current);
            httpContext.HandleFileNotFound(HttpRuntime.UsingIntegratedPipeline);

            base.OnLoad(e);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.SystemMessages {
    
    public partial class FileNotFound {
    }
}
using System.Web.UI;

namespace Subtext.Web.SystemMessages
{
    public partial class Site1 : MasterPage
    {
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.SystemMessages {
    
    
    public partial class Site1 {
        
        /// <summary>
        /// Head1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlHead Head1;
        
        /// <summary>
        /// installStyle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink installStyle;
        
        /// <summary>
        /// installFavicon control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlLink installFavicon;
        
        /// <summary>
        /// frmMain control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm frmMain;
        
        /// <summary>
        /// logoImage control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Image logoImage;
        
        /// <summary>
        /// MPTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MPTitle;
        
        /// <summary>
        /// MPSubTitle control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder MPSubTitle;
        
        /// <summary>
        /// Content control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder Content;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Ninject;
using Subtext.Framework;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web
{
    /// <summary>
    /// Displays the blog not active message.
    /// </summary>
    public partial class UpgradeInProgress : SubtextPage
    {
        [Inject]
        public IInstallationManager InstallationManager
        {
            get; 
            set;
        }

        protected override void OnLoad(EventArgs e)
        {
            InstallationState state = InstallationManager.GetInstallationStatus(VersionInfo.CurrentAssemblyVersion);
            if(state == InstallationState.NeedsUpgrade)
            {
                plcUpgradeInProgressMessage.Visible = true;
                plcNothingToSeeHere.Visible = false;
            }
            else
            {
                plcUpgradeInProgressMessage.Visible = true;
                plcNothingToSeeHere.Visible = false;
                lnkBlog.HRef = Url.BlogUrl();
            }
            base.OnLoad(e);
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web {
    
    public partial class UpgradeInProgress {
        protected System.Web.UI.WebControls.PlaceHolder plcUpgradeInProgressMessage;
        protected System.Web.UI.HtmlControls.HtmlAnchor hostAdminLink;
        protected System.Web.UI.WebControls.PlaceHolder plcNothingToSeeHere;
        protected System.Web.UI.HtmlControls.HtmlAnchor lnkBlog;
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Mvc;
using Subtext.Framework;
using Subtext.Framework.Services.Account;

namespace Subtext.Web.Controllers
{
    public class AccountController : Controller
    {
        public AccountController(ISubtextContext context, IAccountService service)
        {
            SubtextContext = context;
            AccountService = service;
        }

        protected ISubtextContext SubtextContext
        {
            get; 
            set;
        }

        protected IAccountService AccountService
        {
            get;
            set;
        }
        
        public ActionResult Logout()
        {
            AccountService.Logout(SubtextContext);
            return Redirect(SubtextContext.UrlHelper.BlogUrl());
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Mvc;
using Subtext.Framework.Components;
using Subtext.Framework.Services;

namespace Subtext.Web.Controllers
{
    [Authorize(Roles = "Admins")]
    public class CommentController : Controller
    {
        public CommentController(ICommentService commentService)
        {
            CommentService = commentService;
        }

        protected ICommentService CommentService
        {
            get; 
            private set;
        }

        public ActionResult UpdateStatus(int id, FeedbackStatusFlag status)
        {
            var comment = CommentService.Get(id);
            string subject = string.Format("Comment by {0}", comment.Author);
            string predicate = null;
            switch(status)
            {
                case FeedbackStatusFlag.Approved:
                    predicate = "has been approved";
                    break;

                case FeedbackStatusFlag.Deleted:
                    predicate = "has been removed";
                    break;

                case FeedbackStatusFlag.FlaggedAsSpam:
                    predicate = "has been flagged as spam";
                    break;
            }
            CommentService.UpdateStatus(comment, status);
            
            return Json(new {subject, predicate});
        }

        public ActionResult Destroy(int id)
        {
            var feedback = CommentService.Get(id);
            string subject = string.Format("Comment by {0}", feedback.Author);
            const string predicate = "was destroyed (there is no undo)";
            CommentService.Destroy(id);

            return Json(new {subject, predicate});
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.Mvc;
using System.Xml;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.ModelBinders;
using Subtext.Framework.Services;
using HtmlHelper=Subtext.Framework.Text.HtmlHelper;

namespace Subtext.Web.Controllers
{
    public class CommentApiController : Controller
    {
        private static readonly XmlNode Empty = new XmlDocument();

        public CommentApiController(ISubtextContext context, ICommentService commentService)
        {
            SubtextContext = context;
            CommentService = commentService;
        }

        public ICommentService CommentService { get; private set; }

        public ISubtextContext SubtextContext { get; private set; }

        [AcceptVerbs(HttpVerbs.Post)]
        public void Create(int id, [ModelBinder(typeof(XmlModelBinder))] XmlDocument xml)
        {
            if(xml == null)
            {
                throw new ArgumentNullException("xml");
            }
            var comment = new FeedbackItem(FeedbackType.Comment) {CreatedViaCommentApi = true};

            string name = (xml.SelectSingleNode("//item/author") ?? Empty).InnerText;
            if(name.IndexOf("<") != -1)
            {
                name = name.Substring(0, name.IndexOf("<"));
            }
            comment.Author = name.Trim();
            comment.Body = (xml.SelectSingleNode("//item/description") ?? Empty).InnerText;
            comment.Title = (xml.SelectSingleNode("//item/title") ?? Empty).InnerText;
            comment.SourceUrl = HtmlHelper.EnsureUrl((xml.SelectSingleNode("//item/link") ?? Empty).InnerText);
            comment.EntryId = id;
            CommentService.Create(comment, true/*runFilters*/);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Mvc;
using Subtext.ImportExport;
using Subtext.Infrastructure.ActionResults;
using Subtext.Framework;
using Subtext.Framework.Web;

namespace Subtext.Web.Controllers
{
    public class ExportController : Controller
    {
        public ExportController(IBlogMLSource source, Blog blog)
        {
            Source = source;
            Blog = blog;
        }

        public IBlogMLSource Source
        {
            get;
            private set;
        }

        public Blog Blog
        {
            get;
            private set;
        }

        public ActionResult BlogML(bool? embed)
        {
            var writer = new BlogMLWriter(Source, embed.Value);
            return new ExportActionResult(writer, Blog.Title.GetSafeFileName() + "-Export.xml");
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Specialized;
using System.Configuration;
using System.Web.Mvc;
using Subtext.Framework.Services.Identicon;
using Subtext.Identicon;
using Subtext.Infrastructure.ActionResults;

namespace Subtext.Web.Controllers
{
    public class IdenticonController : Controller
    {
        public IdenticonController() : this(null)
        {
        }

        public IdenticonController(NameValueCollection appSettings)
        {
            var settings = appSettings ?? ConfigurationManager.AppSettings;
            int identiconSize;
            Size = int.TryParse(settings["IdenticonSize"], out identiconSize) ? identiconSize : 40;
        }

        public int Size
        {
            get; 
            private set;
        }

        public ActionResult Image(int? code)
        {
            if(code == null)
            {
                code = IdenticonUtil.Code(HttpContext.Request.UserHostAddress);
            }

            string etag = IdenticonUtil.ETag(code.Value, Size);

            if(HttpContext != null && HttpContext.Request != null && HttpContext.Request.Headers != null && HttpContext.Request.Headers["If-None-Match"] == etag)
            {
                // browser already has the image cached
                return new NotModifiedResult();
            }
            
            return new IdenticonResult(code.Value, Size, etag);
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Mvc;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using UrlHelper=Subtext.Framework.Routing.UrlHelper;

namespace Subtext.Web.Controllers
{
    public class ManifestController : Controller
    {
        const string ManifestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
<manifest xmlns=""http://schemas.microsoft.com/wlw/manifest/weblog"">
  <options>
    <supportsEmbeds>Yes</supportsEmbeds>
    <supportsEmptyTitles>No</supportsEmptyTitles>
    <supportsSlug>Yes</supportsSlug>
    <supportsExcerpt>Yes</supportsExcerpt>
    <supportsCategories>Yes</supportsCategories>
    <supportsNewCategories>Yes</supportsNewCategories>
    <futurePublishDateWarning>No</futurePublishDateWarning>
    <supportsScripts>No</supportsScripts>
    <supportsPages>Yes</supportsPages>
    <supportsExtendedEntries>Yes</supportsExtendedEntries>
    <supportsTrackbacks>{0}</supportsTrackbacks>
  </options>
  <weblog>
    <homepageLinkText>View your blog</homepageLinkText>
    <adminLinkText>Administer your blog</adminLinkText>
    <adminUrl>
      <![CDATA[
        {1}
    ]]>
    </adminUrl>
    <postEditingUrl>
      <![CDATA[
        {2}
    ]]>
    </postEditingUrl>
  </weblog>
</manifest>";

        public ManifestController(ISubtextContext context)
        {
            SubtextContext = context;
        }

        public ISubtextContext SubtextContext { get; private set; }
        public UrlHelper UrlHelper {
            get
            {
                return SubtextContext.UrlHelper;
            }
        }

        public Blog Blog
        {
            get
            {
                return SubtextContext.Blog;
            }
        }

        public ActionResult Index()
        {
            var adminUrlHelper = new AdminUrlHelper(UrlHelper);
            var adminUrl = adminUrlHelper.Home().ToFullyQualifiedUrl(Blog);
            var postEditingUrl = adminUrlHelper.PostsEdit().ToFullyQualifiedUrl(Blog);
            
            string manifestXml = string.Format(ManifestXml, Blog.TrackbacksEnabled.ToYesNo(), adminUrl, postEditingUrl);

            return Content(manifestXml, "text/xml");
        }
    }
}
using System.Web.Mvc;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Text;
using UrlHelper = Subtext.Framework.Routing.UrlHelper;

namespace Subtext.Web.Controllers
{
    public class OpenSearchController : Controller
    {
        const string ManifestXml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
 <OpenSearchDescription xmlns=""http://a9.com/-/spec/opensearch/1.1/"">
   <ShortName>{0}</ShortName>
   <Description>{1}</Description>
    <Contact>{2}</Contact>
   <Url type=""text/html"" 
        template=""{3}?q={{searchTerms}}""/>
 </OpenSearchDescription>";

        public OpenSearchController(ISubtextContext context)
        {
            SubtextContext = context;
        }

        
        public ISubtextContext SubtextContext { get; private set; }
        
        public UrlHelper UrlHelper {
            get
            {
                return SubtextContext.UrlHelper;
            }
        }

        public Blog Blog
        {
            get
            {
                return SubtextContext.Blog;
            }
        }

        public ActionResult Index()
        {
            var searchUrl = UrlHelper.SearchPageUrl().ToFullyQualifiedUrl(Blog);

            string manifestXml = string.Format(ManifestXml, Blog.Title, Blog.SubTitle, Blog.Email, searchUrl);

            return Content(manifestXml, "application/opensearchdescription+xml");
        }

    }
}
using System;
using System.Web;
using System.Web.Mvc;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services;
using Subtext.Framework.Web;
using Subtext.Infrastructure.ActionResults;

namespace Subtext.Web.Controllers
{
    public class StatisticsController : Controller
    {
        static readonly byte[] AggregatorOnePixelBlankGif =
            Convert.FromBase64String("R0lGODlhAQABAIAAANvf7wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==");

        public StatisticsController(ISubtextContext context, IStatisticsService statisticsService)
        {
            StatisticsService = statisticsService;
            SubtextContext = context;
        }

        public IStatisticsService StatisticsService { get; private set; }

        public ISubtextContext SubtextContext { get; private set; }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult RecordAggregatorView(int id)
        {
            if(CachedVersionIsOkay(SubtextContext.HttpContext.Request))
            {
                return new NotModifiedResult();
            }

            if(id > 0)
            {
                var entryView = new EntryView
                {
                    BlogId = SubtextContext.Blog.Id,
                    EntryId = id,
                    PageViewType = PageViewType.AggView
                };
                StatisticsService.RecordAggregatorView(entryView);
            }

            return new CacheableFileContentResult(AggregatorOnePixelBlankGif, "image/gif", DateTime.Now,
                                                  HttpCacheability.Public);
        }

        private static bool CachedVersionIsOkay(HttpRequestBase request)
        {
            //Get header value
            DateTime dt = HttpHelper.GetIfModifiedSinceDateUtc(request);
            if(dt == NullValue.NullDateTime)
            {
                return false;
            }

            //convert to datetime and add 6 hours. 
            //We don't want to count quick reclicks.
            return dt.AddHours(6) >= DateTime.UtcNow;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.UI.WebControls;
using log4net;
using Subtext.Framework.Logging;
using Subtext.Web.Properties;

namespace Subtext.Web.Controls.Captcha
{
    /// <summary>
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    public abstract class CaptchaBase : BaseValidator
    {
        static readonly SymmetricAlgorithm EncryptionAlgorithm = InitializeEncryptionAlgorithm();
        private readonly static ILog Log = new Log();

        /// <summary>
        /// Gets the name of the hidden form field in which the encrypted answer 
        /// is located.  The answer is sent encrypted to the browser, which must 
        /// send the answer back.
        /// </summary>
        /// <value>The name of the hidden encrypted answer field.</value>
        protected string HiddenEncryptedAnswerFieldName
        {
            get { return ClientID + "_encrypted"; }
        }

        /// <summary>
        /// The input field (possibly hidden) in which the client 
        /// will specify the answer.
        /// </summary>
        protected string AnswerFormFieldName
        {
            get { return ClientID + "_answer"; }
        }

        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
        [DefaultValue(0)]
        [Description("Number of seconds this CAPTCHA is valid after it is generated. Zero means valid forever.")]
        [Category("Captcha")]
        public int CaptchaTimeout { get; set; }

        static SymmetricAlgorithm InitializeEncryptionAlgorithm()
        {
            SymmetricAlgorithm rijaendel = Rijndael.Create();
            //TODO: We should set these values in the db the very first time this code is called and load them from the db every other time.
            rijaendel.GenerateKey();
            rijaendel.GenerateIV();
            return rijaendel;
        }

        /// <summary>
        /// Encrypts the string and returns a base64 encoded encrypted string.
        /// </summary>
        /// <param name="clearText">The clear text.</param>
        /// <returns></returns>
        public static string EncryptString(string clearText)
        {
            byte[] clearTextBytes = Encoding.UTF8.GetBytes(clearText);
            byte[] encrypted = EncryptionAlgorithm.CreateEncryptor().TransformFinalBlock(clearTextBytes, 0,
                                                                                         clearTextBytes.Length);
            return Convert.ToBase64String(encrypted);
        }

        /// <summary>
        /// Decrypts the base64 encrypted string and returns the cleartext.
        /// </summary>
        /// <param name="encryptedEncodedText">The clear text.</param>
        /// <exception type="System.Security.Cryptography.CryptographicException">Thrown the string to be decrypted 
        /// was encrypted using a different encryptor (for example, if we recompile and 
        /// receive an old string).</exception>
        /// <returns></returns>
        public static string DecryptString(string encryptedEncodedText)
        {
            try
            {
                byte[] encryptedBytes = Convert.FromBase64String(encryptedEncodedText);
                byte[] decryptedBytes = EncryptionAlgorithm.CreateDecryptor().TransformFinalBlock(encryptedBytes, 0,
                                                                                                  encryptedBytes.Length);
                return Encoding.UTF8.GetString(decryptedBytes);
            }
            catch(FormatException fe)
            {
                throw new CaptchaExpiredException(
                    String.Format(CultureInfo.InvariantCulture, Resources.CaptchaExpired_EncryptedTextNotValid,
                                  encryptedEncodedText), fe);
            }
            catch(CryptographicException e)
            {
                throw new CaptchaExpiredException(Resources.CaptchaExpired_KeyOutOfSynch, e);
            }
        }

        /// <summary>Checks the properties of the control for valid values.</summary>
        /// <returns>true if the control properties are valid; otherwise, false.</returns>
        protected override bool ControlPropertiesValid()
        {
            if(!String.IsNullOrEmpty(ControlToValidate))
            {
                CheckControlValidationProperty(ControlToValidate, "ControlToValidate");
            }
            return true;
        }

        /// <summary>
        /// Encrypts the answer along with the current datetime.
        /// </summary>
        /// <param name="answer">The answer.</param>
        /// <returns></returns>
        protected virtual string EncryptAnswer(string answer)
        {
            return EncryptString(answer + "|" + DateTime.Now.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture));
        }

        ///<summary>
        ///When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
        ///</summary>
        ///<returns>
        ///true if the value in the input control is valid; otherwise, false.
        ///</returns>
        ///
        protected override bool EvaluateIsValid()
        {
            try
            {
                return ValidateCaptcha();
            }
            catch(CaptchaExpiredException e)
            {
                if(e.InnerException != null)
                {
                    string warning = Resources.Warning_CaptchaExpired;
                    if(HttpContext.Current != null && HttpContext.Current.Request != null)
                    {
                        warning += " User Agent: " + HttpContext.Current.Request.UserAgent;
                    }
                    Log.Warn(warning, e.InnerException);
                }
                ErrorMessage = Resources.Message_FormExpired;
                return false;
            }
        }

        private bool ValidateCaptcha()
        {
            string answer = GetClientSpecifiedAnswer();
            AnswerAndDate answerAndDate = GetEncryptedAnswerFromForm();

            string expectedAnswer = answerAndDate.Answer;
            bool isValid = !String.IsNullOrEmpty(answer)
                           && String.Equals(answer, expectedAnswer, StringComparison.OrdinalIgnoreCase);
            return isValid;
        }

        // Gets the answer from the client, whether entered by 
        // javascript or by the user.
        protected virtual string GetClientSpecifiedAnswer()
        {
            return Page.Request.Form[AnswerFormFieldName];
        }

        /// <summary>
        /// Gets the encrypted answer from form.
        /// </summary>
        /// <returns></returns>
        /// <exception type="CaptchaExpiredException">Thrown when the user takes too long to submit a captcha answer.</exception>
        protected virtual AnswerAndDate GetEncryptedAnswerFromForm()
        {
            string formValue = Page.Request.Form[HiddenEncryptedAnswerFieldName];
            AnswerAndDate answerAndDate = AnswerAndDate.ParseAnswerAndDate(formValue, CaptchaTimeout);
            if(answerAndDate.Expired)
            {
                throw new CaptchaExpiredException(Resources.CaptchaExpired_WaitedTooLong);
            }
            return answerAndDate;
        }
    }

    /// <summary>
    /// Represents the answer and date returned by the 
    /// client.
    /// </summary>
    public struct AnswerAndDate
    {
        public string Answer
        {
            get { return _answer; }
        }
        string _answer;

        public DateTime Date
        {
            get { return _date; }
        }
        DateTime _date;

        public bool Expired
        {
            get { return _expired; }
        }
        bool _expired;

        public static AnswerAndDate ParseAnswerAndDate(string encryptedAnswer, int timeoutInSeconds)
        {
            AnswerAndDate answerAndDate;
            answerAndDate._expired = false;
            answerAndDate._answer = string.Empty;
            answerAndDate._date = DateTime.MinValue;

            if(String.IsNullOrEmpty(encryptedAnswer))
            {
                return answerAndDate;
            }

            string decryptedAnswer = CaptchaBase.DecryptString(encryptedAnswer);
            string[] answerParts = decryptedAnswer.Split('|');
            if(answerParts.Length < 2)
            {
                return answerAndDate;
            }

            answerAndDate._answer = answerParts[0];
            answerAndDate._date = DateTime.ParseExact(answerParts[1], "yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture);

            if(timeoutInSeconds != 0 && (DateTime.Now - answerAndDate._date).TotalSeconds >= timeoutInSeconds)
            {
                throw new CaptchaExpiredException(Resources.CaptchaExpired_WaitedTooLong);
            }

            return answerAndDate;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework.Web;
using Subtext.Web.Properties;

namespace Subtext.Web.Controls.Captcha
{
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    [DefaultProperty("Text")]
    public class CaptchaControl : CaptchaBase, INamingContainer, IPostBackDataHandler
    {
        #region Layout enum

        public enum Layout
        {
            Horizontal,
            Vertical,
            /// <summary>
            /// Indicates that the layout will be handled by external css.
            /// </summary>
            CssBased
        }

        #endregion

        private CaptchaInfo _captcha;
        private Layout _layoutStyle = Layout.Horizontal;
        private const string DefaultText = "Enter the code shown above:";

        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaControl"/> class.
        /// </summary>
        public CaptchaControl()
        {
            LayoutStyle = Layout.CssBased;
            ErrorMessage = Resources.Message_PleaseEnterCorrectWord;
            Display = ValidatorDisplay.Dynamic;
        }

        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
        [DefaultValue("")]
        [Description("Characters used to render CAPTCHA text. A character will be picked randomly from the string.")]
        [Category("Captcha")]
        public string CaptchaChars
        {
            get { return _captcha.TextChars; }
            set { _captcha.TextChars = value; }
        }

        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
        [Description("Font used to render CAPTCHA text. If font name is blankd, a random font will be chosen.")]
        [DefaultValue("")]
        [Category("Captcha")]
        public string CaptchaFont
        {
            get { return _captcha.FontFamily; }
            set { _captcha.FontFamily = value; }
        }

        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
        [Category("Captcha")]
        [Description("Amount of random font warping used on the CAPTCHA text")]
        [DefaultValue(typeof(CaptchaImage.FontWarpFactor), "Low")]
        public CaptchaImage.FontWarpFactor CaptchaFontWarping
        {
            get { return _captcha.WarpFactor; }
            set { _captcha.WarpFactor = value; }
        }

        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
        [Category("Captcha")]
        [Description("Number of CaptchaChars used in the CAPTCHA text")]
        [DefaultValue(5)]
        public int CaptchaLength
        {
            get { return _captcha.TextLength; }
            set { _captcha.TextLength = value; }
        }

        /// <summary>
        /// The text to render.
        /// </summary>
        private string CaptchaText
        {
            get { return _captcha.Text; }
        }

        private static bool IsDesignMode
        {
            get { return (HttpContext.Current == null); }
        }

        [Category("Captcha")]
        [DefaultValue(typeof(Layout), "Horizontal")]
        [Description("Determines if image and input area are displayed horizontally, or vertically.")]
        public Layout LayoutStyle
        {
            get { return _layoutStyle; }
            set { _layoutStyle = value; }
        }

        public bool LoadPostData(string postDataKey, NameValueCollection values)
        {
            return false;
        }

        /// <summary>
        /// When implemented by a class, signals the server control to notify the ASP.NET application 
        /// that the state of the control has changed.
        /// </summary>
        public void RaisePostDataChangedEvent()
        {
            //Do nothing.
        }

        private void GenerateNewCaptcha()
        {
            if(Width.IsEmpty)
            {
                Width = Unit.Pixel(180);
            }
            if(Height.IsEmpty)
            {
                Height = Unit.Pixel(50);
            }
            _captcha.TextLength = CaptchaLength;
        }

        /// <summary>
        /// When overridden in a derived class, this method contains the code to determine 
        /// whether the value in the input control is valid.
        /// </summary>
        /// <returns>
        /// true if the value in the input control is valid; otherwise, false.
        /// </returns>
        protected override bool EvaluateIsValid()
        {
            bool isValid = base.EvaluateIsValid();

            if(isValid)
            {
                //We don't want the CAPTCHA to change if the 
                //user specifies a correct answer but some other 
                //field is not valid.
                _captcha.Text = GetClientSpecifiedAnswer();
            }
            return isValid;
        }

        /// <summary>
        /// Generates the captcha if it hasn't been generated already.
        /// </summary>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        protected override void OnPreRender(EventArgs e)
        {
            // We store the answer encrypted so it can't be tampered with.
            if(!Page.IsPostBack || !IsValid)
            {
                GenerateNewCaptcha();
            }

            base.OnPreRender(e);
        }

        void RenderHiddenInputForEncryptedAnswer(TextWriter writer)
        {
            writer.Write("<input type=\"hidden\" name=\"{0}\" value=\"{1}\" />", HiddenEncryptedAnswerFieldName,
                         EncryptAnswer(CaptchaText));
        }

        protected override void Render(HtmlTextWriter writer)
        {
            RenderHiddenInputForEncryptedAnswer(writer);
            writer.Write("<div id=\"{0}\"", ClientID);
            if(!String.IsNullOrEmpty(CssClass))
            {
                writer.Write(" class=\"{0}\"", CssClass);
            }
            else
            {
                writer.Write(" class=\"captcha\"");
            }
            writer.Write(">");

            string src = HttpHelper.ExpandTildePath("~/images/services/CaptchaImage.ashx");

            writer.Write("<img src=\"{0}", src);
            if(!IsDesignMode)
            {
                writer.Write("?spec={0}", HttpUtility.UrlEncodeUnicode(_captcha.ToEncryptedString()));
            }
            writer.Write("\" border=\"0\"");

            writer.Write(" width=\"{0}\" ", Width.Value);
            writer.Write(" height=\"{0}\" ", Height.Value);
            if(ToolTip.Length > 0)
            {
                writer.Write(" alt='{0}'", ToolTip);
            }
            writer.Write(" />");

            if(DefaultText.Length > 0)
            {
                writer.Write("<label for=\"{0}\">", AnswerFormFieldName);
                writer.Write(DefaultText);
                writer.Write("</label>");
                base.Render(writer);
            }

            writer.Write("<input name=\"{0}\" type=\"text\" size=\"", AnswerFormFieldName);
            writer.Write(_captcha.TextLength.ToString(CultureInfo.InvariantCulture));
            writer.Write("\" maxlength=\"{0}\"", _captcha.TextLength);
            if(AccessKey.Length > 0)
            {
                writer.Write(" accesskey=\"{0}\"", AccessKey);
            }
            if(!Enabled)
            {
                writer.Write(" disabled=\"disabled\"");
            }
            if(TabIndex > 0)
            {
                writer.Write(" tabindex=\"{0}\"", TabIndex);
            }
            if(Page.IsPostBack && IsValid)
            {
                writer.Write(" value=\"{0}\" />", HttpUtility.HtmlEncode(Page.Request.Form[AnswerFormFieldName]));
            }
            else
            {
                writer.Write(" value=\"\" />");
            }

            writer.Write("</div>");
        }
    }

    
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics.CodeAnalysis;

namespace Subtext.Web.Controls.Captcha
{
    /// <summary>
    /// Exception thrown when a captcha image has expired.
    /// </summary>
    /// <remarks>
    /// This exception does not have any custom properties, 
    /// thus it does not implement ISerializable.
    /// </remarks>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    [Serializable]
    public sealed class CaptchaExpiredException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaExpiredException"/> class.
        /// </summary>
        public CaptchaExpiredException()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaExpiredException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        public CaptchaExpiredException(string message) : base(message)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaExpiredException"/> class.
        /// </summary>
        /// <param name="message">The message.</param>
        /// <param name="innerException">The inner exception.</param>
        public CaptchaExpiredException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Globalization;
using Subtext.Web.Properties;

namespace Subtext.Web.Controls.Captcha
{
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    public class CaptchaImage : IDisposable
    {
        #region FontWarpFactor enum

        public enum FontWarpFactor
        {
            None,
            Low,
            Medium,
            High,
            Extreme
        }

        #endregion

        const int MinHeight = 30;
        const int MinWidth = 60;
        private readonly Random random;
        private string fontFamilyName;
        private int height;
        private Bitmap image;
        private int width;

        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaImage"/> class.
        /// </summary>
        public CaptchaImage()
        {
            random = new Random();
            FontWarp = FontWarpFactor.Low;
            Width = 180;
            Height = 50;
        }

        #region Disposable Pattern

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public virtual void Dispose()
        {
            GC.SuppressFinalize(this);
            Dispose(true);
        }

        /// <summary>
        /// Disposes the Captcha image.
        /// </summary>
        /// <param name="disposing">if set to <c>true</c> [disposing].</param>
        public virtual void Dispose(bool disposing)
        {
            if(disposing)
            {
                Image.Dispose();
            }
        }

        /// <summary>
        /// Releases unmanaged resources and performs other cleanup operations before the
        /// <see cref="CaptchaImage"/> is reclaimed by garbage collection.
        /// </summary>
        ~CaptchaImage()
        {
            Dispose(false);
        }

        #endregion

        public string Font
        {
            get { return fontFamilyName; }
            set
            {
                try
                {
                    using(var font1 = new Font(value, 12f))
                    {
                        fontFamilyName = value;
                        font1.Dispose();
                    }
                }
                catch(Exception)
                {
                    fontFamilyName = FontFamily.GenericSerif.Name;
                }
            }
        }

        /// <summary>
        /// Amount of random waping to apply to rendered text.
        /// </summary>
        /// <value>The font warp.</value>
        public FontWarpFactor FontWarp { get; set; }

        /// <summary>
        /// Height of the Captcha image in pixels.
        /// </summary>
        public int Height
        {
            get { return height; }
            set
            {
                if(value <= MinHeight)
                {
                    throw new ArgumentOutOfRangeException("height", value,
                                                          String.Format(CultureInfo.InvariantCulture,
                                                                        Resources.ArgumentOutOfRange_Height, MinHeight));
                }
                height = value;
            }
        }

        /// <summary>
        /// Gets the captcha image to display based on the current property 
        /// values.  Will render the image if it hasn't been rendered yet.
        /// </summary>
        /// <value>The image.</value>
        public Bitmap Image
        {
            get
            {
                if(image == null)
                {
                    image = GenerateImagePrivate();
                }
                return image;
            }
        }

        /// <summary>
        /// Width of the Captcha image in pixels.
        /// </summary>
        public int Width
        {
            get { return width; }
            set
            {
                if(value <= MinWidth)
                {
                    throw new ArgumentOutOfRangeException("width", value,
                                                          String.Format(Resources.ArgumentOutOfRange_Width, MinWidth));
                }
                width = value;
            }
        }

        /// <summary>
        /// Gets or sets the text to render (warped of course).
        /// </summary>
        /// <value>The text.</value>
        public string Text { get; set; }

        /// <summary>
        /// Generates a new Captcha image.
        /// </summary>
        public void GenerateImage()
        {
            image = GenerateImagePrivate();
        }

        private Bitmap GenerateImagePrivate()
        {
            Font font;
            var bitmap = new Bitmap(width, height, PixelFormat.Format32bppArgb);
            using(Graphics graphics = Graphics.FromImage(bitmap))
            {
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                var rectF = new RectangleF(0f, 0f, width, height);
                var rect = new Rectangle(0, 0, width, height);
                var smallConfettiBrush = new HatchBrush(HatchStyle.SmallConfetti, Color.LightGray, Color.White);
                graphics.FillRectangle(smallConfettiBrush, rect);
                float previousWidth = 0f;
                float size = Convert.ToInt32((height * 0.8));
                while(true)
                {
                    font = new Font(fontFamilyName, size, FontStyle.Bold);
                    SizeF textSize = graphics.MeasureString(Text, font);
                    if(textSize.Width <= width)
                    {
                        break;
                    }
                    if(previousWidth > 0f)
                    {
                        int estimatedSize =
                            Convert.ToInt32(((textSize.Width - width) / (previousWidth - textSize.Width)));
                        if(estimatedSize > 0)
                        {
                            size -= estimatedSize;
                        }
                        else
                        {
                            size -= 1f;
                        }
                    }
                    else
                    {
                        size -= 1f;
                    }
                    previousWidth = textSize.Width;
                }
                size += 4f;

                font = new Font(fontFamilyName, size, FontStyle.Bold);
                var format = new StringFormat();
                format.Alignment = StringAlignment.Center;
                format.LineAlignment = StringAlignment.Center;

                var textPath = new GraphicsPath();
                textPath.AddString(Text, font.FontFamily, (int)font.Style, font.Size, rect, format);
                if(FontWarp != FontWarpFactor.None)
                {
                    int warpDivisor = 0;
                    switch(FontWarp)
                    {
                        case FontWarpFactor.Low:
                            warpDivisor = 6;
                            break;

                        case FontWarpFactor.Medium:
                            warpDivisor = 5;
                            break;

                        case FontWarpFactor.High:
                            warpDivisor = 4;
                            break;

                        case FontWarpFactor.Extreme:
                            warpDivisor = 3;
                            break;
                    }
                    int heightRange = Convert.ToInt32(((rect.Height) / ((double)warpDivisor)));
                    int widthRange = Convert.ToInt32(((rect.Width) / ((double)warpDivisor)));
                    PointF point1 = RandomPoint(0, widthRange, 0, heightRange);
                    PointF point2 = RandomPoint(rect.Width - (widthRange - Convert.ToInt32(point1.X)), rect.Width, 0,
                                                heightRange);
                    PointF point3 = RandomPoint(0, widthRange, rect.Height - (heightRange - Convert.ToInt32(point1.Y)),
                                                rect.Height);
                    PointF point4 = RandomPoint(rect.Width - (widthRange - Convert.ToInt32(point3.X)), rect.Width,
                                                rect.Height - (heightRange - Convert.ToInt32(point2.Y)), rect.Height);
                    var points = new[] {point1, point2, point3, point4};
                    var matrix = new Matrix();
                    matrix.Translate(0f, 0f);
                    textPath.Warp(points, rectF, matrix, WarpMode.Perspective, 0f);
                }
                var largeConfettiBrush = new HatchBrush(HatchStyle.LargeConfetti, Color.LightGray, Color.DarkGray);
                graphics.FillPath(largeConfettiBrush, textPath);

                int maxDimension = Math.Max(rect.Width, rect.Height);
                int steps = Convert.ToInt32((((double)(rect.Width * rect.Height)) / 30));
                for(int i = 0; i <= steps; i++)
                {
                    graphics.FillEllipse(largeConfettiBrush, random.Next(rect.Width), random.Next(rect.Height),
                                         random.Next(Convert.ToInt32((((double)maxDimension) / 50))),
                                         random.Next(Convert.ToInt32((((double)maxDimension) / 50))));
                }
                font.Dispose();
                largeConfettiBrush.Dispose();
                graphics.Dispose();
            }
            return bitmap;
        }

        private PointF RandomPoint(int xmin, int xmax, int ymin, int ymax)
        {
            return new PointF(random.Next(xmin, xmax), random.Next(ymin, ymax));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Diagnostics.CodeAnalysis;
using System.Drawing.Imaging;
using System.Web;

namespace Subtext.Web.Controls.Captcha
{
    /// <summary>
    /// Handles a special request for a CAPTCHA image.  The request must 
    /// pass the specs for the image via an encrypted serialized instance 
    /// of <see cref="CaptchaInfo" />.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    public class CaptchaImageHandler : IHttpHandler
    {
        #region IHttpHandler Members

        /// <summary>
        /// Renders the Captcha Image.
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpContext"></see> object that provides 
        /// references to the intrinsic server objects (for example, Request, Response, Session, and Server) 
        /// used to service HTTP requests.</param>
        public void ProcessRequest(HttpContext context)
        {
            HttpApplication application = context.ApplicationInstance;
            string encryptedCaptchaInfo = application.Request.QueryString["spec"];
            CaptchaInfo captcha = CaptchaInfo.FromEncryptedString(encryptedCaptchaInfo);

            string textToRender = captcha.Text;

            if(string.IsNullOrEmpty(textToRender))
            {
                application.Response.StatusCode = 404;
                application.Response.End();
            }
            else
            {
                using(var captchaImage = new CaptchaImage())
                {
                    captchaImage.Width = captcha.Width;
                    captchaImage.Height = captcha.Height;
                    captchaImage.FontWarp = captcha.WarpFactor;
                    captchaImage.Font = captcha.FontFamily;
                    captchaImage.Text = textToRender;
                    captchaImage.Image.Save(application.Context.Response.OutputStream, ImageFormat.Jpeg);
                }
                application.Response.ContentType = "image/jpeg";
                application.Response.StatusCode = 200;
                application.Response.End();
            }
        }


        /// <summary>
        /// Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"></see> instance.
        /// </summary>
        /// <value></value>
        /// <returns>true if the <see cref="T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        public bool IsReusable
        {
            get { return true; }
        }

        #endregion
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Drawing.Text;
using System.Globalization;
using System.Text;

namespace Subtext.Web.Controls.Captcha
{
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    [Serializable]
    public struct CaptchaInfo
    {
        private const string DefaultValidRandomTextChars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";

        private const string GoodFontList =
            "arial; arial black; comic sans ms; courier new; estrangelo edessa; franklin gothic medium; georgia; lucida console; lucida sans unicode; mangal; microsoft sans serif; palatino linotype; sylfaen; tahoma; times new roman; trebuchet ms; verdana;";

        private static readonly Random Random = new Random();
        public DateTime DateGenerated;
        public string FontFamily;
        public int Height;
        private int _randomTextLength;
        private string _text;
        private string _validRandomTextChars;
        public CaptchaImage.FontWarpFactor WarpFactor;
        public int Width;

        /// <summary>
        /// Initializes a new instance of the <see cref="CaptchaInfo"/> class.
        /// </summary>
        /// <param name="text">The text.</param>
        public CaptchaInfo(string text)
        {
            Width = 180;
            Height = 50;
            _randomTextLength = 5;
            WarpFactor = CaptchaImage.FontWarpFactor.Low;
            FontFamily = string.Empty;
            _text = text;
            _validRandomTextChars = DefaultValidRandomTextChars;
            DateGenerated = DateTime.Now;
            FontFamily = RandomFontFamily();
        }

        /// <summary>
        /// A string of valid characters to use in the Captcha text.  
        /// A random character will be selected from this string for 
        /// each character.
        /// </summary>
        public string TextChars
        {
            get { return _validRandomTextChars ?? DefaultValidRandomTextChars; }
            set { _validRandomTextChars = value; }
        }

        /// <summary>
        /// Gets or sets the text to render.
        /// </summary>
        /// <value>The text.</value>
        public string Text
        {
            get
            {
                if(String.IsNullOrEmpty(_text))
                {
                    _text = GenerateRandomText();
                }
                return _text;
            }
            set { _text = value; }
        }

        /// <summary>
        /// Number of characters to use in the CAPTCHA test.
        /// </summary>
        /// <value>The length of the text.</value>
        public int TextLength
        {
            get
            {
                if(_randomTextLength <= 0)
                {
                    _randomTextLength = 4;
                }
                return _randomTextLength;
            }
            set
            {
                _randomTextLength = value;
                _text = GenerateRandomText();
            }
        }

        /// <summary>
        /// Returns a random font family name.
        /// </summary>
        /// <returns></returns>
        private static string RandomFontFamily()
        {
            var collection1 = new InstalledFontCollection();
            FontFamily[] familyArray1 = collection1.Families;
            string fontFamily = "bogus";
            while(GoodFontList.IndexOf(fontFamily, StringComparison.OrdinalIgnoreCase) == -1)
            {
                fontFamily = familyArray1[Random.Next(0, collection1.Families.Length)].Name.ToLowerInvariant();
            }
            return fontFamily;
        }

        /// <summary>
        /// Returns a base 64 encrypted serialized representation of this object.
        /// </summary>
        /// <returns></returns>
        public string ToEncryptedString()
        {
            if(Width == 0)
            {
                Width = 180;
            }

            if(Height == 0)
            {
                Height = 50;
            }

            return CaptchaBase.EncryptString(ToString());
        }

        /// <summary>
        /// Reconstructs an instance of this type from an encrypted serialized string.
        /// </summary>
        /// <param name="encrypted"></param>
        public static CaptchaInfo FromEncryptedString(string encrypted)
        {
            string decrypted = CaptchaBase.DecryptString(encrypted);
            string[] values = decrypted.Split('|');

            var info = new CaptchaInfo
            {
                Width = int.Parse(values[0], CultureInfo.InvariantCulture),
                Height = int.Parse(values[1], CultureInfo.InvariantCulture),
                WarpFactor = (CaptchaImage.FontWarpFactor)Enum.Parse(typeof(CaptchaImage.FontWarpFactor), values[2]),
                FontFamily = values[3],
                Text = values[4],
                DateGenerated = DateTime.ParseExact(values[5], "yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)
            };
            return info;
        }

        private string GenerateRandomText()
        {
            var builder = new StringBuilder();
            int length = TextChars.Length;
            for(int i = 0; i < TextLength; i++)
            {
                builder.Append(TextChars.Substring(Random.Next(length), 1));
            }
            DateGenerated = DateTime.Now;
            return builder.ToString();
        }

        /// <summary>
        /// Returns the fully qualified type name of this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> containing a fully qualified type name.
        /// </returns>
        public override string ToString()
        {
            return String.Format(CultureInfo.InvariantCulture, "{0}|{1}|{2}|{3}|{4}|{5}"
                                 , Width
                                 , Height
                                 , WarpFactor
                                 , FontFamily
                                 , Text
                                 , DateGenerated.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture));
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.Controls.Captcha
{
    /// <summary>
    /// <para>Simple CAPTCHA control that requires the browser to perform a 
    /// simple calculation via javascript to pass.  
    /// </para>
    /// <para>
    /// If javascript is not enabled, a form is rendered asking the user to add two random 
    /// small numbers, unless the <see cref="Accessible" />  property is set to false.
    /// </para>
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    public class InvisibleCaptcha : CaptchaBase
    {
        readonly Random _rnd = new Random();
        string _directions = string.Empty;

        /// <summary>
        /// If Accessible is true and javascript disabled, this is the 
        /// form field in which the answer would be entered by the user.
        /// </summary>
        string VisibleAnswerFieldName
        {
            get { return ClientID + "_visibleanswer"; }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this <see cref="InvisibleCaptcha"/> is accessible 
        /// to non-javascript browsers.  If false, then non-javascript browsers will always fail 
        /// validation.
        /// </summary>
        /// <value><c>true</c> if accessible; otherwise, <c>false</c>.</value>
        [Description("Determines whether or not this control will work for non-javascript enabled browsers")]
        [DefaultValue(true)]
        [Browsable(true)]
        [Category("Behavior")]
        public bool Accessible
        {
            get { return (bool)(ViewState["Accessible"] ?? true); }
            set { ViewState["Accessible"] = value; }
        }

        /// <summary>
        /// Id of the span used to house the visible captcha section.
        /// </summary>
        string CaptchaInputClientId
        {
            get { return ClientID + "_subtext_captcha"; }
        }

        /// <summary>
        /// Sets up a hashed answer.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            // This is the hidden input the javascript will use to 
            // populate the answer to the little math riddle.
            Page.ClientScript.RegisterHiddenField(AnswerFormFieldName, "");
            base.OnInit(e);
        }

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
        /// </summary>
        /// <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        protected override void OnPreRender(EventArgs e)
        {
            int first = _rnd.Next(1, 9);
            int second = _rnd.Next(1, 9);

            _directions = string.Format(CultureInfo.InvariantCulture, "Please add {0} and {1} and type the answer here: ",
                                       first, second);
            Display = ValidatorDisplay.Dynamic;

            string answer = (first + second).ToString(CultureInfo.InvariantCulture);

            // We store the answer encrypted so it can't be tampered with.
            Page.ClientScript.RegisterHiddenField(HiddenEncryptedAnswerFieldName, EncryptAnswer(answer));
            Page.ClientScript.RegisterStartupScript(typeof(InvisibleCaptcha), "MakeCaptchaInvisible",
                                                    string.Format(CultureInfo.InvariantCulture,
                                                                  "<script type=\"text/javascript\">\r\nsubtext_invisible_captcha_hideFromJavascriptEnabledBrowsers('{0}');\r\n</script>",
                                                                  CaptchaInputClientId));

            Page.ClientScript.RegisterClientScriptInclude("InvisibleCaptcha",
                                                          Page.ClientScript.GetWebResourceUrl(GetType(),
                                                                                              "Subtext.Web.Controls.Resources.InvisibleCaptcha.js"));

            Page.ClientScript.RegisterStartupScript(typeof(InvisibleCaptcha), "ComputeCaptchaAnswer",
                                                    string.Format(CultureInfo.InvariantCulture,
                                                                  "<script type=\"text/javascript\">\r\nsubtext_invisible_captcha_setAnswer({0}, {1}, '{2}');\r\n</script>",
                                                                  first, second, AnswerFormFieldName));
            base.OnPreRender(e);
        }

        /// <summary>
        /// Displays the control on the client.
        /// </summary>
        /// <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that contains the output stream for rendering on the client.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            string answer = Page.Request.Form[AnswerFormFieldName];
            // In an Ajax postback, we don't want to render this if javascript is enabled 
            // because the page won't know to set this span to be invisible.
            if(Accessible && String.IsNullOrEmpty(answer))
            {
                base.Render(writer);
                writer.AddAttribute("id", CaptchaInputClientId);
                if(!string.IsNullOrEmpty(CssClass))
                {
                    writer.AddAttribute("class", CssClass);
                }
                writer.RenderBeginTag("span");
                writer.Write(_directions);

                writer.Write("<input type=\"text\" name=\"{0}\" value=\"\" />", VisibleAnswerFieldName);

                writer.RenderEndTag();
            }
        }

        // Gets the answer from the client, whether entered by 
        // javascript or by the user.
        protected override string GetClientSpecifiedAnswer()
        {
            string answer = base.GetClientSpecifiedAnswer();
            if(String.IsNullOrEmpty(answer))
            {
                answer = Page.Request.Form[VisibleAnswerFieldName];
            }
            return answer;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Diagnostics.CodeAnalysis;

namespace Subtext.Web.Controls.Captcha
{
    /// <summary>
    /// Captcha control with subtext specific defaults.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha")]
    public class SubtextCaptchaControl : CaptchaControl
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtextCaptchaControl"/> class.
        /// </summary>
        public SubtextCaptchaControl()
        {
            CaptchaLength = 4;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Web.UI;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Summary description for CoComment.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "Co")]
    public class CoComment : Control
    {
        /// <summary>
        /// Gets or sets the blog tool.
        /// </summary>
        /// <value>The blog tool.</value>
        public string BlogTool
        {
            get { return ViewState["BlogTool"] as string; }
            set { ViewState["BlogTool"] = value; }
        }

        /// <summary>
        /// Gets or sets the blog URL.
        /// </summary>
        /// <value>The blog URL.</value>
        public string BlogUrl
        {
            get { return ViewState["BlogUrl"] as string; }
            set { ViewState["BlogUrl"] = value; }
        }

        /// <summary>
        /// Gets or sets the blog title.
        /// </summary>
        /// <value>The blog title.</value>
        public string BlogTitle
        {
            get { return ViewState["BlogTitle"] as string; }
            set { ViewState["BlogTitle"] = value; }
        }

        /// <summary>
        /// Gets or sets the post title.
        /// </summary>
        /// <value>The post title.</value>
        public string PostTitle
        {
            get { return ViewState["PostTitle"] as string; }
            set { ViewState["PostTitle"] = value; }
        }

        /// <summary>
        /// Gets or sets the post URL.
        /// </summary>
        /// <value>The post URL.</value>
        public string PostUrl
        {
            get { return ViewState["PostUrl"] as string; }
            set { ViewState["PostUrl"] = value; }
        }

        /// <summary>
        /// Gets or sets the name of the comment author field.
        /// </summary>
        /// <value>The name of the comment author field.</value>
        public string CommentAuthorFieldName
        {
            get { return ViewState["CommentAuthorFieldName"] as string; }
            set { ViewState["CommentAuthorFieldName"] = value; }
        }

        /// <summary>
        /// Gets or sets the name of the comment text field.
        /// </summary>
        /// <value>The name of the comment text field.</value>
        public string CommentTextFieldName
        {
            get { return ViewState["CommentTextFieldName"] as string; }
            set { ViewState["CommentTextFieldName"] = value; }
        }

        /// <summary>
        /// Gets or sets the comment button id.
        /// </summary>
        /// <value>The comment button id.</value>
        public string CommentButtonId
        {
            get { return ViewState["CommentButtonId"] as string; }
            set { ViewState["CommentButtonId"] = value; }
        }

        public string CommentFormId
        {
            get { return ViewState["CommentFormId"] as string; }
            set { ViewState["CommentFormId"] = value; }
        }

        /// <summary>
        /// Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to
        /// be rendered on
        /// the client.
        /// </summary>
        /// <param name="writer">The <see langword="HtmlTextWriter"/> object that receives the server control content.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            writer.Write(string.Format(CultureInfo.InvariantCulture, ScriptHelper.UnpackScript("CoCommentScript.js"),
                                       BlogTool, BlogUrl, BlogTitle, PostTitle, PostUrl, CommentAuthorFieldName,
                                       CommentTextFieldName, CommentButtonId, CommentFormId));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.ComponentModel;
using System.Drawing.Design;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework.Web;

//Adapted from AdvancedPanel

namespace Subtext.Web.Controls
{
    // TODO: Designer, design-time enhancements
    // TODO: Collapsible property, don't add link to ctls if false -- interaction with Collapsed tests?
    // TODO: Properties should not have dependencies on each other; Setting one property should not 
    // affect other properties

    /// <summary>
    /// Various styles of collapsing this panel.
    /// </summary>
    public enum CollapseLinkStyle
    {
        Text,
        Image,
        ImageBeforeText,
        ImageAfterText
    }

    /// <summary>
    /// Panel that can be expanded and collapsed.
    /// </summary>
    [ToolboxData("<{0}:CollapsiblePanel runat=\"server\"></{0}:CollapsiblePanel>")]
    public class CollapsiblePanel : Panel, INamingContainer
    {
        const string ClientScriptKey = "Subtext.Web.Controls.CollapsiblePanel";

        private const string CtlidContents = "Contents";
        private const string CtlidHeader = "Header";
        private const string CtlidLink = "Link";
        private const string CtlidLinkImage = "LinkImage";
        private const string VskeyCollapsed = "Collapsed";
        private const string VskeyCollapsible = "Collapsible";

        protected string _bodyCssClass;
        protected HyperLink _collapseLink;
        protected Panel _contents;
        protected bool _displayHeader;
        protected Panel _header;
        protected string _headerCssClass;
        protected string _headerText = "Caption";
        protected string _headerTextCssClass;
        private Image _image;
        protected bool _linkBeforeHeader;
        protected string _linkCssClass;
        protected string _linkImage;
        protected string _linkImageCollapsed;
        protected CollapseLinkStyle _linkStyle = CollapseLinkStyle.Text;
        protected string _linkText = "more";
        protected string _linkTextCollapsed = "less";
        Label headerLabel;

        #region Accessors		

        /// <summary>
        /// Gets or sets the link style.
        /// </summary>
        /// <value></value>
        public CollapseLinkStyle LinkStyle
        {
            get { return _linkStyle; }
            set { _linkStyle = value; }
        }

        /// <summary>
        /// Gets or sets the link text displayed when collapsed.
        /// </summary>
        /// <value></value>
        public string LinkTextCollapsed
        {
            get { return _linkTextCollapsed; }
            set { _linkTextCollapsed = value; }
        }

        /// <summary>
        /// Gets or sets the body CSS class.
        /// </summary>
        /// <value></value>
        public string BodyCssClass
        {
            get { return _bodyCssClass; }
            set { _bodyCssClass = value; }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this <see cref="CollapsiblePanel"/> is collapsed.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if collapsed; otherwise, <c>false</c>.
        /// </value>
        public bool Collapsed
        {
            get { return (bool)(ViewState[VskeyCollapsed] ?? false); }
            set { ViewState[VskeyCollapsed] = value; }
        }

        public bool WillSucceed
        {
            get { return (bool)(ViewState["WillSucceed"] ?? false); }
            set { ViewState["WillSucceed"] = value; }
        }


        public override ControlCollection Controls
        {
            get
            {
                EnsureChildControls();
                return base.Controls;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether to display the header.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if header is to be displayed; otherwise, <c>false</c>.
        /// </value>
        public bool DisplayHeader
        {
            get { return _displayHeader; }
            set
            {
                _displayHeader = value;
                if(!value)
                {
                    Collapsible = false;
                }
            }
        }

        /// <summary>
        /// Gets or sets the header CSS class.
        /// </summary>
        /// <value></value>
        public string HeaderCssClass
        {
            get { return _headerCssClass; }
            set { _headerCssClass = value; }
        }

        /// <summary>
        /// Gets or sets the header text.
        /// </summary>
        /// <value></value>
        public string HeaderText
        {
            get { return _headerText; }
            set
            {
                if(headerLabel != null)
                {
                    headerLabel.Text = value;
                }
                _headerText = value;
            }
        }

        /// <summary>
        /// Gets or sets the header text CSS class.
        /// </summary>
        /// <value></value>
        public string HeaderTextCssClass
        {
            get { return _headerTextCssClass; }
            set { _headerTextCssClass = value; }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this <see cref="CollapsiblePanel"/> is collapsible.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if collapsible; otherwise, <c>false</c>.
        /// </value>
        public bool Collapsible
        {
            get { return (bool)(ViewState[VskeyCollapsible] ?? false); }
            set
            {
                if(value)
                {
                    _displayHeader = true;
                }
                ViewState[VskeyCollapsible] = value;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the link goes before the header.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if the link goes before the header; otherwise, <c>false</c>.
        /// </value>
        public bool LinkBeforeHeader
        {
            get { return _linkBeforeHeader; }
            set { _linkBeforeHeader = value; }
        }

        /// <summary>
        /// Gets or sets the link CSS class.
        /// </summary>
        /// <value></value>
        public string LinkCssClass
        {
            get { return _linkCssClass; }
            set { _linkCssClass = value; }
        }

        /// <summary>
        /// Gets or sets the link image.
        /// </summary>
        /// <value></value>
        [
            Description("Collapse link image URL")
        ]
        [Bindable(true)]
        [Editor("System.Web.UI.Design.ImageUrlEditor, System.Design", typeof(UITypeEditor))]
        public string LinkImage
        {
            get { return _linkImage; }
            set { _linkImage = value; }
        }

        [
            Description("Collapse link image URL")
        ]
        [Bindable(true)]
        [Editor("System.Web.UI.Design.ImageUrlEditor, System.Design", typeof(UITypeEditor))]
        public string LinkImageCollapsed
        {
            get { return _linkImageCollapsed; }
            set { _linkImageCollapsed = value; }
        }

        public string LinkText
        {
            get { return _linkText; }
            set { _linkText = value; }
        }

        #endregion

        protected override void OnInit(EventArgs e)
        {
            RegisterClientScript();
            RebuildControls();
            base.OnInit(e);
        }

        void RegisterClientScript()
        {
            if(Page.ClientScript.IsClientScriptBlockRegistered(ClientScriptKey))
            {
                Type cstype = GetType();
                Page.ClientScript.RegisterClientScriptBlock(cstype, ClientScriptKey,
                                                            ScriptHelper.UnpackScript("CollapsiblePanel.js"));
            }
        }

        /// <summary>
        /// Registers the client script if this is collapsible.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            if(Collapsible)
            {
                RegisterClientScript();
            }

            base.OnPreRender(e);
        }

        protected virtual void RebuildControls()
        {
            if(_displayHeader)
            {
                _contents = new Panel {ID = CtlidContents};
                _contents = (Panel)SetCssClass(_contents, _bodyCssClass);

                while(Controls.Count > 0)
                {
                    if(Controls[0] is IValidator)
                    {
                        Page.Validators.Add((IValidator)Controls[0]);
                    }

                    _contents.Controls.Add(Controls[0]);
                }
                Controls.Clear();

                _header = new Panel {ID = CtlidHeader};
                SetCssClass(_header, _headerCssClass);

                headerLabel = new Label {ID = "headerDisplayLabel", Text = HeaderText};
                headerLabel = (Label)SetCssClass(headerLabel, _headerTextCssClass);

                _collapseLink = CreateCollapseLink();

                if(_linkBeforeHeader)
                {
                    _header.Controls.Add(_collapseLink);
                    _header.Controls.Add(headerLabel);
                }
                else
                {
                    _header.Controls.Add(headerLabel);
                    _header.Controls.Add(_collapseLink);
                }

                Controls.Add(_header);
                Controls.Add(_contents);
            }
            else
            {
                if(_bodyCssClass != null)
                {
                    CssClass = _bodyCssClass;
                }
            }
        }

        protected override void Render(HtmlTextWriter writer)
        {
            if(null != Page)
            {
                Page.VerifyRenderingInServerForm(this);
            }

            if(null != _collapseLink)
            {
                _collapseLink.Visible = Collapsible;
            }

            if(_displayHeader && Collapsible)
            {
                _collapseLink.Attributes.Add("onclick",
                                             String.Format(CultureInfo.InvariantCulture,
                                                           "ToggleVisible('{0}','{1}','{2}','{3}'); return false;",
                                                           _contents.ClientID,
                                                           _image != null ? _image.ClientID : String.Empty,
                                                           HttpHelper.ExpandTildePath(LinkImage),
                                                           HttpHelper.ExpandTildePath(LinkImageCollapsed)));

                if(Collapsed)
                {
                    _contents.Style.Add("display", "none");
                    _image.ImageUrl = LinkImageCollapsed;
                }
            }

            base.Render(writer);
        }

        protected virtual HyperLink CreateCollapseLink()
        {
            var createdLink = new HyperLink {ID = CtlidLink};
            createdLink = (HyperLink)SetCssClass(createdLink, _linkCssClass);
            createdLink.NavigateUrl = "#";

            switch(LinkStyle)
            {
                case CollapseLinkStyle.Text:
                    createdLink.Text = _linkText;
                    break;

                case CollapseLinkStyle.Image:
                    _image = CreateCollapseImage();
                    createdLink.Controls.Add(_image);
                    break;

                case CollapseLinkStyle.ImageAfterText:
                    createdLink.Controls.Add(new LiteralControl(_linkText));
                    _image = CreateCollapseImage();
                    createdLink.Controls.Add(_image);
                    break;

                case CollapseLinkStyle.ImageBeforeText:
                    _image = CreateCollapseImage();
                    createdLink.Controls.Add(_image);
                    createdLink.Controls.Add(new LiteralControl(_linkText));
                    break;

                default:
                    createdLink.Text = _linkText;
                    break;
            }

            return createdLink;
        }

        protected virtual Image CreateCollapseImage()
        {
            var img = new Image();
            // HACK: img.ImageUrl was tinkering with the actual location, so it would vary from what
            // was also being used for the js flip parameters. This is suboptimal, but consistent.
            img.Attributes.Add("src", HttpHelper.ExpandTildePath(LinkImageCollapsed));
            img.ID = CtlidLinkImage;

            return img;
        }

        protected virtual WebControl SetCssClass(WebControl webControl, string css)
        {
            if(!string.IsNullOrEmpty(css))
            {
                webControl.CssClass = css;
            }

            return webControl;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// The standard button control emits the language attribute which is not 
    /// XHTML compliant.  This is a button to use if you wish to remain XHTML compliant. 
    /// </summary>
    public class CompliantButton : Button
    {
        /// <summary>
        /// Basically a reimplementation of the base 
        /// </summary>
        /// <param name="writer">The writer.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            var compliantWriter = new CompliantHtmlTextWriter(writer);
            base.Render(compliantWriter);
        }

        private class CompliantHtmlTextWriter : HtmlTextWriter
        {
            internal CompliantHtmlTextWriter(TextWriter writer) : base(writer)
            {
            }

            /// <summary>
            /// Ignores the language attribute for the purposes of a submit button.
            /// <see langword="HtmlTextWriter"/> output stream.
            /// </summary>
            /// <param name="name">The HTML attribute to add.</param>
            /// <param name="value"></param>
            public override void AddAttribute(string name, string value)
            {
                if(String.Equals(name, "language", StringComparison.OrdinalIgnoreCase))
                {
                    return;
                }
                base.AddAttribute(name, value);
            }

            /// <summary>
            /// Ignores the language attribute for the purposes of a submit button. 
            /// </summary>
            /// <remarks>
            /// I don't technically need to override this method, but it should make this 
            /// more version proof.
            /// </remarks>
            /// <param name="name">The HTML attribute to add.</param>
            /// <param name="value"></param>
            /// <param name="fEndode"></param>
            public override void AddAttribute(string name, string value, bool fEndode)
            {
                if(String.Equals(name, "language", StringComparison.OrdinalIgnoreCase))
                {
                    return;
                }
                base.AddAttribute(name, value, fEndode);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Static class containing helper methods for various controls 
    /// that can't be placed within the control hierarchy.
    /// </summary>
    public static class ControlHelper
    {
        public static void AddCssClass(HtmlControl control, string cssClass)
        {
            string classes = control.Attributes["class"] ?? string.Empty;

            var regex = new Regex(@"(^|\s)" + Regex.Escape(cssClass) + @"($|\s)", RegexOptions.IgnoreCase);
            if(regex.IsMatch(classes))
            {
                return;
            }

            if(classes.Length > 0)
            {
                control.Attributes["class"] += " " + cssClass;
            }
            else
            {
                control.Attributes["class"] = cssClass;
            }
        }

        public static void AddCssClass(WebControl control, string cssClass)
        {
            string classes = control.CssClass ?? string.Empty;

            var regex = new Regex(@"(^|\s)" + Regex.Escape(cssClass) + @"($|\s)", RegexOptions.IgnoreCase);
            if(regex.IsMatch(classes))
            {
                return;
            }

            if(control.CssClass != null)
            {
                if(control.CssClass.Length > 0)
                {
                    control.CssClass += " " + cssClass;
                }
                else
                {
                    control.CssClass = cssClass;
                }
            }
        }

        /// <summary>
        /// Returns true if the specified attribute is defined 
        /// on the control.
        /// </summary>
        /// <param name="control">Control.</param>
        /// <param name="name">Name.</param>
        /// <returns></returns>
        public static bool IsAttributeDefined(HtmlControl control, string name)
        {
            return !string.IsNullOrEmpty(control.Attributes[name]);
        }

        /// <summary>
        /// Returns true if the specified attribute is defined 
        /// on the control.
        /// </summary>
        /// <param name="control">Control.</param>
        /// <param name="name">Name.</param>
        /// <returns></returns>
        public static bool IsAttributeDefined(WebControl control, string name)
        {
            return !string.IsNullOrEmpty(control.Attributes[name]);
        }

        /// <summary>
        /// Applies the specified control action recursively.
        /// </summary>
        /// <param name="controlAction">The control action.</param>
        /// <param name="root">The root control.</param>
        public static void ApplyRecursively(Action<Control> controlAction, Control root)
        {
            foreach(Control control in root.Controls)
            {
                controlAction(control);
                ApplyRecursively(controlAction, control);
            }
        }

        /// <summary>
        /// Recursively searches for the server form.
        /// </summary>
        /// <param name="parent">The parent to start the recursive search from.</param>
        /// <param name="id">Id of the control to find.</param>
        /// <returns></returns>
        public static Control FindControlRecursively(Control parent, string id)
        {
            foreach(Control child in parent.Controls)
            {
                if(child.ID == id)
                {
                    return child;
                }
                Control foundControl = FindControlRecursively(child, id);
                if(foundControl != null)
                {
                    return foundControl;
                }
            }

            return null;
        }

        /// <summary>
        /// Recursively searches for the server form's client id.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns></returns>
        public static string GetPageFormClientId(Control parent)
        {
            foreach(Control child in parent.Controls)
            {
                if(child is HtmlForm)
                {
                    return child.ClientID;
                }
                string id = GetPageFormClientId(child);
                if(id != null)
                {
                    return id;
                }
            }

            return null;
        }

        /// <summary>
        /// Exports the specified control to excel.
        /// </summary>
        /// <remarks>
        /// Calling this function will prompt the user with a dialog 
        /// to save the trade blotter grid as an Excel file named 
        /// TradeBlotter.xls.
        /// </remarks>
        public static void ExportToExcel(Control control, string fileName)
        {
            // Set the content type to Excel
            HttpContext.Current.Response.AddHeader("Content-Disposition", "filename=" + fileName);
            HttpContext.Current.Response.ContentType = "application/vnd.ms-excel";

            control.Page.EnableViewState = false;

            //Remove the charset from the Content-Type header
            HttpContext.Current.Response.Charset = String.Empty;

            var writer = new StringWriter();
            var htmlWriter = new HtmlTextWriter(writer);

            //Get the HTML for the control
            control.RenderControl(htmlWriter);

            HttpContext.Current.Response.Write(writer.ToString());
            HttpContext.Current.Response.End();
        }

        public static void SetTitleIfNone(LinkButton link, string title)
        {
            SetTitleIfNoneInternal(link, title);
        }

        public static void SetTitleIfNone(HyperLink link, string title)
        {
            SetTitleIfNoneInternal(link, title);
        }

        /// <summary>
        /// Sets the title attribute for the hyperlink if none exists.
        /// </summary>
        /// <param name="link">The link.</param>
        /// <param name="title">The title.</param>
        private static void SetTitleIfNoneInternal(WebControl link, string title)
        {
            if(link == null)
            {
                throw new ArgumentNullException("link");
            }

            // Use the ToolTip propety since that is rendered as the title attribute.
            if(link.ToolTip.Length == 0)
            {
                link.ToolTip = title;
            }
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

// Adapted from Nikhil's blog post: http://www.nikhilk.net/Entry.aspx?id=182

using System;
using System.Text;
using System.Web.UI;
using System.Web.UI.HtmlControls;

namespace Subtext.Web.Controls
{
    public class Form : HtmlForm
    {
        private const string FormActionScript =
    @"document.getElementById('{0}').action = window.location.href;
";

        private const string AjaxFormActionScript =
    @"Sys.WebForms.PageRequestManager.getInstance().add_endRequest(function() {{
  document.getElementById('{0}').action = window.location.href;
}});
";

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            var sb = new StringBuilder();
            sb.AppendFormat(FormActionScript, ClientID);

            ScriptManager scriptManager = ScriptManager.GetCurrent(Page);
            if((scriptManager != null) && scriptManager.SupportsPartialRendering)
            {
                sb.AppendFormat(AjaxFormActionScript, ClientID);
            }

            Page.ClientScript.RegisterStartupScript(typeof(Form), String.Empty, sb.ToString(), true/*addScriptTags*/);
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using Subtext.Framework.Web;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Renders a clickable help tooltip.  This class does not embed the 
    /// necessary scripts and CSS (against the general practice). Instead, 
    /// it relies on the user having declared helptooltip.js and helptooltip.css.
    /// </summary>
    public class HelpToolTip : HtmlContainerControl
    {
        /// <summary>
        /// Gets or sets the Help Text.  This is the 
        /// text displayed when clicking on the tooltip.
        /// </summary>
        /// <value></value>
        public string HelpText
        {
            get { return Attributes["helptext"] ?? string.Empty; }
            set { Attributes["helptext"] = value; }
        }

        /// <summary>
        /// Gets or sets the image URL.
        /// </summary>
        /// <value>The image URL.</value>
        public string ImageUrl
        {
            get { return Attributes["ImageUrl"] ?? string.Empty; }
            set { Attributes["ImageUrl"] = value; }
        }

        /// <summary>
        /// Gets or sets the image URL.
        /// </summary>
        /// <value>The image URL.</value>
        public int ImageHeight
        {
            get
            {
                int result;
                if(!int.TryParse(Attributes["ImageHeight"], out result))
                {
                    return int.MinValue;
                }
                return result;
            }
            set { Attributes["ImageHeight"] = value.ToString(CultureInfo.InvariantCulture); }
        }

        /// <summary>
        /// Gets or sets the image URL.
        /// </summary>
        /// <value>The image URL.</value>
        public int ImageWidth
        {
            get
            {
                int result;
                if(!int.TryParse(Attributes["ImageWidth"], out result))
                {
                    return int.MinValue;
                }
                return result;
            }
            set { Attributes["ImageWidth"] = value.ToString(CultureInfo.InvariantCulture); }
        }

        /// <summary>
        /// Renders this tool tip.  The format looks like: 
        /// &lt;a class="helplink" onclick="showHelpTip(event, 'help text'); 
        /// return false;" href="?"&gt;Label Text&lt;a&gt;
        /// 
        /// //TODO: Look into embedding helplink.js and helplink.css
        /// </summary>
        /// <param name="writer">Writer.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            const string format = @"<a class=""helpLink"" onclick=""showHelpTip(event, '{0}'); return false;"" href=""?"">";
            string helpText = HelpText.Replace("'", "\\'");
            writer.Write(string.Format(CultureInfo.InvariantCulture, format, helpText));
            RenderChildren(writer);
            if(ImageUrl.Length > 0)
            {
                string imageUrl = HttpHelper.ExpandTildePath(ImageUrl);
                writer.Write(String.Format(CultureInfo.InvariantCulture, "<img src=\"{0}\" ", imageUrl));
                if(ImageWidth > 0)
                {
                    writer.Write(string.Format(CultureInfo.InvariantCulture, "width=\"{0}\" ", ImageWidth));
                }
                if(ImageHeight > 0)
                {
                    writer.Write(string.Format(CultureInfo.InvariantCulture, "height=\"{0}\" ", ImageHeight));
                }
                writer.Write("/>");
            }
            writer.Write("</a>");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using Subtext.Framework.Text;
using Subtext.Framework.Web;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Simple control used to render an anchor tag surrounded by a list item tag 
    /// for purposes of creating a menu.  It will not render an HREF when the HREF 
    /// points to the same page this page references.
    /// </summary>
    public class MenuItem : HtmlContainerControl
    {
        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        /// <value></value>
        public string Text
        {
            get { return InnerText; }
            set { InnerText = value; }
        }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value></value>
        public string Title
        {
            get
            {
                if(IsAttributeDefined("title"))
                {
                    return Attributes["title"];
                }
                return string.Empty;
            }
            set { Attributes["title"] = value; }
        }

        /// <summary>
        /// Gets or sets the CSS used to highlight this item.
        /// </summary>
        /// <value></value>
        public string HighlightCssClass
        {
            get
            {
                if(IsAttributeDefined("highlightclass"))
                {
                    return Attributes["highlightclass"];
                }
                return "current";
            }
            set { Attributes["highlightclass"] = value; }
        }

        /// <summary>
        /// Gets or sets the href.
        /// </summary>
        /// <value></value>
        public string Href
        {
            get
            {
                if(IsAttributeDefined("href"))
                {
                    return ConvertToAppPath(Attributes["href"]);
                }
                return string.Empty;
            }
            set { Attributes["href"] = value; }
        }

        //Without the Default.aspx
        string CurrentRequestPath
        {
            get { return Context.Request.Path.LeftBefore("Default.aspx", StringComparison.OrdinalIgnoreCase); }
        }

        // This is the url that is the parent of this menu item.
        // For example, if this is a link in the about section 
        // /about/somefolder/mypage.aspx
        // Then the parent Path would be /about/
        public string ParentPath
        {
            get
            {
                if(IsAttributeDefined("parentpath"))
                {
                    return ConvertToAppPath(Attributes["parentpath"]);
                }
                return ConvertToAppPath("~/");
            }
            set { Attributes["parentpath"] = value; }
        }

        /// <summary>
        /// Returns true if the current request corresponds to this menu 
        /// item's page.  This tells us whether or not this control should 
        /// be rendered as a link.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [is on this menus page]; otherwise, <c>false</c>.
        /// </value>
        public bool IsOnThisMenusPage
        {
            get
            {
                // If control points to /about/ and we're on /about/default.aspx 
                // then this is true.
                if(CurrentRequestPath == ParentPath && ParentPath == Href)
                {
                    return true;
                }

                // The reference must be longer than Parent Path This ensures that 
                // if we're pointing to /about/ and our parent is /about/, but are 
                // in the page /about/folder/default.aspx, we don't highlight this 
                // item.
                // We would highlight it if our parent was /
                bool referenceLongEnough = Href.Length > ParentPath.Length;

                // Make sure the reference is part of the request path now.
                bool referenceInRequestPath = CurrentRequestPath.IndexOf(Href, StringComparison.OrdinalIgnoreCase) > -1;

                return referenceLongEnough && referenceInRequestPath;
            }
        }

        /// <summary>
        /// Renders this menu item.
        /// </summary>
        /// <param name="writer">Writer.</param>
        protected override void Render(HtmlTextWriter writer)
        {
            const string format = "<li{0}{1}><a{2} title=\"{3}\">{4}</a></li>";

            string cssClass = string.Empty;
            string hrefString = string.Empty;
            if(IsOnThisMenusPage && HighlightCssClass.Length > 0)
            {
                cssClass = string.Format(CultureInfo.InvariantCulture, " class=\"{0}\"", HighlightCssClass);
            }
            else
            {
                hrefString = string.Format(" href=\"{0}\"", Href);
            }

            string idText = string.Empty;
            if(IsAttributeDefined("id"))
            {
                idText = string.Format(" id=\"{0}\"", Attributes["id"]);
            }

            writer.Write(string.Format(CultureInfo.InvariantCulture, format, cssClass, idText, hrefString, Title, Text));
        }

        bool IsAttributeDefined(string name)
        {
            return ControlHelper.IsAttributeDefined(this, name);
        }

        static string ConvertToAppPath(string path)
        {
            return HttpHelper.ExpandTildePath(path);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.ComponentModel;
using System.Web.UI.WebControls;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Inherits from HyperLink. Allows one to set a CSS 
    /// class that applies when the current request matches 
    /// the NavigateUrl of this link.
    /// </summary>
    public class NavigationLink : HyperLink
    {
        /// <summary>
        /// Gets or sets the css for when the current page 
        /// matches the Navigate URL for this link.
        /// </summary>
        [DefaultValue("")]
        [Browsable(true)]
        [Category("Display")]
        public string ActiveCssClass
        {
            get { return ViewState["ActiveCssClass"] as string ?? string.Empty; }
            set { ViewState["ActiveCssClass"] = value; }
        }

        /// <summary>
        /// Attaches the ActievCss class if the current url matches 
        /// the navigate url for this link.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            if(ActiveCssClass.Length > 0 && IsRequestForSamePage(NavigateUrl))
            {
                if(!String.IsNullOrEmpty(CssClass))
                {
                    CssClass += " ";
                }
                CssClass += ActiveCssClass;
            }
            base.OnPreRender(e);
        }

        private bool IsRequestForSamePage(string navigateUrl)
        {
            if(navigateUrl == "/")
            {
                navigateUrl += "Default.aspx";
            }

            return String.Equals(Page.Request.Url.AbsolutePath, navigateUrl, StringComparison.OrdinalIgnoreCase);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

#undef Diagnostic

using System;
using System.ComponentModel;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.Design;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Control used to render paging through records.
    /// </summary>
    [
        Designer(typeof(PagerDesigner))
    ]
    [ToolboxData("<{0}:PagingControl runat=\"server\" />")]
    public class PagingControl : Control
    {
        protected const string DefaultActiveLinkFormat =
            @"<a href=""{0}"" title=""page"" class=""Current"">&#187;{1}&#171;</a>";

        protected const int DefaultDisplayPageCount = 9;

        protected const string DefaultFirstPageText = "First";
        protected const string DefaultGoToPageText = "Goto page&nbsp;";
        protected const string DefaultLastPageText = "Last";
        protected const string DefaultLinkFormat = @"<a href=""{0}"" title=""Page"">{1}</a>";
        protected const int DefaultPageSize = 10;
        protected const string DefaultPageUrlFormat = "/?pageid={0}";
        protected const string DefaultSuffixText = "";
        protected const int FirstPageIndex = 0;
        protected const int MinDisplayPageCount = 3;
        protected const int MinPageSize = 1;
        protected const string SpacerDefault = "&nbsp;";

        protected string _cssClass;

        protected string _firstText = DefaultFirstPageText;
        protected string _lastText = DefaultLastPageText;
        protected string _linkFormat = DefaultLinkFormat;
        protected string _linkFormatActive = DefaultActiveLinkFormat;

        protected string _prefixText = DefaultGoToPageText;
        protected string _spacer;
        protected string _suffixText = DefaultSuffixText;
        protected string _urlFormat = DefaultPageUrlFormat;
        protected bool _usePrefixSuffix = true;
        protected bool _useSpacer = true;
        protected bool displayFirstLastPageLinks = true;

        /// <summary>
        /// Constructs an instance of this control.
        /// </summary>
        public PagingControl()
        {
            DisplayPageCount = DefaultDisplayPageCount;
        }

        protected override void OnInit(EventArgs args)
        {
        }

        /// <summary>
        /// Renders the link for the specified page index in the paging control.
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="isCurrent">Whether or not the pageindex to render is the current page.</param>
        /// <returns></returns>
        protected string RenderLink(int pageIndex, bool isCurrent)
        {
            return RenderLink(pageIndex, (pageIndex + 1).ToString(CultureInfo.InvariantCulture), isCurrent);
        }

        /// <summary>
        /// Renders the link for the specified page index in the paging control.
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="display">The display text of the link</param>
        /// <returns></returns>
        protected string RenderLink(int pageIndex, string display)
        {
            return RenderLink(pageIndex, display, false);
        }

        /// <summary>
        /// Renders the link for the specified page index in the paging control.
        /// </summary>
        /// <param name="pageIndex"></param>
        /// <param name="display">The display text of the link</param>
        /// <param name="isCurrent">Whether or not the pageindex to render is the current page.</param>
        /// <returns></returns>
        protected string RenderLink(int pageIndex, string display, bool isCurrent)
        {
            string url = String.Format(CultureInfo.InvariantCulture, _urlFormat, pageIndex);
            return String.Format(CultureInfo.InvariantCulture, isCurrent ? _linkFormatActive : _linkFormat, url, display);
        }

        protected virtual void WriteConditional(HtmlTextWriter writer, string value, bool condition)
        {
            if(condition)
            {
                writer.Write(value);
            }
        }

        #region Render

        protected override void Render(HtmlTextWriter writer)
        {
            // there's only 1 page, a pager is useless so render nothing
            if(TotalPageCount == 0 || FirstPageIndex == (TotalPageCount - 1))
            {
                return;
            }

            var currentPage = (int)ViewState[ViewStateKeys.PageIndex];

            if(_cssClass.Length > 0)
            {
                writer.AddAttribute("class", _cssClass);
            }

            writer.RenderBeginTag(HtmlTextWriterTag.Div);

            // write prepended label if appropriate and an optional spacer literal
            WriteConditional(writer, _prefixText, _usePrefixSuffix);

            // determine the start and end pages
            int startPage = currentPage - DisplayPageCount / 2 < 0 ? 0 : currentPage - DisplayPageCount / 2;

            int endPage = startPage + DisplayPageCount > LastPageIndex
                              ? LastPageIndex + 1
                              : startPage + DisplayPageCount;

            // if the start page isn't the first, then we display << to allow
            // paging backwards DisplayCountPage
            if(startPage != 0)
            {
                // if we specified including 'First' link back to pageindex 0, 
                // write it plus an optional spacer
                if(displayFirstLastPageLinks)
                {
                    writer.Write(RenderLink(FirstPageIndex, _firstText));
                }
                //we will page back DisplayPageCount unless that number is less than 0
                //since you can't page less than that.
                writer.Write(RenderLink(currentPage - DisplayPageCount <= 0 ? 0 : currentPage - DisplayPageCount - 1,
                                        "<<"));
            }
            //Now, loop through start to end and display all the links.
            for(int i = startPage; i < endPage; i++)
            {
                writer.Write(RenderLink(i, i == PageIndex));
            }

            // if we're already displaying the last page, no need for paging or Last Page link
            if(endPage - 1 != LastPageIndex)
            {
                writer.Write(
                    RenderLink(
                        currentPage + DisplayPageCount + 1 < LastPageIndex
                            ? currentPage + DisplayPageCount + 1
                            : LastPageIndex, ">>"));
                // if we specified including 'Last' link back to the last page, write it plus 
                // an optional spacer
                if(displayFirstLastPageLinks && PageIndex < LastPageIndex)
                {
                    writer.Write(RenderLink(LastPageIndex, _lastText));
                }
            }

            WriteConditional(writer, _suffixText, _usePrefixSuffix);

            writer.RenderEndTag();
        }

        #endregion

        #region Accessors

        /// <summary>
        /// Gets and sets the CssClass to use for this control.
        /// </summary>
        public string CssClass
        {
            get { return _cssClass; }
            set { _cssClass = value; }
        }

        /// <summary>
        /// ?
        /// </summary>
        public int ItemCount
        {
            get { return ViewState[ViewStateKeys.ItemCount] == null ? 0 : (int)ViewState[ViewStateKeys.ItemCount]; }
            set {
                ViewState[ViewStateKeys.ItemCount] = value < 0 ? 0 : value;
            }
        }

        /// <summary>
        /// The current page index.
        /// </summary>
        public int PageIndex
        {
            get
            {
                return ViewState[ViewStateKeys.PageIndex] == null
                           ? FirstPageIndex
                           : (int)ViewState[ViewStateKeys.PageIndex];
            }
            set {
                ViewState[ViewStateKeys.PageIndex] = value >= FirstPageIndex ? value : FirstPageIndex;
            }
        }

        /// <summary>
        /// Number of allowed records in a page.
        /// </summary>
        public int PageSize
        {
            get { return ViewState[ViewStateKeys.PageSize] == null ? 10 : (int)ViewState[ViewStateKeys.PageSize]; }
            set {
                ViewState[ViewStateKeys.PageSize] = value >= MinPageSize ? value : MinPageSize;
            }
        }

        /// <summary>
        /// The number of pages to display at a time.
        /// </summary>
        public int DisplayPageCount
        {
            get
            {
                return ViewState[ViewStateKeys.DisplayPageCount] == null
                           ? 1
                           : (int)ViewState[ViewStateKeys.DisplayPageCount];
            }
            set
            {
                int dislpayPageCount = value;
                if(dislpayPageCount < MinDisplayPageCount)
                {
                    dislpayPageCount = MinDisplayPageCount;
                }

                ViewState[ViewStateKeys.DisplayPageCount] = dislpayPageCount;
            }
        }

        /// <summary>
        /// The total number of pages in the set we are 
        /// pagingi through.
        /// </summary>
        public int TotalPageCount
        {
            get
            {
                if(PageSize > 0)
                {
                    return (int)Math.Ceiling((double)ItemCount / PageSize);
                }
                return 0;
            }
        }

        public string UrlFormat
        {
            get { return _urlFormat; }
            set { _urlFormat = value; }
        }

        public string LinkFormat
        {
            get { return _linkFormat; }
            set { _linkFormat = value; }
        }

        public string LinkFormatActive
        {
            get { return _linkFormatActive; }
            set { _linkFormatActive = value; }
        }

        public bool UseFirstLast
        {
            get { return displayFirstLastPageLinks; }
            set { displayFirstLastPageLinks = value; }
        }

        public string FirstText
        {
            get { return _firstText; }
            set { _firstText = value; }
        }

        public string LastText
        {
            get { return _lastText; }
            set { _lastText = value; }
        }

        public bool UsePrefixSuffix
        {
            get { return _usePrefixSuffix; }
            set { _usePrefixSuffix = value; }
        }

        public string SuffixText
        {
            get { return _suffixText; }
            set { _suffixText = value; }
        }

        public string PrefixText
        {
            get { return _prefixText; }
            set { _prefixText = value; }
        }

        /// <summary>
        /// Returns the index of the very last page in the set.
        /// </summary>
        public int LastPageIndex
        {
            get { return TotalPageCount - 1; }
        }

        #endregion

        #region Nested type: ViewStateKeys

        internal sealed class ViewStateKeys
        {
            internal const string DisplayPageCount = "DisplayPages";
            internal const string ItemCount = "ItemCount";
            internal const string PageIndex = "PageIndex";
            internal const string PageSize = "PageSize";
        }

        #endregion
    }

    /// <summary>
    /// Gontrols the look of the control in the designer.
    /// </summary>
    public class PagerDesigner : ControlDesigner
    {
        public override void Initialize(IComponent component)
        {
            if(component is PagingControl)
            {
                var context = component as PagingControl;
                context.PageSize = 10;
                context.ItemCount = 120;
                context.PageIndex++;
            }

            base.Initialize(component);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI.WebControls;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// An asp:Repeater control that lets you specify a template 
    /// to be displayed if there is no data in the repeater
    /// </summary>
    /// <remarks>
    /// Code taken from <see href="http://weblogs.asp.net/acampbell/archive/2004/06/19/159780.aspx">Alex 
    /// Campbell's blog.</see>
    /// </remarks>
    public class RepeaterWithEmptyDataTemplate : Repeater
    {
        /// <summary>
        /// Gets or sets the empty data template.  This contains controls 
        /// displayed when the repeater is bound to a datasource with no elements.
        /// </summary>
        /// <value></value>
        public PlaceHolder EmptyDataTemplate { get; set; }

        /// <summary>
        /// When each item is created, this checks if the item is the
        /// FooterTemplate. If it is, and the number if items is zero
        /// (empty) then it adds the EmptyDataTemplate to the containting control.
        /// </summary>
        protected override void OnItemCreated(RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Footer && Items.Count == 0)
            {
                Controls.Add(EmptyDataTemplate);
            }
            base.OnItemCreated(e);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Summary description for RichTextEditorCtl.
    /// </summary>
    [ValidationProperty("Text")]
    public class RichTextEditor : WebControl, INamingContainer
    {
        private Control editor;
        private BlogEntryEditorProvider _provider;

        public string Text
        {
            get { return _provider.Text; }
            set { _provider.Text = value; }
        }

        public override Unit Height { get; set; }

        public override Unit Width { get; set; }


        public string Xhtml
        {
            get { return _provider.Xhtml; }
        }

        public event EventHandler<RichTextEditorErrorEventArgs> Error;

        public void OnError(Exception ex)
        {
            EventHandler<RichTextEditorErrorEventArgs> error = Error;
            if(error != null)
            {
                error(this, new RichTextEditorErrorEventArgs(ex));
            }
        }

        protected override void OnInit(EventArgs e)
        {
            try
            {
                _provider = BlogEntryEditorProvider.Instance();
                _provider.ControlId = ID;
                _provider.InitializeControl((Page as SubtextPage).SubtextContext);

                if(Height != Unit.Empty)
                {
                    _provider.Height = Height;
                }
                if(Width != Unit.Empty)
                {
                    _provider.Width = Width;
                }

                editor = _provider.RichTextEditorControl;
                Controls.Add(editor);
                base.OnInit(e);
            }
            catch(ArgumentNullException ex)
            {
                OnError(ex);
            }
            catch(InvalidOperationException ex)
            {
                OnError(ex);
            }
            catch(UnauthorizedAccessException ex)
            {
                OnError(ex);
            }
        }
    }

    public class RichTextEditorErrorEventArgs : EventArgs
    {
        public RichTextEditorErrorEventArgs(Exception ex)
        {
            Exception = ex;
        }

        public Exception Exception { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace Subtext.Web.Controls
{
    /// <summary>
    /// Contains helper methods for unpacking scripts 
    /// embedded as assembly resources.
    /// </summary>
    public static class ScriptHelper
    {
        /// <summary>
        /// Returns a string representation of the specified embedded 
        /// script file.  The script is wrapped with script start and end tags 
        /// and assumes the script language is "vbscript" if the file extension 
        /// is ".vbs" and "javascript" otherwise.
        /// </summary>
        /// <remarks>
        /// Using a naming convention, all scripts are placed in the Resources\Scripts 
        /// folder. The ScriptName should just be the filename of the script.  For example, 
        /// if you embed a file at the following location "Resources\Scripts\MyScript.js", 
        /// the ScriptName to pass is "MyScript.js".
        /// </remarks>
        /// <param name="scriptName">FileName of the script.  Just the file name.</param>
        /// <returns>Contents of the script.</returns>
        public static string UnpackScript(string scriptName)
        {
            string language = "javascript";
            string extension = Path.GetExtension(scriptName);

            if(String.Equals(extension, ".vbs", StringComparison.OrdinalIgnoreCase))
            {
                language = "vbscript";
            }

            return UnpackScript(scriptName, language);
        }

        /// <summary>
        /// Returns a string representation of the specified embedded 
        /// script file.  The script is wrapped with script start and end tags 
        /// and assumes the script language is "javascript".
        /// </summary>
        /// <remarks>
        /// Using a naming convention, all scripts are placed in the Resources\Scripts 
        /// folder. The ScriptName should just be the filename of the script.  For example, 
        /// if you embed a file at the following location "Resources\Scripts\MyScript.js", 
        /// the ScriptName to pass is "MyScript.js".
        /// </remarks>
        /// <param name="scriptName">FileName of the script.  Just the file name.</param>
        /// <param name="scriptLanguage">The script language.</param>
        /// <returns>Contents of the script.</returns>
        public static string UnpackScript(string scriptName, string scriptLanguage)
        {
            return string.Format("<script type=\"text/{0}\">{1}{2}{3}</script>", scriptLanguage, Environment.NewLine, UnpackEmbeddedResourceToString(string.Format("Resources.{0}", scriptName)), Environment.NewLine);
        }

        /// <summary>
        /// Unpacks the embedded resource to string.
        /// </summary>
        /// <param name="resourceName">Name of the resource.</param>
        /// <returns></returns>
        static string UnpackEmbeddedResourceToString(string resourceName)
        {
            Assembly executingAssembly = Assembly.GetExecutingAssembly();
            Stream resourceStream = executingAssembly.GetManifestResourceStream(typeof(ScriptHelper), resourceName);
            if(resourceStream == null)
            {
                return string.Empty;
            }
            using(var reader = new StreamReader(resourceStream, Encoding.ASCII))
            {
                return reader.ReadToEnd();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web;
using System.Web.Routing;
using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace Subtext.Web
{
    public class _Default : Page
    {
        public void Page_Load(object sender, EventArgs e)
        {
            // Workaround for Cassini issue with request to /, IIS 6 and IIS 7 Classic mode.
            // In IIS7 Integrated mode, Default.aspx can be deleted.
            
            var serviceLocator = Bootstrapper.ServiceLocator;
            var pipelineService = new PipelineService(new HttpContextWrapper(HttpContext.Current), serviceLocator);
            
            var route = new RootRoute(HostInfo.Instance.BlogAggregationEnabled, serviceLocator);
            IRouteHandler routeHandler =
                new PageRouteHandler(
                    HostInfo.Instance.BlogAggregationEnabled ? "~/aspx/AggDefault.aspx" : "~/aspx/Dtp.aspx",
                    serviceLocator.GetService<ISubtextPageBuilder>(), serviceLocator);

            pipelineService.ProcessRootRequest(route, routeHandler);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Security.Principal;
using System.Web;
using System.Web.Caching;
using System.Web.Routing;
using Lucene.Net.Analysis;
using Lucene.Net.Analysis.Snowball;
using Lucene.Net.Store;
using Ninject;
using Ninject.Modules;
using Subtext.Configuration;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Emoticons;
using Subtext.Framework.Infrastructure;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Services.Account;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Syndication;
using Subtext.Framework.Web.HttpModules;
using Subtext.ImportExport;
using Subtext.Infrastructure;
using Directory=Lucene.Net.Store.Directory;

namespace Subtext
{
    public class Dependencies : NinjectModule
    {
        public override void Load()
        {
            // Main Services
            Bind<ITextTransformation>().ToMethod(context =>
                {
                    var transform = new CompositeTextTransformation
                    {
                        context.Kernel.Get<XhtmlConverter>(),
                        context.Kernel.Get<EmoticonsTransformation>(),
                        context.Kernel.Get<KeywordExpander>()
                    };
                    return transform;
                }).InRequestScope();
            Bind<ICommentService>().To<CommentService>().InRequestScope();
            Bind<ICommentFilter>().To<CommentFilter>().InRequestScope();
            Bind<IStatisticsService>().To<StatisticsService>().InRequestScope();
            Bind<ICommentSpamService>().To<AkismetSpamService>()
                .When(r => !String.IsNullOrEmpty(r.ParentContext.Kernel.Get<Blog>().FeedbackSpamServiceKey))
                .InRequestScope()
                .WithConstructorArgument("apiKey", c => c.Kernel.Get<Blog>().FeedbackSpamServiceKey)
                .WithConstructorArgument("akismetClient", c => null);

            var indexingSettings = FullTextSearchEngineSettings.Settings;

            if (indexingSettings.IsEnabled)
            {
                Bind<Directory>()
                    .ToMethod(c => FSDirectory.Open(new DirectoryInfo(c.Kernel.Get<HttpContext>().Server.MapPath(indexingSettings.IndexFolderLocation))))
                    .InSingletonScope();
                Bind<Analyzer>().To<SnowballAnalyzer>().InSingletonScope()
                    .WithConstructorArgument("name", indexingSettings.Language)
                    .WithConstructorArgument("stopSet", indexingSettings.StopWords);
            }

            // Dependencies you're less likely to change.
            LoadCoreDependencies();
            LoadGenericDependencies();
        }

        private void LoadCoreDependencies()
        {
            BindBlogMLDependencies();
            Bind<IAccountService>().To<AccountService>().InSingletonScope();
            Bind<IEntryPublisher>().To<EntryPublisher>().InRequestScope();
            Bind<FriendlyUrlSettings>().ToMethod(context => FriendlyUrlSettings.Settings).InRequestScope();
            Bind<FullTextSearchEngineSettings>().ToMethod(context => FullTextSearchEngineSettings.Settings).InRequestScope();
            Bind<ISubtextPageBuilder>().To<SubtextPageBuilder>().InSingletonScope();
            Bind<ISlugGenerator>().To<SlugGenerator>().InRequestScope();
            Bind<FriendlyUrlSettings>().To<FriendlyUrlSettings>().InRequestScope();
            Bind<IPrincipal>().ToMethod(context => context.Kernel.Get<RequestContext>().HttpContext.User).InRequestScope();
            Bind<Blog>().ToMethod(c => BlogRequest.Current.Blog).When(r => BlogRequest.Current.Blog != null).InRequestScope();
            Bind<ObjectProvider>().ToMethod(c => new DatabaseObjectProvider()).InRequestScope();
            Bind<ICache>().To<SubtextCache>().InRequestScope();
            Bind<Cache>().ToMethod(c => HttpContext.Current.Cache).InRequestScope();
            Bind<OpmlWriter>().To<OpmlWriter>().InRequestScope();
            Bind<IKernel>().ToMethod(context => context.Kernel).InSingletonScope();
            Bind<Tracking>().ToMethod(context => Config.Settings.Tracking).InSingletonScope();
            Bind<IInstallationManager>().To<InstallationManager>();
            Bind<IInstaller>().ToMethod(context => new SqlInstaller(Config.ConnectionString));
            Bind<RouteCollection>().ToConstant(RouteTable.Routes).InSingletonScope();
            Bind<HttpContext>().ToMethod(c => HttpContext.Current).InRequestScope();
            Bind<ISubtextContext>().To<SubtextContext>().InRequestScope();
            Bind<RequestContext>().ToMethod(c => Bootstrapper.RequestContext).InRequestScope();
            Bind<IServiceLocator>().To<NinjectServiceLocator>().InSingletonScope();

            var indexingSettings = FullTextSearchEngineSettings.Settings;
            if (indexingSettings.IsEnabled)
            {
                Bind<IIndexingService>().To<IndexingService>().InSingletonScope();
                Bind<ISearchEngineService>().To<SearchEngineService>().InSingletonScope();
            }
            else
            {
                Bind<IIndexingService>().To<NoOpIndexingService>().InSingletonScope();
                Bind<ISearchEngineService>().To<NoOpSearchEngineService>().InSingletonScope();
            }
        }

        private void LoadGenericDependencies()
        {
            Bind<NameValueCollection>().ToMethod(c => ConfigurationManager.AppSettings).When(c => c.Target.Name == "appSettings").InRequestScope();
        }

        private void BindBlogMLDependencies()
        {
            Bind<IBlogImportRepository>().To<BlogImportRepository>().InRequestScope();
            Bind<IBlogImportService>().To<BlogImportService>().InRequestScope();
            Bind<IBlogMLImportMapper>().To<BlogMLImportMapper>().InRequestScope();
            Bind<IBlogMLExportMapper>().To<BlogMLExportMapper>().InRequestScope();
            Bind<IBlogMLSource>().To<BlogMLSource>().InRequestScope();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using log4net;
using Ninject.Modules;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Logging;
using Subtext.Framework.Routing;
using Subtext.Framework.Security;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;
using Subtext.Web.Infrastructure;

namespace Subtext.Web
{
    public class SubtextApplication : HttpApplication
    {
        //This call is to kickstart log4net.
        //log4net Configuration Attribute is in AssemblyInfo
        private const string BadConnectionStringPage = "~/aspx/SystemMessages/CheckYourConnectionString.aspx";
        private const string DatabaseLoginFailedPage = "~/aspx/SystemMessages/DatabaseLoginFailed.aspx";
        private const string DeprecatedPhysicalPathsPage = "~/aspx/SystemMessages/DeprecatedPhysicalPaths.aspx";
        private const string ErrorPageLocation = "~/aspx/SystemMessages/error.aspx";
        private readonly static ILog Log = new Log(LogManager.GetLogger(typeof(SubtextApplication)));

        public SubtextApplication() : this(new Dependencies())
        {
        }

        public SubtextApplication(INinjectModule module)
        {
            if(module != null)
            {
                Bootstrapper.InitializeKernel(module);
            }
        }

        public bool LogInitialized { get; private set; }
        public ReadOnlyCollection<string> DeprecatedPhysicalPaths { get; private set; }

        /// <summary>
        /// Method called by the application on startup.  
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Application_Start(object sender, EventArgs e)
        {
            var routes = new SubtextRouteMapper(RouteTable.Routes, Bootstrapper.ServiceLocator);
            StartApplication(routes, new HttpServerUtilityWrapper(Server));
            Application["DeprecatedPhysicalPaths"] = DeprecatedPhysicalPaths;
        }

        public virtual void StartApplication(SubtextRouteMapper routes, HttpServerUtilityBase server)
        {
            Routes.RegisterRoutes(routes);
            var factory = new SubtextControllerFactory(routes.ServiceLocator);
            ControllerBuilder.Current.SetControllerFactory(factory);

            var deprecatedPaths = new[]
            {
                "~/Admin", "~/HostAdmin", "~/Install",
                "~/SystemMessages", "~/AggDefault.aspx", "~/DTP.aspx",
                "~/ForgotPassword.aspx", "~/login.aspx", "~/logout.aspx", "~/MainFeed.aspx"
            };
            var invalidPaths = 
                from path in deprecatedPaths 
                where Directory.Exists(server.MapPath(path)) || File.Exists(server.MapPath(path))
                select path;
            DeprecatedPhysicalPaths = new ReadOnlyCollection<string>(invalidPaths.ToList());
        }

        public override void Init()
        {
            if(DeprecatedPhysicalPaths == null)
            {
                DeprecatedPhysicalPaths = Application["DeprecatedPhysicalPaths"] as ReadOnlyCollection<string>;
            }
        }

        /// <summary>
        /// <para>
        /// This is used to vary partial caching of ASCX controls and ASPX pages on a per blog basis.  
        /// You can see this in action via the [PartialCaching] attribute.
        /// </para>
        /// <para>
        /// Provides an application-wide implementation of the <see cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom"/> property.
        /// </para>
        /// </summary>
        /// <param name="context">An <see cref="T:System.Web.HttpContext"/> that contains information about the current Web request</param>
        /// <param name="custom"></param>
        /// <returns>
        /// If the value of the <paramref name="custom"/> parameter is "browser", the browser's
        /// <see cref="System.Web.HttpBrowserCapabilities.Type"/> ; otherwise,
        /// <see langword="null"/> .
        /// </returns>
        public override string GetVaryByCustomString(HttpContext context, string custom)
        {
            if(custom == "Blogger")
            {
                return string.Format("{0}:{1}", Config.CurrentBlog.Id.ToString(CultureInfo.InvariantCulture), SecurityHelper.IsAdmin);
            }

            return base.GetVaryByCustomString(context, custom);
        }

        /// <summary>
        /// Method called during at the beginning of each request.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Application_BeginRequest(object sender, EventArgs e)
        {
            if(BlogRequest.Current.RequestLocation != RequestLocation.StaticFile)
            {
                BeginApplicationRequest(Log);
            }
        }

        protected void Application_EndRequest(object sender, EventArgs e)
        {
            Bootstrapper.ServiceLocator.DisposeRequestScoped(HttpContext.Current);
        }

        public void BeginApplicationRequest(ILog log)
        {
            if(!LogInitialized)
            {
                //This line will trigger the configuration.
                log.Info("Subtext Application Started");
                LogInitialized = true;
            }

            if(DeprecatedPhysicalPaths != null && DeprecatedPhysicalPaths.Count > 0)
            {
                throw new DeprecatedPhysicalPathsException(DeprecatedPhysicalPaths);
            }
        }

        /// <summary>
        /// Handles the Error event of the Application control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        protected void Application_Error(Object sender, EventArgs e)
        {
            Exception exception = Server.GetLastError();
            if(BlogRequest.Current == null || BlogRequest.Current.RequestLocation != RequestLocation.StaticFile)
            {
                var installationManager = Bootstrapper.ServiceLocator.GetService<IInstallationManager>();
                OnApplicationError(exception, new HttpServerUtilityWrapper(Server), Log, installationManager);
            }
        }

        public void OnApplicationError(Exception exception, HttpServerUtilityBase server, ILog log, IInstallationManager installationManager)
        {
            exception = UnwrapHttpUnhandledException(exception);
            if(exception == null)
            {
                server.Transfer(ErrorPageLocation);
                return;
            }

            if(HandleDeprecatedFilePathsException(exception, server, this))
            {
                return;
            }

            LogIfCommentException(exception, log);

            if(HandleSqlException(exception, server))
            {
                return;
            }

            BlogRequest blogRequest = BlogRequest.Current;
            if(HandleRequestLocationException(exception, blogRequest, installationManager, new HttpResponseWrapper(Response)))
            {
                return;
            }

            if(HandleBadConnectionStringException(exception, server))
            {
                return;
            }

            if(exception is HttpException)
            {
                if(((HttpException)exception).GetHttpCode() == 404)
                {
                    return;
                }
            }

            bool isCustomErrorEnabled = Context == null ? false : Context.IsCustomErrorEnabled;

            HandleUnhandledException(exception, server, isCustomErrorEnabled, log);
        }

        public static Exception UnwrapHttpUnhandledException(Exception exception)
        {
            if(exception is HttpUnhandledException)
            {
                if(exception.InnerException == null)
                {
                    return null;
                }
                exception = exception.InnerException;
            }
            return exception;
        }

        public static bool HandleDeprecatedFilePathsException(Exception exception, HttpServerUtilityBase server,
                                                              SubtextApplication application)
        {
            var depecratedException = exception as DeprecatedPhysicalPathsException;
            if(depecratedException != null)
            {
                server.Execute(DeprecatedPhysicalPathsPage, false);
                server.ClearError();
                application.FinishRequest();
                return true;
            }

            return false;
        }

        public virtual void FinishRequest()
        {
            CompleteRequest();
        }

        public static void LogIfCommentException(Exception exception, ILog log)
        {
            var commentException = exception as BaseCommentException;
            if(commentException != null)
            {
                string message = "Comment exception thrown and handled in Global.asax.";
                if(HttpContext.Current != null && HttpContext.Current.Request != null)
                {
                    message += string.Format("-- User Agent: {0}", HttpContext.Current.Request.UserAgent);
                }
                log.Info(message, commentException);
            }
        }

        public static bool HandleSqlException(Exception exception, HttpServerUtilityBase server)
        {
            //Sql Exception and request is for "localhost"
            var sqlException = exception as SqlException;
            if(sqlException != null)
            {
                int exceptionNumber = sqlException.Number;
                string message = sqlException.Message;

                return HandleSqlExceptionNumber(exceptionNumber, message, server);
            }
            return false;
        }

        public static bool HandleSqlExceptionNumber(int exceptionNumber, string exceptionMessage,
                                                    HttpServerUtilityBase server)
        {
            if(exceptionNumber == (int)SqlErrorMessage.SqlServerDoesNotExistOrAccessDenied
               ||
               (exceptionNumber == (int)SqlErrorMessage.CouldNotFindStoredProcedure &&
                exceptionMessage.Contains("'blog_GetConfig'"))
                )
            {
                // Probably a bad connection string.
                server.Transfer(BadConnectionStringPage);
                return true;
            }

            if(exceptionNumber == (int)SqlErrorMessage.LoginFailsCannotOpenDatabase
               || exceptionNumber == (int)SqlErrorMessage.LoginFailed
               || exceptionNumber == (int)SqlErrorMessage.LoginFailedInvalidUserOfTrustedConnection
               || exceptionNumber == (int)SqlErrorMessage.LoginFailedNotAssociatedWithTrustedConnection
               || exceptionNumber == (int)SqlErrorMessage.LoginFailedUserNameInvalid
                )
            {
                // Probably a bad connection string.
                server.Transfer(DatabaseLoginFailedPage);
                return true;
            }
            return false;
        }

        public static bool HandleRequestLocationException(Exception exception, BlogRequest blogRequest, IInstallationManager installManager, HttpResponseBase response)
        {
            if(blogRequest.RequestLocation != RequestLocation.Installation &&
               blogRequest.RequestLocation != RequestLocation.Upgrade)
            {
                if(installManager.InstallationActionRequired(VersionInfo.CurrentAssemblyVersion, exception))
                {
                    response.Redirect("~/install/default.aspx", true);
                    return true;
                }
            }

            if(blogRequest.RequestLocation != RequestLocation.SystemMessages)
            {
                if(exception.GetType() == typeof(BlogInactiveException))
                {
                    response.Redirect("~/SystemMessages/BlogNotActive.aspx", true);
                    return true;
                }
            }
            return false;
        }

        public static bool HandleBadConnectionStringException(Exception exception, HttpServerUtilityBase server)
        {
            if(exception is InvalidOperationException && exception.Message.Contains("ConnectionString"))
            {
                // Probably a missing connection string.
                server.Transfer(BadConnectionStringPage);
                return true;
            }

            if(exception is ArgumentException
               && (
                      exception.Message.Contains("Keyword not supported")
                      || exception.Message.Contains("Invalid value for key")
                  )
                )
            {
                // Probably a malformed connection string.
                server.Transfer(BadConnectionStringPage);
                return true;
            }

            return false;
        }

        public static void HandleUnhandledException(Exception exception, HttpServerUtilityBase server,
                                                    bool isCustomErrorEnabled, ILog log)
        {
            if(isCustomErrorEnabled)
            {
                server.Transfer(ErrorPageLocation);
            }
            else
            {
                log.Error("Unhandled Exception trapped in Global.asax", exception);
            }
        }

        /// <summary>
        /// Handles the End event of the Application control.
        /// </summary>
        protected void Application_End()
        {
            EndApplication();
        }

        public void EndApplication()
        {
            var searchEngine = Bootstrapper.ServiceLocator.GetService<ISearchEngineService>();
            if(searchEngine!=null)
                searchEngine.Dispose();
            LogInitialized = false;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Web.Mvc;

namespace Subtext.Web.Infrastructure
{
    public class EmptyTempDataProvider : ITempDataProvider
    {
        static readonly Dictionary<string, object> TempData = new Dictionary<string, object>();

        public IDictionary<string, object> LoadTempData(ControllerContext controllerContext)
        {
            return TempData;
        }

        public void SaveTempData(ControllerContext controllerContext, IDictionary<string, object> values)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.Mvc;
using System.Web.Routing;
using Subtext.Infrastructure;

namespace Subtext.Web.Infrastructure
{
    public class SubtextControllerFactory : IControllerFactory
    {
        public SubtextControllerFactory(IServiceLocator serviceLocator)
        {
            ServiceLocator = serviceLocator;
        }

        protected IServiceLocator ServiceLocator { get; private set; }

        public IController CreateController(RequestContext requestContext, string controllerName)
        {
            Bootstrapper.RequestContext = requestContext;

            IController instance = null;
            Type controllerType = Type.GetType(string.Format("Subtext.Web.Controllers.{0}Controller", controllerName), false /*ignoreOnError*/, true /*ignoreCase*/);
            if(controllerType != null)
            {
                instance = ServiceLocator.GetService(controllerType) as IController;
                var controller = instance as Controller;
                if(controller != null)
                {
                    controller.TempDataProvider = new EmptyTempDataProvider();
                }
            }

            return instance;
        }

        public void ReleaseController(IController controller)
        {
            var disposable = controller as IDisposable;
            if(disposable != null)
            {
                disposable.Dispose();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

// This file contains documentation for the various Namespaces within this assembly.
// These classes are only used by NDoc to generate namespace documentation.
// They should all be internal sealed classes with private constructors.
//
// http://ndoc.sourceforge.net/reference/NDoc.Core.Reflection.BaseReflectionDocumenterConfig.UseNamespaceDocSummaries.html


#if DOCUMENTATION

namespace Subtext.Web
{
    /// <summary>
    /// This is the top level namespace for the Subtext Web application.  
    /// It contains classes and sub-name spaces focused on rendering 
    /// the contents of a blog.
    /// </summary>
    internal sealed class NamespaceDoc
    {
        private NamespaceDoc()
        {
        }
    }
}

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// This namespace contains all the controls used to render a blog.  
    /// Notice that these controls have corresponding declarations within 
    /// the .ascx files in any given skins directory.  These controls provide 
    /// the code and logic for those user controls.
    /// </summary>
    internal sealed class NamespaceDoc
    {
        private NamespaceDoc()
        {
        }
    }
}

namespace Subtext.Web.UI.Handlers
{
    /// <summary>
    /// Contains various classes that implement <see cref="System.Web.IHttpHandler" />.  
    /// Many handlers have been migrated to the Subtext.Framework namespace.
    /// </summary>
    internal sealed class NamespaceDoc
    {
        private NamespaceDoc()
        {
        }
    }
}

namespace Subtext.Web.UI.Pages
{
    /// <summary>
    /// Contains base page classes for the Subtext system.  Currently only 
    /// contains the <see cref="SubtextMasterPage" /> class.
    /// </summary>
    internal sealed class NamespaceDoc
    {
        private NamespaceDoc()
        {
        }
    }
}

namespace Subtext.Web.Admin.Pages
{
    /// <summary>
    /// Contains the ASPX pages and code behind for the Admin section 
    /// used to configure and administrate a Subtext blog.
    /// </summary>
    internal sealed class NamespaceDoc
    {
        private NamespaceDoc()
        {
        }
    }
}

#endif#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Web.UI;
using log4net.Config;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//

[assembly: AssemblyTitle("Subtext.Web")]
[assembly: AssemblyDescription("ASP.NET Website implementation implented as a Class Library rather than a Web Project.")
]
[assembly: AssemblyCulture("")]
[assembly: ComVisible(false)]
[assembly: CLSCompliant(false)]
[assembly: XmlConfigurator(ConfigFile = "Log4Net.config", Watch = true)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, Execution = true)]
[assembly: WebResource("Subtext.Web.Controls.Resources.InvisibleCaptcha.js", "text/javascript")]#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

// This file is used by Code Analysis to maintain SuppressMessage 
// attributes that are applied to this project. 
// Project-level suppressions either have no target or are given 
// a specific target and scoped to a namespace, type, member, etc. 
//
// To add a suppression to this file, right-click the message in the 
// Error List, point to "Suppress Message(s)", and click 
// "In Project Suppression File". 
// You do not need to add suppressions to this file manually. 

using System.Diagnostics.CodeAnalysis;

[assembly:
    SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Captcha",
        Scope = "namespace", Target = "Subtext.Web.Controls.Captcha")]
[assembly:
    SuppressMessage("Microsoft.Design", "CA1020:AvoidNamespacesWithFewTypes", Scope = "namespace",
        Target = "Subtext.Web.Controls.Designers")]
[assembly: SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames")]
[assembly:
    SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId = "captcha",
        Scope = "resource", Target = "Subtext.Web.Controls.Properties.Resources.resources")]
[assembly:
    SuppressMessage("Microsoft.Naming", "CA1703:ResourceStringsShouldBeSpelledCorrectly", MessageId = "Captcha",
        Scope = "resource", Target = "Subtext.Web.Controls.Properties.Resources.resources")]ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Subtext.Web.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to height must be greater than {0}..
        /// </summary>
        public static string ArgumentOutOfRange_Height {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Height", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Priority must be in range from 0.0 to 1.0!.
        /// </summary>
        public static string ArgumentOutOfRange_Priority {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Priority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to width must be greater than {0}..
        /// </summary>
        public static string ArgumentOutOfRange_Width {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Width", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;
        ///&lt;strong&gt;This sets the subfolder of the host domain that the blog will appear to be located in.&lt;/strong&gt;
        ///&lt;/p&gt;
        ///&lt;p&gt;For example, if you enter &amp;#8220;MyBlog&amp;#8221; 
        ///(sans quotes of course) for the application, then the root URL to your blog 
        ///would be &lt;em&gt;http://[HOSTDOMAIN]/MyBlog/Default.aspx&lt;/em&gt;
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///Leave this value blank if you wish to host your blog in the root of your website.
        ///&lt;/p&gt;
        ///&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you specify a sub-folder, you do not need to set up a virtual directory 
        ///corr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BlogsEditor_ApplicationHelpTip {
            get {
                return ResourceManager.GetString("BlogsEditor_ApplicationHelpTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Activated and ready to go..
        /// </summary>
        public static string BlogsEditor_BlogActivated {
            get {
                return ResourceManager.GetString("BlogsEditor_BlogActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Created..
        /// </summary>
        public static string BlogsEditor_BlogCreated {
            get {
                return ResourceManager.GetString("BlogsEditor_BlogCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Inactivated and sent to a retirement community..
        /// </summary>
        public static string BlogsEditor_BlogDeactivated {
            get {
                return ResourceManager.GetString("BlogsEditor_BlogDeactivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Saved.
        /// </summary>
        public static string BlogsEditor_BlogSaved {
            get {
                return ResourceManager.GetString("BlogsEditor_BlogSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Emptiness is quite Zen. Still, please enter a value for &quot;{0}&quot;..
        /// </summary>
        public static string BlogsEditor_FieldRequired {
            get {
                return ResourceManager.GetString("BlogsEditor_FieldRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Use this page to manage the blogs installed on this server.
        ///For more information on configuring blogs, see the &lt;a href=&apos;http://www.subtextproject.com/Home/Docs/Configuration/tabid/112/Default.aspx&apos; target=&apos;_blank&apos;&gt;configuration docs&lt;/a&gt; (opens a new window).
        ///&lt;/p&gt;.
        /// </summary>
        public static string BlogsEditor_HelpText {
            get {
                return ResourceManager.GetString("BlogsEditor_HelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;&lt;strong&gt;Host Domain&lt;/strong&gt; is the domain name for this blog. 
        ///If you never plan on setting up another blog on this server, then you do not have 
        ///to worry about this setting.  However, if you decide to add another blog at a later 
        ///time, it&amp;#8217;s important to update this setting for your initial blog.&lt;/p&gt;
        ///&lt;p&gt;For example, if you are hosting this blog at http://www.example.com/, the Host Domain 
        ///would be &amp;#8220;www.example.com&amp;#8221;.&lt;/p&gt;&lt;p&gt;If you are trying to set this up on your 
        ///own machine for  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BlogsEditor_HostDomainHelpText {
            get {
                return ResourceManager.GetString("BlogsEditor_HostDomainHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Blog.
        /// </summary>
        public static string BlogsEditor_NewBlogLabel {
            get {
                return ResourceManager.GetString("BlogsEditor_NewBlogLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A password is required when creating a blog. Pick a good one..
        /// </summary>
        public static string BlogsEditor_PasswordRequired {
            get {
                return ResourceManager.GetString("BlogsEditor_PasswordRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Password and Confirmation do not match. Try retyping your password in both fields..
        /// </summary>
        public static string BlogsEditor_PasswordsDoNotMatch {
            get {
                return ResourceManager.GetString("BlogsEditor_PasswordsDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Update Cancelled. Nothing to see here..
        /// </summary>
        public static string BlogsEditor_UpdateCancelled {
            get {
                return ResourceManager.GetString("BlogsEditor_UpdateCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Brevity is rewarded. &quot;{0}&quot; may only have &quot;{1}&quot; characters..
        /// </summary>
        public static string BlogsEditor_ValueTooLong {
            get {
                return ResourceManager.GetString("BlogsEditor_ValueTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next Month.
        /// </summary>
        public static string Calendar_NextMonth {
            get {
                return ResourceManager.GetString("Calendar_NextMonth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous Month.
        /// </summary>
        public static string Calendar_PreviousMonth {
            get {
                return ResourceManager.GetString("Calendar_PreviousMonth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encrypted encoded text &apos;{0}&apos; was not valid..
        /// </summary>
        public static string CaptchaExpired_EncryptedTextNotValid {
            get {
                return ResourceManager.GetString("CaptchaExpired_EncryptedTextNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Captcha image expired, probably due to recompile making the key out of synch..
        /// </summary>
        public static string CaptchaExpired_KeyOutOfSynch {
            get {
                return ResourceManager.GetString("CaptchaExpired_KeyOutOfSynch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User waited too long to submit captcha.
        /// </summary>
        public static string CaptchaExpired_WaitedTooLong {
            get {
                return ResourceManager.GetString("CaptchaExpired_WaitedTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Akismet requires &lt;code&gt;{0}&lt;/code&gt; in order to make web requests. Please ask your hosting provider to &lt;a href=&quot;http://weblogs.asp.net/hosterposter/archive/2006/03/22/440886.aspx&quot; title=&quot;Enabling WebPermission in Medium Trust&quot;&gt;enable this permission&lt;/a&gt;..
        /// </summary>
        public static string Comments_AkismetRequiresPermissionType {
            get {
                return ResourceManager.GetString("Comments_AkismetRequiresPermissionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, could not verify that Akismet API key..
        /// </summary>
        public static string Comments_CouldNotVerifyAkismetKey {
            get {
                return ResourceManager.GetString("Comments_CouldNotVerifyAkismetKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment settings update failed..
        /// </summary>
        public static string Comments_SettingsFailed {
            get {
                return ResourceManager.GetString("Comments_SettingsFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your comment settings were successfully updated..
        /// </summary>
        public static string Comments_SettingsUpdated {
            get {
                return ResourceManager.GetString("Comments_SettingsUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment Delay.
        /// </summary>
        public static string CommentValidation_CommentDelay {
            get {
                return ResourceManager.GetString("CommentValidation_CommentDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; of {1} would block an IP for a really long time. Let&apos;s be reasonable..
        /// </summary>
        public static string CommentValidation_CommentDelayTooBig {
            get {
                return ResourceManager.GetString("CommentValidation_CommentDelayTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; should larger than {1}. You can&apos;t go back in time..
        /// </summary>
        public static string CommentValidation_CommentDelayTooSmall {
            get {
                return ResourceManager.GetString("CommentValidation_CommentDelayTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Days Till Comments Close.
        /// </summary>
        public static string CommentValidation_DaysTillClose {
            get {
                return ResourceManager.GetString("CommentValidation_DaysTillClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Length of Recent Comments to Display (Number of characters).
        /// </summary>
        public static string CommentValidation_LengthOfRecentComment {
            get {
                return ResourceManager.GetString("CommentValidation_LengthOfRecentComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of Recent Comments to Display.
        /// </summary>
        public static string CommentValidation_RecentCommentsCount {
            get {
                return ResourceManager.GetString("CommentValidation_RecentCommentsCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConfirmCommand was not set upon transfer..
        /// </summary>
        public static string Confirm_CommandNotSet {
            get {
                return ResourceManager.GetString("Confirm_CommandNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive has been processed..
        /// </summary>
        public static string EditGalleries_ArchiveProcessed {
            get {
                return ResourceManager.GetString("EditGalleries_ArchiveProcessed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing Image &quot;{0}&quot;.
        /// </summary>
        public static string EditGalleries_EditImage {
            get {
                return ResourceManager.GetString("EditGalleries_EditImage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file already exists on the server. Please provide a name for the file..
        /// </summary>
        public static string EditGalleries_FileAlreadyExists {
            get {
                return ResourceManager.GetString("EditGalleries_FileAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image was successfully added to the gallery..
        /// </summary>
        public static string EditGalleries_ImageAdded {
            get {
                return ResourceManager.GetString("EditGalleries_ImageAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An image identifier was not available, could not load your image..
        /// </summary>
        public static string EditGalleries_ImageIdentifierMissing {
            get {
                return ResourceManager.GetString("EditGalleries_ImageIdentifierMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image was successfully updated..
        /// </summary>
        public static string EditGalleries_ImageUpdated {
            get {
                return ResourceManager.GetString("EditGalleries_ImageUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must have at least one valid Gallery before working with individual images..
        /// </summary>
        public static string EditGalleries_MustHaveOneGallery {
            get {
                return ResourceManager.GetString("EditGalleries_MustHaveOneGallery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a baseline problem posting your entry..
        /// </summary>
        public static string EditGalleries_ProblemPosting {
            get {
                return ResourceManager.GetString("EditGalleries_ProblemPosting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Valid file name for server image is required..
        /// </summary>
        public static string EditGalleries_ValidFilenameRequired {
            get {
                return ResourceManager.GetString("EditGalleries_ValidFilenameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Viewing Gallery &quot;{0}&quot;.
        /// </summary>
        public static string EditGalleries_ViewingGallery {
            get {
                return ResourceManager.GetString("EditGalleries_ViewingGallery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to add a category before you can add links! Click &quot;Edit Categories&quot;.
        /// </summary>
        public static string EditLinks_NeedToAddCategoryFirst {
            get {
                return ResourceManager.GetString("EditLinks_NeedToAddCategoryFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find category id {0} in the Checkbox list which has {1} items..
        /// </summary>
        public static string EntryEditor_CouldNotFindCategoryInList {
            get {
                return ResourceManager.GetString("EntryEditor_CouldNotFindCategoryInList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Editing {0} &quot;{1}&quot;.
        /// </summary>
        public static string EntryEditor_EditingTitle {
            get {
                return ResourceManager.GetString("EntryEditor_EditingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error during Community Credits submission (your post has been saved).
        /// </summary>
        public static string EntryEditor_ErrorSendingToCommunityCredits {
            get {
                return ResourceManager.GetString("EntryEditor_ErrorSendingToCommunityCredits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a baseline problem updating the post categories..
        /// </summary>
        public static string EntryEditor_ProblemEditingPostCategories {
            get {
                return ResourceManager.GetString("EntryEditor_ProblemEditingPostCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Comment.
        /// </summary>
        public static string EntryList_AddComment {
            get {
                return ResourceManager.GetString("EntryList_AddComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click To View Entry..
        /// </summary>
        public static string EntryList_ClickToView {
            get {
                return ResourceManager.GetString("EntryList_ClickToView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Comments.
        /// </summary>
        public static string EntryList_CommentsPlural {
            get {
                return ResourceManager.GetString("EntryList_CommentsPlural", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One Comment.
        /// </summary>
        public static string EntryList_OneComment {
            get {
                return ResourceManager.GetString("EntryList_OneComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Permanent link to this post.
        /// </summary>
        public static string EntryList_PermanentLink {
            get {
                return ResourceManager.GetString("EntryList_PermanentLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View and Add Comments.
        /// </summary>
        public static string EntryList_ViewAndAddComments {
            get {
                return ResourceManager.GetString("EntryList_ViewAndAddComments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No error message available..
        /// </summary>
        public static string ErrorPage_NoErrorMessage {
            get {
                return ResourceManager.GetString("ErrorPage_NoErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing was selected as spam..
        /// </summary>
        public static string Feedback_NothingFlaggedAsSpam {
            get {
                return ResourceManager.GetString("Feedback_NothingFlaggedAsSpam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing was selected to be approved..
        /// </summary>
        public static string Feedback_NothingToApprove {
            get {
                return ResourceManager.GetString("Feedback_NothingToApprove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing was selected to be deleted..
        /// </summary>
        public static string Feedback_NothingToDelete {
            get {
                return ResourceManager.GetString("Feedback_NothingToDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing was selected to be destroyed..
        /// </summary>
        public static string Feedback_NothingToDestroy {
            get {
                return ResourceManager.GetString("Feedback_NothingToDestroy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your new password.
        /// </summary>
        public static string ForgotPassword_NewPassword {
            get {
                return ResourceManager.GetString("ForgotPassword_NewPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password was reset and sent to your email address..
        /// </summary>
        public static string ForgotPassword_NewPasswordSent {
            get {
                return ResourceManager.GetString("ForgotPassword_NewPasswordSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but the username and email provided did not match our records.
        /// </summary>
        public static string ForgotPassword_UsernameAndPasswordDoNotMatch {
            get {
                return ResourceManager.GetString("ForgotPassword_UsernameAndPasswordDoNotMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but forgot password does not work for Host admins. Please read &lt;a href=&quot;http://subtextproject.com/Home/FAQ/tabid/113/Default.aspx&quot; title=&quot;Subtext FAQ&quot;&gt;the FAQ&lt;/a&gt; to reset your password..
        /// </summary>
        public static string ForgotPasswordMaster_DoesNotWorkForHostAdmins {
            get {
                return ResourceManager.GetString("ForgotPasswordMaster_DoesNotWorkForHostAdmins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I&apos;ve been told that you forgot your password. Here it is
        ///  {0}.
        /// </summary>
        public static string ForgotPaswword_HereIsNewPassword {
            get {
                return ResourceManager.GetString("ForgotPaswword_HereIsNewPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rebuild of full text index completed.
        /// </summary>
        public static string FullTextSearch_ReindexingCompleted {
            get {
                return ResourceManager.GetString("FullTextSearch_ReindexingCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rebuild of full text index completed with errors:&lt;br&gt;&lt;ul&gt;{0}&lt;/ul&gt;.
        /// </summary>
        public static string FullTextSearch_ReindexingCompletedWithErrorsFormat {
            get {
                return ResourceManager.GetString("FullTextSearch_ReindexingCompletedWithErrorsFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rebuild of full text index failed.
        /// </summary>
        public static string FullTextSearch_ReindexingFailed {
            get {
                return ResourceManager.GetString("FullTextSearch_ReindexingFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Group Created..
        /// </summary>
        public static string GroupsEditor_BlogGroupCreated {
            get {
                return ResourceManager.GetString("GroupsEditor_BlogGroupCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Group Saved..
        /// </summary>
        public static string GroupsEditor_BlogGroupSaved {
            get {
                return ResourceManager.GetString("GroupsEditor_BlogGroupSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Use this page to manage the blogs groups for this server. 
        ///For more information on configuring blogs, see the &lt;a href=&apos;http://www.subtextproject.com/Home/Docs/Configuration/tabid/112/Default.aspx&apos; target=&apos;_blank&apos;&gt;configuration docs&lt;/a&gt; (opens a new window).
        ///&lt;/p&gt;.
        /// </summary>
        public static string GroupsEditor_HelpTip {
            get {
                return ResourceManager.GetString("GroupsEditor_HelpTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Group Update Cancelled. Nothing to see here..
        /// </summary>
        public static string GroupsEditor_UpdateCancelled {
            get {
                return ResourceManager.GetString("GroupsEditor_UpdateCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to check the &quot;Clear Content&quot; checkbox to continue..
        /// </summary>
        public static string ImportExport_CheckContinueToClearContent {
            get {
                return ResourceManager.GetString("ImportExport_CheckContinueToClearContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success! The content has been obliterated!.
        /// </summary>
        public static string ImportExport_ContentObliterated {
            get {
                return ResourceManager.GetString("ImportExport_ContentObliterated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import of BlogML file failed..
        /// </summary>
        public static string ImportExport_ImportFailed {
            get {
                return ResourceManager.GetString("ImportExport_ImportFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BlogML file was successfully imported!.
        /// </summary>
        public static string ImportExport_ImportSuccess {
            get {
                return ResourceManager.GetString("ImportExport_ImportSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file you specified does not appear to be a valid BlogML file..
        /// </summary>
        public static string ImportExport_InvalidBlogMLFile {
            get {
                return ResourceManager.GetString("ImportExport_InvalidBlogMLFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CategoryType was not set.
        /// </summary>
        public static string InvalidOperation_CategoryTypeNotSet {
            get {
                return ResourceManager.GetString("InvalidOperation_CategoryTypeNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but we cannot accept this comment..
        /// </summary>
        public static string InvalidOperation_CommentNotValid {
            get {
                return ResourceManager.GetString("InvalidOperation_CommentNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update failed, could not located either the item Title or IsActive.
        /// </summary>
        public static string InvalidOperation_EditCategoriesControlsNotFound {
            get {
                return ResourceManager.GetString("InvalidOperation_EditCategoriesControlsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image not defined..
        /// </summary>
        public static string InvalidOperation_ImageUndefined {
            get {
                return ResourceManager.GetString("InvalidOperation_ImageUndefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activate.
        /// </summary>
        public static string Label_Activate {
            get {
                return ResourceManager.GetString("Label_Activate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds.
        /// </summary>
        public static string Label_Adds {
            get {
                return ResourceManager.GetString("Label_Adds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Article.
        /// </summary>
        public static string Label_Article {
            get {
                return ResourceManager.GetString("Label_Article", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Articles.
        /// </summary>
        public static string Label_Articles {
            get {
                return ResourceManager.GetString("Label_Articles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose....
        /// </summary>
        public static string Label_Choose {
            get {
                return ResourceManager.GetString("Label_Choose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deactivate.
        /// </summary>
        public static string Label_Deactivate {
            get {
                return ResourceManager.GetString("Label_Deactivate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Categories.
        /// </summary>
        public static string Label_EditCategories {
            get {
                return ResourceManager.GetString("Label_EditCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blog Posts.
        /// </summary>
        public static string Label_Entries {
            get {
                return ResourceManager.GetString("Label_Entries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Errors.
        /// </summary>
        public static string Label_Errors {
            get {
                return ResourceManager.GetString("Label_Errors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to images.
        /// </summary>
        public static string Label_Images {
            get {
                return ResourceManager.GetString("Label_Images", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Article.
        /// </summary>
        public static string Label_NewArticle {
            get {
                return ResourceManager.GetString("Label_NewArticle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Blog Group.
        /// </summary>
        public static string Label_NewBlogGroup {
            get {
                return ResourceManager.GetString("Label_NewBlogGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Post.
        /// </summary>
        public static string Label_NewPost {
            get {
                return ResourceManager.GetString("Label_NewPost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Other.
        /// </summary>
        public static string Label_Other {
            get {
                return ResourceManager.GetString("Label_Other", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Post.
        /// </summary>
        public static string Label_Post {
            get {
                return ResourceManager.GetString("Label_Post", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Posts.
        /// </summary>
        public static string Label_Posts {
            get {
                return ResourceManager.GetString("Label_Posts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rebuild All Tags.
        /// </summary>
        public static string Label_RebuildAllTags {
            get {
                return ResourceManager.GetString("Label_RebuildAllTags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updates.
        /// </summary>
        public static string Label_Updates {
            get {
                return ResourceManager.GetString("Label_Updates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View.
        /// </summary>
        public static string Label_View {
            get {
                return ResourceManager.GetString("Label_View", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Viewing.
        /// </summary>
        public static string Label_Viewing {
            get {
                return ResourceManager.GetString("Label_Viewing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subscribe to {0}.
        /// </summary>
        public static string LinkPage_Subscribe {
            get {
                return ResourceManager.GetString("LinkPage_Subscribe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication failed.
        /// </summary>
        public static string Login_AuthenticationFailed {
            get {
                return ResourceManager.GetString("Login_AuthenticationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That&amp;#8217;s not it.
        /// </summary>
        public static string Login_Failed {
            get {
                return ResourceManager.GetString("Login_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Categories updated successfully..
        /// </summary>
        public static string Message_CategoriesUpdatedSuccessful {
            get {
                return ResourceManager.GetString("Message_CategoriesUpdatedSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Category &quot;{0}&quot; was added..
        /// </summary>
        public static string Message_CategoryAdded {
            get {
                return ResourceManager.GetString("Message_CategoryAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A category must have a title.
        /// </summary>
        public static string Message_CategoryMustHaveTitle {
            get {
                return ResourceManager.GetString("Message_CategoryMustHaveTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Category &quot;{0}&quot; was updated..
        /// </summary>
        public static string Message_CategoryUpdated {
            get {
                return ResourceManager.GetString("Message_CategoryUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Category Update failed..
        /// </summary>
        public static string Message_CategoryUpdateFailed {
            get {
                return ResourceManager.GetString("Message_CategoryUpdateFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, but this form has expired. Please try again..
        /// </summary>
        public static string Message_FormExpired {
            get {
                return ResourceManager.GetString("Message_FormExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} The error message related to this problem was as follows: {1}.
        /// </summary>
        public static string Message_GenericError {
            get {
                return ResourceManager.GetString("Message_GenericError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter the correct word.
        /// </summary>
        public static string Message_PleaseEnterCorrectWord {
            get {
                return ResourceManager.GetString("Message_PleaseEnterCorrectWord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Posted successfully..
        /// </summary>
        public static string Message_PostedSuccessful {
            get {
                return ResourceManager.GetString("Message_PostedSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Post operation failed..
        /// </summary>
        public static string Message_PostOperationFailed {
            get {
                return ResourceManager.GetString("Message_PostOperationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Darn! An unexpected error occurred.  Not sure what happened. Sorry..
        /// </summary>
        public static string Message_UnexpectedError {
            get {
                return ResourceManager.GetString("Message_UnexpectedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updated successfully..
        /// </summary>
        public static string Message_UpdateSuccessful {
            get {
                return ResourceManager.GetString("Message_UpdateSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter a valid positive number for the field &quot;{0}&quot;.
        /// </summary>
        public static string Message_ValueMustBePositive {
            get {
                return ResourceManager.GetString("Message_ValueMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; should be less than or equal to {1}.
        /// </summary>
        public static string Message_ValueTooBig {
            get {
                return ResourceManager.GetString("Message_ValueTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; should be larger than or equal to {1}.
        /// </summary>
        public static string Message_ValueTooSmall {
            get {
                return ResourceManager.GetString("Message_ValueTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You will lose any unsaved content.
        /// </summary>
        public static string Message_YouWillLoseUnsavedContent {
            get {
                return ResourceManager.GetString("Message_YouWillLoseUnsavedContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thanks for your comment!.
        /// </summary>
        public static string PostComment_ThanksForComment {
            get {
                return ResourceManager.GetString("PostComment_ThanksForComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to That page is forbidden..
        /// </summary>
        public static string Security_PageForbidden {
            get {
                return ResourceManager.GetString("Security_PageForbidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your password can not be updated.
        /// </summary>
        public static string Security_PasswordNotUpdated {
            get {
                return ResourceManager.GetString("Security_PasswordNotUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your password has been updated.
        /// </summary>
        public static string Security_PasswordUpdated {
            get {
                return ResourceManager.GetString("Security_PasswordUpdated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  (mobile ready).
        /// </summary>
        public static string Skins_MobileReady {
            get {
                return ResourceManager.GetString("Skins_MobileReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skin Saved!.
        /// </summary>
        public static string Skins_SkinSaved {
            get {
                return ResourceManager.GetString("Skins_SkinSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are {0} entries for the tag &lt;em&gt;{1}&lt;/em&gt;.
        /// </summary>
        public static string TagEntryList_NoEntriesForTag {
            get {
                return ResourceManager.GetString("TagEntryList_NoEntriesForTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;Uh oh. Something went wrong with the installation.&lt;/p&gt;.
        /// </summary>
        public static string Upgrade_SomethingWentWrongWithInstall {
            get {
                return ResourceManager.GetString("Upgrade_SomethingWentWrongWithInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p class=&quot;error&quot;&gt;The database user specified in web.config does not have enough 
        ///permission to perform the installation.  Please give the user database owner (dbo) rights and try again. 
        ///You may remove them later.&lt;/p&gt;.
        /// </summary>
        public static string Upgrade_UserDoesNotHavePermission {
            get {
                return ResourceManager.GetString("Upgrade_UserDoesNotHavePermission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit this entry..
        /// </summary>
        public static string ViewPost_EditThisEntry {
            get {
                return ResourceManager.GetString("ViewPost_EditThisEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;&lt;strong&gt;The entry could not be found or has been removed&lt;/strong&gt;&lt;/p&gt;.
        /// </summary>
        public static string ViewPost_EntryNotFound {
            get {
                return ResourceManager.GetString("ViewPost_EntryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CaptchaExpired Exception thrown..
        /// </summary>
        public static string Warning_CaptchaExpired {
            get {
                return ResourceManager.GetString("Warning_CaptchaExpired", resourceCulture);
            }
        }
    }
}
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.Mvc;
using System.Web.Routing;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Syndication;
using Subtext.Framework.Syndication.Admin;
using Subtext.Framework.Tracking;
using Subtext.Framework.Web.Handlers;
using Subtext.Framework.XmlRpc;
using Subtext.Web.Admin.Services.Ajax;
using Subtext.Web.Controls.Captcha;
using Subtext.Web.SiteMap;
using Subtext.Web.UI.Handlers;

public static class Routes
{
    public static void RegisterRoutes(SubtextRouteMapper routes)
    {
        routes.MapControls("entry-by-id",
                   "archive/{year}/{month}/{day}/{id}.aspx"
                   ,
                   new
                   {
                       year = @"[1-9]\d{3}",
                       month = @"(0\d)|(1[0-2])",
                       day = @"([0-2]\d)|(3[0-1])",
                       id = @"\d+"
                   }
                   , new[] { "viewpost", "comments", "postcomment" });

        routes.MapControls("entry-by-slug",
                           "archive/{year}/{month}/{day}/{slug}.aspx"
                           , new { year = @"[1-9]\d{3}", month = @"(0\d)|(1[0-2])", day = @"([0-2]\d)|(3[0-1])" }
                           , new[] { "viewpost", "comments", "postcomment" });

        routes.MapRoute("comments-admin", "admin/comments/{action}.ashx", new {controller = "comment"});
        routes.Ignore("{resource}.axd/{*pathInfo}");
        routes.Ignore("skins/{*pathInfo}");
        routes.MapSystemPage("MainFeed");
        routes.MapSystemDirectories("hostadmin", "install", "SystemMessages");

        //TODO: Consider making this a single route with a constraint of the allowed pages.
        routes.MapPage("forgotpassword");
        routes.MapPage("login");

        routes.MapHttpHandler<AjaxServices>("ajax-services", "admin/Services/Ajax/AjaxServices.ashx");
        routes.MapHttpHandler<RssAdminHandler>("admin-rss", "admin/{feedName}Rss.axd");
        routes.MapRoute("export", "admin/export.ashx", new { controller = "export", action = "blogml" });
        routes.MapRoute("wlwmanifest", "wlwmanifest.xml.ashx", new { controller = "manifest", action = "index" });
        routes.MapRoute("opensearchdesc", "opensearchdesc.xml.ashx", new { controller = "opensearch", action = "index" });
        routes.MapDirectory("admin");
        routes.MapDirectory("providers");

        routes.MapHttpHandler<SiteMapHttpHandler>("sitemap.ashx");
        routes.MapHttpHandler<BrowserDetectionService>("BrowserServices.ashx");

        //Todo: Add a data token to indicate feed title.
        // By default, the main feed is RSS. To chang it to atom, just 
        // swap the route names.
        routes.MapHttpHandler<RssHandler>("rss", "rss.aspx");
        routes.MapHttpHandler<AtomHandler>("atom", "atom.aspx");
        routes.MapHttpHandler<RssCommentHandler>("comment-rss", "comments/commentRss/{id}.aspx");
        routes.MapRoute("comment-api", "comments/{id}.aspx", new {controller = "CommentApi", action = "Create"},
                        new {id = @"\d+"});
        routes.MapRoute("aggbug", "aggbug/{id}.aspx", new {controller = "Statistics", action = "RecordAggregatorView"},
                        new {id = @"\d+"});
        routes.MapHttpHandler<RsdHandler>("rsd", "rsd.xml.ashx");
        routes.MapHttpHandler<BlogSecondaryCssHandler>("customcss", "customcss.aspx");
        //TODO: routes.MapHttpHandler<CategoryRedirectHandler>("category-redirect", "category/{category}.aspx/rss", new { category = @"\d+" });
        routes.MapHttpHandler<RssCategoryHandler>("category-rss", "category/{slug}.aspx/rss",
                                                  new {category = @"[-\w\s\d]+"});
        routes.MapHttpHandler<OpmlHandler>("opml", "opml.xml.ashx");

        routes.MapPagesToControlOfSameName("contact", "ArchivePostPage", "ArticleCategories", "search");

        routes.MapControls("archives", "archives.aspx", null, new[] {"SingleColumn"});

        routes.MapControls("entries-by-day", "archive/{year}/{month}/{day}.aspx"
                           , new {year = @"[1-9]\d{3}", month = @"(0\d)|(1[0-2])", day = @"([0-2]\d)|(3[0-1])"}
                           , new[] {"ArchiveDay"});

        routes.MapControls("entries-by-month",
                           "archive/{year}/{month}.aspx"
                           , new {year = @"[1-9]\d{3}", month = @"(0\d)|(1[0-2])"}
                           , new[] {"ArchiveMonth"});

        routes.MapControls("article-by-id", "articles/{id}.aspx"
                           , new {id = @"\d+"}
                           , new[] {"viewpost", "comments", "postcomment"});

        routes.MapControls("article-by-slug", "articles/{slug}.aspx"
                           , null
                           , new[] {"viewpost", "comments", "postcomment"});

        routes.MapControls("gallery", "gallery/{id}.aspx"
                           , new {id = @"\d+"}
                           , new[] {"GalleryThumbNailViewer"});

        routes.MapControls("gallery-image", "gallery/image/{id}.aspx"
                           , new {id = @"\d+"}
                           , new[] {"ViewPicture"});

        routes.MapControls("category", "{categoryType}/{slug}.aspx"
                           , new {categoryType = @"category|stories"}
                           , new[] {"CategoryEntryList"});


        routes.MapControls("tag", "tags/{tag}/default.aspx", null, new[] {"TagEntryList"});
        routes.MapControls("tag-cloud", "tags/default.aspx", null, new[] {"FullTagCloud"});
        routes.MapHttpHandler<RssTagHandler>("tag-rss", "tags/{tag}/rss.aspx");

        routes.MapHttpHandler<TrackBackHandler>("trackbacks", "services/trackbacks/{id}.aspx", new {id = @"\d+"});
        routes.MapXmlRpcHandler<PingBackService>("services/pingback/{id}.aspx", new {id = @"\d+"});
        routes.MapXmlRpcHandler<MetaWeblog>("metaweblogapi", "services/metablogapi.aspx", null);
        
        routes.Add("identicon", new Route("images/services/IdenticonHandler.ashx", new MvcRouteHandler()) {Defaults = new RouteValueDictionary(new {controller = "identicon", action = "image"})});
        routes.Add("captcha", new Route("images/services/CaptchaImage.ashx", new HttpRouteHandler<CaptchaImageHandler>(routes.ServiceLocator)));
        routes.Add("logout", new SubtextRoute("account/logout.ashx", new MvcRouteHandler()) { Defaults = new RouteValueDictionary(new { controller = "account", action = "logout" }) });
        routes.MapRoot();
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml.Serialization;

namespace Subtext.Web.SiteMap
{
    [XmlType(Namespace = "http://www.sitemaps.org/schemas/sitemap/0.9")]
    public enum ChangeFrequency
    {
        [XmlEnum(Name = "always")] Always,
        [XmlEnum(Name = "hourly")] Hourly,
        [XmlEnum(Name = "daily")] Daily,
        [XmlEnum(Name = "weekly")] Weekly,
        [XmlEnum(Name = "monthly")] Monthly,
        [XmlEnum(Name = "yearly")] Yearly,
        [XmlEnum(Name = "never")] Never
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web;
using System.Xml;
using System.Xml.Serialization;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.SiteMap
{
    /// <summary>
    /// Your blog sitemap that search engines can use to decide how to index your site.
    /// </summary>    
    public class SiteMapHttpHandler : SubtextHttpHandler
    {
        public SiteMapHttpHandler(ISubtextContext subtextContext) : base(subtextContext)
        {
        }

        public override void ProcessRequest()
        {
            HttpContextBase context = SubtextContext.HttpContext;
            context.Response.ContentType = "text/xml";

            var urlCollection = new UrlCollection();

            // Let's add home page
            var homePage = new UrlElement(Url.BlogUrl().ToFullyQualifiedUrl(Blog), DateTime.Now, ChangeFrequency.Daily,
                                          1.0M);
            urlCollection.Add(homePage);

            // then all the entries

            ICollection<Entry> posts = Repository.GetEntries(0, PostType.BlogPost, PostConfig.IsActive, false
                /* includeCategories */);
            if(posts != null)
            {
                foreach(Entry post in posts)
                {
                    ChangeFrequency frequency = CalculateFrequency(post);
                    urlCollection.Add(
                        new UrlElement(Url.EntryUrl(post).ToFullyQualifiedUrl(Blog), post.DateModified,
                                       frequency, 0.8M));
                }
            }

            // all articles
            ICollection<Entry> stories = Repository.GetEntries(0, PostType.Story, PostConfig.IsActive, false
                /* includeCategories */);
            if(stories != null)
            {
                foreach(Entry story in stories)
                {
                    ChangeFrequency frequency = CalculateFrequency(story);
                    urlCollection.Add(
                        new UrlElement(Url.EntryUrl(story).ToFullyQualifiedUrl(Blog),
                                       story.DateModified,
                                       frequency, 0.8M));
                }
            }

            // categories
            ICollection<LinkCategory> links = Repository.GetCategories(CategoryType.PostCollection, true
                /* activeOnly */);
            LinkCategory categories = Transformer.MergeLinkCategoriesIntoSingleLinkCategory(string.Empty /* title */,
                                                                                            CategoryType.PostCollection,
                                                                                            links, Url, Blog);
            if(categories != null)
            {
                foreach(Link category in categories.Links)
                {
                    urlCollection.Add(
                        new UrlElement(new Uri(Url.BlogUrl().ToFullyQualifiedUrl(Blog) + category.Url),
                                       DateTime.Today,
                                       ChangeFrequency.Weekly, 0.6M));
                }
            }

            // archives
            // categories            
            ICollection<ArchiveCount> archiveCounts = Repository.GetPostCountsByMonth();
            LinkCategory archives = Transformer.MergeArchiveCountsIntoLinkCategory(string.Empty, archiveCounts, Url,
                                                                                   Blog);
            if(archives != null)
            {
                foreach(Link archive in archives.Links)
                {
                    urlCollection.Add(
                        new UrlElement(
                            new Uri(Url.BlogUrl().ToFullyQualifiedUrl(Blog) + archive.Url), DateTime.Today,
                            ChangeFrequency.Weekly, 0.6M));
                }
            }

            // don't index contact form
            urlCollection.Add(new UrlElement(Url.ContactFormUrl().ToFullyQualifiedUrl(Blog), DateTime.Today,
                                             ChangeFrequency.Never, 0.0M));
            var serializer = new XmlSerializer(typeof(UrlCollection));
            var xmlTextWriter = new XmlTextWriter(context.Response.Output);
            serializer.Serialize(xmlTextWriter, urlCollection);
        }

        private static ChangeFrequency CalculateFrequency(Entry entry)
        {
            ChangeFrequency frequency = ChangeFrequency.Hourly;
            if(entry.DateModified < DateTime.Now.AddMonths(-12))
            {
                frequency = ChangeFrequency.Yearly;
            }
            else if(entry.DateModified < DateTime.Now.AddDays(-60))
            {
                frequency = ChangeFrequency.Monthly;
            }
            else if(entry.DateModified < DateTime.Now.AddDays(-14))
            {
                frequency = ChangeFrequency.Weekly;
            }
            else if(entry.DateModified < DateTime.Now.AddDays(-2))
            {
                frequency = ChangeFrequency.Daily;
            }
            return frequency;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml.Serialization;
using Subtext.Web.Properties;

namespace Subtext.Web.SiteMap
{
    [XmlType(TypeName = "url")]
    public class UrlElement
    {
        private Uri _pageUrl;
        private decimal _priority;

        /// <summary>
        /// We need this contructor if we want to serialize the class.
        /// </summary>
        public UrlElement()
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="pageUrl">URL of the page. This URL must begin with the protocol (such as http) and end with a trailing slash, if your web server requires it. This value must be less than 2048 characters.</param>
        /// <param name="lastModified">he date of last modification of the file. This date should be in W3C Datetime format. This format allows you to omit the time portion, if desired, and use YYYY-MM-DD.</param>
        /// <param name="changeFrequency">How frequently the page is likely to change. This value provides general information to search engines and may not correlate exactly to how often they crawl the page. Valid values are:
        /// * always
        /// * hourly
        /// * daily
        /// * monthly
        /// * yearly
        /// * never
        /// The value "always" should be used to describe documents that change each time they are accessed. The value "never" should be used to describe archived URLs.
        /// Please note that the value of this tag is considered a hint and not a command. Even though search engine crawlers consider this information when making decisions, they may crawl pages marked "hourly" less frequently than that, and they may crawl pages marked "yearly" more frequently than that. It is also likely that crawlers will periodically crawl pages marked "never" so that they can handle unexpected changes to those pages.</param>
        /// <param name="priority">The priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. This value has no effect on your pages compared to pages on other sites, and only lets the search engines know which of your pages you deem most important so they can order the crawl of your pages in the way you would most like.
        /// The default priority of a page is 0.5.
        /// Please note that the priority you assign to a page has no influence on the position of your URLs in a search engine's result pages. Search engines use this information when selecting between URLs on the same site, so you can use this tag to increase the likelihood that your more important pages are present in a search index.
        /// Also, please note that assigning a high priority to all of the URLs on your site will not help you. Since the priority is relative, it is only used to select between URLs on your site; the priority of your pages will not be compared to the priority of pages on other sites.</param>
        public UrlElement(Uri pageUrl, DateTime lastModified, ChangeFrequency changeFrequency, decimal priority)
        {
            _pageUrl = pageUrl;
            LastModified = lastModified;
            ChangeFrequency = changeFrequency;
            Priority = priority;
        }

        [XmlElement(DataType = "anyURI", ElementName = "loc")]
        public string Location
        {
            get
            {
                string encodedString = _pageUrl.ToString();
                return encodedString;
            }
            set { _pageUrl = new Uri(value); }
        }

        [XmlElement(ElementName = "lastmod", DataType = "date")]
        public DateTime LastModified { get; set; }

        [XmlElement(ElementName = "changefreq")]
        public ChangeFrequency ChangeFrequency { get; set; }

        [XmlElement(ElementName = "priority")]
        public decimal Priority
        {
            get { return _priority; }
            set
            {
                if(value < 0.0M || value > 1.0M)
                {
                    throw new ArgumentOutOfRangeException(Resources.ArgumentOutOfRange_Priority);
                }
                _priority = value;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Xml.Serialization;

namespace Subtext.Web.SiteMap
{
    [XmlType(Namespace = "http://www.sitemaps.org/schemas/sitemap/0.9", TypeName = "urlset")]
    [XmlRoot(Namespace = "http://www.sitemaps.org/schemas/sitemap/0.9", ElementName = "urlset", IsNullable = false)]
    public class UrlCollection : List<UrlElement>
    {
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Security;
using Subtext.Framework.UI.Skinning;
using Subtext.Web.Admin.WebUI.Controls;

namespace Subtext.Web.Skins._System.Controls
{
    public partial class Error : BaseUserControl, IErrorControl
    {
        public SkinControlLoadException Exception
        {
            get;
            set;
        }

        public bool ShowErrorDetails
        {
            get
            {
                return SubtextContext.HttpContext.Request.IsLocal || SubtextContext.User.IsAdministrator();
            }
        }


        public string ControlPath
        {
            get;
            set;
        }
    }
}ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Skins._System.Controls {
    
    
    public partial class Error {
        
        /// <summary>
        /// Image1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Image Image1;
    }
}
using System;
using System.Globalization;
using System.Web.UI;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;
using Subtext.Web.Properties;

namespace Subtext.Web.Skins._System
{
    public partial class ForgotPassword : MasterPage
    {
        protected override void OnLoad(EventArgs e)
        {
            defaultInstructions.Visible = true;
            if(Config.CurrentBlog == null)
            {
                ResetForm.Visible = defaultInstructions.Visible = false;
                FailureText.Text = Resources.ForgotPasswordMaster_DoesNotWorkForHostAdmins;
            }
            base.OnLoad(e);
        }

        protected void OnForgotButtonClick(object sender, EventArgs args)
        {
            Blog currentBlog = Config.CurrentBlog;
            if(currentBlog == null)
            {
                FailureText.Text = Resources.ForgotPasswordMaster_DoesNotWorkForHostAdmins;
            }
            else
            {
                ResetAdminPassword(currentBlog);
            }
        }

        private void ResetAdminPassword(Blog currentBlog)
        {
            if(String.IsNullOrEmpty(currentBlog.Email) || currentBlog.Email != emailTextBox.Text ||
               currentBlog.UserName != usernameTextBox.Text)
            {
                Message.Visible = false;
                FailureText.Visible = true;
                FailureText.Text = Resources.ForgotPassword_UsernameAndPasswordDoNotMatch;
            }
            else
            {
                defaultInstructions.Visible = false;
                Message.Visible = true;
                FailureText.Visible = false;

                string newPassword = SecurityHelper.ResetPassword();
                EmailProvider.Instance().Send(currentBlog.Email, currentBlog.Email, Resources.ForgotPassword_NewPassword
                                              ,
                                              String.Format(CultureInfo.InvariantCulture,
                                                            Resources.ForgotPaswword_HereIsNewPassword, newPassword));

                Message.Text = Resources.ForgotPassword_NewPasswordSent;
            }
        }
    }
}//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Subtext.Web.Skins._System {
    
    
    public partial class ForgotPassword {
        
        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;
        
        /// <summary>
        /// instructionsPlaceholder control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.ContentPlaceHolder instructionsPlaceholder;
        
        /// <summary>
        /// defaultInstructions control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder defaultInstructions;
        
        /// <summary>
        /// Message control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal Message;
        
        /// <summary>
        /// FailureText control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Literal FailureText;
        
        /// <summary>
        /// ResetForm control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.PlaceHolder ResetForm;
        
        /// <summary>
        /// lblUsername control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblUsername;
        
        /// <summary>
        /// usernameTextBox control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox usernameTextBox;
        
        /// <summary>
        /// UserNameRequired control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RequiredFieldValidator UserNameRequired;
        
        /// <summary>
        /// lblEmail control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Label lblEmail;
        
        /// <summary>
        /// emailTextBox control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.TextBox emailTextBox;
        
        /// <summary>
        /// btnSubmitUsername control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button btnSubmitUsername;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    public class AggBloggers : AggregateUserControl
    {
        protected Repeater Bloggers;

        public int? BlogGroupId { get; private set; }

        public bool ShowGroups { get; private set; }

        public IEnumerable<Blog> Blogs { get; private set; }

        public IEnumerable<BlogGroup> BlogGroups { get; private set; }

        protected override void OnLoad(EventArgs e)
        {
            BlogGroupId = GetGroupIdFromQueryString();
            Blogs = Repository.GetBlogsByGroup(HostInfo.Instance.AggregateBlog.Host, BlogGroupId);

            if(ShowGroups)
            {
                BlogGroups = Repository.GroupBlogs(Blogs);
            }
            else
            {
                var groups = new Collection<BlogGroup> {new BlogGroup {Blogs = Blogs.ToList()}};
                BlogGroups = groups;
            }
            base.OnLoad(e);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    public class AggBlogStats : AggregateUserControl
    {
        protected Literal BlogCount;
        protected Literal CommentCount;
        protected Literal PingtrackCount;
        protected Literal PostCount;
        protected Literal StoryCount;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            int? groupId = GetGroupIdFromQueryString();
            HostStats stats = Repository.GetTotalBlogStats(HostInfo.Instance.AggregateBlog.Host, groupId);
            if(stats != null)
            {
                BlogCount.Text = stats.BlogCount.ToString();
                PostCount.Text = stats.PostCount.ToString();
                StoryCount.Text = stats.StoryCount.ToString();
                CommentCount.Text = stats.CommentCount.ToString();
                PingtrackCount.Text = stats.PingTrackCount.ToString();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Control used to view a single blog post.
    /// </summary>
    public class AggPinnedPost : AggregateUserControl
    {
        protected Literal PinnedPost;
        protected Literal PinnedTitle;

        /// <summary>
        /// Property to set the ID of the post to display.
        /// </summary>
        public int ContentID { get; set; }

        /// <summary>
        /// Property to override the post title to display.
        /// </summary>
        public string EntryTitle { get; set; }

        /// <summary>
        /// Loads the entry specified by the EntryName property. 
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            //Get the entry
            Entry entry = Repository.GetEntry(ContentID, true /*activeOnly*/, false /*includeCategories*/);
            if(entry != null)
            {
                PinnedPost.Text = entry.Body;
                PinnedTitle.Text = (string.IsNullOrEmpty(EntryTitle)) ? PinnedTitle.Text = entry.Title : EntryTitle;
            }
            else
            {
                //No post? Deleted? Help :)
                Controls.Clear();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Image=Subtext.Framework.Components.Image;

namespace Subtext.Web.UI.Controls
{
    public class AggRecentImages : AggregateUserControl
    {
        protected Repeater recentImagesRepeater;

        /// <summary>
        /// Prroperty to limit the number of images displayed. Default is 35.
        /// </summary>
        public int Count { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            int? groupId = GetGroupIdFromQueryString();

            ICollection<Image> images = Repository.GetImages(HostInfo.Instance.AggregateBlog.Host, groupId, Count);
            recentImagesRepeater.DataSource = images;
            recentImagesRepeater.DataBind();
        }

        protected Image GetImage(object dataItem)
        {
            return dataItem as Image;
        }

        protected string ImageUrl(object image)
        {
            return Url.GalleryImageUrl(GetImage(image));
        }

        protected string GalleryImageUrl(object image)
        {
            return Url.GalleryImagePageUrl(GetImage(image));
        }

        protected string GalleryUrl(object image)
        {
            return Url.GalleryUrl(GetImage(image));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    public class AggRecentPosts : AggregateUserControl
    {
        readonly string _fullUrl = HttpContext.Current.Request.Url.Scheme + "://{0}{1}{2}/";
        private string _appPath;
        protected Repeater RecentPosts;

        /// <summary>
        /// Prroperty to limit the number of posts displayed. Default is 35.
        /// </summary>
        public int Count { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            int? groupId = GetGroupIdFromQueryString();

            ICollection<Entry> entries = Repository.GetRecentEntries(HostInfo.Instance.AggregateBlog.Host, groupId,
                                                                     Count);
            RecentPosts.DataSource = entries;
            RecentPosts.DataBind();
            base.OnLoad(e);
        }

        protected string EntryUrl(object item)
        {
            var entry = item as Entry;
            return Url.EntryUrl(entry, entry.Blog);
        }

        protected string GetFullUrl(string host, string app)
        {
            if(_appPath == null)
            {
                _appPath = HttpContext.Current.Request.ApplicationPath;
                if(!_appPath.ToLower(CultureInfo.InvariantCulture).EndsWith("/"))
                {
                    _appPath += "/";
                }
            }

            if(Request.Url.Port != 80)
            {
                host += ":" + Request.Url.Port;
            }

            return string.Format(_fullUrl, host, _appPath, app);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework.Web.Handlers;

namespace Subtext.Web.UI.Controls
{
    public class AggregatePage : SubtextPage
    {
        public int? GetGroupIdFromQueryString()
        {
            int? groupId = null;
            string groupIdText = Request.QueryString["GroupID"];
            if(groupIdText != null)
            {
                int parsedGroupId;
                if(int.TryParse(groupIdText, out parsedGroupId))
                {
                    groupId = parsedGroupId;
                }
            }
            return groupId;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Framework;

namespace Subtext.Web.UI.Controls
{
    public class AggregateUserControl : BaseControl
    {
        protected new AggregatePage Page
        {
            get { return base.Page as AggregatePage; }
        }

        protected int? GetGroupIdFromQueryString()
        {
            return Page.GetGroupIdFromQueryString();
        }

        protected string BlogUrl(Blog blog)
        {
            return Url.BlogUrl(blog);
        }

        public T Get<T>(object item) where T : class
        {
            return item as T;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;

namespace Subtext.Web.UI.Controls
{
    public class AggSyndication : AggregateUserControl
    {
        protected Repeater blogGroupRepeater;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            ICollection<BlogGroup> groups = Config.ListBlogGroups(true);
            blogGroupRepeater.DataSource = groups;
            blogGroupRepeater.DataBind();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Web.UI.WebControls;
using Subtext.Framework.Data;
using Subtext.Framework.Util;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchiveMonth.
    /// </summary>
    public class ArchiveCategory : BaseControl
    {
        protected DayCollection Days;
        protected Literal Title;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            int? categoryId = SubtextContext.RequestContext.GetIdFromRequest();
            if(categoryId != null)
            {
                Days.Days = Repository.GetBlogPostsByCategoryGroupedByDay(Blog.ItemCount, categoryId.Value).ToList();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Data;
using Subtext.Framework.Util;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchiveDay.
    /// </summary>
    public class ArchiveDay : BaseControl
    {
        protected Day SingleDay;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                try
                {
                    DateTime dayDate = SubtextContext.RequestContext.GetDateFromRequest();
                    SingleDay.CurrentDay = Cacher.GetEntriesForDay(dayDate, SubtextContext);
                    Globals.SetTitle(
                        string.Format(CultureInfo.InvariantCulture, "{0} - {1} Entries", Blog.Title,
                                      dayDate.ToString("D", CultureInfo.CurrentCulture)), Context);
                }
                catch(FormatException)
                {
                    //Somebody probably is messing with the url.
                    //404 is set in filenotfound - DF
                    Response.Redirect("~/SystemMessages/FileNotFound.aspx");
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for CategoryDisplayByColumn.
    /// </summary>
    public class ArchiveLinks : CachedColumnControl
    {
        protected CategoryList Categories;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            Categories.LinkCategories = GetArchiveCategories(SubtextContext.Blog);
        }

        protected ICollection<LinkCategory> GetArchiveCategories(Blog blog)
        {
            var linkCategories = new List<LinkCategory>();

            // we want to make sure that the LinkCategory is NOT null before we add it to the collection.
            LinkCategory category = UIData.Links(CategoryType.PostCollection, blog, Url);
            if(category != null)
            {
                linkCategories.Add(category);
            }
            category = UIData.Links(CategoryType.StoryCollection, blog, Url);
            if(category != null)
            {
                linkCategories.Add(category);
            }
            category = UIData.ArchiveMonth(Url, blog);
            if(category != null)
            {
                linkCategories.Add(category);
            }
            category = UIData.Links(CategoryType.ImageCollection, blog, Url);
            if(category != null)
            {
                linkCategories.Add(category);
            }
            return linkCategories;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Framework.Data;
using Subtext.Framework.Util;
using Subtext.Framework.Web;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchiveMonth.
    /// </summary>
    public class ArchiveMonth : BaseControl
    {
        protected EntryList Days;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            try
            {
                DateTime dt = SubtextContext.RequestContext.GetDateFromRequest();
                Days.EntryListItems = Cacher.GetEntriesForMonth(dt, SubtextContext);
                Days.EntryListTitle = string.Format(CultureInfo.InvariantCulture, "{0} " + Resources.Label_Entries,
                                                    dt.ToString("MMMM yyyy", CultureInfo.CurrentCulture));
                Globals.SetTitle(
                    string.Format(CultureInfo.InvariantCulture, "{0} - {1} " + Resources.Label_Entries, Blog.Title,
                                  dt.ToString("MMMM yyyy", CultureInfo.CurrentCulture)), Context);
            }
            catch(FormatException)
            {
                HttpHelper.SetFileNotFoundResponse();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchivePostPage.
    /// </summary>
    public class ArchivePostPage : BaseControl
    {
        protected Repeater CatList;
        protected Repeater DateItemList;

        private void Page_Load(object sender, EventArgs e)
        {
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            var lcc = new List<LinkCategory>();
            lcc.AddRange(Links.GetCategories(CategoryType.PostCollection, ActiveFilter.None));
            lcc.Add(UIData.Links(CategoryType.PostCollection, SubtextContext.Blog, Url));
            CatList.DataSource = lcc;
            CatList.DataBind();

            LinkCategory monthCat = UIData.ArchiveMonth(Url, Blog);
            DateItemList.DataSource = monthCat.Links;
            DateItemList.DataBind();
        }

        protected void CategoryCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var linkcat = (LinkCategory)e.Item.DataItem;
                if(linkcat != null)
                {
                    if(linkcat.Id != 0)
                    {
                        var description = (Label)e.Item.FindControl("Description");
                        if(description != null)
                        {
                            description.Text = linkcat.Description;
                        }

                        var catlink = (HyperLink)e.Item.FindControl("CatLink");
                        if(catlink != null)
                        {
                            catlink.NavigateUrl = Url.CategoryUrl(linkcat);
                            catlink.Text = linkcat.Title;
                            ControlHelper.SetTitleIfNone(catlink, linkcat.CategoryType + " Category.");
                        }
                    }
                }
            }
        }

        protected void DateItemCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var link = (Link)e.Item.DataItem;
                if(link != null)
                {
                    var datelink = (HyperLink)e.Item.FindControl("DateLink");
                    if(datelink != null)
                    {
                        datelink.NavigateUrl = link.Url;
                        datelink.Text = link.Title;
                        ControlHelper.SetTitleIfNone(datelink, "Posts for the month.");
                    }
                }
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        ///		Required method for Designer support - do not modify
        ///		the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArticleCategories.
    /// </summary>
    public class ArticleCategories : BaseControl
    {
        protected CategoryList Categories;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            Categories.LinkCategories = GetArchiveCategories(SubtextContext.Blog);
        }

        protected ICollection<LinkCategory> GetArchiveCategories(Blog blog)
        {
            return new List<LinkCategory> {UIData.Links(CategoryType.StoryCollection, blog, Url)};
        }  
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.Routing;
using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.Controls;
using Subtext.Web.Controls.Captcha;
using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for BaseControl.
    /// </summary>
    public class BaseControl : UserControl
    {
        AdminUrlHelper _adminUrlHelper;

        public RouteValueDictionary RouteValues
        {
            get { return SubtextContext.RequestContext.RouteData.Values; }
        }

        public UrlHelper Url
        {
            get
            {
                if(SubtextPage != null)
                {
                    return SubtextPage.Url;
                }
                return null;
            }
        }

        public AdminUrlHelper AdminUrl
        {
            get
            {
                if(_adminUrlHelper == null)
                {
                    _adminUrlHelper = new AdminUrlHelper(Url);
                }
                return _adminUrlHelper;
            }
        }

        public Blog Blog
        {
            get
            {
                SubtextPage subtextPage = SubtextPage;
                if(subtextPage != null)
                {
                    return subtextPage.Blog;
                }
                return null;
            }
        }

        protected SubtextPage SubtextPage
        {
            get { return Page as SubtextPage; }
        }

        protected ISubtextContext SubtextContext
        {
            get { return SubtextPage.SubtextContext; }
        }

        protected ObjectProvider Repository
        {
            get { return SubtextContext.Repository; }
        }

        protected virtual string ControlCacheKey
        {
            get { return string.Format(CultureInfo.InvariantCulture, "{0}:{1}", GetType(), Blog.Id); }
        }

        public string SkinFilePath { get; set; }

        protected static string Format(string format, params object[] arguments)
        {
            return String.Format(format, arguments);
        }

        /// <summary>
        /// Url encodes the string.
        /// </summary>
        /// <param name="s">The s.</param>
        /// <returns></returns>
        protected static string UrlEncode(string s)
        {
            return HttpUtility.UrlEncode(s);
        }

        /// <summary>
        /// Url encodes the string.
        /// </summary>
        /// <param name="s">The s.</param>
        /// <returns></returns>
        protected static string UrlEncode(Uri s)
        {
            return HttpUtility.UrlEncode(s.ToString());
        }

        /// <summary>
        /// Url encodes the string.
        /// </summary>
        /// <param name="s">The s.</param>
        /// <returns></returns>
        protected static string UrlEncode(object s)
        {
            return HttpUtility.UrlEncode(s.ToString());
        }

        /// <summary>
        /// Url decodes the string.
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        protected static string UrlDecode(string s)
        {
            return HttpUtility.UrlDecode(s);
        }

        protected string H(string value)
        {
            return HttpUtility.HtmlEncode(value);
        }

        protected string H(object value)
        {
            return HttpUtility.HtmlEncode(value.ToString());
        }

        protected static string UrlDecode(object s)
        {
            return HttpUtility.UrlDecode(s.ToString());
        }

        protected void BindCurrentEntryControls(Entry entry, Control root)
        {
            foreach(Control control in root.Controls)
            {
                var currentEntryControl = control as CurrentEntryControl;
                if(currentEntryControl != null)
                {
                    currentEntryControl.Entry = new EntryViewModel(entry, SubtextContext);
                    currentEntryControl.DataBind();
                }
            }
        }

        /// <summary>
        /// Adds the captcha if necessary.
        /// </summary>
        /// <param name="captcha">The captcha.</param>
        /// <param name="invisibleCaptchaValidator">The invisible captcha validator.</param>
        /// <param name="btnIndex">Index of the BTN.</param>
        protected void AddCaptchaIfNecessary(ref CaptchaControl captcha, ref InvisibleCaptcha invisibleCaptchaValidator,
                                             int btnIndex)
        {
            if(Config.CurrentBlog.CaptchaEnabled)
            {
                captcha = new CaptchaControl {ID = "captcha"};
                Control preExisting = ControlHelper.FindControlRecursively(this, "captcha");
                if(preExisting == null)
                    // && !Config.CurrentBlog.FeedbackSpamServiceEnabled) Experimental code for improved UI. Will put back in later. - Phil Haack 10/09/2006
                {
                    Controls.AddAt(btnIndex, captcha);
                }
            }
            else
            {
                RemoveCaptcha();
            }

            if(Config.Settings.InvisibleCaptchaEnabled)
            {
                invisibleCaptchaValidator = new InvisibleCaptcha
                {
                    ErrorMessage = "Please enter the answer to the supplied question."
                };

                Controls.AddAt(btnIndex, invisibleCaptchaValidator);
            }
        }

        /// <summary>
        /// Removes the captcha if necessary.
        /// </summary>
        protected void RemoveCaptcha()
        {
            Control preExisting = ControlHelper.FindControlRecursively(this, "captcha");
            if(preExisting != null)
            {
                Controls.Remove(preExisting);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Framework;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for Header.
    /// </summary>
    public class BlogStats : CachedColumnControl
    {
        protected Literal CommentCount;
        protected Literal PingTrackCount;
        protected Literal PostCount;
        protected Literal StoryCount;


        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                Blog info = Blog;
                PostCount.Text = info.PostCount.ToString(CultureInfo.InvariantCulture);
                StoryCount.Text = info.StoryCount.ToString(CultureInfo.InvariantCulture);
                CommentCount.Text = info.CommentCount.ToString(CultureInfo.InvariantCulture);
                PingTrackCount.Text = info.PingTrackCount.ToString(CultureInfo.InvariantCulture);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for CachedColumnControl.
    /// </summary>
    [PartialCaching(240, null, null, "Blogger", true)]
    public class CachedColumnControl : BaseControl
    {
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for Calendar.
    /// </summary>
    public class Calendar : BaseControl
    {
        // The list of entries found for the month
        // Current index into _monthEntries.
        int _currentDateIndex;
        // Number of entries in _monthEntries
        int _dateCount;
        // True if the url is for a month and not a day (see ChooseSelectedDateFromUrl).
        protected bool IsUrlMonthMode;
        ICollection<Entry> _monthEntries;

        protected System.Web.UI.WebControls.Calendar entryCal;

        /// <summary>
        /// If the page is on a "day page" then have the calendar select the day the URL is on. 
        ///	Otherwise use the current day.
        /// </summary>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(Context != null)
            {
                DateTime selectedDate = ChooseSelectedDateFromUrl();
                entryCal.ToolTip = selectedDate.ToShortDateString();

                // Setup current month			
                entryCal.SelectedDate = selectedDate;
                entryCal.VisibleDate = selectedDate;

                // setup prev/next months
                DateTime tempDate = selectedDate.AddMonths(-1);
                entryCal.PrevMonthText = string.Format(CultureInfo.InvariantCulture,
                                                       "<a href=\"{0}\" title=\"{1}\">&laquo;</a>",
                                                       Url.MonthUrl(tempDate), Resources.Calendar_PreviousMonth);
                tempDate = selectedDate.AddMonths(1);
                entryCal.NextMonthText = string.Format(CultureInfo.InvariantCulture,
                                                       "<a href=\"{0}\" title=\"{1}\">&raquo;</a>",
                                                       Url.MonthUrl(tempDate), Resources.Calendar_NextMonth);

                // fix the selected date if we're in "month mode"
                //		if (_isUrlMonthMode)
                //			entryCal.SelectedDate = NullValue.NullDateTime;

                LoadMonthData();
            }
        }

        /// <summary>
        /// Chooses the selected date from the url.
        /// </summary>
        /// <returns></returns>
        private DateTime ChooseSelectedDateFromUrl()
        {
            string dateStr;
            DateTime parsedDate;
            IsUrlMonthMode = false;

            // /YYYY/MM/DD.aspx ?
            var match = new Regex("(.*)(\\d{4})/(\\d{2})/(\\d{2}).aspx$");
            if(match.IsMatch(Request.RawUrl))
            {
                dateStr = match.Replace(Request.RawUrl, "$3-$4-$2");

                if(TryParseDateTime(dateStr, out parsedDate))
                {
                    return parsedDate;
                }
            }

            // /YYYY/MM.aspx ?
            match = new Regex("(.*)(\\d{4})/(\\d{2}).aspx$");
            if(match.IsMatch(Request.RawUrl))
            {
                dateStr = match.Replace(Request.RawUrl, "$3-01-$2");

                if(TryParseDateTime(dateStr, out parsedDate))
                {
                    IsUrlMonthMode = true;
                    return parsedDate;
                }
            }
            // If all else fails set the cal to today.
            return Blog.TimeZone.Now;
        }


        /// <summary>
        /// Attemps to parse the specified string as a DateTime.
        /// </summary>
        /// <param name="dateString">The string to parse.</param>
        /// <param name="parsedDate">The date if the string was parsed succesfully.</param>
        /// <returns>True if the string was parsed succesfully.</returns>
        private bool TryParseDateTime(string dateString, out DateTime parsedDate)
        {
            try
            {
                parsedDate = DateTime.ParseExact(dateString, "MM-dd-yyyy", CultureInfo.InvariantCulture);
                return true;
            }
            catch(FormatException)
            {
                parsedDate = Blog.TimeZone.Now;
                return false;
            }
        }


        /// <summary>
        /// Load all entries for the selected month.
        /// </summary>
        private void LoadMonthData()
        {
            _monthEntries = Cacher.GetEntriesForMonth(entryCal.SelectedDate, SubtextContext);
            if(_monthEntries == null)
            {
                Trace.Warn("SubTextBlogCalendar Error: Cacher.GetMonth");
                _dateCount = 0;
            }
            else
            {
                _dateCount = _monthEntries.Count;
            }
            _currentDateIndex = _dateCount - 1;
        }


        /// <summary>
        /// As each day is rendered in the calendar, put a link if an entry exists for that day.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void entryCal_DayRender(object sender, DayRenderEventArgs e)
        {
            if(_currentDateIndex >= _dateCount || _currentDateIndex < 0)
            {
                return;
            }

            DateTime entryDate = _monthEntries.ElementAt(_currentDateIndex).DateCreated;
            DateTime calDate = e.Day.Date;

            if(IsSameDay(calDate, entryDate))
            {
                e.Cell.Text = string.Format(CultureInfo.InvariantCulture, "<a href=\"{0}\">{1}</a>",
                                            Url.DayUrl(e.Day.Date), e.Day.Date.Day);

                // Go through the rest of the entries. (_monthEntries should always be sorted by DateCreated in descending order)
                do
                {
                    _currentDateIndex--;
                } while(_currentDateIndex > -1 &&
                        IsSameDay(e.Day.Date, _monthEntries.ElementAt(_currentDateIndex).DateCreated));
            }
        }

        /// <summary>
        /// Returns true if the two dates fall on the same day.
        /// </summary>
        static bool IsSameDay(DateTime date1, DateTime date2)
        {
            return (date1.Day == date2.Day) && (date1.Month == date2.Month) && (date1.Year == date2.Year);
        }


        /// <summary>
        /// Occurs when the user clicks on the next or previous month navigation controls on the title heading.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void entryCal_VisibleMonthChanged(object sender, MonthChangedEventArgs e)
        {
            //string url = CurrentBlog.UrlFormats.MonthUrl(e.NewDate);

            //Server.Transfer(url);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for CategoryDisplayByColumn.
    /// </summary>
    public class CategoryDisplay : CachedColumnControl
    {
        protected CategoryList Categories;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            Categories.LinkCategories = Repository.GetActiveCategories();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Code behind for the category list control.
    /// </summary>
    public class CategoryList : BaseControl
    {
        protected Repeater CatList;

        public ICollection<LinkCategory> LinkCategories { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(LinkCategories != null)
            {
                CatList.DataSource = LinkCategories;
                CatList.DataBind();
            }
            else
            {
                Controls.Clear();
                Visible = false;
            }
        }

        protected void CategoryCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var linkcat = (LinkCategory)e.Item.DataItem;
                if(linkcat != null)
                {
                    var title = (Literal)e.Item.FindControl("Title");
                    if(title != null)
                    {
                        title.Text = linkcat.Title;
                    }

                    var linkList = (Repeater)e.Item.FindControl("LinkList");
                    linkList.DataSource = linkcat.Links;
                    linkList.DataBind();
                }
            }
        }

        protected void LinkCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var link = (Link)e.Item.DataItem;
                if(link != null)
                {
                    var linkControl = (HyperLink)e.Item.FindControl("Link");
                    linkControl.NavigateUrl = link.Url;

                    /*if (FriendlyUrlSettings.Settings.Enabled)
						Link.NavigateUrl = string.Format("/category/{0}.aspx", FriendlyUrlSettings.TransformString(link.Title.Replace(" ", FriendlyUrlSettings.Settings.SeparatingCharacter), FriendlyUrlSettings.Settings.TextTransformation));*/

                    if(string.IsNullOrEmpty(linkControl.Attributes["title"]))
                    {
                        linkControl.Attributes["title"] = "";
                    }
                    linkControl.Text = link.Title;

                    if(link.NewWindow)
                    {
                        if(!String.IsNullOrEmpty(linkControl.Attributes["rel"]))
                        {
                            linkControl.Attributes["rel"] += " ";
                        }
                        linkControl.Attributes["rel"] += "external ";
                    }

                    linkControl.Attributes["rel"] += link.Relation;

                    var rssLink = (HyperLink)e.Item.FindControl("RssLink");
                    if(rssLink != null)
                    {
                        if(link.HasRss)
                        {
                            rssLink.NavigateUrl = link.Rss;
                            rssLink.Visible = true;
                            if(string.IsNullOrEmpty(rssLink.ToolTip))
                            {
                                rssLink.ToolTip = string.Format(CultureInfo.InvariantCulture, "Subscribe to {0}",
                                                                link.Title);
                            }
                        }
                        else
                        {
                            rssLink.Visible = false;
                        }
                    }
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Globalization;
using System.Web;
using System.Web.UI.WebControls;
using log4net;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Logging;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Web;
using Subtext.Identicon;
using Subtext.Web.Controls;
using Image=System.Web.UI.WebControls.Image;
using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Codebehind for the control that displays comments/trackbacks/pingbacks.
    /// </summary>
    public class Comments : BaseControl, ICommentControl
    {
        const string Anchortag = "<a name=\"{0}\"></a>";
        const string Linktag = "<a title=\"permalink: {0}\" href=\"{1}\">#</a>";
        static readonly ILog Log = new Log();

        private CommentViewModel _comment;
        protected Repeater CommentList;
        private GravatarService _gravatarService;
        protected Literal NoCommentMessage;

        public bool IsEditEnabled
        {
            get { return Request.IsAuthenticated && SecurityHelper.IsAdmin; }
        }

        /// <summary>
        /// If the currecnt comment was written by the author, 
        /// writes the specified css class
        /// </summary>
        /// <returns></returns>
        protected string AuthorCssClass
        {
            get { return Comment.IsBlogAuthor ? " author" : ""; }
        }

        public CommentViewModel Comment
        {
            get { return _comment; }
        }

        private Entry RealEntry
        {
            get
            {
                if(_entry == null)
                {
                    _entry = Cacher.GetEntryFromRequest(true, SubtextContext);
                    if(_entry == null)
                    {
                        HttpHelper.SetFileNotFoundResponse();
                    }
                }
                return _entry;
            }
        }

        Entry _entry;

        public string EditUrl(CommentViewModel feedback)
        {
            string url = AdminUrl.FeedbackEdit(feedback.Id);

            return VirtualPathUtility.ToAbsolute(StringHelper.LeftBefore(url, "?")) + "?" +
                   url.RightAfter("?");
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            _gravatarService = new GravatarService(ConfigurationManager.AppSettings);

            if(Blog.CommentsEnabled)
            {
                BindFeedback(true);
            }
            else
            {
                Visible = false;
            }
        }

        internal void BindFeedback(bool fromCache)
        {
            Entry entry = RealEntry;

            if(entry != null && entry.AllowComments)
            {
                BindFeedback(entry, fromCache);
            }
            else
            {
                Visible = false;
            }
        }

        // Customizes the display row for each comment.
        protected void CommentsCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var feedbackItem = (FeedbackItem)e.Item.DataItem;
                _comment = new CommentViewModel(feedbackItem, SubtextContext);
                if(feedbackItem != null)
                {
                    var title = (Literal)(e.Item.FindControl("Title"));
                    if(title != null)
                    {
                        // we should probably change skin format to dynamically wire up to 
                        // skin located title and permalinks at some point
                        title.Text = string.Format(CultureInfo.InvariantCulture, "{2}&nbsp;{0}{1}",
                                                   Anchor(feedbackItem.Id),
                                                   feedbackItem.Title,
                                                   Link(feedbackItem.Title, Url.FeedbackUrl(feedbackItem)));
                    }

                    //Shows the name of the commenter with a link if provided.
                    var namelink = (HyperLink)e.Item.FindControl("NameLink");
                    if(namelink != null)
                    {
                        if(feedbackItem.SourceUrl != null)
                        {
                            namelink.NavigateUrl = feedbackItem.SourceUrl.ToString();
                            ControlHelper.SetTitleIfNone(namelink, feedbackItem.SourceUrl.ToString());
                        }

                        if(feedbackItem.FeedbackType == FeedbackType.Comment)
                        {
                            namelink.Text = feedbackItem.Author;
                            ControlHelper.SetTitleIfNone(namelink, feedbackItem.Author);
                        }
                        else if(feedbackItem.FeedbackType == FeedbackType.PingTrack)
                        {
                            namelink.Text = !String.IsNullOrEmpty(feedbackItem.Author)
                                                ? feedbackItem.Author
                                                : "Pingback/TrackBack";
                            ControlHelper.SetTitleIfNone(namelink, "PingBack/TrackBack");
                        }

                        if(feedbackItem.IsBlogAuthor)
                        {
                            HtmlHelper.AppendCssClass(namelink, "author");
                        }
                    }

                    var postDate = (Literal)(e.Item.FindControl("PostDate"));
                    if(postDate != null)
                    {
                        postDate.Text = feedbackItem.DateCreated.ToShortDateString() + " " +
                                        feedbackItem.DateCreated.ToShortTimeString();
                    }

                    var post = e.Item.FindControl("PostText") as Literal;
                    if(post != null)
                    {
                        if(feedbackItem.Body.Length > 0)
                        {
                            post.Text = feedbackItem.Body;
                            if(feedbackItem.Body.Length == 0 && feedbackItem.FeedbackType == FeedbackType.PingTrack)
                            {
                                post.Text = "Pingback / Trackback";
                            }
                        }
                    }

                    if(_gravatarService.Enabled)
                    {
                        var gravatarImage = e.Item.FindControl("GravatarImg") as Image;
                        if(gravatarImage != null)
                        {
                            //This allows per-skin configuration of the default gravatar image.
                            string defaultGravatarImage = gravatarImage.Attributes["PlaceHolderImage"];

                            string ip;
                            if(feedbackItem.IpAddress != null)
                            {
                                ip = feedbackItem.IpAddress.ToString();
                            }
                            else
                            {
                                ip = string.Format("{0} {1}", DateTime.Now.Millisecond, DateTime.Now.Second);
                            }

                            //This allows a host-wide setting of the default gravatar image.
                            string gravatarUrl = null;
                            if(!String.IsNullOrEmpty(feedbackItem.Email))
                            {
                                if(!String.IsNullOrEmpty(defaultGravatarImage))
                                {
                                    string host = Request.Url.Host;
                                    string scheme = Request.Url.Scheme;
                                    string port = Request.Url.Port == 80 ? string.Empty : string.Format(":{0}", Request.Url.Port);
                                    string defaultImagePath = HttpHelper.ExpandTildePath(defaultGravatarImage);
                                    defaultGravatarImage = string.Format(CultureInfo.InvariantCulture, "{0}://{1}{2}{3}",
                                                                         scheme, host, port, defaultImagePath);
                                    defaultGravatarImage = HttpUtility.UrlEncode(defaultGravatarImage);
                                }
                                gravatarUrl = _gravatarService.GenerateUrl(feedbackItem.Email, defaultGravatarImage);
                            }
                            if(!String.IsNullOrEmpty(gravatarUrl))
                            {
                                gravatarImage.Attributes.Remove("PlaceHolderImage");
                                if(gravatarUrl.Length != 0)
                                {
                                    gravatarImage.ImageUrl = gravatarUrl;
                                    gravatarImage.Visible = true;
                                }
                            }
                            else
                            {
                                string identiconUrl = Url.IdenticonUrl(IdenticonUtil.Code(ip));
                                gravatarImage.ImageUrl = identiconUrl;
                                gravatarImage.Visible = true;
                            }
                        }
                    }

                    if(Request.IsAuthenticated && SecurityHelper.IsAdmin)
                    {
                        var editCommentTextLink = (HyperLink)(e.Item.FindControl("EditCommentTextLink"));
                        if(editCommentTextLink != null)
                        {
                            editCommentTextLink.NavigateUrl = AdminUrl.FeedbackEdit(feedbackItem.Id);
                            if(String.IsNullOrEmpty(editCommentTextLink.Text))
                            {
                                editCommentTextLink.Text = "Edit Comment " +
                                                           feedbackItem.Id.ToString(CultureInfo.InstalledUICulture);
                            }
                            ControlHelper.SetTitleIfNone(editCommentTextLink, "Click to edit this entry.");
                        }
                        var editCommentImgLink = (HyperLink)(e.Item.FindControl("EditCommentImgLink"));
                        if(editCommentImgLink != null)
                        {
                            editCommentImgLink.NavigateUrl = AdminUrl.FeedbackEdit(feedbackItem.Id);
                            if(String.IsNullOrEmpty(editCommentImgLink.ImageUrl))
                            {
                                editCommentImgLink.ImageUrl = Url.EditIconUrl();
                            }
                            ControlHelper.SetTitleIfNone(editCommentImgLink,
                                                         "Click to edit comment " +
                                                         feedbackItem.Id.ToString(CultureInfo.InstalledUICulture));
                        }
                    }
                }
            }
        }

        private static string Link(string title, string link)
        {
            if(link == null)
            {
                return string.Empty;
            }

            return string.Format(Linktag, title, link);
        }

        // GC: xhmtl format wreaking havoc in non-xhtml pages in non-IE, changed to non nullable format

        private static string Anchor(int id)
        {
            return string.Format(Anchortag, id);
        }

        internal void BindFeedback(Entry entry, bool fromCache)
        {
            try
            {
                CommentList.DataSource = fromCache ? Cacher.GetFeedback(entry, SubtextContext) : Repository.GetFeedbackForEntry(entry);
                CommentList.DataBind();

                if(CommentList.Items.Count == 0)
                {
                    if(entry.CommentingClosed)
                    {
                        Controls.Clear();
                    }
                    else
                    {
                        CommentList.Visible = false;
                        NoCommentMessage.Text = "No comments posted yet.";
                    }
                }
                else
                {
                    CommentList.Visible = true;
                    NoCommentMessage.Text = string.Empty;
                }
            }
            catch(Exception e)
            {
                Log.Error(e.Message, e);
                Visible = false;
            }
        }

        public void InvalidateFeedbackCache()
        {
            Cacher.InvalidateFeedback(RealEntry, SubtextContext);
        }

        [Obsolete("This will get removed in the next version")]
        protected void RemoveComment_ItemCommand(object sender, EventArgs e)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Configuration;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Email;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Framework.Web;
using Subtext.Web.Controls.Captcha;

namespace Subtext.Web.UI.Controls
{
    public class Contact : BaseControl
    {
        protected Button btnSend;
        protected CaptchaControl captcha;
        protected InvisibleCaptcha invisibleCaptchaValidator;
        protected Label lblMessage;
        protected RegularExpressionValidator RegularExpressionValidator1;
        protected RequiredFieldValidator RequiredFieldValidator1;
        protected RequiredFieldValidator RequiredFieldValidator2;
        protected TextBox tbEmail;
        protected TextBox tbMessage;
        protected TextBox tbName;
        protected TextBox tbSubject;
        protected ValidationSummary ValidationSummary1;

        public static bool SendContactMessageToFeedback
        {
            get
            {
                string contactSetting = ConfigurationManager.AppSettings["ContactToFeedback"];
                if(contactSetting != null)
                {
                    bool useFeedback;
                    bool.TryParse(contactSetting, out useFeedback);
                    return useFeedback;
                }
                return false;
            }
        }

        /// <summary>
        /// Initializes the control.  Sets up the send button's 
        /// click event handler.
        /// </summary>
        /// <param name="e"></param>
        override protected void OnInit(EventArgs e)
        {
            btnSend.Click += OnSendButtonClick;

            EnsureEmailRequired();
            //Captcha should not be given to admin.
            if(!SecurityHelper.IsAdmin)
            {
                int btnIndex = Controls.IndexOf(btnSend);
                AddCaptchaIfNecessary(ref captcha, ref invisibleCaptchaValidator, btnIndex);
            }
            else
            {
                RemoveCaptcha();
            }
            base.OnInit(e);
        }

        private void EnsureEmailRequired()
        {
            foreach(Control control in Controls)
            {
                var validator = control as RequiredFieldValidator;
                if(validator == null)
                {
                    continue;
                }

                if(validator.ControlToValidate == tbEmail.ID)
                {
                    return;
                }
            }
            var emailRequiredValidator = new RequiredFieldValidator
            {
                ControlToValidate = tbEmail.ID,
                ErrorMessage = "* Please enter your email address",
                Display = ValidatorDisplay.Dynamic
            };
            Controls.AddAt(Controls.IndexOf(tbEmail) + 1, emailRequiredValidator);
        }


        private void OnSendButtonClick(object sender, EventArgs e)
        {
            if(Page.IsValid)
            {
                var contactMessage = new FeedbackItem(FeedbackType.ContactPage)
                {
                    Author = tbName.Text,
                    Email = tbEmail.Text,
                    Body = tbMessage.Text,
                    Title = string.Format("CONTACT: {0}", tbSubject.Text),
                    IpAddress = HttpHelper.GetUserIpAddress(SubtextContext.HttpContext)
                };


                if(SendContactMessageToFeedback || String.IsNullOrEmpty(Blog.Email))
                {
                    CreateCommentWithContactMessage(contactMessage);
                }
                else
                {
                    
                    try
                    {
                        var emailService = new EmailService(EmailProvider.Instance(), new EmbeddedTemplateEngine(),
                                                        SubtextContext);
                        emailService.EmailCommentToBlogAuthor(contactMessage);
                    }
                    catch(Exception)
                    {
                        lblMessage.Text =
                            "Your message could not be sent, most likely due to a problem with the mail server.";
                        return;
                    }
                }
                lblMessage.Text = "Your message was sent.";
            }
        }

        private void CreateCommentWithContactMessage(FeedbackItem contactMessage)
        {
            try
            {
                ICommentSpamService feedbackService = null;
                if(Blog.FeedbackSpamServiceEnabled)
                {
                    feedbackService = new AkismetSpamService(Blog.FeedbackSpamServiceKey, Blog, null, Url);
                }
                var commentService = new CommentService(SubtextContext,
                                                        new CommentFilter(SubtextContext, feedbackService));
                commentService.Create(contactMessage, true/*runFilters*/);
            }
            catch(BaseCommentException exc)
            {
                lblMessage.Text = exc.Message;
            }

            tbName.Text = string.Empty;
            tbEmail.Text = string.Empty;
            tbSubject.Text = string.Empty;
            tbMessage.Text = string.Empty;
        }

        //todo: move this to an appropriate place.
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Control that contains information about the current entry 
    /// being displayed.  This will allow other controls to use 
    /// data binding syntax to display information about the current 
    /// entry.
    /// </summary>
    public class CurrentEntryControl : BaseControl, IEntryControl
    {
        bool _dataBound;

        #region IEntryControl Members

        /// <summary>
        /// Gets the current entry.
        /// </summary>
        /// <value>The current entry.</value>
        public EntryViewModel Entry { get; set; }

        #endregion

        /// <summary>
        /// Binds a data source to the invoked server control and all its child
        /// controls.
        /// </summary>
        public override void DataBind()
        {
            if(Entry != null && !_dataBound)
            {
                _dataBound = true;
                base.DataBind();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Displays all entries for a given day.
    /// </summary>
    public class Day : EntryList
    {
        protected Literal DateTitle;
        protected Repeater DayList;
        protected HyperLink ImageLink;

        /// <summary>
        /// Initializes a new instance of the <see cref="Day"/> class and sets 
        /// the DescriptionOnly property to false.
        /// </summary>
        public Day()
        {
            DescriptionOnly = false;
        }

        /// <summary>
        /// Sets the current day.
        /// </summary>
        /// <value>The current day.</value>
        public EntryDay CurrentDay { get; set; }

        protected Entry Entry { get; private set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(CurrentDay != null)
            {
                DayList.ItemDataBound += DayList_ItemDataBound;

                if(ImageLink != null)
                {
                    ImageLink.NavigateUrl = Url.DayUrl(CurrentDay.BlogDay);

                    if(ImageLink.ImageUrl.StartsWith("~/"))
                    {
                        ImageLink.ImageUrl = Url.ResolveUrl(ImageLink.ImageUrl);
                    }

                    ControlHelper.SetTitleIfNone(ImageLink, "Click to see entries for this day.");
                }

                if(DateTitle != null)
                    DateTitle.Text = CurrentDay.BlogDay.ToLongDateString();
                DayList.DataSource = CurrentDay;
                DayList.DataBind();
            }
            else
            {
                Visible = false;
            }
        }

        void DayList_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            Entry = e.Item.DataItem as Entry;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for LastSevenDaysControl.
    /// </summary>
    public class DayCollection : BaseControl
    {
        protected Repeater DaysList;

        public ICollection<EntryDay> Days { private get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(Days != null)
            {
                DaysList.DataSource = Days;
                DaysList.DataBind();
            }
            else
            {
                Visible = false;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Security;
using Subtext.Framework.Text;
using Subtext.Web.Controls;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Control used to display a list of entries.
    /// </summary>
    public class EntryList : BaseControl
    {
        const string LinkToEnclosure = "<a href=\"{0}\" title = \"{1}\" class=\"enclosure-link\">{2}</a>{3}";

        static readonly string LinkToComments = "<a href=\"{0}#feedback\" title=\"" +
                                                Resources.EntryList_ViewAndAddComments +
                                                "\" class=\"comments\">{1}{2}</a>";

        static readonly string PostdescWithComments = "posted @ <a href=\"{0}\" title = \"" +
                                                      Resources.EntryList_PermanentLink +
                                                      "\">{1}</a> | <a href=\"{2}#feedback\" title = \"comments, pingbacks, trackbacks\" class=\"comments\">Feedback ({3})</a>";

        static readonly string PostdescWithNoComments = "posted @ <a href=\"{0}\" title = \"" +
                                                        Resources.EntryList_PermanentLink + "\">{1}</a>";

        public EntryList()
        {
            DescriptionOnly = true;
        }

        public string Category { get; set; }
        public ICollection<Entry> EntryListItems { get; set; }

        /// <summary>
        /// <para>
        /// If true, then the EntryList will only show the description 
        /// for an entry, if a description exists.
        /// If a description does NOT exist, then show the first 100 words of the post 
        /// followed by ...  TODO: make the number of words configurable.
        /// </para>
        /// <para>
        /// If false, then the description is show. But if the description 
        /// does not exist, the full text will be shown.
        /// </para>
        /// </summary>
        public bool DescriptionOnly { get; set; }

        public string EntryListTitle { get; set; }

        public string EntryListDescription { get; set; }

        public string EntryListReadMoreText { get; set; }

        public string EntryListReadMoreUrl { get; set; }

        protected virtual void PostCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var entry = (Entry)e.Item.DataItem;
                if(entry != null)
                {
                    // Each of these methods make sure to check that the 
                    // control to bind actually exists on the skin.
                    BindTitle(e, entry);
                    BindEditLink(entry, e);
                    BindPostText(e, entry);
                    BindPostDescription(e, entry);
                    BindPostCategories(e, entry);
                    BindPermalink(e, entry);
                    BindPostDate(e, entry);
                    BindCommentCount(e, entry);
                    BindAuthor(e, entry);
                    BindCurrentEntryControls(entry, e.Item);
                    BindEnclosure(e, entry);
                }
            }
        }

        private static void BindEnclosure(RepeaterItemEventArgs e, Entry entry)
        {
            var enclosure = (Label)e.Item.FindControl("Enclosure");
            if(enclosure != null)
            {
                if(entry.Enclosure != null && entry.Enclosure.ShowWithPost)
                {
                    bool displaySize;
                    Boolean.TryParse(enclosure.Attributes["DisplaySize"], out displaySize);

                    string sizeStr = null;
                    if(displaySize)
                    {
                        sizeStr = string.Format(" ({0})", entry.Enclosure.FormattedSize);
                    }
                    enclosure.Text = string.Format(LinkToEnclosure, entry.Enclosure.Url, entry.Enclosure.Title,
                                                   entry.Enclosure.Title, sizeStr);
                }
            }
        }


        private static void BindAuthor(RepeaterItemEventArgs e, Entry entry)
        {
            var author = e.Item.FindControl("author") as Label;
            if(author != null)
            {
                if(!String.IsNullOrEmpty(entry.Author))
                {
                    author.Text = entry.Author;
                }
            }
        }

        private void BindCommentCount(RepeaterItemEventArgs e, Entry entry)
        {
            var commentCount = e.Item.FindControl("commentCount") as Label;
            if(commentCount != null)
            {
                if(Blog.CommentsEnabled && entry.AllowComments)
                {
                    //TODO: Consider a specific url helper method for link to feedback section.
                    string entryUrl = Url.EntryUrl(entry);
                    if(entry.FeedBackCount == 0)
                    {
                        commentCount.Text = string.Format(CultureInfo.InvariantCulture, LinkToComments, entryUrl,
                                                          Resources.EntryList_AddComment, string.Empty);
                    }
                    else if(entry.FeedBackCount == 1)
                    {
                        commentCount.Text = string.Format(CultureInfo.InvariantCulture, LinkToComments, entryUrl,
                                                          Resources.EntryList_OneComment, string.Empty);
                    }
                    else if(entry.FeedBackCount > 1)
                    {
                        commentCount.Text = string.Format(LinkToComments, entryUrl, entry.FeedBackCount,
                                                          Resources.EntryList_CommentsPlural);
                    }
                }
            }
        }

        private static void BindPostDate(RepeaterItemEventArgs e, Entry entry)
        {
            var postDate = e.Item.FindControl("postDate") as Label;
            if(postDate != null)
            {
                if(postDate.Attributes["Format"] != null)
                {
                    postDate.Text = entry.DateSyndicated.ToString(postDate.Attributes["Format"]);
                    postDate.Attributes.Remove("Format");
                }
                else
                {
                    postDate.Text = entry.DateSyndicated.ToString("f");
                }
            }
        }

        private void BindPermalink(RepeaterItemEventArgs e, Entry entry)
        {
            var permalink = e.Item.FindControl("permalink") as Label;
            if(permalink != null)
            {
                string entryUrl = Url.EntryUrl(entry);
                if(permalink.Attributes["Format"] != null)
                {
                    permalink.Text = string.Format(CultureInfo.InvariantCulture, "<a href=\"{0}\" title=\"{2}\">{1}</a>",
                                                   entryUrl,
                                                   entry.DateSyndicated.ToString(permalink.Attributes["Format"]),
                                                   Resources.EntryList_PermanentLink);
                    permalink.Attributes.Remove("Format");
                }
                else
                {
                    permalink.Text = string.Format(CultureInfo.InvariantCulture, "<a href=\"{0}\" title=\"{2}\">{1}</a>",
                                                   entryUrl, entry.DateSyndicated.ToString("f"),
                                                   Resources.EntryList_PermanentLink);
                }
            }
        }

        private void BindPostDescription(RepeaterItemEventArgs e, Entry entry)
        {
            var postDesc = (Literal)e.Item.FindControl("PostDesc");
            if(postDesc != null)
            {
                string entryUrl = Url.EntryUrl(entry);
                if(entry.AllowComments)
                {
                    postDesc.Text = string.Format(PostdescWithComments, entryUrl, entry.DateSyndicated.ToString("f"),
                                                  entryUrl, entry.FeedBackCount);
                }
                else
                {
                    postDesc.Text = string.Format(PostdescWithNoComments, entryUrl, entry.DateSyndicated.ToString("f"));
                }
            }
        }

        private static void BindPostCategories(RepeaterItemEventArgs e, IIdentifiable entry)
        {
            var postCategories = (PostCategoryList)e.Item.FindControl("Categories");
            if(postCategories != null)
            {
                postCategories.LinkCategories = Links.GetLinkCategoriesByPostId(entry.Id);
                postCategories.DataBind();
            }
        }

        public static string ShowTruncatedBody(Entry entry, int definedwordlimit)
        {
            var returnstring = new StringBuilder("<p>");
            if(entry.Body == null)
            {
                returnstring.Append("");
            }
            else if(entry.Body.Length == 0)
            {
                returnstring.Append(entry.Body);
            }
            else
            {
                //We're counting words so HTML will get in the way
                //unless somebody has a better idea....
                entry.Body = HtmlHelper.RemoveHtml(entry.Body);

                string[] words = entry.Body.Split(new[] {' '});
                if(words.GetUpperBound(0) <= 0) //Body has one or fewer words
                {
                    returnstring.Append(entry.Body);
                    // NO need for appended ... because
                    //the entire post length is only one word
                }
                else
                {
                    int actualnumberofwords = words.GetUpperBound(0) + 1;
                    //First 100 words or however many there actually are, whichever is less
                    int wordlimit = actualnumberofwords < definedwordlimit ? actualnumberofwords : definedwordlimit;
                    for(int i = 0; i < wordlimit; i++)
                    {
                        returnstring.Append(words[i] + " ");
                    }
                    //truncate trailing space
                    returnstring.Remove(returnstring.Length - 1, 1);
                    if(actualnumberofwords > definedwordlimit) // add ... if there is more to the body
                    {
                        returnstring.Append("...");
                    }
                }
            }
            returnstring.Append("</p>");
            return string.Format(CultureInfo.InvariantCulture, "{0}", returnstring);
        }

        private void BindPostText(RepeaterItemEventArgs e, Entry entry)
        {
            var postText = (Literal)e.Item.FindControl("PostText");

            if(DescriptionOnly) // like on the monthly archive page
            {
                postText.Text = entry.HasDescription ? string.Format(CultureInfo.InvariantCulture, "<p>{0}</p>", entry.Description) : ShowTruncatedBody(entry, 100);
            }
            else
            {
                postText.Text = entry.HasDescription ? entry.Description : entry.Body;
            }
        }

        private void BindTitle(RepeaterItemEventArgs e, Entry entry)
        {
            var title = e.Item.FindControl("TitleUrl") as HyperLink;
            if(title != null)
            {
                title.Text = entry.Title;
                ControlHelper.SetTitleIfNone(title, Resources.EntryList_ClickToView);
                title.NavigateUrl = Url.EntryUrl(entry);
            }
        }

        // If the user is an admin AND the the skin 
        // contains an edit Hyperlink control, this 
        // will display the edit control.
        protected virtual void BindEditLink(Entry entry, RepeaterItemEventArgs e)
        {
            var editLink = e.Item.FindControl("editLink") as HyperLink;
            if(editLink != null)
            {
                if(SecurityHelper.IsAdmin)
                {
                    editLink.Visible = true;
                    if(editLink.Text.Length == 0 && editLink.ImageUrl.Length == 0)
                    {
                        //We'll slap on our little pencil icon.
                        editLink.ImageUrl = Url.EditIconUrl();
                        ControlHelper.SetTitleIfNone(editLink, Resources.EntryList_ClickToView);
                        editLink.NavigateUrl = AdminUrl.PostsEdit(entry.Id);
                    }
                }
                else
                {
                    editLink.Visible = false;
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(EntryListItems == null && !string.IsNullOrEmpty(Category))
            {
                // This EntryList is independent of an outside control and needs to
                //   populate its own EntryListItems.
                LinkCategory lc;
                if(Category.IsNumeric())
                {
                    int categoryId = Int32.Parse(Category);
                    lc = Cacher.SingleCategory(categoryId, false, SubtextContext);
                }
                else
                {
                    lc = Cacher.SingleCategory(Category, false, SubtextContext);
                }
                EntryListTitle = lc.Title;
                EntryListItems = Cacher.GetEntriesByCategory(0, lc.Id, SubtextContext);
            }

            if(EntryListItems != null)
            {
                var entryCollectionTitle = FindControl("EntryCollectionTitle") as Literal;
                if(entryCollectionTitle != null)
                {
                    entryCollectionTitle.Text = EntryListTitle;
                }

                var entryCollectionDescription = FindControl("EntryCollectionDescription") as Literal;
                if(entryCollectionDescription != null)
                {
                    if(EntryListDescription != null)
                    {
                        entryCollectionDescription.Text = EntryListDescription;
                    }
                    else
                    {
                        entryCollectionDescription.Visible = false;
                    }
                }

                var entryListReadMoreUrl = FindControl("EntryCollectionReadMoreLink") as HyperLink;

                if(entryListReadMoreUrl != null)
                {
                    if(EntryListReadMoreText != null)
                    {
                        entryListReadMoreUrl.Text = EntryListReadMoreText;
                        entryListReadMoreUrl.NavigateUrl = EntryListReadMoreUrl;
                    }
                    else
                    {
                        entryListReadMoreUrl.Visible = false;
                    }
                }

                var entryRepeater = FindControl("Entries") as Repeater;
                if(entryRepeater != null)
                {
                    entryRepeater.DataSource = EntryListItems;
                    entryRepeater.DataBind();
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI.WebControls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Footer control, displayed at the bottom of most skins. 
    ///	Contains a <see cref="System.Web.UI.WebControls.Literal"/> 
    ///	control which displays the author name.
    /// </summary>
    public class Footer : BaseControl
    {
        protected Literal currentYear;
        protected Literal FooterText;


        /// <summary>
        /// Sets the FooterText.Text property to the CurrentBlog.Author
        /// </summary>
        /// <param name="e">E.</param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(FooterText != null)
            {
                FooterText.Text = Blog.Author;
            }

            if(currentYear != null)
            {
                currentYear.Text = Blog.TimeZone.Now.Year.ToString(CultureInfo.InvariantCulture);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Util;
using Image=Subtext.Framework.Components.Image;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for GalleryThumbNailViewer.
    /// </summary>
    public partial class GalleryThumbNailViewer : BaseControl
    {
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            // Put user code to initialize the page here
            if(Context != null)
            {
                int? categoryId = SubtextContext.RequestContext.GetIdFromRequest();

                ImageCollection ic = Repository.GetImagesByCategoryId(categoryId.Value, true /* activeOnly */);
                if(ic != null)
                {
                    GalleryTitle.Text = ic.Category.Title;
                    if(ic.Category.HasDescription)
                    {
                        Description.Text = string.Format(CultureInfo.InvariantCulture, "{0}",
                                                         HttpUtility.HtmlEncode(ic.Category.Description));
                    }
                    ThumbNails.DataSource = ic;
                    ThumbNails.DataBind();
                }
            }
        }

        protected void ImageCreated(object sender, DataListItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var image = (Image)e.Item.DataItem;
                if(image != null)
                {
                    image.Blog = Blog;
                    var thumbNailImage = (HyperLink)e.Item.FindControl("ThumbNailImage");
                    if(thumbNailImage != null)
                    {
                        thumbNailImage.ImageUrl = Url.GalleryImageUrl(image, image.ThumbNailFile);
                        thumbNailImage.NavigateUrl = Url.GalleryImagePageUrl(image);
                        thumbNailImage.ToolTip = image.Title;
                    }
                }
            }
        }

        protected static Image EvalImage(object dataItem)
        {
            return (Image)dataItem;
        }
    }
}ï»¿#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System.Web.UI.WebControls;

namespace Subtext.Web.UI.Controls
{
    public partial class GalleryThumbNailViewer
    {
        protected Literal GalleryTitle;
        protected DataList ThumbNails;
        protected Literal Description;
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Used to display the header.
    /// </summary>
    public class Header : BaseControl
    {
        protected Literal HeaderSubTitle;
        protected HyperLink HeaderTitle;

        protected string Title { get; set; }

        public string Subtitle { get; set; }

        protected string HomeUrl { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            Title = Blog.Title;
            HomeUrl = Url.BlogUrl();
            Subtitle = Blog.SubTitle;

            if(null != FindControl("HeaderTitle"))
            {
                HeaderTitle.NavigateUrl = HomeUrl;
                HeaderTitle.Text = Title;
                ControlHelper.SetTitleIfNone(HeaderTitle, "The Title Of This Blog.");
            }

            if(null != FindControl("HeaderSubTitle"))
            {
                HeaderSubTitle.Text = Subtitle;
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            DataBind();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Data;

namespace Subtext.Web.UI.Controls
{
    [PartialCaching(120, null, null, "Blogger", false)]
    public class HomePage : BaseControl
    {
        protected DayCollection HomePageDays;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            HomePageDays.Days = GetHomePageEntries(Blog.ItemCount);
        }

        private IList<EntryDay> GetHomePageEntries(int itemCount)
        {
            return Repository.GetBlogPostsForHomePage(itemCount, PostConfig.DisplayOnHomepage | PostConfig.IsActive).ToList();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    public interface ICommentControl
    {
        CommentViewModel Comment { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    public interface IEntryControl
    {
        EntryViewModel Entry { get; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Web.Controls;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for LinkPage.
    /// </summary>
    public class LinkPage : BaseControl
    {
        protected DataList CatList;

        private void Page_Load(object sender, EventArgs e)
        {
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            var lcc = new List<LinkCategory>();
            lcc.AddRange(Repository.GetActiveCategories());
            CatList.DataSource = lcc;
            CatList.DataBind();
        }

        protected void CategoryCreated(object sender, DataListItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var linkcat = (LinkCategory)e.Item.DataItem;
                if(linkcat != null)
                {
                    var title = (Literal)e.Item.FindControl("Title");
                    if(title != null)
                    {
                        title.Text = linkcat.Title;
                    }

                    var linkList = (Repeater)e.Item.FindControl("LinkList");
                    linkList.DataSource = linkcat.Links;
                    linkList.DataBind();
                }
            }
        }

        protected void LinkCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var link = (Link)e.Item.DataItem;
                if(link != null)
                {
                    var linkControl = (HyperLink)e.Item.FindControl("Link");
                    linkControl.NavigateUrl = link.Url;
                    linkControl.Text = link.Title;
                    ControlHelper.SetTitleIfNone(linkControl, link.Title);
                    if(link.NewWindow)
                    {
                        if(!String.IsNullOrEmpty(linkControl.Attributes["rel"]))
                        {
                            linkControl.Attributes["rel"] += " ";
                        }
                        linkControl.Attributes["rel"] += "external ";
                    }
                    linkControl.Attributes["rel"] += link.Relation;
                    if(link.HasRss)
                    {
                        var rssLink = (HyperLink)e.Item.FindControl("RssLink");
                        if(rssLink != null)
                        {
                            rssLink.NavigateUrl = link.Rss;
                            rssLink.Visible = true;
                            rssLink.ToolTip = string.Format(CultureInfo.InvariantCulture, Resources.LinkPage_Subscribe,
                                                            link.Title);
                            ControlHelper.SetTitleIfNone(rssLink, rssLink.ToolTip);
                        }
                    }
                }
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        ///		Required method for Designer support - do not modify
        ///		the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Security;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for Login.
    /// </summary>
    public class Login : BaseControl
    {
        protected Button btnLogin;
        protected Literal Message;
        protected CheckBox RememberMe;
        protected TextBox tbPassword;
        protected TextBox tbUserName;

        private void Page_Load(object sender, EventArgs e)
        {
            if(SecurityHelper.IsAdmin)
            {
                Controls.Clear();
                Visible = false;
            }
        }

        private void btnLogin_Click(object sender, EventArgs e)
        {
            if(SubtextContext.HttpContext.Authenticate(Blog, tbUserName.Text, tbPassword.Text, RememberMe.Checked))
            {
                Response.Redirect(Request.Path);
            }
                ////			BlogConfig config = Config.CurrentBlog;
                //			if(tbUserName.Text == config.UserName && tbPassword.Text == config.Password)
                //			{
                //				FormsAuthentication.SetAuthCookie(config.BlogId.ToString(),RememberMe.Checked);
                //				Response.Redirect(Request.Path);
                //			}
            else
            {
                Message.Text = "That's not it";
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        ///		Required method for Designer support - do not modify
        ///		the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.btnLogin.Click += new System.EventHandler(this.btnLogin_Click);
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using Subtext.Extensibility;
using Subtext.Framework;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchiveDay.
    /// </summary>
    public class MonthList : BaseControl
    {
        protected EntryList MonthListings;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                DateTime dt = DateTimeHelper.DateFromUrl(Request.Path);
                MonthListings.DescriptionOnly = true;
                MonthListings.EntryListItems = Repository.GetPostsByDayRange(dt, dt.AddMonths(1), PostType.BlogPost, true);
                MonthListings.EntryListTitle = dt.ToString("y", CultureInfo.CurrentCulture);
            }
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Web.UI.Pages;

namespace Subtext.Web.UI.Controls
{
    public class MoreResultsLikeThis : BaseControl
    {
        public ISearchEngineService SearchEngineService
        {
            get
            {
                return SubtextPage.SearchEngineService;
            }
        }

        public MoreResultsLikeThis()
        {
            RowCount = 5;
        }

        private int _rowCount;
        public int RowCount
        {
            get { return _rowCount+1; }
            set { _rowCount = value; }
        }

        public string Query
        {
            get
            {
                var page = Page as SubtextMasterPage;
                return page != null ? page.Query : null;
            }
        }

        public IEnumerable<SearchEngineResult> SearchResults
        {
            get; 
            set;
        }

        protected override void OnLoad(EventArgs e)
        {
            int blogId = Blog.Id >= 1 ? Blog.Id : 0;
            var urlRelatedLinks = FindControl("Links") as Repeater;

            if(urlRelatedLinks != null)
            {
                if(SearchResults==null)
                {
                    int entryId = -1;
                    Entry entry = Cacher.GetEntryFromRequest(true, SubtextContext);
                    if (entry != null) entryId = entry.Id;
                    SearchResults = SearchEngineService.Search(Query, RowCount, blogId, entryId);
                }
                urlRelatedLinks.DataSource = SearchResults;
                urlRelatedLinks.DataBind();
            }
            var keywords = FindControl("keywords") as Literal;
            if(keywords != null)
            {
                keywords.Text = HttpUtility.HtmlEncode(Query);
            }

            base.OnLoad(e);
        }

        protected virtual void MoreReadingCreated(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var pi = (SearchEngineResult)e.Item.DataItem;
                BindLink(e, pi);
            }
            if(e.Item.ItemType == ListItemType.Footer)
            {
                var searchMoreLink = e.Item.FindControl("searchMore") as HtmlAnchor;
                if(searchMoreLink != null)
                {
                    searchMoreLink.InnerText = searchMoreLink.InnerText + Query;
                    searchMoreLink.HRef = Url.SearchPageUrl(Query);
                }
            }
        }

        private void BindLink(RepeaterItemEventArgs e, SearchEngineResult searchResult)
        {
            var relatedLink = (HyperLink)e.Item.FindControl("Link");
            var datePublished = (Literal)e.Item.FindControl("DatePublished");
            var score = (Literal)e.Item.FindControl("Score");
            if (relatedLink != null)
            {
                relatedLink.Text = searchResult.Title;
                relatedLink.NavigateUrl = Url.EntryUrl(searchResult);
                if (datePublished != null) datePublished.Text = searchResult.DateSyndicated.ToShortDateString();
                if (score != null) score.Text = searchResult.Score.ToString();
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Security;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Code behind class for the MyLinks section.  Hooks up links within 
    ///	MyLinks.ascx to their appropriate URL.
    /// </summary>
    public class MyLinks : BaseControl
    {
        protected HyperLink Admin;
        protected HyperLink Archives;
        protected HyperLink ContactLink;
        protected HyperLink HomeLink;
        protected HyperLink Syndication;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                if(HomeLink != null)
                {
                    HomeLink.NavigateUrl = Url.BlogUrl();
                    ControlHelper.SetTitleIfNone(HomeLink, "Link to the home page.");
                }

                if(ContactLink != null)
                {
                    ContactLink.NavigateUrl = Url.ContactFormUrl();
                    ControlHelper.SetTitleIfNone(ContactLink, "Contact form.");
                }

                if(Archives != null)
                {
                    Archives.NavigateUrl = Url.ArchivesUrl();
                    ControlHelper.SetTitleIfNone(Archives, "View Archives.");
                }

                if(Admin != null)
                {
                    if(Request.IsAuthenticated && SecurityHelper.IsAdmin)
                    {
                        Admin.Text = "Admin";
                        Admin.NavigateUrl = AdminUrl.Home();
                        ControlHelper.SetTitleIfNone(Admin, "Admin Section.");
                    }
                    else
                    {
                        Admin.Text = "Login";
                        Admin.NavigateUrl = Url.LoginUrl();
                        ControlHelper.SetTitleIfNone(Admin, "Login Form.");
                    }
                }

                if(Syndication != null)
                {
                    Syndication.NavigateUrl = Url.RssUrl(Blog).ToString();
                    if(Syndication.ImageUrl.StartsWith("~/"))
                    {
                        Syndication.ImageUrl = Url.ResolveUrl(Syndication.ImageUrl);
                    }
                    ControlHelper.SetTitleIfNone(Syndication, "Subscribe to this feed.");
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Displays news...
    /// </summary>
    public class News : BaseControl
    {
        protected Literal NewsItem;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                if(Blog.HasNews)
                {
                    NewsItem.Text = Blog.News;
                }
                else
                {
                    //this.Controls.Clear();
                    Visible = false;
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI;
using System.Web.UI.WebControls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for PageTemplate.
    /// </summary>
    public class PageTemplate : BaseControl
    {
        protected PlaceHolder BodyControl;

        public virtual void AddBody(Control cntrl)
        {
            BodyControl.Controls.Add(cntrl);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework;
using Subtext.Framework.Configuration;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Displays the titles of the most recent entries on the skin.
    /// </summary>
    public class PopularPosts : BaseControl
    {
        protected Repeater postList;

        public EntryStatsView CurrentEntry { get; private set; }

        public DateFilter FilterType { get; set; }

        /// <summary>
        /// Binds the posts <see cref="List{T}"/> to the post list repeater.
        /// Raises the <see cref="E:System.Web.UI.Control.Load"/>
        /// event.
        /// </summary>
        /// <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        protected override void OnLoad(EventArgs e)
        {
            FilterType = DateFilter.None;
            string filterTypeText = Request.QueryString["popular-posts"];
            string strCookieName = Config.CurrentBlog.BlogGroupId + "popular-posts";
            if (filterTypeText == null)
            {
                if (Request.Cookies[strCookieName] != null)
                {
                    filterTypeText = Request.Cookies[strCookieName].Value;
                }                
            }

            Response.Cookies[strCookieName].Value = filterTypeText;
            Response.Cookies[strCookieName].Expires = Config.CurrentBlog.TimeZone.Now.AddYears(1);

            if(!string.IsNullOrEmpty(filterTypeText))
            {
                try
                {
                    FilterType = (DateFilter)Enum.Parse(typeof(DateFilter), filterTypeText, true);
                }
                catch
                {
                }
            }

            ICollection<EntryStatsView> posts = Repository.GetPopularEntries(Blog.Id, FilterType);

            base.OnLoad(e);

            if(posts != null)
            {
                postList.DataSource = posts;
                postList.DataBind();
            }
            else
            {
                Controls.Clear();
                Visible = false;
            }
        }

        protected void PostCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                CurrentEntry = (EntryStatsView)e.Item.DataItem;
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for PostCategoryList.
    /// </summary>
    public class PostCategoryList : BaseControl
    {
        protected Repeater CatList;

        public ICollection<LinkCategory> LinkCategories { get; set; }

        public bool ShowEmpty { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(LinkCategories != null)
            {
                CatList.DataSource = LinkCategories;
                CatList.DataBind();
            }
            else
            {
                Controls.Clear();
                Visible = false;
            }
        }

        protected override void OnPreRender(EventArgs e)
        {
            if(CatList.Items.Count == 0)
            {
                Visible = ShowEmpty;
            }
            base.OnPreRender(e);
        }

        protected void CategoryCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var linkcat = (LinkCategory)e.Item.DataItem;
                if(linkcat != null)
                {
                    var linkControl = (HyperLink)e.Item.FindControl("Link");
                    linkControl.NavigateUrl = Url.CategoryUrl(linkcat);
                    if(string.IsNullOrEmpty(linkControl.Attributes["title"]))
                    {
                        linkControl.Attributes["title"] = "";
                    }
                    linkControl.Text = linkcat.Title;
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Threading;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Email;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Routing;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Framework.Web;
using Subtext.Web.Properties;
using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for Comments.
    /// </summary>
    public partial class PostComment : BaseControl, IEntryControl
    {
        private Entry _entry;
        private EntryViewModel _entryViewModel;

        bool IsCommentsRendered
        {
            get { return Blog.CommentsEnabled && Entry != null && Entry.AllowComments; }
        }

        bool IsCommentAllowed
        {
            get { return Blog.CommentsEnabled && Entry != null && Entry.AllowComments && !Entry.CommentingClosed; }
        }

        public EntryViewModel Entry
        {
            get
            {
                if(_entryViewModel == null)
                {
                    _entryViewModel = new EntryViewModel(RealEntry, SubtextContext);
                }
                return _entryViewModel;
            }
        }

        private Entry RealEntry
        {
            get
            {
                if(_entry == null)
                {
                    _entry = Cacher.GetEntryFromRequest(true, SubtextContext);
                    if(_entry == null)
                    {
                        HttpHelper.SetFileNotFoundResponse();
                    }
                }
                return _entry;
            }
        }

        /// <summary>
        /// Handles the OnLoad event.  Attempts to prepopulate comment 
        /// fields based on the user's cookie.
        /// </summary>
        /// <param name="e">E.</param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            //TODO: Make this configurable.
            tbTitle.MaxLength = 128;
            tbEmail.MaxLength = 128;
            tbName.MaxLength = 32;
            tbUrl.MaxLength = 256;
            tbComment.MaxLength = 4000;
            SetValidationGroup();

            if(!IsPostBack)
            {
                if(Entry == null)
                {
                    //Somebody probably is messing with the url.
                    Response.Redirect("~/SystemMessages/FileNotFound.aspx", true);
                    return;
                }

                ResetCommentFields();

                if(Config.CurrentBlog.CoCommentsEnabled)
                {
                    if(coComment == null)
                    {
                        coComment = new SubtextCoComment();
                        var coCommentPlaceHolder = Page.FindControl("coCommentPlaceholder") as PlaceHolder;
                        if(coCommentPlaceHolder != null)
                        {
                            coCommentPlaceHolder.Controls.Add(coComment);
                        }
                    }
                    coComment.PostTitle = RealEntry.Title;
                    coComment.PostUrl = Url.EntryUrl(RealEntry).ToFullyQualifiedUrl(Blog).ToString();
                }
            }

            DataBind();
        }

        void SetValidationGroup()
        {
            foreach(Control control in Controls)
            {
                var validator = control as BaseValidator;
                if(validator != null)
                {
                    validator.ValidationGroup = "SubtextComment";
                    continue;
                }

                var btn = control as Button;
                if(btn != null)
                {
                    btn.ValidationGroup = "SubtextComment";
                    continue;
                }

                var textbox = control as TextBox;
                if(textbox != null)
                {
                    textbox.ValidationGroup = "SubtextComment";
                    continue;
                }
            }
        }

        /// <summary>
        /// Called when an approved comment is added.
        /// </summary>
        protected virtual void OnCommentApproved(FeedbackItem feedback)
        {
            if(feedback.Approved)
            {
                EventHandler<EventArgs> theEvent = CommentApproved;
                if(theEvent != null)
                {
                    theEvent(this, EventArgs.Empty);
                }
            }
        }

        private void RemoveCommentControls()
        {
            for(int i = Controls.Count - 1; i >= 0; i--)
            {
                Controls.RemoveAt(i);
            }
        }

        public event EventHandler<EventArgs> CommentApproved;

        private void OnSubmitButtonClick(object sender, EventArgs e)
        {
            Thread.Sleep(5000);
            if(!Page.IsValid)
            {
                return;
            }
            
            LastDitchValidation();
            try
            {
                Entry currentEntry = RealEntry;
                if(IsCommentAllowed)
                {
                    FeedbackItem feedbackItem = CreateFeedbackInstanceFromFormInput(currentEntry);
                    ICommentSpamService feedbackService = null;
                    if(Blog.FeedbackSpamServiceEnabled)
                    {
                        feedbackService = new AkismetSpamService(Blog.FeedbackSpamServiceKey, Blog, null, Url);
                    }
                    var commentService = new CommentService(SubtextContext,
                                                            new CommentFilter(SubtextContext, feedbackService));
                    commentService.Create(feedbackItem, true/*runFilters*/);
                    var emailService = new EmailService(EmailProvider.Instance(), new EmbeddedTemplateEngine(),
                                                        SubtextContext);
                    emailService.EmailCommentToBlogAuthor(feedbackItem);

                    if(chkRemember == null || chkRemember.Checked)
                    {
                        SetRememberedUserCookie();
                    }

                    DisplayResultMessage(feedbackItem);
                }
            }
            catch(BaseCommentException exception)
            {
                Message.Text = exception.Message;
            }
        }

        private void LastDitchValidation()
        {
            //The validation controls and otherwise should catch everything.
            //This is here to be extra safe.
            //Anything triggering these exceptions is probably malicious.
            if(tbComment.Text.Length > 4000
               || tbTitle.Text.Length > 128
               || tbEmail.Text.Length > 128
               || tbName.Text.Length > 32
               || tbUrl.Text.Length > 256)
            {
                throw new InvalidOperationException(Resources.InvalidOperation_CommentNotValid);
            }
        }

        private void SetRememberedUserCookie()
        {
            var user = new HttpCookie("CommentUser");
            user.Values["Name"] = tbName.Text;
            user.Values["Url"] = tbUrl.Text;
            if(tbEmail != null)
            {
                user.Values["Email"] = tbEmail.Text;
            }
            user.Expires = DateTime.Now.AddDays(30);
            Response.Cookies.Add(user);
        }

        private void DisplayResultMessage(FeedbackItem feedbackItem)
        {
            RemoveCommentControls();
            Message = new Label();

            if(feedbackItem.Approved)
            {
                Message.Text = Resources.PostComment_ThanksForComment;
                Message.CssClass = "success";
                Controls.Add(Message); //This needs to be here for ajax calls.
                Cacher.ClearCommentCache(feedbackItem.EntryId, SubtextContext);
                OnCommentApproved(feedbackItem);
                return;
            }
            if(feedbackItem.NeedsModeratorApproval)
            {
                Message.Text = Resources.PostComment_ThanksForComment + " It will be displayed soon.";
                Message.CssClass = "error moderation";
            }
            else
            {
                Message.Text = "Sorry, but your comment was flagged as spam and will be moderated.";
                Message.CssClass = "error";
            }
            Controls.Add(Message);
        }

        private FeedbackItem CreateFeedbackInstanceFromFormInput(IIdentifiable currentEntry)
        {
            var feedbackItem = new FeedbackItem(FeedbackType.Comment) {Author = tbName.Text};
            if(tbEmail != null)
            {
                feedbackItem.Email = tbEmail.Text;
            }
            feedbackItem.SourceUrl = tbUrl.Text.EnsureUrl();
            feedbackItem.Body = tbComment.Text;
            feedbackItem.Title = tbTitle.Text;
            feedbackItem.EntryId = currentEntry.Id;
            feedbackItem.IpAddress = HttpHelper.GetUserIpAddress(SubtextContext.HttpContext);
            feedbackItem.IsBlogAuthor = SecurityHelper.IsAdmin;
            return feedbackItem;
        }

        private void ResetCommentFields()
        {
            if(tbComment != null)
            {
                tbComment.Text = string.Empty;
            }

            if(tbEmail != null)
            {
                tbEmail.Text = SecurityHelper.IsAdmin ? Blog.Email : string.Empty;
            }

            if(tbName != null)
            {
                tbName.Text = SecurityHelper.IsAdmin ? Blog.UserName : string.Empty;
            }

            if(tbTitle != null)
            {
                tbTitle.Text = string.Format("re: {0}", HttpUtility.HtmlDecode(RealEntry.Title));
            }

            if(tbUrl != null)
            {
                tbUrl.Text = SecurityHelper.IsAdmin ? Url.BlogUrl().ToFullyQualifiedUrl(Blog).ToString() : string.Empty;
            }

            HttpCookie user = Request.Cookies["CommentUser"];
            if(user != null)
            {
                tbName.Text = user.Values["Name"];
                tbUrl.Text = user.Values["Url"];

                // Remember by default if no-checkbox.
                if(chkRemember != null && chkRemember.Checked)
                {
                    chkRemember.Checked = true;
                }

                //Check to see if email textbox is present
                if(tbEmail != null && user.Values["Email"] != null)
                {
                    tbEmail.Text = user.Values["Email"];
                }
            }

            if(IsCommentsRendered)
            {
                if(RealEntry.CommentingClosed)
                {
                    Controls.Clear();
                    Controls.Add(
                        new LiteralControl(
                            "<div class=\"commentsClosedMessage\"><span style=\"font-style: italic;\">Comments have been closed on this topic.</span></div>"));
                }
                else
                {
                    tbTitle.Text = string.Format("re: {0}", HttpUtility.HtmlDecode(RealEntry.Title));
                }
            }
            else
            {
                Controls.Clear();
            }
        }

        override protected void OnInit(EventArgs e)
        {
            if(btnSubmit != null)
            {
                btnSubmit.Click += OnSubmitButtonClick;
            }

            if(btnCompliantSubmit != null)
            {
                btnCompliantSubmit.Click += OnSubmitButtonClick;
            }

            //Captcha should not be given to admin.
            if(!SecurityHelper.IsAdmin)
            {
                int btnIndex = Controls.IndexOf(btnSubmit);
                if(btnIndex < 0)
                {
                    btnIndex = Controls.IndexOf(btnCompliantSubmit);
                }

                AddCaptchaIfNecessary(ref captcha, ref invisibleCaptchaValidator, btnIndex);
            }
            else
            {
                RemoveCaptcha();
            }
        }
    }
}using Subtext.Web.Controls.Captcha;

namespace Subtext.Web.UI.Controls
{
	public partial class PostComment
	{
		protected System.Web.UI.WebControls.TextBox tbTitle;
		protected System.Web.UI.WebControls.TextBox tbName;
		protected System.Web.UI.WebControls.TextBox tbUrl;
		protected System.Web.UI.WebControls.TextBox tbComment;
		protected System.Web.UI.WebControls.TextBox tbEmail;
		protected System.Web.UI.WebControls.Button btnSubmit;
		protected System.Web.UI.WebControls.Button btnConfirm;
		protected Subtext.Web.Controls.CompliantButton btnCompliantSubmit;
		protected System.Web.UI.WebControls.Label Message;
		protected System.Web.UI.WebControls.CheckBox chkRemember;
		protected InvisibleCaptcha invisibleCaptchaValidator;
		protected CaptchaControl captcha;
		protected SubtextCoComment coComment;
	}
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Data;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for PreviousNext.
    /// </summary>
    public class PreviousNext : BaseControl
    {
        protected Control LeftPipe;
        protected HyperLink MainLink;
        protected HyperLink NextLink;
        protected HyperLink PrevLink;
        protected Control RightPipe;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            //Get the entry
            Entry entry = Cacher.GetEntryFromRequest(true, SubtextContext);

            //if found
            if(entry != null)
            {
                //Sent entry properties
                MainLink.NavigateUrl = Url.BlogUrl();
                var entries = Cacher.GetPreviousNextEntry(entry.Id, PostType.BlogPost, SubtextContext);

                //Remember, the NEXT entry is the MORE RECENT entry.
                switch(entries.Count)
                {
                    case 0:
                    {
                        //you have no entries. You should blog more
                        if(PrevLink != null)
                        {
                            PrevLink.Visible = false;
                            
                        }
                        if(NextLink != null)
                        {
                            NextLink.Visible = false;
                        }
                        break;
                    }
                    case 1:
                    {
                        //since there is only one record, you are at an end
                        //Check EntryId to see if it is greater or less than
                        //the current ID
                        if (entries.First().DateSyndicated > entry.DateSyndicated)
                        {
                            //this is the oldest blog
                            if(PrevLink != null)
                            {
                                PrevLink.Visible = false;
                            }
                            if(LeftPipe != null)
                            {
                                LeftPipe.Visible = false;
                            }
                            SetNav(NextLink, entries.First());
                        }
                        else
                        {
                            //this is the latest blog
                            if(NextLink != null)
                            {
                                NextLink.Visible = false;
                            }
                            if(RightPipe != null)
                            {
                                RightPipe.Visible = false;
                            }
                            SetNav(PrevLink, entries.First());
                        }
                        break;
                    }
                    case 2:
                    {
                        //two records found. The first record will be NEXT
                        //the second record will be PREVIOUS
                        //This is because the query is sorted by EntryId
                        SetNav(NextLink, entries.First());
                        SetNav(PrevLink, entries.ElementAt(1));
                        break;
                    }
                }
            }
            else
            {
                //No post? Deleted? Help :)
                Controls.Clear();
                Controls.Add(
                    new LiteralControl("<p><strong>The entry could not be found or has been removed</strong></p>"));
            }
        }


        private void SetNav(HyperLink navLink, EntrySummary entry)
        {
            if(navLink == null)
            {
                return;
            }
            string format = navLink.Attributes["Format"];
            if(String.IsNullOrEmpty(format))
            {
                format = "{0}";
            }

            navLink.Attributes.Remove("Format");

            string entryTitle = HttpUtility.HtmlDecode(entry.Title);
            string sizeLimitText = navLink.Attributes["TextSizeLimit"];
            if(!String.IsNullOrEmpty(sizeLimitText))
            {
                int sizeLimit;
                if(int.TryParse(sizeLimitText, out sizeLimit))
                {
                    if(sizeLimit > 0 && sizeLimit < entryTitle.Length)
                    {
                        entryTitle = entryTitle.Substring(0, sizeLimit) + "...";
                    }
                }
            }
            navLink.Attributes.Remove("TextSizeLimit");

            navLink.Text = HttpUtility.HtmlEncode(string.Format(format, entryTitle));
            navLink.NavigateUrl = Url.EntryUrl(entry);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services;
using Subtext.Framework.Text;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Displays the most recent comments on the skin.
    /// </summary>
    [PartialCaching(120, null, null, "Blogger", true)]
    public class RecentComments : BaseControl
    {
        private const int DefaultRecentPostCount = 5;
        protected Repeater feedList;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecentComments"/> class.
        /// </summary>
        public RecentComments()
        {
            int commentCount = Config.CurrentBlog.NumberOfRecentComments > 0
                                   ? Config.CurrentBlog.NumberOfRecentComments
                                   : DefaultRecentPostCount;
            ICollection<FeedbackItem> comments = FeedbackItem.GetRecentComments(commentCount);
            Comments = (from c in comments where c.EntryId > 0 select c).ToList();
            Gravatar = new GravatarService(ConfigurationManager.AppSettings);
        }

        protected GravatarService Gravatar { get; private set; }

        protected IEnumerable<FeedbackItem> Comments { get; private set; }

        protected FeedbackItem Comment { get; set; }

        protected string SafeCommentBody
        {
            get
            {
                if(Comment != null)
                {
                    string commentBody = HttpUtility.HtmlEncode(HtmlHelper.RemoveHtml(Comment.Body));
                    if(Blog.RecentCommentsLength > 0)
                    {
                        if(commentBody.Length > Blog.RecentCommentsLength)
                        {
                            commentBody = commentBody.Substring(0, Blog.RecentCommentsLength) + "...";
                        }
                    }
                    return commentBody;
                }
                return string.Empty;
            }
        }

        protected string AlternatingCssClass { get; set; }

        /// <summary>
        /// Binds the comments <see cref="List{T}"/> to the comment list repeater.
        /// Raises the <see cref="E:System.Web.UI.Control.Load"/>
        /// event.
        /// </summary>
        /// <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(Comments != null && feedList != null)
            {
                feedList.DataSource = Comments;
                feedList.DataBind();
            }
            else
            {
                Controls.Clear();
                Visible = false;
            }
        }

        public string EditUrl(FeedbackItem feedback)
        {
            string url = AdminUrl.FeedbackEdit(feedback.Id);

            return VirtualPathUtility.ToAbsolute(StringHelper.LeftBefore(url, "?")) + "?" +
                   url.RightAfter("?");
        }

        protected void EntryCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                Comment = (FeedbackItem)e.Item.DataItem;

                var title = (HyperLink)e.Item.FindControl("Link");
                if(title != null)
                {
                    title.Text = SafeCommentBody;
                    title.NavigateUrl = Url.FeedbackUrl(Comment);
                    ControlHelper.SetTitleIfNone(title, "Reader Comment.");
                }
                var author = (Literal)e.Item.FindControl("Author");
                if(author != null)
                {
                    author.Text = HttpUtility.HtmlEncode(Comment.Author);
                }
            }
        }

        protected void OnItemBound(object sender, RepeaterItemEventArgs e)
        {
            AlternatingCssClass = e.Item.ItemType != ListItemType.Item ? " alt" : string.Empty;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Text;
using Subtext.Web.Controls;
using Subtext.Web.UI.ViewModels;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Displays the titles of the most recent entries on the skin.
    /// </summary>
    public class RecentPosts : BaseControl, IEntryControl
    {
        private const int DefaultRecentPostCount = 5;
        private ICollection<Entry> _posts;
        protected Repeater postList;

        public EntryViewModel Entry { get; private set; }

        /// <summary>
        /// Binds the posts <see cref="List{T}"/> to the post list repeater.
        /// Raises the <see cref="E:System.Web.UI.Control.Load"/>
        /// event.
        /// </summary>
        /// <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        protected override void OnLoad(EventArgs e)
        {            
            // number of posts to show, use default if not set by user
            // use recentcomments settings here - avoid schema additions & 
            // likely most people would be happy with the same settings for both controls anyway
            int postCount = Config.CurrentBlog.NumberOfRecentComments > 0
                                ? Config.CurrentBlog.NumberOfRecentComments
                                : DefaultRecentPostCount;
            _posts = Repository.GetEntries(postCount, PostType.BlogPost, PostConfig.IsActive, true);

            base.OnLoad(e);

            if(_posts != null)
            {
                postList.DataSource = _posts;
                postList.DataBind();
            }
            else
            {
                Controls.Clear();
                Visible = false;
            }
        }

        protected void PostCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var post = (Entry)e.Item.DataItem;
                Entry = new EntryViewModel(post, SubtextContext);
                var lnkPost = (HyperLink)e.Item.FindControl("Link");
                if(lnkPost != null)
                {
                    // display whole title, (up to 255 chars), no truncation
                    lnkPost.Text = HtmlHelper.RemoveHtml(post.Title);
                    lnkPost.NavigateUrl = Url.EntryUrl(post);
                    ControlHelper.SetTitleIfNone(lnkPost, "Blog Entry.");
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Services.SearchEngine;

namespace Subtext.Web.UI.Controls
{
    public class RelatedLinks : BaseControl
    {
        public ISearchEngineService SearchEngineService { 
            get
            {
                return SubtextPage.SearchEngineService;
            }
        }

        public RelatedLinks()
        {
            RowCount = 5;
        }

        public int RowCount { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            int blogId = Blog.Id >= 1 ? Blog.Id : 0;
            var urlRelatedLinks = FindControl("Links") as Repeater;
            Entry entry = Cacher.GetEntryFromRequest(true, SubtextContext);

            urlRelatedLinks.DataSource = SearchEngineService.RelatedContents(entry.Id, RowCount, blogId); ;
            urlRelatedLinks.DataBind();
            if (urlRelatedLinks.Items.Count == 0)
                this.Visible = false;
            base.OnLoad(e);
        }


        protected virtual void MoreReadingCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var pi = (SearchEngineResult)e.Item.DataItem;
                BindLink(e, pi);
            }
        }

        private void BindLink(RepeaterItemEventArgs e, SearchEngineResult searchResult)
        {
            var relatedLink = (HyperLink)e.Item.FindControl("Link");
            var datePublished = (Literal)e.Item.FindControl("DatePublished");
            var score = (Literal)e.Item.FindControl("Score");
            if(relatedLink != null)
            {
                relatedLink.Text = searchResult.Title;
                relatedLink.NavigateUrl = Url.EntryUrl(searchResult);
                if (datePublished!=null) datePublished.Text = searchResult.DateSyndicated.ToShortDateString();
                if (score!=null) score.Text = searchResult.Score.ToString();
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Web;
using System.Web.UI.WebControls;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Util;

namespace Subtext.Web.UI.Controls
{
    public class Search : BaseControl
    {
        public Search()
        {
            MaxResultsCount = 100;
        }

        public ISearchEngineService SearchEngineService
        {
            get
            {
                return SubtextPage.SearchEngineService;
            }
        }


        public int MaxResultsCount { get; set; }

        public void btnSearch_Click(object sender, EventArgs e)
        {
            var txtSearch = FindControl("txtSearch") as TextBox;
            if (!String.IsNullOrEmpty(txtSearch.Text))
                Response.Redirect(Url.SearchPageUrl(txtSearch.Text), true);
        }

        protected override void OnLoad(EventArgs e)
        {
            if(IsPostBack)
            {
                return; 
            }

            var searchResults = FindControl("results") as Repeater;
            var noResults = FindControl("noresults") as PlaceHolder;
            var terms = FindControl("terms") as Literal;
            var txtSearch = FindControl("txtSearch") as TextBox;


            string queryString = SubtextContext.RequestContext.GetQueryFromRequest();
            if (!String.IsNullOrEmpty(queryString))
            {
                if (txtSearch != null) txtSearch.Text = queryString;
                var results = SearchEngineService.Search(queryString, MaxResultsCount, Blog.Id);
                if (results.Count()>0)
                {
                    searchResults.DataSource = results;
                    searchResults.DataBind();
                    searchResults.Visible = true;
                }
                else
                {
                    terms.Text = HttpUtility.HtmlEncode(queryString);
                    noResults.Visible = true;
                }
            }
            base.OnLoad(e);
        }

        protected virtual void SearchResultsCreated(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                SearchResult = (SearchEngineResult)e.Item.DataItem;
                BindLink(e, SearchResult);
            }
        }

        public SearchEngineResult SearchResult
        {
            get; 
            private set;
        }

        private void BindLink(RepeaterItemEventArgs e, SearchEngineResult searchResult)
        {
            var relatedLink = (HyperLink)e.Item.FindControl("Link");
            var datePublished = (Literal)e.Item.FindControl("DatePublished");
            var score = (Literal)e.Item.FindControl("Score");
            if (relatedLink != null)
            {
                relatedLink.Text = searchResult.Title;
                relatedLink.NavigateUrl = Url.EntryUrl(searchResult);
                if (datePublished != null)
                {
                    datePublished.Text = searchResult.DateSyndicated.ToShortDateString();
                }
                if (score != null)
                {
                    score.Text = searchResult.Score.ToString();
                }
            }
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	<para>
    ///	This control displays links by categories.  Categories 
    ///	include "Archives", "Image Galleries", And custom link Categories.
    ///	</para>
    ///	<para>
    ///	Makes use of the <see cref="CategoryList"/> control.
    ///	</para>
    /// </summary>
    public class SingleColumn : CachedColumnControl
    {
        protected CategoryList Categories;

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Control.Load"/>
        /// event.  Then calls <see cref="GetArchiveCategories"/> to 
        /// populate the <see cref="CategoryList"/> control.
        /// </summary>
        /// <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            Categories.LinkCategories = GetArchiveCategories(SubtextContext.Blog);
        }

        protected ICollection<LinkCategory> GetArchiveCategories(Blog blog)
        {
            var lcc = new List<LinkCategory>();

            LinkCategory storyCollection = UIData.Links(CategoryType.StoryCollection, blog, Url);
            if(storyCollection != null)
            {
                lcc.Add(storyCollection);
            }

            LinkCategory archiveMonth = UIData.ArchiveMonth(Url, blog);
            if(archiveMonth != null)
            {
                lcc.Add(archiveMonth);
            }

            /*   
             * Uncomment this to test the Category Archive with post count
             * and comment to following block of code 
             */

            //LinkCategory archiveCategories = UIData.ArchiveCategory(CurrentBlog.UrlFormats);
            //if (archiveCategories != null)
            //    lcc.Add(archiveCategories);


            LinkCategory postCollection = UIData.Links(CategoryType.PostCollection, blog, Url);
            if(postCollection != null)
            {
                lcc.Add(postCollection);
            }

            LinkCategory imageCollection = UIData.Links(CategoryType.ImageCollection, blog, Url);
            if(imageCollection != null)
            {
                lcc.Add(imageCollection);
            }

            lcc.AddRange(Repository.GetActiveCategories());
            return lcc;
        }
    }
}#region Disclaimer/Info

// Calendar created 11/07/2005 by:
//*Simone Chiaretta (http://blogs.ugidotnet.org/piyo/)
//
//With inspiration and guidance from:
// DottextBlogCalendar created on 2/14/2004 by:
//*Scott Willeke (http://blogs.pingpoet.com/overflow)
//*Scott Mitchell (http://scottonwriting.net/sowblog/posts/708.aspx)
//*Scott Watermasysk (http://scottwater.com/blog/archive/2004/02/13/CalendarControl.aspx)

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for StaticPage.
    /// </summary>
    public class StaticPage : BaseControl
    {
        protected Repeater CatList;

        private void Page_Load(object sender, EventArgs e)
        {
            // Put user code to initialize the page here
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            var lcc = new List<LinkCategory>();
            lcc.AddRange(Links.GetCategories(CategoryType.LinkCollection, ActiveFilter.ActiveOnly));
            CatList.DataSource = lcc;
            CatList.DataBind();
        }

        protected void CategoryCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var linkcat = (LinkCategory)e.Item.DataItem;
                if(linkcat != null)
                {
                    var title = (Literal)e.Item.FindControl("Title");
                    if(title != null)
                    {
                        title.Text = linkcat.Title;
                    }

                    var linkList = (Repeater)e.Item.FindControl("LinkList");
                    linkList.DataSource = linkcat.Links;
                    linkList.DataBind();
                }
            }
        }

        protected void LinkCreated(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var link = (Link)e.Item.DataItem;
                if(link != null)
                {
                    var linkControl = (HyperLink)e.Item.FindControl("Link");
                    linkControl.NavigateUrl = link.Url;
                    linkControl.Text = link.Title;
                    if(link.NewWindow)
                    {
                        linkControl.Target = "_blank";
                    }

                    if(link.HasRss)
                    {
                        var rssLink = (HyperLink)e.Item.FindControl("RssLink");
                        if(rssLink != null)
                        {
                            rssLink.NavigateUrl = link.Rss;
                            rssLink.Visible = true;
                            rssLink.ToolTip = string.Format(Resources.LinkPage_Subscribe, link.Title);
                        }
                    }
                }
            }
        }

        #region Web Form Designer generated code

        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);
        }

        /// <summary>
        ///		Required method for Designer support - do not modify
        ///		the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.Load += new System.EventHandler(this.Page_Load);
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Web;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for ArchiveDay.
    /// </summary>
    public class CategoryEntryList : BaseControl
    {
        protected EntryList EntryStoryList;

        public bool DescriptionOnly
        {
            get { return EntryStoryList.DescriptionOnly; }
            set { EntryStoryList.DescriptionOnly = value; }
        }


        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                Blog info = Blog;

                LinkCategory lc = Cacher.SingleCategory(SubtextContext);

                int count = Request.QueryString["Show"] != null ? 0 : info.CategoryListPostCount;
                //as of 3sep2006, this is a configurable option. 
                //However, we retain the ability to overide the CategoryListPostCount setting via the query string, as usual.

                if(lc == null)
                {
                    HttpHelper.SetFileNotFoundResponse();
                    return;
                }

                ICollection<Entry> ec = Cacher.GetEntriesByCategory(count, lc.Id, SubtextContext);
                EntryStoryList.EntryListItems = ec;

                EntryStoryList.EntryListTitle = lc.Title;
                if(lc.HasDescription)
                {
                    EntryStoryList.EntryListDescription = lc.Description;
                }

                if(count != 0 && ec != null && ec.Count == info.CategoryListPostCount)
                    //crappy. If the only category has #CategoryListPostCount entries, we will show the full archive link?
                {
                    EntryStoryList.EntryListReadMoreText = string.Format(CultureInfo.InvariantCulture,
                                                                         "Full {0} Archive", lc.Title);
                    EntryStoryList.EntryListReadMoreUrl = string.Format(CultureInfo.InvariantCulture, "{0}?Show=All",
                                                                        Request.Path);
                }

                Globals.SetTitle(string.Format(CultureInfo.InvariantCulture, "{0} - {1}", Blog.Title, lc.Title), Context);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Implements CoComment for Subtext.
    /// </summary>
    public class SubtextCoComment : CoComment
    {
        public UrlHelper Url
        {
            get
            {
                var page = Page as SubtextPage;
                return page.Url;
            }
        }

        /// <summary>
        /// Raises the <see cref="E:System.Web.UI.Control.Load"/>
        /// event.
        /// </summary>
        /// <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        protected override void OnLoad(EventArgs e)
        {
            BlogTitle = Config.CurrentBlog.Title;
            BlogTool = "Subtext";
            BlogUrl = Url.BlogUrl().ToFullyQualifiedUrl(Config.CurrentBlog).ToString();

            CommentAuthorFieldName = GetControlUniqueId("tbName");
            CommentButtonId = GetControlUniqueId("btnSubmit");
            if(string.IsNullOrEmpty(CommentButtonId))
            {
                CommentButtonId = GetControlUniqueId("btnCompliantSubmit");
            }
            CommentTextFieldName = GetControlUniqueId("tbComment");
            CommentFormId = ControlHelper.GetPageFormClientId(Page);
        }

        private string GetControlUniqueId(string controlId)
        {
            Control control = ControlHelper.FindControlRecursively(Page, controlId);
            if(control != null)
            {
                return control.UniqueID;
            }

            return string.Empty;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Web.UI.WebControls;
using Subtext.Framework.Util;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Implements a search control that can be added to a skin.
    /// </summary>
    public class SubtextSearch : BaseControl
    {
        protected TextBox txtSearch;
        protected Button btnSearch;

        protected override void OnInit(EventArgs e)
        {
            if(btnSearch != null)
            {
                btnSearch.Click += OnSearchClick;
            }
            base.OnInit(e);
        }

        protected override void OnLoad(EventArgs e)
        {
            if(!IsPostBack)
            {
                string queryString = SubtextContext.RequestContext.GetQueryFromRequest();
                txtSearch.Text = queryString;
            }
        }

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(txtSearch.Text))
                Response.Redirect(Url.SearchPageUrl(txtSearch.Text), true);
        }

        protected void OnSearchClick(object sender, EventArgs e)
        {
            if(!String.IsNullOrEmpty(txtSearch.Text))
                Response.Redirect(Url.SearchPageUrl(txtSearch.Text), true);
        
        }

    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Web.Controls;

namespace Subtext.Web.UI.Controls
{
    [PartialCaching(120, null, null, "Blogger", true)]
    public class TagCloud : BaseControl
    {
        public IEnumerable<Tag> TagItems { get; set; }

        [DefaultValue(0)]
        public int ItemCount { get; set; }

        protected virtual void Tags_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var tag = (Tag)e.Item.DataItem;
                var tagLink = e.Item.FindControl("TagUrl") as HyperLink;
                if(tagLink != null)
                {
                    tagLink.NavigateUrl = Url.TagUrl(tag.TagName);
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            TagItems = Cacher.GetTopTags(ItemCount, SubtextContext);
            int tagCount = TagItems.Count();

            if(tagCount == 0)
            {
                Visible = false;
            }
            else
            {
                var tagRepeater = FindControl("Tags") as Repeater;
                if(tagRepeater != null)
                {
                    tagRepeater.DataSource = TagItems;
                    tagRepeater.DataBind();
                }

                var defaultTagLink = ControlHelper.FindControlRecursively(this, "DefaultTagLink") as HyperLink;
                if(defaultTagLink != null)
                {
                    defaultTagLink.NavigateUrl = Url.TagCloudUrl();
                }
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    public class TagEntryList : BaseControl
    {
        protected EntryList EntryStoryList;

        public bool DescriptionOnly
        {
            get { return EntryStoryList.DescriptionOnly; }
            set { EntryStoryList.DescriptionOnly = value; }
        }

        public int Count { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if(Context != null)
            {
                Uri url = HttpContext.Current.Request.Url;
                string tagName = HttpUtility.UrlDecode(url.Segments[url.Segments.Length - 2].Replace("/", ""));

                ICollection<Entry> et = Cacher.GetEntriesByTag(Count, tagName, SubtextContext);
                EntryStoryList.EntryListItems = et;
                EntryStoryList.EntryListTitle = tagName;
                EntryStoryList.EntryListDescription = string.Format(CultureInfo.InvariantCulture,
                                                                    Resources.TagEntryList_NoEntriesForTag, et.Count,
                                                                    tagName);

                Globals.SetTitle(string.Format(CultureInfo.InvariantCulture, "{0} - {1}", Blog.Title, tagName), Context);
            }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    /// Summary description for Top10Module.
    /// </summary>
    public class Top10Module : BaseControl
    {
        protected Repeater Top10Entries;

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            int blogId = Blog.Id >= 1 ? Blog.Id : 0;
            var myLastItems = new List<PositionTopItems>();

            ICollection<EntrySummary> entrySummaries = ObjectProvider.Instance().GetTopEntrySummaries(blogId, 10);

            foreach(EntrySummary entrySummary in entrySummaries)
            {
                string title = entrySummary.Title;
                string myUrl = Url.EntryUrl(entrySummary);

                myLastItems.Add(new PositionTopItems(title, myUrl));
            }

            Top10Entries.DataSource = myLastItems;
            Top10Entries.DataBind();
        }
    }

    public class PositionTopItems
    {
        public PositionTopItems(string title, string url)
        {
            Title = title;
            this.url = url;
        }

        public string Title { get; private set; }

        public string url { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Drawing;
using System.Web.UI.WebControls;
using Subtext.Framework.Util;
using Image=Subtext.Framework.Components.Image;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///		Summary description for GalleryThumbNailViewer.
    /// </summary>
    public partial class ViewPicture : BaseControl
    {
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            if(Context != null)
            {
                int? imageId = SubtextContext.RequestContext.GetIdFromRequest();
                Image image = Repository.GetImage(imageId.Value, true /* activeOnly */);
                image.Blog = Blog;

                Title.Text = image.Title;
                GalleryImage.ImageUrl = Url.GalleryImageUrl(image, image.ResizedFile);
                GalleryImage.Height = image.Height;
                GalleryImage.Width = image.Width;
                GalleryImage.AlternateText = image.Title;
                GalleryImage.BorderColor = Color.Black;
                GalleryImage.BorderWidth = 2;

                OriginalImage.NavigateUrl = Url.GalleryImageUrl(image, image.OriginalFile);
                ReturnUrl.NavigateUrl = Url.GalleryUrl(image.CategoryID);
            }
        }

        protected void ImageCreated(object sender, DataListItemEventArgs e)
        {
            if(e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var image = (Image)e.Item.DataItem;
                if(image != null)
                {
                    var thumbNailImage = (HyperLink)e.Item.FindControl("ThumbNailImage");
                    if(thumbNailImage != null)
                    {
                        thumbNailImage.ImageUrl = Url.GalleryImageUrl(image, image.ThumbNailFile);
                        thumbNailImage.NavigateUrl = Url.GalleryImagePageUrl(image);
                        thumbNailImage.ToolTip = image.Title;
                    }
                }
            }
        }
    }
}ï»¿#region Disclaimer/Info
///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

using System.Web.UI.WebControls;
namespace Subtext.Web.UI.Controls
{
    public partial class ViewPicture
    {
        protected Literal Title;
        protected Image GalleryImage;
        protected HyperLink ReturnUrl;
        protected HyperLink OriginalImage;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;
using Ninject;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Security;
using Subtext.Framework.Services;
using Subtext.Framework.Tracking;
using Subtext.Infrastructure;
using Subtext.Web.Controls;
using Subtext.Web.Properties;

namespace Subtext.Web.UI.Controls
{
    /// <summary>
    ///	Control used to view a single blog post.
    /// </summary>
    public partial class ViewPost : BaseControl
    {
        const string LinkToComments = "<a href=\"{0}#feedback\" title=\"View and Add Comments\">{1}{2}</a>";
        const string LinkToEnclosure = "<a href=\"{0}\" title = \"{1}\">{2}</a>{3}";

        /// <summary>
        /// Loads the entry specified by the URL.  If the user is an 
        /// admin and the skin supports it, will also display an edit 
        /// link that navigates to the admin section and allows the 
        /// admin to edit the post.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            //Get the entry
            Entry entry = Cacher.GetEntryFromRequest(true, SubtextContext);

            //if found
            if(entry != null)
            {
                BindCurrentEntryControls(entry, this);

                DisplayEditLink(entry);

                Bootstrapper.RequestContext = SubtextContext.RequestContext;
                var statistics = Bootstrapper.ServiceLocator.GetService<IStatisticsService>();
                statistics.RecordWebView(new EntryView {EntryId = entry.Id, BlogId = Blog.Id});

                //Set the page title
                Globals.SetTitle(entry.Title, Context);

                //Sent entry properties
                TitleUrl.Text = entry.Title;
                ControlHelper.SetTitleIfNone(TitleUrl, "Title of this entry.");
                TitleUrl.NavigateUrl = Url.EntryUrl(entry);
                Body.Text = entry.Body;
                if(PostDescription != null)
                {
                    PostDescription.Text = string.Format(CultureInfo.InvariantCulture, "{0} {1}",
                                                         entry.DateSyndicated.ToLongDateString(),
                                                         entry.DateSyndicated.ToShortTimeString());
                }
                Trace.Write("loading categories");
                if(Categories != null)
                {
                    Categories.LinkCategories = Links.GetLinkCategoriesByPostId(entry.Id);
                    Categories.DataBind();
                }

                if(date != null)
                {
                    string entryUrl = Url.EntryUrl(entry);
                    if(date.Attributes["Format"] != null)
                    {
                        date.Text = string.Format(CultureInfo.InvariantCulture, "<a href=\"{0}\" title=\"{2}\">{1}</a>",
                                                  entryUrl, entry.DateSyndicated.ToString(date.Attributes["Format"]),
                                                  Resources.EntryList_PermanentLink);
                        date.Attributes.Remove("Format");
                    }
                    else
                    {
                        date.Text = string.Format(CultureInfo.InvariantCulture, "<a href=\"{0}\" title=\"{2}\">{1}</a>",
                                                  entryUrl, entry.DateSyndicated.ToString("f"),
                                                  Resources.EntryList_PermanentLink);
                    }
                }

                if(commentCount != null)
                {
                    if(Blog.CommentsEnabled && entry.AllowComments)
                    {
                        string entryUrl = Url.EntryUrl(entry);
                        if(entry.FeedBackCount == 0)
                        {
                            commentCount.Text = string.Format(LinkToComments, entryUrl, Resources.EntryList_AddComment,
                                                              string.Empty);
                        }
                        else if(entry.FeedBackCount == 1)
                        {
                            commentCount.Text = string.Format(LinkToComments, entryUrl, Resources.EntryList_OneComment,
                                                              string.Empty);
                        }
                        else if(entry.FeedBackCount > 1)
                        {
                            commentCount.Text = string.Format(LinkToComments, entryUrl, entry.FeedBackCount,
                                                              Resources.EntryList_CommentsPlural);
                        }
                    }
                }

                BindEnclosure(entry);

                //Set Pingback/Trackback 
                if(PingBack == null)
                {
                    PingBack = Page.FindControl("pinbackLinkTag") as Literal;
                }

                if(PingBack != null)
                {
                    PingBack.Text = TrackHelpers.GetPingPackTag(Url);
                }

                if(TrackBack != null)
                {
                    TrackBack.Text = TrackHelpers.TrackBackTag(entry, Blog, Url);
                }
                DataBind();
            }
            else
            {
                //No post? Deleted? Help :)
                Controls.Clear();
                Controls.Add(new LiteralControl(Resources.ViewPost_EntryNotFound));
            }
        }

        private void BindEnclosure(Entry entry)
        {
            if(Enclosure != null)
            {
                if(entry.Enclosure != null && entry.Enclosure.ShowWithPost)
                {
                    bool displaySize;
                    Boolean.TryParse(Enclosure.Attributes["DisplaySize"], out displaySize);

                    string sizeStr = "";
                    if(displaySize)
                    {
                        sizeStr = string.Format(" ({0})", entry.Enclosure.FormattedSize);
                    }
                    Enclosure.Text = string.Format(LinkToEnclosure, entry.Enclosure.Url, entry.Enclosure.Title,
                                                   entry.Enclosure.Title, sizeStr);
                }
            }
        }

        // If the user is an admin AND the the skin 
        // contains an edit Hyperlink control, this 
        // will display the edit control.
        private void DisplayEditLink(IIdentifiable entry)
        {
            if(editLink != null)
            {
                if(SecurityHelper.IsAdmin)
                {
                    editLink.Visible = true;
                    editLink.NavigateUrl = AdminUrl.PostsEdit(entry.Id);
                    ControlHelper.SetTitleIfNone(editLink, Resources.ViewPost_EditThisEntry);

                    if(String.IsNullOrEmpty(editLink.Text) && String.IsNullOrEmpty(editLink.ImageUrl))
                    {
                        //We'll slap on our little pencil icon.
                        editLink.ImageUrl = Url.EditIconUrl();
                    }
                }
                else
                {
                    editLink.Visible = false;
                }
            }
        }
    }
}ï»¿using System.Web.UI.WebControls;

namespace Subtext.Web.UI.Controls
{
    public partial class ViewPost
    {
        protected HyperLink editLink;
        protected HyperLink TitleUrl;
        protected Label date;
        protected Label commentCount;
        protected Literal Body;
        protected Literal PostDescription;
        protected PostCategoryList Categories;
        protected Literal PingBack;
        protected Literal TrackBack;
        protected Label Enclosure;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services;

namespace Subtext.Web.UI
{
    /// <summary>
    /// Summary description for Globals.
    /// </summary>
    public static class Globals
    {
        private const string BlogPageTitle = "BlogPageTitle";

        /// <summary>
        /// This method will be called during PreRender. If no title was set via
        /// SetTitle(title, context), then we will default to the blog title
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        public static string CurrentTitle(HttpContext context)
        {
            var title = (string)context.Items[BlogPageTitle] ?? Config.CurrentBlog.Title;
            return title;
        }


        /// <summary>
        /// Allows the page title to be set anywhere within the request.
        /// </summary>
        /// <param name="title">Title.</param>
        /// <param name="context">Context.</param>
        public static void SetTitle(string title, HttpContext context)
        {
            context.Items[BlogPageTitle] = title;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Text;
using System.Web;
using Subtext.Framework.Configuration;

//todo: make this a controller with unit tests.
namespace Subtext.Web.UI.Handlers
{
    /// <summary>
    /// HTTP Handler for rendering a CSS stylesheet.  
    /// This renders the CSS markup stored in the Secondary CSS field within 
    /// the admin options for a blog configuration.
    /// </summary>
    public class BlogSecondaryCssHandler : IHttpHandler
    {
        /// <summary>
        /// Processes the request.
        /// </summary>
        /// <param name="context">Context.</param>
        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentEncoding = Encoding.UTF8;
            context.Response.ContentType = "text/css";

            var httpContext = new HttpContextWrapper(context);
            var skin = SkinConfig.GetCurrentSkin(Config.CurrentBlog, httpContext);
            if(skin != null)
            {
                context.Response.Write(skin.CustomCssText);
            }
        }

        /// <summary>
        /// Gets a value indicating whether this handler is reusable.
        /// </summary>
        /// <remarks>
        /// This handler is not reusable.
        /// </remarks>
        /// <value>
        /// 	<c>true</c> if is reusable; otherwise, <c>false</c>.
        /// </value>
        public bool IsReusable
        {
            get { return false; }
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Web.UI;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Text;
using Subtext.Framework.UI.Skinning;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.UI.Controls;

namespace Subtext.Web.UI.Pages
{
    /// <summary>
    /// This serves as the master page for every page within the 
    /// site (except for the admin section.  This page contains 
    /// a PlaceHolder in which the PageTemplate.ascx control within 
    /// each skin is loaded.
    /// </summary>
    public partial class SubtextMasterPage : SubtextPage, IPageWithControls, IContainerControl
    {
        protected const string ControlLocation = "~/Skins/{0}/Controls/{1}";
        protected const string OpenIdDelegateLocation = "<link rel=\"openid.delegate\" href=\"{0}\" />";
        protected const string OpenIdServerLocation = "<link rel=\"openid.server\" href=\"{0}\" />";
        protected const string TemplateLocation = "~/Skins/{0}/{1}";

        public static readonly string CommentsPanelId = "commentsUpdatePanelWrapper";

        private static readonly ScriptElementCollectionRenderer ScriptRenderer = new ScriptElementCollectionRenderer(new SkinEngine());

        private static readonly StyleSheetElementCollectionRenderer StyleRenderer =
            new StyleSheetElementCollectionRenderer(new SkinEngine());

        IEnumerable<string> _controls;

        /// <summary>
        /// Returns the text for a javascript array of allowed elements. 
        /// This will be used by other scripts.
        /// </summary>
        /// <value>The allowed HTML javascript declaration.</value>
        protected static string AllowedHtmlJavascriptDeclaration
        {
            get
            {
                string declaration = "var subtextAllowedHtmlTags = [";
                for(int i = 0; i < Config.Settings.AllowedHtmlTags.Count; i++)
                {
                    string tagname = Config.Settings.AllowedHtmlTags.Keys[i];
                    declaration += string.Format(CultureInfo.InvariantCulture, "'{0}', ", tagname);
                }
                if(Config.Settings.AllowedHtmlTags.Count > 0)
                {
                    declaration = declaration.Left(declaration.Length - 2);
                }

                return declaration + "];";
            }
        }

        public void SetControls(IEnumerable<string> controls)
        {
            _controls = controls;
        }
            
        public void InitializeControls(ISkinControlLoader controlLoader)
        {
            IEnumerable<string> controlNames = _controls;
            if(controlNames != null)
            {
                var apnlCommentsWrapper = new UpdatePanel { Visible = true, ID = CommentsPanelId };
                if(!controlNames.Contains("HomePage", StringComparer.OrdinalIgnoreCase) && !String.IsNullOrEmpty(Query))
                {
                    int entryId = -1;
                    Entry entry = Cacher.GetEntryFromRequest(true, SubtextContext);
                    if (entry != null)
                    {
                        entryId = entry.Id;
                    }
                    var query = Query;
                    if(!String.IsNullOrEmpty(query))
                    {
                        var searchResults = SearchEngineService.Search(query, 5, Blog.Id, entryId);
                        if(searchResults.Any())
                        {
                            AddMoreResultsControl(searchResults, controlLoader, apnlCommentsWrapper);
                        }
                    }
                }

                foreach(string controlName in controlNames)
                {
                    Control control = controlLoader.LoadControl(controlName);
                    AddControlToBody(controlName, control, apnlCommentsWrapper, CenterBodyControl);
                }
            }
        }

        private void AddMoreResultsControl(IEnumerable<SearchEngineResult> searchResults, ISkinControlLoader controlLoader, UpdatePanel apnlCommentsWrapper)
        {
            var moreResults = controlLoader.LoadControl("MoreResults");
            if(moreResults != null)
            {
                var moreSearchResults = moreResults as MoreResultsLikeThis;
                if(moreSearchResults != null)
                {
                    moreSearchResults.SearchResults = searchResults;
                }
                AddControlToBody("MoreResults", moreResults, apnlCommentsWrapper, CenterBodyControl);
            }
        }

        public void AddControlToBody(string controlName, Control control, UpdatePanel apnlCommentsWrapper, Control centerBodyControl)
        {
            if(controlName.Equals("Comments", StringComparison.OrdinalIgnoreCase))
            {
                control.Visible = true;
                commentsControl = control as Comments;
                apnlCommentsWrapper.ContentTemplateContainer.Controls.Add(control);
            }
            else if(controlName.Equals("PostComment", StringComparison.OrdinalIgnoreCase))
            {
                postCommentControl = control as PostComment;
                if(postCommentControl != null)
                {
                    postCommentControl.CommentApproved += OnCommentPosted;
                }
                apnlCommentsWrapper.ContentTemplateContainer.Controls.Add(control);
                centerBodyControl.Controls.Add(apnlCommentsWrapper);
            }
            else
            {
                if(centerBodyControl != null)
                {
                    centerBodyControl.Controls.Add(control);
                }
            }
        }

        public string Query
        {
            get
            {
                if(_query == null)
                {
                    var request = SubtextContext.HttpContext.Request;
                    var referrer = request.UrlReferrer;
                    if(referrer == null)
                    {
                        if(request.IsLocal)
                        {
                            string referrerInQuery = request.QueryString["referrer"];
                            if(!String.IsNullOrEmpty(referrerInQuery))
                            {
                                Uri.TryCreate(referrerInQuery, UriKind.Absolute, out referrer);
                            }
                        }
                    }
                    if(referrer == null)
                    {
                        return null;
                    }
                    _query = UrlHelper.ExtractKeywordsFromReferrer(referrer, request.Url);
                }
                return _query;
            }
        }
        private string _query;


        public void InitializeBlogPage()
        {
            var skin = SkinConfig.GetCurrentSkin(Blog, SubtextContext.HttpContext);
            var skinControlLoader = new SkinControlLoader(this, skin);
            
            InitializeControls(skinControlLoader);

            if(skin.HasCustomCssText)
            {
                CustomCss.Attributes.Add("href", Url.CustomCssUrl());
            }
            else
            {
                //MAC IE does not like the empy CSS file, plus its a waste :)
                CustomCss.Visible = false;
            }

            if(Rsd != null)
            {
                Rsd.Attributes.Add("href", Url.RsdUrl(Blog).ToString());
            }

            if(wlwmanifest != null)
            {
                wlwmanifest.Attributes.Add("href", Url.WlwManifestUrl());
            }

            if (opensearch != null)
            {
                opensearch.Attributes.Add("href", Url.OpenSearchDescriptorUrl());
                opensearch.Attributes.Add("Title", Blog.Title);
            }

            if(RSSLink != null)
            {
                RSSLink.Attributes.Add("href", Url.RssUrl(Blog).ToString());
            }

            // if specified, add script elements
            if(scripts != null)
            {
                scripts.Text = ScriptRenderer.RenderScriptElementCollection(skin.SkinKey);
            }

            if(styles != null)
            {
                styles.Text = StyleRenderer.RenderStyleElementCollection(skin.SkinKey);
            }

            if(openIDServer != null && !string.IsNullOrEmpty(Blog.OpenIdServer))
            {
                openIDServer.Text = string.Format(OpenIdServerLocation, Blog.OpenIdServer);
            }

            if(openIDDelegate != null && !string.IsNullOrEmpty(Blog.OpenIdDelegate))
            {
                openIDDelegate.Text = string.Format(OpenIdDelegateLocation, Blog.OpenIdDelegate);
            }

            if(metaTags != null)
            {
                metaTags.Blog = Blog;
            }
        }

        void OnCommentPosted(object sender, EventArgs e)
        {
            if(commentsControl != null)
            {
                commentsControl.InvalidateFeedbackCache();
                commentsControl.BindFeedback(true); //don't get it from cache.
            }
        }

        /// <summary>
        /// Before rendering, turns off ViewState again (why? not sure),  
        /// applies skins and stylesheet references, and sets the page title.
        /// </summary>
        /// <param name="e">E.</param>
        protected override void OnPreRender(EventArgs e)
        {
            Response.ContentEncoding = Encoding.UTF8; //TODO: allow for per/blog config.
            Response.ContentType = "text/html"; //TODO: allow for per/blog config.

            //Is this for extra security?
            EnableViewState = false;
            pageTitle.Text = Globals.CurrentTitle(Context);
            if(!String.IsNullOrEmpty(Blog.Author))
            {
                authorMetaTag.Text = String.Format(Environment.NewLine + "<meta name=\"author\" content=\"{0}\" />",
                                                   Blog.Author);
            }
            versionMetaTag.Text =
                String.Format("{0}<meta name=\"Generator\" content=\"{1}\" />{0}", Environment.NewLine, VersionInfo.VersionDisplayText);

            if(!String.IsNullOrEmpty(Blog.TrackingCode))
            {
                customTrackingCode.Text = Blog.TrackingCode;
            }

            base.OnPreRender(e);
        }

        /// <summary>
        /// Initializes this blog page, applying skins and whatnot.
        /// </summary>
        /// <param name="e">E.</param>
        override protected void OnInit(EventArgs e)
        {
            MaintainScrollPositionOnPostBack = true;
            InitializeBlogPage();
            base.OnInit(e);
        }

        /// <summary>
        /// Loads the page state from persistence medium.  In this case 
        /// this returns null as we are not using ViewState.
        /// </summary>
        /// <returns></returns>
        protected override object LoadPageStateFromPersistenceMedium()
        {
            return null;
        }

        /// <summary>
        /// Saves the page state to persistence medium.  In this case 
        /// this does nothing as we are not using ViewState.
        /// </summary>
        /// <param name="viewState">State of the view.</param>
        protected override void SavePageStateToPersistenceMedium(object viewState)
        {
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Subtext.Web.UI.Controls;
using Subtext.Web.UI.WebControls;

namespace Subtext.Web.UI.Pages
{
    public partial class SubtextMasterPage
    {
        protected Literal pageTitle;
        protected Literal docTypeDeclaration;
        protected HtmlLink CustomCss;
        protected HtmlLink RSSLink;
        protected HtmlLink Rsd;
        protected HtmlLink wlwmanifest;
        protected HtmlLink opensearch;
        protected HtmlLink AtomLink;
        protected PlaceHolder CenterBodyControl;
        protected Literal versionMetaTag;
        protected Literal authorMetaTag;
        protected Literal scripts;
        protected Literal styles;
        protected Literal virtualRoot;
        protected Literal virtualBlogRoot;
        protected Literal customTrackingCode;
        protected Literal openIDServer;
        protected Literal openIDDelegate;
        protected PlaceHolder metaTagsPlaceHolder;
        protected Comments commentsControl;
        protected PostComment postCommentControl;
        protected MetaTagsControl metaTags;
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Diagnostics;
using System.Globalization;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;

namespace Subtext.Web.UI
{
    /// <summary>
    /// Summary description for UIData.
    /// </summary>
    public static class UIData
    {
        public static LinkCategory Links(CategoryType catType, Blog blog, UrlHelper urlHelper)
        {
            switch(catType)
            {
                case CategoryType.PostCollection:
                    return Transformer.BuildLinks(UIText.PostCollection, CategoryType.PostCollection, blog, urlHelper);

                case CategoryType.ImageCollection:
                    return Transformer.BuildLinks(UIText.ImageCollection, CategoryType.ImageCollection, blog, urlHelper);

                case CategoryType.StoryCollection:
                    return Transformer.BuildLinks(UIText.ArticleCollection, CategoryType.StoryCollection, blog, urlHelper);

                default:
                    Debug.Fail(String.Format(CultureInfo.InvariantCulture,
                                             "Invalid CategoryType: {0} via Subtext.Web.UI.UIData.Links", catType));
                    return null;
            }
        }

        /// <summary>
        /// Builds a <see cref="LinkCategory"/> using the specified url formats. 
        /// A LinkCategory is a common item to databind to a web control.
        /// </summary>
        /// <returns></returns>
        public static LinkCategory ArchiveMonth(UrlHelper urlHelper, Blog blog)
        {
            return Transformer.BuildMonthLinks(UIText.Archives, urlHelper, blog);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Configuration;

namespace Subtext.Web.UI
{
    /// <summary>
    /// Used to obtain configurable text displayed on the UI.  
    /// Uses application settings (bleh!).
    /// </summary>
    /// <remarks>
    /// This text ought to be configurable per-blog.
    /// </remarks>
    public static class UIText
    {
        //TODO: Refactor this to use blog settings, not app settings.
        /// <summary>
        /// Gets the titel for the post categories.
        /// </summary>
        /// <value>The post collection.</value>
        public static string PostCollection
        {
            get { return GetSafeConfig("PostCollection", "Post Categories"); }
        }

        /// <summary>
        /// Gets the title for the article categories.
        /// </summary>
        /// <value>The article collection.</value>
        public static string ArticleCollection
        {
            get { return GetSafeConfig("ArticleCollection", "Article Categories"); }
        }

        /// <summary>
        /// Gets the title for the image galleries.
        /// </summary>
        /// <value>The image collection.</value>
        public static string ImageCollection
        {
            get { return GetSafeConfig("ImageCollection", "Image Galleries"); }
        }

        /// <summary>
        /// Gets the title for the Archives links.
        /// </summary>
        /// <value>The archives.</value>
        public static string Archives
        {
            get { return GetSafeConfig("Archives", "Archives"); }
        }

        private static string GetSafeConfig(string name, string defaultValue)
        {
            string text = ConfigurationManager.AppSettings[name];
            if(text == null)
            {
                return defaultValue;
            }
            return text;
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace Subtext.Web.UI.ViewModels
{
    public class CommentViewModel : IIdentifiable
    {
        public CommentViewModel(FeedbackItem feedbackItem, ISubtextContext context)
        {
            Feedback = feedbackItem;
            SubtextContext = context;
        }

        protected FeedbackItem Feedback { get; private set; }

        protected UrlHelper UrlHelper
        {
            get { return SubtextContext.UrlHelper; }
        }

        protected ISubtextContext SubtextContext { get; private set; }

        public int Id
        {
            get 
            { 
                return Feedback.Id;
            }
        }

        public string Title
        {
            get
            {
                return Feedback.Title;
            }
        }

        public string Author
        {
            get { return Feedback.Author; }
        }

        public string Body
        {
            get { return Feedback.Body; }
        }

        public string Email
        {
            get { return Feedback.Email; }
        }

        public bool IsBlogAuthor 
        { 
            get
            {
                return Feedback.IsBlogAuthor;
            }
        }

        public string DisplayUrl
        { 
            get
            {
                return UrlHelper.FeedbackUrl(Feedback);
            }
        }

        public DateTime DateCreated
        {
            get 
            { 
                return Feedback.DateCreated;
            }

        }

        public DateTime DateModified
        {
            get
            {
                return Feedback.DateModified;
            }

        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace Subtext.Web.UI.ViewModels
{
    public class EntryViewModel : IEntryIdentity
    {
        string _fullyQualifiedUrl;
        VirtualPath _url;

        public EntryViewModel(Entry entry, ISubtextContext context)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }
            Entry = entry;
            SubtextContext = context;
        }

        protected Entry Entry { get; private set; }

        protected UrlHelper UrlHelper
        {
            get { return SubtextContext.UrlHelper; }
        }

        protected ISubtextContext SubtextContext { get; private set; }

        public VirtualPath Url
        {
            get
            {
                if(_url == null)
                {
                    _url = UrlHelper.EntryUrl(Entry);
                }
                return _url;
            }
        }

        public string FullyQualifiedUrl
        {
            get
            {
                if(_fullyQualifiedUrl == null)
                {
                    _fullyQualifiedUrl = Url.ToFullyQualifiedUrl(SubtextContext.Blog).ToString();
                }
                return _fullyQualifiedUrl;
            }
        }

        public string Title
        {
            get { return Entry.Title; }
        }

        public bool AllowComments
        {
            get { return Entry.AllowComments; }
        }

        public bool CommentingClosed
        {
            get { return Entry.CommentingClosed; }
        }

        public int FeedBackCount
        {
            get { return Entry.FeedBackCount; }
        }

        #region IEntryIdentity Members

        public string EntryName
        {
            get { return Entry.EntryName; }
        }

        public DateTime DateSyndicated
        {
            get { return Entry.DateSyndicated; }
        }

        public PostType PostType
        {
            get { return Entry.PostType; }
        }

        public int Id
        {
            get { return Entry.Id; }
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace Subtext.Web.UI.ViewModels
{
    public class LinkCategoryLink
    {
        public LinkCategoryLink(string title, string url)
        {
            Title = title;
            Url = url;
        }

        public string Url { get; private set; }

        public string Title { get; private set; }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Drawing;
using System.Globalization;
using System.Web.UI;
using System.Web.UI.WebControls;

#region Code Notes

/*
	The MasterPage controls (MasterPage and ContentRegion) are almost entirely based off of Paul Wilson's excellect demo found
	here: http://authors.aspalliance.com/paulwilson/Articles/?id=14
	
	Very MINOR changes were made here. Thanks Paul.
*/

#endregion

namespace Subtext.Web.UI.WebControls
{
    [ToolboxData("<{0}:ContentRegion runat=server></{0}:ContentRegion>")]
    public class ContentRegion : Panel
    {
        public ContentRegion()
        {
            base.BackColor = Color.WhiteSmoke;
            base.Width = new Unit("100%", CultureInfo.InvariantCulture);
        }

        public override void RenderBeginTag(HtmlTextWriter writer)
        {
        }

        public override void RenderEndTag(HtmlTextWriter writer)
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Web;
using System.Web.UI;
using System.Web.UI.Design;
using System.Web.UI.HtmlControls;
using Subtext.Framework.Configuration;
using Subtext.Framework.Properties;

namespace Subtext.Web.UI.WebControls
{
    //TODO: Get rid of this
    /// <summary>
    /// <p>Serves as the master template for the Subtext site.</p>
    /// <p>
    /// The MasterPage controls (MasterPage and ContentRegion) are almost entirely based off 
    /// of Paul Wilson's excellent demo found
    /// here: http://authors.aspalliance.com/paulwilson/Articles/?id=14
    /// Very MINOR changes were made here. Thanks Paul.
    /// </p>
    /// </summary>
    [ToolboxData("<{0}:MasterPage runat=server></{0}:MasterPage>")]
    [ToolboxItem(typeof(WebControlToolboxItem))]
    [Designer(typeof(ContainerControlDesigner))]
    public class MasterPage : HtmlContainerControl
    {
        private const string SkinPath = "~/Skins/{0}/PageTemplate.ascx";
        private readonly List<ContentRegion> _contents = new List<ContentRegion>();
        private Control _template;
        private string _templateFile;

        /// <summary>
        /// Gets or sets the template file from the Skins directory.
        /// </summary>
        /// <value></value>
        [Category("MasterPage")]
        [Description("Path of Template User Control")]
        public string TemplateFile
        {
            get
            {
                if(_templateFile == null)
                {
                    var skin = SkinConfig.GetCurrentSkin(Config.CurrentBlog, new HttpContextWrapper(HttpContext.Current));
                    _templateFile = string.Format(SkinPath, skin.TemplateFolder);
                }
                return _templateFile;
            }
            set { _templateFile = value; }
        }

        protected override void AddParsedSubObject(object obj)
        {
            var contentRegion = obj as ContentRegion;
            if(contentRegion != null)
            {
                _contents.Add(contentRegion);
            }
        }

        protected override void OnInit(EventArgs e)
        {
            BuildMasterPage();
            BuildContents();
            base.OnInit(e);
        }

        private void BuildMasterPage()
        {
            if(String.IsNullOrEmpty(TemplateFile))
            {
                throw new InvalidOperationException(Resources.InvalidOperation_TemplateFileIsNull);
            }
            _template = Page.LoadControl(TemplateFile);
            _template.ID = ID + "_Template";

            int count = _template.Controls.Count;
            for(int index = 0; index < count; index++)
            {
                Control control = _template.Controls[0];
                _template.Controls.Remove(control);
                if(control.Visible)
                {
                    Controls.Add(control);
                }
            }
            Controls.AddAt(0, _template);
        }

        private void BuildContents()
        {
            foreach(ContentRegion content in _contents)
            {
                Control region = FindControl(content.ID);
                if(region == null)
                {
                    throw new InvalidOperationException(String.Format(Resources.InvalidOperation_ContentRegionNotFound,
                                                                      content.ID));
                }
                region.Controls.Clear();

                int count = content.Controls.Count;
                for(int index = 0; index < count; index++)
                {
                    Control control = content.Controls[0];
                    content.Controls.Remove(control);
                    region.Controls.Add(control);
                }
            }
        }

        //removes this controls ability to render its own start tag
        protected override void RenderBeginTag(HtmlTextWriter writer)
        {
        }

        //removes this controls ability to render its own end tag
        protected override void RenderEndTag(HtmlTextWriter writer)
        {
        }
    }
}ï»¿using System;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace Subtext.Web.UI.WebControls
{
    [PartialCaching(600, null, null, "Blogger", true)]
    public class MetaTagsControl : Control
    {
        public Blog Blog
        {
            get; 
            set;
        }

        protected override void Render(HtmlTextWriter writer)
        {
            IPagedCollection<MetaTag> blogMetaTags = MetaTags.GetMetaTagsForBlog(Blog, 0, int.MaxValue);
            foreach(MetaTag tag in blogMetaTags)
            {
                var htmlMetaTag = new HtmlMeta { Content = tag.Content };

                if(!string.IsNullOrEmpty(tag.Name))
                {
                    htmlMetaTag.Name = tag.Name;
                }
                else
                {
                    htmlMetaTag.HttpEquiv = tag.HttpEquiv;
                }

                var newLineLiteral = new Literal { Text = Environment.NewLine };
                newLineLiteral.RenderControl(writer);
                htmlMetaTag.RenderControl(writer);
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;

namespace SubtextUpgrader
{
    public class FileDeployer
    {
        public FileDeployer(IDirectory sourceWebroot, IDirectory destination)
        {
            WebRoot = sourceWebroot;
            Destination = destination;
        }

        public IDirectory WebRoot
        {
            get; 
            private set;
        }

        public IDirectory Destination
        {
            get;
            private set;
        }

        public void Deploy()
        {
            WebRoot.CopyTo(Destination, f => !f.Name.Equals("favicon.ico", StringComparison.OrdinalIgnoreCase));
            RemoveOldDirectories();
            RemoveOldFiles();
        }

        public void RemoveOldDirectories()
        {
            var folderNames = new[] { "Admin", "HostAdmin", "Install", "SystemMessages", "Providers", "Sitemap" };
            foreach(var folderName in folderNames)
            {
                Destination.Combine(folderName).Delete(true /*recursive*/);
            }
        }

        public void RemoveOldFiles()
        {
            var fileNames = new[] { "AggDefault.aspx", "DTP.aspx",
                                    "ForgotPassword.aspx", "login.aspx", "logout.aspx", 
                                    "MainFeed.aspx", @"Admin\Skins.config", 
                                    @"Admin\Skins.user.config", @"bin\Subtext.BlogML.dll",
                                    @"bin\Subtext.Installation.dll", @"bin\Subtext.Scripting", 
                                    @"bin\Identicon.dll", @"bin\Subtext.Akismet.dll",
                                    @"bin\Subtext.Web.Controls.dll", @"bin\DotNetOpenId.dll",
                                    @"bin\WebControlCaptcha.dll", @"bin\PostBackRitalin.dll"};
            
            foreach(var fileName in fileNames)
            {
                Destination.CombineFile(fileName).Delete();
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml;
using System.IO;

namespace SubtextUpgrader
{
    public static class FileUtils
    {
        public static IFile CreateXmlFile(this IDirectory directory, string filename, XmlDocument xml)
        {
            IFile file = directory.CombineFile(filename);
            using(var stream = file.OpenWrite())
            {
                xml.Save(stream);
            }
            return file;
        }

        public static string ToStringContents(this MemoryStream stream)
        {
            stream.Position = 0;
            using(var reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;

namespace SubtextUpgrader
{
    public interface IDirectory
    {
        bool Exists { get; }
        string Name { get; }
        string Path { get; }
        IDirectory Parent { get; }
        IDirectory Combine(string path);
        IFile CombineFile(string fileName);
        string CombinePath(string path);
        IDirectory Create();
        IEnumerable<IFile> GetFiles();
        IEnumerable<IDirectory> GetDirectories();
        void Delete(bool recursive);
        IDirectory CopyTo(IDirectory directory);
        IDirectory CopyTo(IDirectory directory, Predicate<IFile> overwiteExistingFile);
        IDirectory Ensure();
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.IO;

namespace SubtextUpgrader
{
    public interface IFile
    {
        string Contents { get; }
        Stream OpenWrite();
        bool Exists { get; }
        string CombinePath(string path);
        IDirectory Directory { get;  }
        IFile CopyTo(string path);
        IFile CopyTo(IDirectory directory);
        IFile Overwrite(IFile file);
        string Name { get; }
        string Path { get; }
        IFile Backup(string fileName);
        void Delete();
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Xml;

namespace SubtextUpgrader
{
    /// <summary>
    /// Represents the central Skins.config file where we used to store all skin
    /// configurations.
    /// </summary>
    public class LegacySkinsConfig
    {
        public LegacySkinsConfig(IFile file)
        {
            SkinsConfigFile = file;
        }

        protected IFile SkinsConfigFile
        {
            get; 
            private set;
        }

        public XmlDocument Xml 
        { 
            get
            {
                if(_xml == null)
                {
                    _xml = SkinsConfigFile.ToXml();
                }
                return _xml;
            }
        }

        XmlDocument _xml;

        /// <summary>
        /// Extracts the new skin config files from the old one.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<SkinConfig> GetNewSkinConfigs()
        {
            var skinConfigTemplate = "<SkinTemplates />".ToXml();
            var xmlDocs = Xml.ExtractDocuments("/SkinTemplates/Skins/SkinTemplate", skinConfigTemplate);
            foreach(XmlDocument configXml in xmlDocs)
            {
                var templateNode = configXml.SelectSingleNode("/SkinTemplates/SkinTemplate");
                XmlAttribute templateFolderAttribute = templateNode.Attributes["TemplateFolder"];
                string templateFolder = templateFolderAttribute.Value;
                templateNode.Attributes.Remove(templateFolderAttribute);
                yield return new SkinConfig(configXml, templateFolder);
            }
        }

        public void UpgradeSkins(IDirectory newSkinsDirectory)
        {
            var oldSkinsDirectory = SkinsConfigFile.Directory.Parent.Combine("Skins");

            foreach(var skin in GetNewSkinConfigs())
            {
                IDirectory skinDirectory = newSkinsDirectory.Combine(skin.TemplateFolder).Ensure();
                oldSkinsDirectory.Combine(skin.TemplateFolder).CopyTo(skinDirectory);
                skinDirectory.CreateXmlFile("skin.config", skin.Xml);
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Windows.Forms;

namespace SubtextUpgrader {
	/// <summary>
	/// This tool is used to help upgrade existing installations of 
	/// Subtext to the latest version.
	/// </summary>
	public class Program {
		[STAThread]
		static void Main(string[] args) {
			if (args.Length == 0) {
				Application.EnableVisualStyles();
				Application.SetCompatibleTextRenderingDefault(false);
				Application.Run(new UpgradeForm());
				return;
			}
		}
	}
}
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SubtextUpgrader")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("SubtextUpgrader")]
[assembly: AssemblyCopyright("Copyright Â© Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("c77e0224-a7d0-4a9b-b3ed-8e6ff69027f5")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

namespace SubtextUpgrader
{
    public class Settings
    {
		public Settings() { }

		public Settings(string sourceDirectory, string upgradeTargetDirectory, bool quietMode, string backupDirectory, bool verbose) : this() {
			SourceDirectory = sourceDirectory;
			UpgradeTargetDirectory = upgradeTargetDirectory;
			QuietMode = quietMode;
			BackupDirectory = backupDirectory;
			Verbose = verbose;
		}

        public string SourceDirectory { get; private set; }

        public string UpgradeTargetDirectory { get; private set; }

        public bool QuietMode { get; private set; }

        public string BackupDirectory { get; private set; }

        public bool Verbose { get; private set; }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml;

namespace SubtextUpgrader
{
    public class SkinConfig
    {
        public SkinConfig(XmlDocument configXml, string templateFolder)
        {
            Xml = configXml;
            TemplateFolder = templateFolder;
        }

        public XmlDocument Xml { get; private set; }
        public string TemplateFolder { get; private set; }
    }
}
ï»¿using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace SubtextUpgrader
{
    /// <summary>
    /// Subtext 2.1 skins rely on controls defined in the assembly
    /// Subtext.Web.Controls. In Sbtext 2.5, those controls were moved to
    /// the assembly Subtext.Web. This class runs through all aspx and 
    /// ascx files in the "Skins" directory and updates any references
    /// to Subtext.Web.Controls assembly to point to Subtext.Web.
    /// </summary>
    public class SkinUpgrader
    {
        private readonly IDirectory _skinsDirectory;

        public SkinUpgrader(IDirectory skinsDirectory)
        {
            _skinsDirectory = skinsDirectory;
        }

        public void Run()
        {
            Run(_skinsDirectory);
        }

        private static void Run(IDirectory directory)
        {
            foreach (var file in directory.GetFiles())
            {
                if (file.Name.EndsWith(".aspx", StringComparison.CurrentCultureIgnoreCase)
                    || file.Name.EndsWith(".ascx", StringComparison.CurrentCultureIgnoreCase))
                {
                    ReplaceLegacyControlTags(file);
                }
            }
            foreach (var dir in directory.GetDirectories())
            {
                Run(dir);
            }
        }

        private static void ReplaceLegacyControlTags(IFile file)
        {
            var contents = file.Contents;

            var regex = new Regex
                (@"(<%@\s*?Register\s+?TagPrefix="")(.+?)(""\s+?Namespace="".+?""\s+?Assembly="")(Subtext.Web.Controls)(""\s*?%>)"
                , RegexOptions.IgnoreCase | RegexOptions.Multiline
                );

            var newContent = regex.Replace(contents, delegate(Match m)
            {
                if (m.Groups[2].Value.Equals("st", StringComparison.CurrentCultureIgnoreCase))
                {
                    return string.Empty;
                }
                var sb = new StringBuilder();

                sb.Append(m.Groups[1].Value);
                sb.Append(m.Groups[2].Value);
                sb.Append(m.Groups[3].Value);
                sb.Append("Subtext.Web");
                sb.Append(m.Groups[5].Value);

                return sb.ToString();
            });

            if (contents != newContent)
            {
                var stream = new StreamWriter(file.OpenWrite());
                stream.Write(newContent);
                stream.Close();
            }
        }
    }
}ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.IO;

namespace SubtextUpgrader
{
    public class SubtextDirectory : IDirectory
    {
        public SubtextDirectory(string path) : this(new DirectoryInfo(path))
        {
        }

        public SubtextDirectory(DirectoryInfo directory)
        {
            PhysicalDirectory = directory;
        }

        protected DirectoryInfo PhysicalDirectory
        {
            get; 
            private set;
        }

        public bool Exists
        {
            get
            {
                return PhysicalDirectory.Exists;
            }
        }

        public string Path
        {
            get 
            {
                return PhysicalDirectory.FullName;
            }
        }

        public string Name
        {
            get
            {
                return PhysicalDirectory.Name;
            }
        }

        public IDirectory Parent
        {
            get
            {
                if(_parent == null)
                {
                    _parent = new SubtextDirectory(PhysicalDirectory.Parent);
                }
                return _parent;
            }
        }

        IDirectory _parent;

        public IDirectory Combine(string path)
        {
            return new SubtextDirectory(new DirectoryInfo(CombinePath(path)));
        }

        public IDirectory Create()
        {
            PhysicalDirectory.Create();
            return this;
        }

        public string CombinePath(string path)
        {
            return System.IO.Path.Combine(Path, path);
        }

        public IFile CombineFile(string path)
        {
            return new SubtextFile(new FileInfo(CombinePath(path)));
        }

        public virtual IEnumerable<IFile> GetFiles()
        {
            foreach(var file in PhysicalDirectory.GetFiles())
            {
                yield return new SubtextFile(file);
            }
        }

        public virtual IEnumerable<IDirectory> GetDirectories()
        {
            foreach(var directory in PhysicalDirectory.GetDirectories())
            {
                yield return new SubtextDirectory(directory);
            }
        }

        public void Delete(bool recursive)
        {
            if(PhysicalDirectory.Exists)
            {
                PhysicalDirectory.Delete(recursive);
            }
        }

        public IDirectory CopyTo(IDirectory destination)
        {
            //Console.WriteLine("Copying Directory '{0}' to '{1}", Path, destination.Path);

            return CopyTo(destination, f => true);
        }

        public IDirectory CopyTo(IDirectory destination, Predicate<IFile> shouldOverwriteExistingFile)
        {
            foreach (var file in GetFiles())
            {
                var destinationFile = destination.CombineFile(file.Name);
                
                if (!destinationFile.Exists || shouldOverwriteExistingFile(file))
                    file.CopyTo(destination);

            }

            foreach (var subdir in GetDirectories())
            {
                var directoryName = subdir.Name;
                var destinationSubDir = destination.Combine(directoryName);
                destinationSubDir.Ensure();
                subdir.CopyTo(destinationSubDir);
            }

            return destination;
        }

        public IDirectory Ensure()
        {
            if(!Exists)
            {
                Create();
            }
            return this;
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.IO;

namespace SubtextUpgrader
{
    public class SubtextFile : IFile
    {
        public SubtextFile(FileInfo file)
        {
            File = file;
            Path = file.FullName;
            Name = file.Name;
        }

        protected FileInfo File
        {
            get; 
            private set;
        }

        public string Path
        {
            get; 
            private set;
        }

        public string Name
        {
            get;
            private set;
        }

        public string Contents
        {
            get
            {
               if(_contents == null)
               {
                   using(var stream = File.OpenRead())
                   using(var reader = new StreamReader(stream))
                   {
                       _contents = reader.ReadToEnd();
                   }
               }
               return _contents;
            }
        }

        string _contents;

        public Stream OpenWrite()
        {
            File.Delete();
            return File.Create();
        }

        public bool Exists
        {
            get
            {
                return File.Exists;
            }
        }

        public IDirectory Directory
        {
            get
            {
                if(_directory == null)
                {
                    _directory = new SubtextDirectory(File.Directory);
                }
                return _directory;
            }
        }

        IDirectory _directory;

        public string CombinePath(string fileName)
        {
            return Directory.CombinePath(fileName);
        }

        public IFile CopyTo(string path)
        {
            return new SubtextFile(File.CopyTo(path, true /*overwrite*/));
        }

        public IFile CopyTo(IDirectory directory)
        {
            return Overwrite(directory.CombineFile(Name));
        }

        public IFile Overwrite(IFile file)
        {
            return CopyTo(file.Path);
        }

        public IFile Backup(string fileName)
        {
            return new SubtextFile(File.CopyTo(Directory.CombinePath(fileName), true /*overwrite*/));
        }

        public void Delete()
        {
            if(File.Exists)
            {
                File.Delete();
            }
        }
    }
}
using System;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using ICSharpCode.SharpZipLib.Zip;

namespace SubtextUpgrader
{
    public partial class UpgradeForm : Form
    {
        private const string ReleaseVersion = "2.5.2";
        public UpgradeForm()
        {
            InitializeComponent();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            folderBrowserDialog1.SelectedPath = Destination.Text;
            if(folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                Destination.Text = folderBrowserDialog1.SelectedPath;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            if(folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                Backup.Text = folderBrowserDialog1.SelectedPath;
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            button4.Enabled = false;
            backgroundWorker1.RunWorkerAsync();
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            if(string.IsNullOrEmpty(Destination.Text))
            {
                MessageBox.Show("Destination path required.");
                return;
            }

            CreateSourceFromResource();

            var backupDirectory = (string.IsNullOrEmpty(Backup.Text)) ? CreateQuietBackupDirectory() : Backup.Text;

            var settings = new Settings(
                Path.Combine(TempSourceDirectory(), "Subtext.Web"),
                Destination.Text,
                true,
                backupDirectory,
                Verbose.Checked);

            try
            {
                //with 2 d's for a double dose o' this pimpin!
                var upgrayedd = new Upgrader(settings, backgroundWorker1);
                upgrayedd.Run();
            }
            catch(Exception ex)
            {
                backgroundWorker1.CancelAsync();
                string message = "Oops! " +
                    Environment.NewLine +
                    ex.Message;

                backgroundWorker1.ReportProgress(100, message);
            }
            finally
            {
                ClearTempSourceDirectory();
            }
        }

        private static string CreateQuietBackupDirectory()
        {
            string tempPath = Path.Combine(Path.GetTempPath(), "SubText-backup");
            Directory.CreateDirectory(tempPath);

            return tempPath;
        }

        void CreateSourceFromResource()
        {
            //* create temporary file
            //* stream embedded zipfile to temporary file
            //* create temporary folder
            //* unzip to temp folder
            //* use result as source directory.
            //* run upgrader
            string fileName = Path.GetTempFileName() + ".zip";
            string resourceName = GetType().Namespace + ".Resources.SubText-" + ReleaseVersion + ".zip";
            using(var resx = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))
            {
                if(resx == null)
                {
                    throw new InvalidOperationException(String.Format("Resource '{0}' does not exist", resourceName));
                }
                using(var fs = File.Create(fileName))
                {
                    const int offset = 0;
                    const int size = 4096;
                    int count;
                    var buffer = new byte[size];
                    while((count = resx.Read(buffer, offset, size)) > 0)
                    {
                        fs.Write(buffer, offset, count);
                    }
                    fs.Close();
                    resx.Close();
                }
            }

            string extractDirectory = TempSourceDirectory();
            if(Directory.Exists(extractDirectory))
            {
                backgroundWorker1.ReportProgress(3, String.Format("Deleting to '{0}'", extractDirectory));
                ClearTempSourceDirectory();
            }

            var zip = new FastZip();
            string message = String.Format("Extracting to '{0}'", extractDirectory);
            backgroundWorker1.ReportProgress(5, message);
            zip.ExtractZip(fileName, extractDirectory, string.Empty);
        }

        static string TempSourceDirectory()
        {
            string extractDirectory = Path.Combine(Path.GetTempPath(), "SubText-" + ReleaseVersion);
            return extractDirectory;
        }

        private void ClearTempSourceDirectory()
        {
            string extractDirectory = TempSourceDirectory();
            if(Directory.Exists(extractDirectory))
            {
                Directory.Delete(extractDirectory, true);
            }
        }

        void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressBar1.Value = e.ProgressPercentage;
            Message.Text += e.UserState + Environment.NewLine;
        }

        private void Cancel_Click(object sender, EventArgs e)
        {
            backgroundWorker1.CancelAsync();
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if(e.Cancelled)
            {
                Message.Text += "Cancelled!";
            }
            button4.Enabled = true;
        }

        private void UpgradeForm_Load(object sender, EventArgs e)
        {
            Destination.Text = Environment.CurrentDirectory;
        }
    }
}
namespace SubtextUpgrader {
	partial class UpgradeForm {
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing) {
			if (disposing && (components != null)) {
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent() {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpgradeForm));
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.Backup = new System.Windows.Forms.TextBox();
            this.button2 = new System.Windows.Forms.Button();
            this.Destination = new System.Windows.Forms.TextBox();
            this.button3 = new System.Windows.Forms.Button();
            this.Verbose = new System.Windows.Forms.CheckBox();
            this.button4 = new System.Windows.Forms.Button();
            this.folderBrowserDialog1 = new System.Windows.Forms.FolderBrowserDialog();
            this.progressBar1 = new System.Windows.Forms.ProgressBar();
            this.backgroundWorker1 = new System.ComponentModel.BackgroundWorker();
            this.Cancel = new System.Windows.Forms.Button();
            this.Message = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tableLayoutPanel1.ColumnCount = 2;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 74.65753F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 25.34247F));
            this.tableLayoutPanel1.Controls.Add(this.Backup, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.button2, 1, 0);
            this.tableLayoutPanel1.Controls.Add(this.Destination, 0, 0);
            this.tableLayoutPanel1.Controls.Add(this.button3, 1, 1);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(13, 12);
            this.tableLayoutPanel1.Name = "tableLayoutPanel1";
            this.tableLayoutPanel1.RowCount = 2;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel1.Size = new System.Drawing.Size(432, 68);
            this.tableLayoutPanel1.TabIndex = 0;
            // 
            // Backup
            // 
            this.Backup.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.Backup.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Backup.Location = new System.Drawing.Point(3, 37);
            this.Backup.Name = "Backup";
            this.Backup.Size = new System.Drawing.Size(316, 23);
            this.Backup.TabIndex = 4;
            // 
            // button2
            // 
            this.button2.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button2.Location = new System.Drawing.Point(325, 3);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(100, 28);
            this.button2.TabIndex = 3;
            this.button2.Text = "Destination...";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // Destination
            // 
            this.Destination.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.Destination.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Destination.Location = new System.Drawing.Point(3, 3);
            this.Destination.Name = "Destination";
            this.Destination.Size = new System.Drawing.Size(316, 23);
            this.Destination.TabIndex = 0;
            // 
            // button3
            // 
            this.button3.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button3.Location = new System.Drawing.Point(325, 37);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(100, 28);
            this.button3.TabIndex = 5;
            this.button3.Text = "Backup...";
            this.button3.UseVisualStyleBackColor = true;
            this.button3.Click += new System.EventHandler(this.button3_Click);
            // 
            // Verbose
            // 
            this.Verbose.AutoSize = true;
            this.Verbose.Location = new System.Drawing.Point(16, 86);
            this.Verbose.Name = "Verbose";
            this.Verbose.Size = new System.Drawing.Size(70, 17);
            this.Verbose.TabIndex = 1;
            this.Verbose.Text = "Verbose?";
            this.Verbose.UseVisualStyleBackColor = true;
            // 
            // button4
            // 
            this.button4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.button4.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button4.Location = new System.Drawing.Point(124, 86);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(188, 52);
            this.button4.TabIndex = 3;
            this.button4.Text = "Upgrade SubText!";
            this.button4.UseVisualStyleBackColor = true;
            this.button4.Click += new System.EventHandler(this.button4_Click);
            // 
            // progressBar1
            // 
            this.progressBar1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.progressBar1.Location = new System.Drawing.Point(14, 144);
            this.progressBar1.Name = "progressBar1";
            this.progressBar1.Size = new System.Drawing.Size(422, 23);
            this.progressBar1.TabIndex = 5;
            // 
            // backgroundWorker1
            // 
            this.backgroundWorker1.WorkerReportsProgress = true;
            this.backgroundWorker1.WorkerSupportsCancellation = true;
            this.backgroundWorker1.DoWork += new System.ComponentModel.DoWorkEventHandler(this.backgroundWorker1_DoWork);
            this.backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorker1_RunWorkerCompleted);
            this.backgroundWorker1.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.backgroundWorker1_ProgressChanged);
            // 
            // Cancel
            // 
            this.Cancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.Cancel.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Cancel.Location = new System.Drawing.Point(318, 86);
            this.Cancel.Name = "Cancel";
            this.Cancel.Size = new System.Drawing.Size(118, 52);
            this.Cancel.TabIndex = 6;
            this.Cancel.Text = "Cancel";
            this.Cancel.UseVisualStyleBackColor = true;
            this.Cancel.Click += new System.EventHandler(this.Cancel_Click);
            // 
            // Message
            // 
            this.Message.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.Message.Location = new System.Drawing.Point(13, 173);
            this.Message.Multiline = true;
            this.Message.Name = "Message";
            this.Message.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.Message.Size = new System.Drawing.Size(422, 216);
            this.Message.TabIndex = 6;
            // 
            // UpgradeForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 12F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(447, 401);
            this.Controls.Add(this.Message);
            this.Controls.Add(this.Cancel);
            this.Controls.Add(this.progressBar1);
            this.Controls.Add(this.button4);
            this.Controls.Add(this.Verbose);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Font = new System.Drawing.Font("Tahoma", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MinimumSize = new System.Drawing.Size(423, 300);
            this.Name = "UpgradeForm";
            this.Text = "SubText Upgrader";
            this.Load += new System.EventHandler(this.UpgradeForm_Load);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

		}

		#endregion

		private System.Windows.Forms.TableLayoutPanel tableLayoutPanel1;
		private System.Windows.Forms.TextBox Destination;
		private System.Windows.Forms.Button button2;
		private System.Windows.Forms.CheckBox Verbose;
		private System.Windows.Forms.TextBox Backup;
		private System.Windows.Forms.Button button3;
		private System.Windows.Forms.Button button4;
		private System.Windows.Forms.FolderBrowserDialog folderBrowserDialog1;
		private System.Windows.Forms.ProgressBar progressBar1;
		private System.ComponentModel.BackgroundWorker backgroundWorker1;
		private System.Windows.Forms.Button Cancel;
		private System.Windows.Forms.TextBox Message;
	}
}
using System;
using System.ComponentModel;

namespace SubtextUpgrader {
	public class Upgrader {
		public Upgrader(Settings settings, BackgroundWorker progress) {
			Settings = settings;
			Progress = progress;
		}

		public Settings Settings {
			get;
			private set;
		}

		protected BackgroundWorker Progress {
			get;
			private set;
		}

		public void Run() {
			//assuming sourceDirectory is set, either explicitly or by unzipped resources.
			var sourceDirectory = new SubtextDirectory(Settings.SourceDirectory);
			if (!VerifyDirectory(sourceDirectory, "source")) {
				return;
			}

			var targetDirectory = new SubtextDirectory(Settings.UpgradeTargetDirectory);
			if (!VerifyDirectory(targetDirectory, "target")) {
				return;
			}

			IDirectory backup = null;
			if (!String.IsNullOrEmpty(Settings.BackupDirectory)) {
				backup = new SubtextDirectory(Settings.BackupDirectory);
				if (!VerifyDirectory(backup, "backup")) {
					return;
				}
			}

			string message = "Upgrading using the following settings:";		

			Progress.ReportProgress(10, message);

			if (UserCancelled())
				return;

			message = string.Format("Source Directory: '{0}'", Settings.SourceDirectory);

			Progress.ReportProgress(10, message);

			if (UserCancelled())
				return;

			message = string.Format("Target Directory: '{0}", Settings.UpgradeTargetDirectory);

			Progress.ReportProgress(10, message);

			if (UserCancelled())
				return;
			
			if (backup != null) {
				message = string.Format("Backup Directory: '{0}", Settings.BackupDirectory);
			
				Progress.ReportProgress(20, message);

				if (UserCancelled())
					return;
			
				message = string.Format("Clearing backup directory '{0}'", backup.Path);

				Progress.ReportProgress(20, message);

				if (UserCancelled())
					return;

				backup.Delete(true);
				backup.Create();
				message = "Backing up source and target directories";

				Progress.ReportProgress(20, message);

				if (UserCancelled())
					return;

				sourceDirectory.CopyTo(backup.Combine("source").Create());
				targetDirectory.CopyTo(backup.Combine("target").Create());
			}

			var configUpgrader = new WebConfigUpgrader(sourceDirectory);
			message = "Upgrading Web.config";

			Progress.ReportProgress(30, message);

			if (UserCancelled())
				return;

			configUpgrader.UpgradeConfig(targetDirectory);

			var customSkinConfig = targetDirectory.CombineFile(@"Admin\Skins.User.config");
			if (customSkinConfig.Exists) {
				message = "Updating skin.config for custom skins";

				Progress.ReportProgress(60, message);

				if (UserCancelled())
					return;

				var skinConfig = new LegacySkinsConfig(customSkinConfig);
				var skinsDirectory = sourceDirectory.Combine(@"Skins").Ensure();
				skinConfig.UpgradeSkins(skinsDirectory);
			} else {
				message = string.Format("Did not find custom skins file at '{0}'", customSkinConfig.Path);

				Progress.ReportProgress(60, message);

				if (UserCancelled())
					return;
			}

			message = string.Format("Deploying '{0}' to '{1}'", sourceDirectory.Path, targetDirectory.Path);

			Progress.ReportProgress(80, message);

			if (UserCancelled())
				return;

			var deployer = new FileDeployer(sourceDirectory, targetDirectory);
			deployer.Deploy();

			message = "Cleaning up old directories";

			Progress.ReportProgress(90, message);

			if (UserCancelled())
				return;

			deployer.RemoveOldDirectories();


		    message = "Checking skins for references to legacy Subtext.Web.Controls assembly.";
            Progress.ReportProgress(95, message);

		    var skinUpgrader = new SkinUpgrader(targetDirectory.Combine("Skins"));
		    skinUpgrader.Run();


			message = "Done!";

			Progress.ReportProgress(100, message);
		}

		bool UserCancelled() {
			if (Progress.CancellationPending)
			{
			    const string message = "User Cancelled!";
			    Progress.ReportProgress(100, message);
			}

		    return Progress.CancellationPending;
		}

		bool VerifyDirectory(IDirectory directory, string directoryLabel) {
			if (Settings.Verbose) {
				string message = "Verifying the " + directoryLabel +
					" directory...";
				Progress.ReportProgress(10, message);
			}

			if (!directory.Exists) {
				string message = string.Format("The {0} directory: '{1}' does not exist", directoryLabel, directory.Path);

				Progress.ReportProgress(0, message);

				return false;
			}
			return true;
		}
	}
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Xml;

namespace SubtextUpgrader
{
    public class WebConfigUpgrader
    {
        public WebConfigUpgrader(IDirectory sourceWebRoot)
        {
            SourceWebRootDirectory = sourceWebRoot;
        }

        protected IDirectory SourceWebRootDirectory
        {
            get; 
            private set;
        }

        public void UpgradeConfig(IDirectory destination)
        {
            var newConfig = SourceWebRootDirectory.CombineFile("Web.config");
            var existingConfig = destination.CombineFile("Web.config");
            if(!existingConfig.Exists)
            {
                return;
            }
            UpgradeConfig(newConfig, existingConfig);
        }

        private static void UpgradeConfig(IFile newConfig, IFile existingConfig)
        {
            var newXml = newConfig.ToXml();
            var existingXml = existingConfig.ToXml();

            ApplyCustomizations(existingXml, newXml);

            using(var stream = newConfig.OpenWrite())
            {
                newXml.Save(stream);
            }
            newConfig.Overwrite(existingConfig);
        }

        private static void ApplyCustomizations(XmlNode source, XmlNode destination)
        {
            OverwriteChildren(doc => doc.SelectConnectionStringsNode(), source, destination);
            OverwriteChildren(doc => doc.SelectEmailNode(), source, destination);
            OverwriteChildren(doc => doc.SelectEnclosureMimetypesNode(), source, destination);
            OverwriteChildren(doc => doc.SelectFriendlyUrlSettingsNode(), source, destination);
        }

        public static void OverwriteChildren(Func<XmlNode, XmlNode> nodeSelector, XmlNode sourceDocument, XmlNode destinationDocument)
        {
            var sourceNode = nodeSelector(sourceDocument);
            if(sourceNode == null || sourceNode.ChildNodes.Count == 0)
            {
                // we only want to copy nodes if there's something to copy.
                return;
            }
            var sourceChildNodes = sourceNode.ChildNodes;
            if(sourceChildNodes.Count == 0)
            {
                // we only want to copy nodes if there's something to copy.
                return;
            }

            var destinationNode = nodeSelector(destinationDocument);
            destinationNode.RemoveAll();
            
            foreach(XmlNode node in sourceChildNodes)
            {
                destinationNode.InnerXml = node.OuterXml;
            }
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Xml;

namespace SubtextUpgrader
{
    public static class XmlExtensions
    {
        public static XmlNode SelectConnectionStringsNode(this XmlNode node)
        {
            return node.SelectSingleNode("/configuration/connectionStrings");
        }

        public static XmlNode SelectFriendlyUrlSettingsNode(this XmlNode node)
        {
            return node.SelectSingleNode("/configuration/FriendlyUrlSettings");
        }

        public static XmlNode SelectEnclosureMimetypesNode(this XmlNode node)
        {
            return node.SelectSingleNode("/configuration/EnclosureMimetypes");
        }
        
        public static XmlNode SelectEmailNode(this XmlNode node)
        {
            return node.SelectSingleNode("/configuration/Email");
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Xml;

namespace SubtextUpgrader
{
    public static class XmlManipulations
    {
        /// <summary>
        /// Moves the node up the hierarchy as a sibling to its parent.
        /// </summary>
        public static XmlNode MoveUp(this XmlNode node)
        {
            var parent = node.ParentNode;
            if(parent == node.OwnerDocument.DocumentElement)
            {
                return node;
            }
            var nodeToMove = node.CloneNode(true);
            node.ParentNode.ParentNode.AppendChild(nodeToMove);
            node.ParentNode.RemoveChild(node);
            return node;
        }

        public static XmlDocument ToXml(this string xml)
        {
            var doc = new XmlDocument();
            doc.LoadXml(xml);
            return doc;
        }

        public static XmlDocument ExtractNodeAsDocument(this XmlDocument doc, string xpath)
        {
            var node = doc.SelectSingleNode(xpath);
            return node.ToXmlDocument();
        }

        public static IEnumerable<XmlDocument> ExtractDocuments(this XmlDocument doc, string xpath)
        {
            return doc.ExtractDocuments(xpath, null);
        }

        public static IEnumerable<XmlDocument> ExtractDocuments(this XmlDocument doc, string xpath, XmlDocument templateXml)
        {
            return doc.ExtractDocuments(xpath, templateXml, null);
        }

        public static IEnumerable<XmlDocument> ExtractDocuments(this XmlDocument doc, string xpath, XmlDocument templateXml, string insertXPath)
        {
            XmlNodeList nodes = doc.SelectNodes(xpath);
            foreach(XmlNode node in nodes)
            {
                yield return node.ToXmlDocument(templateXml, insertXPath);
            }
        }

        public static XmlDocument ToXmlDocument(this XmlNode node)
        {
            return node.ToXmlDocument(null, null);
        }

        public static XmlDocument ToXmlDocument(this XmlNode node, XmlDocument templateXml, string insertXPath)
        {
            var xml = (templateXml ?? new XmlDocument()).CloneNode(true) as XmlDocument;
            var importedNode = xml.ImportNode(node, true);

            
            var insertionNode = xml.SelectSingleNode(insertXPath?? "/.");
            if(insertionNode.FirstChild == null || insertionNode.FirstChild != xml.DocumentElement)
            {
                insertionNode.AppendChild(importedNode);
            }
            else
            {
                insertionNode.FirstChild.AppendChild(importedNode);
            }
            return xml;
        }

        public static XmlDocument ToXml(this IFile file)
        {
            return file.Contents.ToXml();
        }
    }
}
ï»¿using System;
using System.IO;
using MbUnit.Framework;
using Moq;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class FileDeployerTests
    {
        [Test]
        public void Deploy_WithSourceAndDestinationDirectories_CopiesOneToTheOther()
        {
            // arrange
            var webroot = new SubtextDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
            webroot.Create();

            var destination = new SubtextDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
            destination.Create();

            var dir = webroot.Combine(Guid.NewGuid().ToString());
            dir.Create();

            var file = webroot.CombineFile(Guid.NewGuid().ToString());
            using (var sw = new StreamWriter(file.OpenWrite()))
                sw.WriteLine(@"Lorem ipsum dolor sit amet, consectetur adipiscing elit.");

            var fileDeployer = new FileDeployer(webroot, destination);

            // act
            fileDeployer.Deploy();

            // assert
            Assert.IsTrue(destination.CombineFile(file.Name).Exists);
            Assert.IsTrue(destination.Combine(dir.Name).Exists);            
        }

        [Test]
        public void RemoveOldDirectories_WithDestination_RemovesUnusedDirectories()
        {
            // arrange
            var webroot = new Mock<IDirectory>();
            var destination = new Mock<IDirectory>();
            destination.Setup(d => d.Combine(It.IsAny<string>())).Returns(new Mock<IDirectory>().Object);
            destination.Setup(d => d.CombineFile(It.IsAny<string>())).Returns(new Mock<IFile>().Object);
            var fileDeployer = new FileDeployer(webroot.Object, destination.Object);

            // act
            fileDeployer.RemoveOldDirectories();

            // assert
            destination.Verify(d => d.Combine("Admin"));
            destination.Verify(d => d.Combine("HostAdmin"));
            destination.Verify(d => d.Combine("Install"));
            destination.Verify(d => d.Combine("SystemMessages"));
        }

        [Test]
        public void RemoveOldFiles_WithDestination_RemovesUnusedFiles()
        {
            // arrange
            var webroot = new Mock<IDirectory>();
            var destination = new Mock<IDirectory>();
            destination.Setup(d => d.CombineFile(It.IsAny<string>())).Returns(new Mock<IFile>().Object);
            var fileDeployer = new FileDeployer(webroot.Object, destination.Object);

            // act
            fileDeployer.RemoveOldFiles();

            // assert
            destination.Verify(d => d.CombineFile("AggDefault.aspx"));
        }
    }
}
ï»¿using System.Linq;
using MbUnit.Framework;
using Moq;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class LegacySkinsConfigTests
    {
        [Test]
        public void GetNewSkinConfigs_WithLegacySkinConfigXml_ExtractsSkinConfigs()
        {
            // arrange
            const string configXml = @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
  <Skins>
    <SkinTemplate Name=""Foo"" TemplateFolder=""Foo"" StyleMergeMode=""MergedAfter"">
      <Styles>
        <Style href=""csharp.css"" />
      </Styles>
    </SkinTemplate>
    <SkinTemplate Name=""Bar"" TemplateFolder=""Bar"">
      <Styles>
        <Style href=""bar.css"" />
      </Styles>
    </SkinTemplate>
  </Skins>
</SkinTemplates>";
            var file = new Mock<IFile>();
            file.Setup(f => f.Contents).Returns(configXml);
            var oldConfig = new LegacySkinsConfig(file.Object);

            // act
            var configs = oldConfig.GetNewSkinConfigs();

            // assert
            Assert.AreEqual(2, configs.Count());
            const string expectedFirstXml =
                @"<SkinTemplates><SkinTemplate Name=""Foo"" StyleMergeMode=""MergedAfter""><Styles><Style href=""csharp.css"" /></Styles></SkinTemplate></SkinTemplates>";
            Assert.AreEqual(expectedFirstXml, configs.First().Xml.OuterXml);
            Assert.AreEqual("Foo", configs.First().TemplateFolder);
            const string expectedSecondXml =
                @"<SkinTemplates><SkinTemplate Name=""Bar""><Styles><Style href=""bar.css"" /></Styles></SkinTemplate></SkinTemplates>";
            Assert.AreEqual(expectedSecondXml, configs.ElementAt(1).Xml.OuterXml);
            Assert.AreEqual("Bar", configs.ElementAt(1).TemplateFolder);
        }

        [Test]
        public void UpgradeSkins_WritesNewSkins_ToSkinTemplateDirectory()
        {
            // arrange
            var targetDirectory = new Mock<IDirectory>();
            targetDirectory.Setup(d => d.Combine("Skins")).Returns(targetDirectory.Object);
            targetDirectory.Setup(d => d.Combine("Foo")).Returns(targetDirectory.Object);

            const string configXml = @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
  <Skins>
    <SkinTemplate Name=""Foo"" TemplateFolder=""Foo"" StyleMergeMode=""MergedAfter"">
      <Styles>
        <Style href=""csharp.css"" />
      </Styles>
    </SkinTemplate>
  </Skins>
</SkinTemplates>";
            var file = new Mock<IFile>();
            file.Setup(f => f.Contents).Returns(configXml);
            file.Setup(f => f.Directory.Parent).Returns(targetDirectory.Object);
            var memoryStream = new NonDisposableMemoryStream();
            var skinFile = new Mock<IFile>();
            skinFile.Setup(f => f.OpenWrite()).Returns(memoryStream);
            var skinDirectory = new Mock<IDirectory>();
            skinDirectory.Setup(d => d.Exists).Returns(false);
            skinDirectory.Setup(d => d.CombineFile("skin.config")).Returns(skinFile.Object);
            skinDirectory.Setup(d => d.Ensure()).Returns(skinDirectory.Object);
            var skinsDirectory = new Mock<IDirectory>();
            skinsDirectory.Setup(d => d.Combine("Foo")).Returns(skinDirectory.Object);
            skinsDirectory.Setup(d => d.Ensure()).Returns(skinDirectory.Object);
            var oldConfig = new LegacySkinsConfig(file.Object);

            // act
            oldConfig.UpgradeSkins(skinsDirectory.Object);

            // assert
            targetDirectory.Verify(d => d.CopyTo(skinDirectory.Object));
            const string expected =
                @"<SkinTemplates>
  <SkinTemplate Name=""Foo"" StyleMergeMode=""MergedAfter"">
    <Styles>
      <Style href=""csharp.css"" />
    </Styles>
  </SkinTemplate>
</SkinTemplates>";
            Assert.AreEqual(expected, memoryStream.ToStringContents());
        }
    }
}
ï»¿using System.IO;

namespace SubtextUpgraderTests
{
    public class NonDisposableMemoryStream : MemoryStream
    {
        public override void Close()
        {
            // Do nothing
        }

        protected override void Dispose(bool disposing)
        {
            // Do Nothing
        }
    }

}
ï»¿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("SubtextUpgraderTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("SubtextUpgraderTests")]
[assembly: AssemblyCopyright("Copyright Â© Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("d8263cfa-e2f2-4542-ac19-3bd3e9b647c8")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
ï»¿using System.Xml;
using MbUnit.Framework;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class SkinConfigTests
    {
        [Test]
        public void Ctor_WithStream_SetsXmlAndTemplateFolder()
        {
            // arrange
            var xml = new XmlDocument();

            // act
            var config = new SkinConfig(xml, "Test");

            // assert
            Assert.AreEqual("Test", config.TemplateFolder);
            Assert.AreEqual(xml, config.Xml);
        }
    }
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using MbUnit.Framework;
using Moq;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class SkinUpgraderTests
    {
        [Test]
        public  void Ctor_FileWithOldAssembly_ReplateWithNewOne()
        {
            //arrange
            var upgrader = new SkinUpgrader(GetSourceDirectory());

            // act
            upgrader.Run();

            //assert
            using (var reader = new StreamReader(File.OpenRead("PageTemplate.ascx")))
            {
                const string expected = @"<%@ Register TagPrefix=""SP"" Namespace=""Subtext.Web.Controls"" Assembly=""Subtext.Web"" %>my other content";
                var text = reader.ReadToEnd();
                Assert.AreEqual(expected, text);
            }
        }

        [Test]
        public void Ctor_FileWithOldAssembly_KeepsOtherContent()
        {
            //arrange
            var upgrader = new SkinUpgrader(GetSourceDirectory());

            // act
            upgrader.Run();

            //assert
            using (var reader = new StreamReader(File.OpenRead("PageTemplate.ascx")))
            {
                const string expected = @"<%@ Register TagPrefix=""SP"" Namespace=""Subtext.Web.Controls"" Assembly=""Subtext.Web"" %>my other content";
                var text = reader.ReadToEnd();
                Assert.AreEqual(expected, text);
            }
        }

        [Test]
        public void Ctor_DirectoryWithSubDirectories_ReplacesFilesUnderNeath()
        {
            //arrange
            using (var writer = File.CreateText("PageTemplate.ascx"))
            {
                writer.Write(@"<%@ Register TagPrefix=""SP"" Namespace=""Subtext.Web.Controls"" Assembly=""Subtext.Web.Controls"" %>");
            }
            var existingCustomSkinFile = new SubtextFile(new FileInfo("PageTemplate.ascx"));
            var files = new List<IFile> { existingCustomSkinFile };
            var sourceDirectory = new Mock<IDirectory>();
            var subDirectory = new Mock<IDirectory>();
            subDirectory.Setup(s => s.GetFiles()).Returns(files);
            var directories = new List<IDirectory> {subDirectory.Object};
            sourceDirectory.Setup(s => s.GetDirectories()).Returns(directories);
            var upgrader = new SkinUpgrader(sourceDirectory.Object);

            // act
            upgrader.Run();

            //assert
            using (var reader = new StreamReader(File.OpenRead("PageTemplate.ascx")))
            {
                const string expected = @"<%@ Register TagPrefix=""SP"" Namespace=""Subtext.Web.Controls"" Assembly=""Subtext.Web"" %>";
                var text = reader.ReadToEnd();
                Assert.AreEqual(expected, text);
            }
        }

        [TearDown]
        public void TearDown()
        {
            if(File.Exists("PageTemplate.ascx"))
            {
                File.Delete("PageTemplate.ascx");
            }
        }

        private static IDirectory GetSourceDirectory()
        {
            using (var writer = File.CreateText("PageTemplate.ascx"))
            {
                writer.Write(@"<%@ Register TagPrefix=""SP"" Namespace=""Subtext.Web.Controls"" Assembly=""Subtext.Web.Controls"" %>");
                writer.Write(@"my other content");
            }
            var existingCustomSkinFile = new SubtextFile(new FileInfo("PageTemplate.ascx"));
            var files = new List<IFile> { existingCustomSkinFile };
            var sourceDirectory = new Mock<IDirectory>();
            sourceDirectory.Setup(s => s.GetFiles()).Returns(files);
            return sourceDirectory.Object;
        }
    }
}
ï»¿using System;
using System.IO;
using MbUnit.Framework;
using Moq;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class SubtextDirectoryTests
    {
        [Test]
        public void CopyTo_WithDestinationDirectory_CopiesFiles()
        {
            // arrange
            var source = new SubtextDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
            source.Create();
            
            var destination = new SubtextDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
            destination.Create();

            var file1 = source.CombineFile(Guid.NewGuid().ToString());
            using (var sw = new StreamWriter(file1.OpenWrite()))
                sw.WriteLine(@"Lorem ipsum dolor sit amet, consectetur adipiscing elit.");

            var file2 = source.CombineFile(Guid.NewGuid().ToString());
            using (var sw = new StreamWriter(file2.OpenWrite()))
                sw.WriteLine(@"Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
            
            // act
            source.CopyTo(destination);

            // assert
            FileAssert.Exists(destination.CombineFile(file1.Name).Path);
            FileAssert.Exists(destination.CombineFile(file2.Name).Path);

        }

        [Test]
        public void CopyTo_WithDestinationDirectory_CopiesSubfolders()
        {
            // arrange
            var source = new Mock<SubtextDirectory>(new DirectoryInfo("."));
            var destination = new Mock<IDirectory>();
            var destDir1 = new Mock<IDirectory>();
            destination.Setup(d => d.Combine("Dir1")).Returns(destDir1.Object);
            var destDir2 = new Mock<IDirectory>();
            destination.Setup(d => d.Combine("Dir2")).Returns(destDir2.Object);
            var dir1 = new Mock<IDirectory>();
            dir1.Setup(d => d.Name).Returns("Dir1");
            var dir2 = new Mock<IDirectory>();
            dir2.Setup(d => d.Name).Returns("Dir2");
            var directories = new[] { dir1.Object, dir2.Object };
            source.Setup(d => d.GetDirectories()).Returns(directories);

            // act
            source.Object.CopyTo(destination.Object);

            // assert
            dir1.Verify(d => d.CopyTo(destDir1.Object));
            dir2.Verify(d => d.CopyTo(destDir2.Object));
        }
    }
}
ï»¿using System.IO;
using MbUnit.Framework;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class SubtextFileTests
    {
        [Test]
        public void OpenWrite_OnFileWithContents_ClearsContentsFirst()
        {
            // arrange
            using(var writer = File.CreateText(@"test.txt"))
            {
                writer.Write("0123456789");
            }
            var file = new SubtextFile(new FileInfo("test.txt"));
            
            // act
            using(var writer = new StreamWriter(file.OpenWrite()))
            {
                writer.Write("abcdef");
            }

            // assert
            using(var reader = new StreamReader(File.OpenRead("test.txt")))
            {
                string text = reader.ReadToEnd();
                Assert.AreEqual("abcdef", text);
            }
        }

        [TearDown]
        public void TearDown()
        {
            if(File.Exists("test.txt"))
            {
                File.Delete("test.txt");
            }
        }
    }
}
ï»¿using System.Xml;
using MbUnit.Framework;
using Moq;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class WebConfigUpgraderTests
    {
        [Test]
        public void UpgradeConfig_WithSourceAndDestinationDirectory_UpgradesWebConfig()
        {
            // arrange
            const string newConfig = @"<configuration><connectionStrings><connectionString name=""default"" /></connectionStrings><Foo /></configuration>";
            const string oldConfig = @"<configuration><connectionStrings><connectionString name=""mine"" /></connectionStrings></configuration>";
            var newConfigFile = new Mock<IFile>();
            
            var stream = new NonDisposableMemoryStream();
            newConfigFile.Setup(f => f.OpenWrite()).Returns(stream);
            newConfigFile.Setup(f => f.Contents).Returns(newConfig);
            var existingFileConfig = new Mock<IFile>();
            newConfigFile.Setup(f => f.Overwrite(existingFileConfig.Object));
            existingFileConfig.Setup(f => f.Contents).Returns(oldConfig);
            existingFileConfig.Setup(f => f.Exists).Returns(true);
            var sourceDirectory = new Mock<IDirectory>();
            sourceDirectory.Setup(s => s.CombineFile("Web.config")).Returns(newConfigFile.Object);
            var destinationDirectory = new Mock<IDirectory>();
            destinationDirectory.Setup(d => d.CombineFile("Web.config")).Returns(existingFileConfig.Object);
            var upgrader = new WebConfigUpgrader(sourceDirectory.Object);

            // act
            upgrader.UpgradeConfig(destinationDirectory.Object);

            // assert
            const string expected = @"<configuration>
  <connectionStrings>
    <connectionString name=""mine"" />
  </connectionStrings>
  <Foo />
</configuration>";
            Assert.AreEqual(expected, stream.ToStringContents());
        }

        [Test]
        public void OverwriteChildren_DoesJustThat()
        {
            // arrange
            const string sourceXml = @"<?xml version=""1.0""?>
<configuration>
	<configSections>
        <section name=""BlogConfigurationSettings"" type=""Subtext.Framework.Util.XmlSerializerSectionHandler, Subtext.Framework"" requirePermission=""false""/>
    </configSections>
	<connectionStrings>
		<clear/>
        <add name=""subtextData"" connectionString=""SOURCE-Connection-String""/>
        <add name=""subtextData"" connectionString=""SOURCE2-Connection-String""/>
	</connectionStrings>
</configuration>";
            const string destinationXml = @"<?xml version=""1.0""?>
<configuration>
	<configSections>
    </configSections>
	<connectionStrings>
		<clear/>
        <add name=""subtextData"" connectionString=""DEST-Connection-String""/>
	</connectionStrings>
</configuration>";
            var source = new XmlDocument();
            source.LoadXml(sourceXml);
            var destination = new XmlDocument();
            destination.LoadXml(destinationXml);

            // act
            WebConfigUpgrader.OverwriteChildren(doc => doc.SelectConnectionStringsNode(), source, destination);

            // assert
            Assert.AreEqual(@"<?xml version=""1.0""?><configuration><configSections></configSections><connectionStrings><add name=""subtextData"" connectionString=""SOURCE2-Connection-String"" /></connectionStrings></configuration>", destination.OuterXml);
        }
    }
}
ï»¿using System.Xml;
using MbUnit.Framework;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class XmlExtensionTests
    {
        [Test]
        public void SelectConnectionStringsNode_GrabsConnectionStringsNode_FromWebConfig()
        {
            // arrange
            const string configXml = @"<?xml version=""1.0""?>
<configuration>
	<configSections>
    </configSections>
	<connectionStrings>
		<clear/>
        <add name=""subtextData"" connectionString=""Connection-String""/>
	</connectionStrings>
</configuration>";
            var xml = new XmlDocument();
            xml.LoadXml(configXml);
            
            // act
            var node = xml.SelectConnectionStringsNode();

            // assert
            Assert.AreEqual(@"<connectionStrings><clear /><add name=""subtextData"" connectionString=""Connection-String"" /></connectionStrings>", node.OuterXml);
        }
    }
}
ï»¿using System.Linq;
using System.Xml;
using MbUnit.Framework;
using SubtextUpgrader;

namespace SubtextUpgraderTests
{
    [TestFixture]
    public class XmlManipulationsTests
    {
        [Test]
        public void MoveUp_MovesNodeToSiblingOfParent()
        {
            // arrange
            const string xmlText = "<root><parent><child><sub-child /></child></parent></root>";
            var xml = xmlText.ToXml();
            var node = xml.SelectSingleNode("/root/parent/child");

            // act
            node.MoveUp();

            // assert
            Assert.AreEqual("<root><parent></parent><child><sub-child /></child></root>", xml.OuterXml);
        }

        [Test]
        public void MoveUp_WithChildOfRoot_DoesNotMove()
        {
            // arrange
            const string xmlText = "<root><parent><child><sub-child /></child></parent></root>";
            var xml = xmlText.ToXml();
            var node = xml.SelectSingleNode("/root/parent");

            // act
            node.MoveUp();

            // assert
            Assert.AreEqual(xmlText, xml.OuterXml);
        }

        [Test]
        public void ExtractNode_WithChildNode_ReturnsNewXmlDocumentFromNode()
        {
            // arrange
            const string xmlText = "<root><parent><template><stuff /></template></parent></root>";
            var xml = xmlText.ToXml();
            
            // act
            XmlDocument doc = xml.ExtractNodeAsDocument("/root/parent/template"); 

            // assert
            Assert.AreEqual("<template><stuff /></template>", doc.DocumentElement.OuterXml);
        }

        [Test]
        public void ExtractDocuments_WithXmlContainingMultipleNodes_ExtractEachAsDocument()
        {
            const string xmlText = "<root><parent><template><stuff /></template><template><otherstuff /></template></parent></root>";
            var xml = xmlText.ToXml();

            // act
            var docs = xml.ExtractDocuments("/root/parent/template");

            // assert
            Assert.AreEqual("<template><stuff /></template>", docs.First().DocumentElement.OuterXml);
            Assert.AreEqual("<template><otherstuff /></template>", docs.ElementAt(1).DocumentElement.OuterXml);
            Assert.AreEqual(2, docs.Count());
        }

        [Test]
        public void ExtractDocuments_WithTemplateXmlAndInsertionExpath_ExtractsNodesAsChildren()
        {
            const string xmlText = "<root><parent><template><stuff /></template><template><otherstuff /></template></parent></root>";
            var templateXml = "<templates><foo><bar /></foo></templates>".ToXml();
            var xml = xmlText.ToXml();

            // act
            var docs = xml.ExtractDocuments("/root/parent/template", templateXml, "/templates/foo/bar");

            // assert
            Assert.AreEqual("<templates><foo><bar><template><stuff /></template></bar></foo></templates>", docs.First().DocumentElement.OuterXml);
            Assert.AreEqual("<templates><foo><bar><template><otherstuff /></template></bar></foo></templates>", docs.ElementAt(1).DocumentElement.OuterXml);
            Assert.AreEqual(2, docs.Count());
        }


    }
}
using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Net;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Akismet;

namespace UnitTests.Subtext.Akismet
{
    [TestFixture]
    public class AkismetApiTests
    {
        [Test]
        public void Ctor_WithNullApiKey_ThrowsArgumentNullException()
        {
            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => new AkismetClient(null, new Uri("http://example.com/"), new HttpClient()));
        }

        [Test]
        public void Ctor_WithNullBlogUrl_ThrowsArgumentNullException()
        {
            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => new AkismetClient("api-key", null, new HttpClient()));
        }

        [Test]
        public void Ctor_WithNullHttpClient_ThrowsArgumentNullException()
        {
            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => new AkismetClient("api-key", new Uri("http://example.com/"), null));
        }

        [Test]
        public void CheckCommentForSpam_WithNullComment_ThrowsArgumentNullException()
        {
            // arrange
            var client = new AkismetClient("fake-key", new Uri("http://haacked.com/"), new HttpClient());
            
            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => client.CheckCommentForSpam(null));
        }

        [Test]
        public void CanSetAndGetCommentProperties()
        {
            var comment = new Comment(IPAddress.Loopback, "Test");
            Assert.AreEqual("Test", comment.UserAgent);
            Assert.AreEqual(IPAddress.Loopback, comment.IPAddress);

            UnitTestHelper.AssertSimpleProperties(comment);

            comment.ServerEnvironmentVariables.Add("SomeVar", "SomeVal");
            Assert.AreEqual(1, comment.ServerEnvironmentVariables.Count);
        }

        [Test]
        public void ConstructorSetsApiKeyAndUrl()
        {
            var client = new AkismetClient("fake-key", new Uri("http://haacked.com/"), new HttpClient());
            Assert.AreEqual(new Uri("http://haacked.com/"), client.BlogUrl);
            Assert.AreEqual("fake-key", client.ApiKey);
            UnitTestHelper.AssertSimpleProperties(client, "ApiKey");
        }

        [Test]
        public void CanVerifyApiKey()
        {
            //arrange
            string userAgent = GetExpectedUserAgent();
            var verifyUrl = new Uri("http://rest.akismet.com/1.1/verify-key");
            string parameters = "key=" + HttpUtility.UrlEncode("fake-key") + "&blog=" +
                                HttpUtility.UrlEncode("http://haacked.com/");
            var httpClient = new Mock<HttpClient>();
            httpClient.Setup(hc => hc.PostRequest(verifyUrl, userAgent, 5000, parameters, null)).Returns("valid");
            var client = new AkismetClient("fake-key", new Uri("http://haacked.com/"), httpClient.Object);

            //act
            bool isVerified = client.VerifyApiKey();

            //assert
            Assert.IsTrue(isVerified, "If the request returns 'valid' we should return true.");
        }

        [Test]
        public void CanVerifyApiKeyIsWrong()
        {
            //act
            string userAgent = GetExpectedUserAgent();
            var verifyUrl = new Uri("http://rest.akismet.com/1.1/verify-key");
            string parameters = "key=" + HttpUtility.UrlEncode("wrong-key") + "&blog=" +
                                HttpUtility.UrlEncode("http://haacked.com/");
            var httpClient = new Mock<HttpClient>();
            httpClient.Setup(hc => hc.PostRequest(verifyUrl, userAgent, 5000, parameters, null)).Returns("invalid");
            var client = new AkismetClient("wrong-key", new Uri("http://haacked.com/"), httpClient.Object);

            //act
            bool isVerified = client.VerifyApiKey();

            //assert
            Assert.IsFalse(isVerified, "If the request returns 'invalid' then we should return false!");
        }

        [Test]
        public void CanCheckCommentForSpam()
        {
            string userAgent = GetExpectedUserAgent();
            var checkUrl = new Uri("http://myapikey.rest.akismet.com/1.1/comment-check");
            string parameters = "blog=" + HttpUtility.UrlEncode("http://haacked.com/")
                                + "&user_ip=10.0.0.1"
                                + "&user_agent=" + HttpUtility.UrlEncode("Mozilla (My Silly Browser)")
                                + "&referer=" + HttpUtility.UrlEncode("http://example.com/none-of-your-business/")
                                + "&permalink=" + HttpUtility.UrlEncode("http://example.com/i-am-right-you-are-wrong/")
                                + "&comment_type=comment"
                                + "&comment_author=Your+Mama"
                                + "&comment_author_email=" + HttpUtility.UrlEncode("nobody@example.com")
                                + "&comment_author_url=" + HttpUtility.UrlEncode("http://mysite.example.com/foo/")
                                + "&comment_content=" +
                                HttpUtility.UrlEncode("This is my rifle. There are many like it, but this one is MINE.");

            var httpClient = new Mock<HttpClient>();
            var comment = new Mock<IComment>();

            SetupCallsAnComment(comment
                                , "Your Mama"
                                , "nobody@example.com"
                                , IPAddress.Parse("10.0.0.1")
                                , "Mozilla (My Silly Browser)"
                                , "http://example.com/none-of-your-business/"
                                , new Uri("http://example.com/i-am-right-you-are-wrong/")
                                , "comment"
                                , new Uri("http://mysite.example.com/foo/")
                                , "This is my rifle. There are many like it, but this one is MINE."
                                , null);

            httpClient.Setup(hc => hc.PostRequest(checkUrl, userAgent, 5000, parameters)).Returns("true");

            var client = new AkismetClient("myapikey", new Uri("http://haacked.com/"), httpClient.Object);
            Assert.IsTrue(client.CheckCommentForSpam(comment.Object),
                          "If the request returns 'false' then we should return false!");
        }

        [Test]
        public void CanCheckCommentForSpamWithoutOptionalParams()
        {
            string userAgent = GetExpectedUserAgent();
            var checkUrl = new Uri("http://myapikey.rest.akismet.com/1.1/comment-check");
            string parameters = "blog=" + HttpUtility.UrlEncode("http://haacked.com/")
                                + "&user_ip=192.168.200.201"
                                + "&user_agent=" + HttpUtility.UrlEncode("Mozilla (My Silly Browser)");


            var httpClient = new Mock<HttpClient>();
            var comment = new Mock<IComment>();

            //We'll try a mix of nulls and empty strings.
            SetupCallsAnComment(comment
                                , string.Empty
                                , string.Empty
                                , IPAddress.Parse("192.168.200.201")
                                , "Mozilla (My Silly Browser)"
                                , null
                                , null
                                , null
                                , null
                                , string.Empty
                                , null);

            httpClient.Setup(hc => hc.PostRequest(checkUrl, userAgent, 5000, parameters)).Returns("true");


            var client = new AkismetClient("myapikey", new Uri("http://haacked.com/"), httpClient.Object);
            Assert.IsTrue(client.CheckCommentForSpam(comment.Object),
                          "If the request returns 'false' then we should return false!");
        }

        [Test]
        public void CanCheckCommentWithArbitraryServerParams()
        {
            string userAgent = GetExpectedUserAgent();
            var checkUrl = new Uri("http://myapikey.rest.akismet.com/1.1/comment-check");
            string parameters = "blog=" + HttpUtility.UrlEncode("http://haacked.com/")
                                + "&user_ip=192.168.200.201"
                                + "&user_agent=" + HttpUtility.UrlEncode("Mozilla (My Silly Browser)")
                                + "&Making=" + HttpUtility.UrlEncode("This-Stuff")
                                + "&Up=" + HttpUtility.UrlEncode("As I-Go-Along");


            var httpClient = new Mock<HttpClient>();
            var comment = new Mock<IComment>();

            var extendedProps = new NameValueCollection();

            extendedProps.Add("Making", "This-Stuff");
            extendedProps.Add("Up", "As I-Go-Along");

            //We'll try a mix of nulls and empty strings.
            SetupCallsAnComment(comment
                                , string.Empty
                                , string.Empty
                                , IPAddress.Parse("192.168.200.201")
                                , "Mozilla (My Silly Browser)"
                                , null
                                , null
                                , null
                                , null
                                , string.Empty
                                , extendedProps);


            httpClient.Setup(hc => hc.PostRequest(checkUrl, userAgent, 5000, parameters)).Returns("false");


            var client = new AkismetClient("myapikey", new Uri("http://haacked.com/"), httpClient.Object);
            Assert.IsFalse(client.CheckCommentForSpam(comment.Object),
                           "If the request returns 'false' then we should return false!");
        }

        [RowTest]
        [Row("submit-ham", true)]
        [Row("submit-spam", false)]
        public void SubmitHamTest(string urlEnding, bool isHam)
        {
            string userAgent = GetExpectedUserAgent();
            var checkUrl = new Uri("http://myapikey.rest.akismet.com/1.1/" + urlEnding);
            string parameters = "blog=" + HttpUtility.UrlEncode("http://haacked.com/")
                                + "&user_ip=192.168.200.201"
                                + "&user_agent=" + HttpUtility.UrlEncode("Mozilla (My Silly Browser)");


            var httpClient = new Mock<HttpClient>();
            var comment = new Mock<IComment>();

            //We'll try a mix of nulls and empty strings.
            SetupCallsAnComment(comment
                                , string.Empty
                                , string.Empty
                                , IPAddress.Parse("192.168.200.201")
                                , "Mozilla (My Silly Browser)"
                                , null
                                , null
                                , null
                                , null
                                , string.Empty
                                , null);

            httpClient.Setup(hc => hc.PostRequest(checkUrl, userAgent, 5000, parameters)).Returns(string.Empty);


            var client = new AkismetClient("myapikey", new Uri("http://haacked.com/"), httpClient.Object);
            if(isHam)
            {
                client.SubmitHam(comment.Object);
            }
            else
            {
                client.SubmitSpam(comment.Object);
            }
        }

        /// <summary>
        /// The comment check call returns "invalid" if the api key is not valid 
        /// on the URL. The apikey must be the first part of the url.
        /// </summary>
        [Test]
        public void ThrowsInvalidResponseWhenApiKeyInvalid()
        {
            // arrange
            string userAgent = GetExpectedUserAgent();
            var checkUrl = new Uri("http://myapikey.rest.akismet.com/1.1/comment-check");
            string parameters = "blog=" + HttpUtility.UrlEncode("http://haacked.com/")
                                + "&user_ip=192.168.200.201"
                                + "&user_agent=" + HttpUtility.UrlEncode("Mozilla (My Silly Browser)");


            var httpClient = new Mock<HttpClient>();
            var comment = new Mock<IComment>();

            //We'll try a mix of nulls and empty strings.
            SetupCallsAnComment(comment
                                , string.Empty
                                , string.Empty
                                , IPAddress.Parse("192.168.200.201")
                                , "Mozilla (My Silly Browser)"
                                , null
                                , null
                                , null
                                , null
                                , string.Empty
                                , null);

            httpClient.Setup(hc => hc.PostRequest(checkUrl, userAgent, 5000, parameters)).Returns("invalid");
            var client = new AkismetClient("myapikey", new Uri("http://haacked.com/"), httpClient.Object);
            
            // act, assert
            UnitTestHelper.AssertThrows<InvalidResponseException>(() => client.CheckCommentForSpam(comment.Object));
        }

        private static void SetupCallsAnComment(Mock<IComment> comment, string author, string email, IPAddress ip,
                                                string userAgent, string referer, Uri permalink, string commentType,
                                                Uri authorUrl, string content, NameValueCollection extendedProperties)
        {
            comment.Setup(c => c.Author).Returns(author);
            comment.Setup(c => c.AuthorEmail).Returns(email);
            comment.Setup(c => c.IPAddress).Returns(ip);
            comment.Setup(c => c.UserAgent).Returns(userAgent);
            comment.Setup(c => c.Referrer).Returns(referer);
            comment.Setup(c => c.Permalink).Returns(permalink);
            comment.Setup(c => c.CommentType).Returns(commentType);
            comment.Setup(c => c.AuthorUrl).Returns(authorUrl);
            comment.Setup(c => c.Content).Returns(content);
            comment.Setup(c => c.ServerEnvironmentVariables).Returns(extendedProperties);
        }

        static string GetExpectedUserAgent()
        {
            return string.Format(CultureInfo.InvariantCulture, "Subtext/{0} | Akismet/1.11",
                                 typeof(HttpClient).Assembly.GetName().Version);
        }
    }
}using System;
using MbUnit.Framework;
using Moq;
using Subtext.Akismet;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Akismet
{
    [TestFixture]
    public class AkismetSpamServiceTests
    {
        [Test]
        public void Service_WithUrlHelper_UsesItForFeedbackUrl()
        {
            //arrange
            var akismetClient = new Mock<AkismetClient>();
            IComment submittedSpam = null;
            akismetClient.Setup(c => c.SubmitSpam(It.IsAny<IComment>())).Callback<IComment>(
                comment => submittedSpam = comment);

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(helper => helper.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns("/feedback-item");
            var service = new AkismetSpamService("apikey"
                                                 , new Blog {Host = "localhost"}
                                                 , akismetClient.Object
                                                 , urlHelper.Object);

            //act
            service.SubmitSpam(new FeedbackItem(FeedbackType.Comment));

            //assert
            Assert.AreEqual("http://localhost/feedback-item", submittedSpam.Permalink.ToString());
        }

        [Test]
        public void ConvertToAkismetItem_WithContactPageFeedback_DoesNotSetPermalink()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.ContactPage);
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(helper => helper.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns((VirtualPath)null);
            urlHelper.Setup(helper => helper.BlogUrl()).Returns("/");
            var service = new AkismetSpamService("abracadabra", new Blog {Host = "localhost"}, null, urlHelper.Object);
            
            // act
            var comment = service.ConvertToAkismetItem(feedback);

            // assert
            Assert.IsNull(comment.Permalink);
        }

        [Test]
        public void ConvertToAkismetItem_WithFeedback_SetsProperties()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.ContactPage)
            {
                SourceUrl = new Uri("http://example.com/author-source")
            };
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(helper => helper.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns("/foo");
            urlHelper.Setup(helper => helper.BlogUrl()).Returns("/");
            var service = new AkismetSpamService("abracadabra", new Blog { Host = "localhost" }, null, urlHelper.Object);

            // act
            var comment = service.ConvertToAkismetItem(feedback);

            // assert
            Assert.AreEqual("http://example.com/author-source", comment.AuthorUrl.ToString());
            Assert.AreEqual("http://localhost/foo", comment.Permalink.ToString());
        }
    }
}using System;
using System.Configuration;
using System.Data.SqlClient;
using MbUnit.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Infrastructure.Installation;
using UnitTests.Subtext;

[assembly: AssemblyCleanup(typeof(AssemblySetUpAndCleanUp))]

namespace UnitTests.Subtext
{
    public static class AssemblySetUpAndCleanUp
    {
        [SetUp]
        [CoverageExclude]
        public static void SetUp()
        {
            Console.WriteLine("Assembly Setup beginning...");
            if(ConfigurationManager.AppSettings["connectionStringName"] == "subtextExpress")
            {
                //For use with SQL Express. If you use "subtextData", we assume you already have the database created.
                DatabaseHelper.CreateAndInstallDatabase(Config.ConnectionString, Config.ConnectionString.Database,
                                                        "App_Data");
            }
            else
            {
                using(var connection = new SqlConnection(Config.ConnectionString))
                {
                    connection.Open();
                    using(SqlTransaction transaction = connection.BeginTransaction())
                    {
                        try
                        {
                            ScriptHelper.ExecuteScript("StoredProcedures.sql", transaction);
                            transaction.Commit();
                        }
                        catch(Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
        }

        [TearDown]
        [CoverageExclude]
        public static void TearDown()
        {
            try
            {
                if(ConfigurationManager.AppSettings["connectionStringName"] == "subtextExpress")
                {
                    try
                    {
                        DatabaseHelper.DeleteDatabase(Config.ConnectionString.Server, Config.ConnectionString.Database,
                                                      "App_Data");
                    }
                    catch(Exception e)
                    {
                        Console.WriteLine(
                            "Exception occurred while deleting the database. We'll get it the next time around.");
                        Console.WriteLine(e);
                    }
                }
            }
            catch(Exception)
            {
            }
        }
    }
}using System;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Providers.BlogEntryEditor.FCKeditor;

namespace UnitTests.Subtext.BlogEntryProvider
{
    [TestFixture]
    public class FileBrowserConnectorTests
    {
        [Test]
        public void FileBrowserConnector_WithNonAdmin_SetsUnauthorizedStatusCode()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();

            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            subtextContext.SetupSet(c => c.HttpContext.Response.StatusCode, 401);
            subtextContext.Setup(c => c.HttpContext.Response.End());

            var page = new FileBrowserConnector();
            page.SubtextContext = subtextContext.Object;

            // act
            ReflectionHelper.InvokeNonPublicMethod(page, "OnInit", new object[] {EventArgs.Empty});

            //assert
            subtextContext.VerifySet(c => c.HttpContext.Response.StatusCode, 401);
        }

        [Test]
        public void FileBrowserConnector_WithAdmin_DoesNotSetUnauthorizedStatusCode()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();

            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(true);
            subtextContext.SetupSet(c => c.HttpContext.Response.StatusCode, 401).Throws(new Exception("Failed!"));
            subtextContext.Setup(c => c.HttpContext.Response.End());

            var page = new FileBrowserConnector();
            page.SubtextContext = subtextContext.Object;

            // act, assert
            ReflectionHelper.InvokeNonPublicMethod(page, "OnInit", new object[] {EventArgs.Empty});
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using BlogML;
using BlogML.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Services.SearchEngine;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogImportRepositoryTests
    {
        [Test]
        public void CreateCategories_WithBlogHavingCategories_CreatesCategories()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 123 });
            bool categoryCreated = false;
            context.Setup(c => c.Repository.CreateLinkCategory(It.IsAny<LinkCategory>())).Callback(() => categoryCreated = true);
            var blog = new BlogMLBlog();
            blog.Categories.Add(new BlogMLCategory {Title = "Category Title", ID = "123"});
            var repository = new BlogImportRepository(context.Object, null, null, new BlogMLImportMapper());

            // act
            repository.CreateCategories(blog);

            // assert
            Assert.IsTrue(categoryCreated);
        }

        [Test]
        public void CreateCategories_WithBlogHavingNoCategories_DoesNotCreateCategories()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 123 });
            context.Setup(c => c.Repository.CreateLinkCategory(It.IsAny<LinkCategory>())).Throws(new InvalidOperationException());
            var blog = new BlogMLBlog();
            var repository = new BlogImportRepository(context.Object, null, null, new BlogMLImportMapper());

            // act, assert
            repository.CreateCategories(blog);
        }

        [Test]
        public void CreateBlogPost_WithEntryPublisher_PublishesBlogPostAndReturnsId()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.FromUtc(It.IsAny<DateTime>())).Returns(DateTime.Now);
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>())).Returns(310);
            var blog = new BlogMLBlog();
            var post = new BlogMLPost();
            var repository = new BlogImportRepository(context.Object, null, entryPublisher.Object, new BlogMLImportMapper());

            // act
            var id = repository.CreateBlogPost(blog, post);

            // assert
            Assert.AreEqual("310", id);
        }

        [Test]
        public void CreateBlogPost_WithEntryPublisher_RemovesKeywordExpander()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.FromUtc(It.IsAny<DateTime>())).Returns(DateTime.Now);
            context.Setup(c => c.Repository.Create(It.IsAny<Entry>(), It.IsAny<IEnumerable<int>>()));
            var transformation = new CompositeTextTransformation();
            var searchengine = new Mock<IIndexingService>();
            var entryPublisher = new EntryPublisher(context.Object, transformation, null, searchengine.Object);
            var keywordExpander = new KeywordExpander((IEnumerable<KeyWord>)null);
            transformation.Add(keywordExpander);
            var blog = new BlogMLBlog() {Title = "MyBlog"};
            var post = new BlogMLPost();
            var repository = new BlogImportRepository(context.Object, null, entryPublisher, new BlogMLImportMapper());

            // act
            repository.CreateBlogPost(blog, post);

            // assert
            Assert.IsFalse(transformation.Contains(keywordExpander));
        }

        [Test]
        public void CreateComment_WithComment_CreatesCommentUsingCommentService()
        {
            // arrange
            var commentService = new Mock<ICommentService>();
            bool commentCreated = false;
            commentService.Setup(s => s.Create(It.IsAny<FeedbackItem>(), false/*runFilters*/)).Callback(() => commentCreated = true);
            
            var repository = new BlogImportRepository(null, commentService.Object, null, new BlogMLImportMapper());

            // act
            repository.CreateComment(new BlogMLComment(), "123");

            // assert
            Assert.IsTrue(commentCreated);
        }

        [Test]
        public void GetAttachmentDirectoryPath_WithAttachment_CreatesTrackbackUsingTrackbackService()
        {
            // arrange
            var commentService = new Mock<ICommentService>();
            bool trackbackCreated = false;
            commentService.Setup(s => s.Create(It.IsAny<FeedbackItem>(), It.IsAny<bool>())).Callback(() => trackbackCreated = true);

            var repository = new BlogImportRepository(null, commentService.Object, null, new BlogMLImportMapper());

            // act
            repository.CreateTrackback(new BlogMLTrackback(), "123");

            // assert
            Assert.IsTrue(trackbackCreated);
        }

        [Test]
        public void CreateTrackback_WithTrackback_CreatesTrackbackUsingTrackbackService()
        {
            // arrange
            var commentService = new Mock<ICommentService>();
            bool trackbackCreated = false;
            commentService.Setup(s => s.Create(It.IsAny<FeedbackItem>(), It.IsAny<bool>())).Callback(() => trackbackCreated = true);
            var repository = new BlogImportRepository(null, commentService.Object, null, new BlogMLImportMapper());

            // act
            repository.CreateTrackback(new BlogMLTrackback(), "123");

            // assert
            Assert.IsTrue(trackbackCreated);
        }

        [Test]
        public void GetAttachmentDirectoryPath_DelegatesToUrlHelperForPath()
        {
            // arrange
            var blog = new Blog();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog);
            context.Setup(c => c.UrlHelper.ImageDirectoryPath(blog)).Returns(@"c:\web\images");
            var repository = new BlogImportRepository(context.Object, null, null, null);

            // act
            var path = repository.GetAttachmentDirectoryPath();

            // assert
            Assert.AreEqual(@"c:\web\images", path);
        }

        [Test]
        public void GetAttachmentDirectoryUrl_DelegatesToUrlHelperForUrl()
        {
            // arrange
            var blog = new Blog();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog);
            context.Setup(c => c.UrlHelper.ImageDirectoryUrl(blog)).Returns("/test");
            var repository = new BlogImportRepository(context.Object, null, null, null);

            // act
            var path = repository.GetAttachmentDirectoryUrl();

            // assert
            Assert.AreEqual(@"/test", path);
        }

        [Test]
        public void SetupBlogForImport_ReturnsBlogMLScope()
        {
            // arrange
            var blog = new Blog();
            var repository = new Mock<ObjectProvider>();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Repository).Returns(repository.Object);
            context.Setup(c => c.Blog).Returns(blog);
            var importRepository = new BlogImportRepository(context.Object, null, null, null);

            // act
            var scope = importRepository.SetupBlogForImport() as BlogImportSetup;

            // assert
            Assert.IsNotNull(scope);
            Assert.AreEqual(blog, scope.Blog);
            Assert.AreEqual(repository.Object, scope.Repository);
        }

        [Test]
        public void SetExtendedProperties_WithKeyForCommentModeration_EnablesModeration()
        {
            // arrange
            var extendedProperties = new BlogMLBlog.ExtendedPropertiesCollection
            {new Pair<string, string>(BlogMLBlogExtendedProperties.CommentModeration, "true")};
            var context = new Mock<ISubtextContext>();
            var blog = new Blog {ModerationEnabled = false};
            context.Setup(c => c.Blog).Returns(blog);
            bool blogUpdated = false;
            context.Setup(c => c.Repository.UpdateBlog(blog)).Callback(() => blogUpdated = true);
            var repository = new BlogImportRepository(context.Object, null, null, null);

            // act
            repository.SetExtendedProperties(extendedProperties);

            // assert
            Assert.IsTrue(blogUpdated);
            Assert.IsTrue(blog.ModerationEnabled);
        }

        [Test]
        public void SetExtendedProperties_WithKeyForTrackbacksEnabled_EnablesTrackbacks()
        {
            // arrange
            var extendedProperties = new BlogMLBlog.ExtendedPropertiesCollection
            {new Pair<string, string>(BlogMLBlogExtendedProperties.EnableSendingTrackbacks, "true")};
            var context = new Mock<ISubtextContext>();
            var blog = new Blog { TrackbacksEnabled = false };
            context.Setup(c => c.Blog).Returns(blog);
            bool blogUpdated = false;
            context.Setup(c => c.Repository.UpdateBlog(blog)).Callback(() => blogUpdated = true);
            var repository = new BlogImportRepository(context.Object, null, null, null);

            // act
            repository.SetExtendedProperties(extendedProperties);

            // assert
            Assert.IsTrue(blogUpdated);
            Assert.IsTrue(blog.TrackbacksEnabled);
        }
    }
}
using System;
using System.IO;
using BlogML;
using BlogML.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMlImportServiceTests
    {
        [Test]
        public void Import_SetsExtendedPropertiesOnBlog()
        {
            // arrange
            var blog = new BlogMLBlog();
            var repository = new Mock<IBlogImportRepository>();
            bool extendedPropertiesSet = false;
            repository.Setup(r => r.SetExtendedProperties(blog.ExtendedProperties)).Callback(() => extendedPropertiesSet = true);
            var service = new BlogImportService(repository.Object);

            // act
            service.Import(blog);

            // assert
            Assert.IsTrue(extendedPropertiesSet);
        }

        [Test]
        public void Import_WithBlogHavingCategories_CreatesCategories()
        {
            // arrange
            var blog = new BlogMLBlog();
            var repository = new Mock<IBlogImportRepository>();
            bool categoriesCreated = false;
            repository.Setup(r => r.CreateCategories(blog)).Callback(() => categoriesCreated = true);
            var service = new BlogImportService(repository.Object);

            // act
            service.Import(blog);

            // assert
            Assert.IsTrue(categoriesCreated);
        }

        [Test]
        public void Import_WithBlogPostHavingComments_CreatesCommentUsingPostId()
        {
            // arrange
            var blog = new BlogMLBlog();
            var post = new BlogMLPost();
            var comment = new BlogMLComment();
            post.Comments.Add(comment);
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.CreateBlogPost(blog, post)).Returns("98053");
            bool commentCreated = false;
            repository.Setup(r => r.CreateComment(comment, "98053")).Callback(() => commentCreated = true);
            var service = new BlogImportService(repository.Object);

            // act
            service.Import(blog);

            // assert
            Assert.IsTrue(commentCreated);
        }

        [Test]
        public void Import_WithBlogPostHavingBase64EncodedContentWithAttachments_ProperlyRewritesAttachments()
        {
            // arrange
            var blog = new BlogMLBlog();
            const string originalPostContent = @"<img src=""http://old.example.com/images/my-mug.jpg"" />";
            var post = new BlogMLPost { Content = BlogMLContent.Create(originalPostContent, ContentTypes.Base64) };
            var attachment = new BlogMLAttachment { Url = "http://old.example.com/images/my-mug.jpg", Embedded = false};
            post.Attachments.Add(attachment);
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.GetAttachmentDirectoryUrl()).Returns("http://new.example.com/images/");
            repository.Setup(r => r.GetAttachmentDirectoryPath()).Returns(@"c:\web\images");
            BlogMLPost publishedPost = null;
            repository.Setup(r => r.CreateBlogPost(blog, post)).Callback<BlogMLBlog, BlogMLPost>((b, p) => publishedPost = p);
            var service = new BlogImportService(repository.Object);

            // act
            service.Import(blog);

            // assert
            Assert.AreEqual(ContentTypes.Base64, publishedPost.Content.ContentType);
            Assert.AreEqual(@"<img src=""http://new.example.com/images/my-mug.jpg"" />", publishedPost.Content.UncodedText);
        }

        [Test]
        public void Import_WithBlogPostHavingTrackback_CreatesTrackbackUsingPostId()
        {
            // arrange
            var blog = new BlogMLBlog();
            var post = new BlogMLPost();
            var trackback = new BlogMLTrackback();
            post.Trackbacks.Add(trackback);
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.CreateBlogPost(blog, post)).Returns("98053");
            bool trackbackCreated = false;
            repository.Setup(r => r.CreateTrackback(trackback, "98053")).Callback(() => trackbackCreated = true);
            var service = new BlogImportService(repository.Object);

            // act
            service.Import(blog);

            // assert
            Assert.IsTrue(trackbackCreated);
        }

        [Test]
        public void Import_WithCreateCommentThrowingException_DoesNotPropagateException()
        {
            // arrange
            var blog = new BlogMLBlog();
            var post = new BlogMLPost();
            post.Comments.Add(new BlogMLComment());
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.CreateComment(It.IsAny<BlogMLComment>(), It.IsAny<string>())).Throws(new InvalidOperationException());
            var service = new BlogImportService(repository.Object);

            // act, assert
            service.Import(blog);
        }

        [Test]
        public void Import_WithCreateTrackbackThrowingException_DoesNotPropagateException()
        {
            // arrange
            var blog = new BlogMLBlog();
            var post = new BlogMLPost();
            post.Trackbacks.Add(new BlogMLTrackback());
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.CreateTrackback(It.IsAny<BlogMLTrackback>(), It.IsAny<string>())).Throws(new InvalidOperationException());
            var service = new BlogImportService(repository.Object);

            // act, assert
            service.Import(blog);
        }

        [Test]
        public void ImportBlog_WithStream_DeserializesBlog()
        {
            // arrange
            var stream = @"<?xml version=""1.0"" encoding=""utf-8""?>
                                <blog root-url=""http://localhost:1608/SUBWebV2/"" 
                                    date-created=""2006-05-06T23:06:32"" 
                                    xmlns=""http://www.blogml.com/2006/09/BlogML"" 
                                    xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
                                  <title type=""text""><![CDATA[Blog Title]]></title>
                                  <sub-title type=""text""><![CDATA[Blog Subtitle]]></sub-title>
                                  <authors>
                                    <author id=""2100"" 
                                        date-created=""2006-08-10T08:44:35"" 
                                        date-modified=""2006-09-04T13:46:38"" 
                                        approved=""true"" 
                                        email=""someone@blogml.com"">
                                      <title type=""text""><![CDATA[The Author]]></title>
                                    </author>
                                  </authors>
                                  <posts>
                                    <post id=""b0e03eec-ab81-4dc4-a69b-374d57cfad5e"" 
                                        date-created=""2006-01-07T03:31:32"" 
                                        date-modified=""2006-01-07T03:31:32"" 
                                        approved=""true"" 
                                        post-url=""http://example.com/whatever"">
                                      <title type=""text""><![CDATA[Post Title]]></title>
                                      <content type=""base64"">
                                        <![CDATA[Q29udGVudCBvZiB0aGUgcG9zdA==]]>
                                      </content>
                                      <authors>
                                        <author ref=""2100"" />
                                      </authors>
                                    </post>
                                  </posts>
                                </blog>".ToStream();
            var repository = new Mock<IBlogImportRepository>();
            BlogMLPost deserializedPost = null;
            repository.Setup(r => r.CreateBlogPost(It.IsAny<BlogMLBlog>(), It.IsAny<BlogMLPost>())).Callback<BlogMLBlog, BlogMLPost>((blog, post) => deserializedPost = post);
            var service = new BlogImportService(repository.Object);
            
            // act
            service.ImportBlog(stream);

            // assert
            Assert.IsNotNull(deserializedPost);
            Assert.AreEqual("Post Title", deserializedPost.Title);
            Assert.AreEqual(ContentTypes.Base64, deserializedPost.Content.ContentType);
            Assert.AreEqual("Content of the post", deserializedPost.Content.UncodedText);
            Assert.AreEqual(1, deserializedPost.Authors.Count);
        }

        [Test]
        public void CreateFileFromAttachment_WithEmbeddedAttachment_CreatesFile()
        {
            // arrange
            var data = new byte[] {1, 2, 3};
            var attachment = new BlogMLAttachment {Url = "http://old.example.com/images/my-mug.jpg", Embedded = true, Data = data};
            string attachmentDirectoryPath = Path.Combine(Environment.CurrentDirectory, "images");
            Directory.CreateDirectory(ImageDirectory);

            // act
            BlogImportService.CreateFileFromAttachment(attachment, 
                attachmentDirectoryPath, 
                "http://example.com/images/", 
                "Some Content");

            // assert
            Assert.IsTrue(File.Exists(Path.Combine(ImageDirectory, "my-mug.jpg")));
        }

        [Test]
        public void CreateFileFromAttachment_WithOutEmbeddedAttachment_RewritesPostContent()
        {
            // arrange
            var attachment = new BlogMLAttachment { Url = "http://old.example.com/images/my-mug.jpg", Embedded = false};
            string attachmentDirectoryPath = ImageDirectory;
            Directory.CreateDirectory(attachmentDirectoryPath);
            const string originalPostContent = @"<img src=""http://old.example.com/images/my-mug.jpg"" />";

            // act
            string postContent = BlogImportService.CreateFileFromAttachment(attachment, 
                attachmentDirectoryPath, 
                "http://example.com/images/", 
                originalPostContent);

            // assert
            Assert.AreEqual(@"<img src=""http://example.com/images/my-mug.jpg"" />", postContent);
        }

        [Test]
        public void Import_WithEmbeddedAttachments_CreatesFilesForAttachmentsAndRewritesBlogPost()
        {
            // arrange
            var data = new byte[] { 1, 2, 3 };
            var attachment = new BlogMLAttachment { Url = "http://old.example.com/images/my-mug.jpg", Embedded = true, Data = data };
            var post = new BlogMLPost { Content = new BlogMLContent { Text = @"<img src=""http://old.example.com/images/my-mug.jpg"" />" } };
            post.Attachments.Add(attachment);
            var blog = new BlogMLBlog();
            blog.Posts.Add(post);
            var repository = new Mock<IBlogImportRepository>();
            repository.Setup(r => r.GetAttachmentDirectoryPath()).Returns(ImageDirectory + "/wlw");
            repository.Setup(r => r.GetAttachmentDirectoryUrl()).Returns("http://example.com/images/wlw/");
            var service = new BlogImportService(repository.Object);
            
            // act
            service.Import(blog);

            // assert
            Assert.IsTrue(File.Exists(Path.Combine(ImageDirectory, @"wlw\my-mug.jpg")));
            Assert.AreEqual(@"<img src=""http://example.com/images/wlw/my-mug.jpg"" />", post.Content.UncodedText);
        }

        private static string ImageDirectory
        {
            get
            {
                return Path.Combine(Environment.CurrentDirectory, "images");
            }
        }

        [SetUp]
        public void Setup()
        {
            //Make sure no files are left over from last time.
            TearDown();
        }

        [TearDown]
        public void TearDown()
        {
            if(Directory.Exists(ImageDirectory))
            {
                try
                {
                    Directory.Delete(ImageDirectory, true);
                }
                catch(Exception)
                {
                    Console.WriteLine("Could not delete " + ImageDirectory);
                }
            }
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using BlogML;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMLExportMapperTests
    {
        [Test]
        public void ConvertBlog_WithSubtextBlog_ReturnsCorrespondingBlogMLBlog()
        {
            // arrange
            var blog = new Blog {Title = "Test Blog Title", SubTitle = "Test Blog Subtitle", Author = "Charles Dickens", Host = "example.com", ModerationEnabled = true};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var blogMLBlog = converter.ConvertBlog(blog);

            // assert
            Assert.AreEqual("Test Blog Title", blogMLBlog.Title);
            Assert.AreEqual("Test Blog Subtitle", blogMLBlog.SubTitle);
            Assert.AreEqual("http://example.com/", blogMLBlog.RootUrl);
            Assert.AreEqual("Charles Dickens", blogMLBlog.Authors[0].Title);
            Assert.AreEqual(BlogMLBlogExtendedProperties.CommentModeration, blogMLBlog.ExtendedProperties[0].Key);
            Assert.AreEqual("Enabled", blogMLBlog.ExtendedProperties[0].Value);
        }

        [Test]
        public void ConvertCategories_WithBlogCategories_ConvertsToBLogMLCategories()
        {
            // arrange
            var categories = new List<LinkCategory> {new LinkCategory(1, "Category Uno"), new LinkCategory(2, "Category Dos")};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var blogMLCategories = converter.ConvertCategories(categories);

            // assert
            Assert.AreEqual(2, blogMLCategories.Count());
            Assert.AreEqual("Category Uno", blogMLCategories.First().Title);
            Assert.AreEqual("Category Dos", blogMLCategories.ElementAt(1).Title);
        }

        [Test]
        public void ConvertEntry_WithEntry_ConvertsToBLogMLPosts()
        {
            // arrange
            var entry = new EntryStatsView{ Title = "Test Entry"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual("Test Entry", post.Title);
        }

        [Test]
        public void ConvertEntry_WithEntry_ContvertsBodyAndExcerptToBase64Encoding()
        {
            // arrange
            var entry = new EntryStatsView { Body = "<style><![CDATA[Test]]></style>", Description = "<style><![CDATA[excerpt]]></style>" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual("<style><![CDATA[Test]]></style>", post.Content.UncodedText);
            Assert.AreEqual(ContentTypes.Base64, post.Content.ContentType);
            Assert.AreEqual("<style><![CDATA[excerpt]]></style>", post.Excerpt.UncodedText);
            Assert.AreEqual(ContentTypes.Base64, post.Excerpt.ContentType);
        }

        [Test]
        public void ConvertEntry_WithInActiveEntry_SetsDateModifiedToDateModified()
        {
            // arrange
            DateTime dateModified = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateModifiedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var entry = new EntryStatsView { Title = "Test Entry", DateModified = dateModified, IsActive = false };
            var subtextContext = new Mock<ISubtextContext>();
            var blog = new Mock<Blog>();
            blog.Object.Host = "example.com";
            blog.Setup(b => b.TimeZone.ToUtc(dateModified)).Returns(dateModifiedUtc);
            subtextContext.Setup(c => c.Blog).Returns(blog.Object);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(dateModifiedUtc, post.DateModified);
        }

        [Test]
        public void ConvertEntry_WithActiveEntry_SetsDateModifiedToDateSyndicated()
        {
            // arrange
            DateTime dateSyndicated = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateSyndicatedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var entry = new EntryStatsView { Title = "Test Entry", DateSyndicated = dateSyndicated, IsActive = true};
            var subtextContext = new Mock<ISubtextContext>();
            var blog = new Mock<Blog>();
            blog.Object.Host = "example.com";
            blog.Setup(b => b.TimeZone.ToUtc(dateSyndicated)).Returns(dateSyndicatedUtc);
            subtextContext.Setup(c => c.Blog).Returns(blog.Object);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(dateSyndicatedUtc, post.DateModified);
        }

        [Test]
        public void ConvertEntry_WithActiveEntry_SetsDateCreatedToLocalDateTime()
        {
            // arrange
            DateTime dateCreated = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateCreatedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var entry = new EntryStatsView { Title = "Test Entry", DateCreated = dateCreated, IsActive = true };
            var subtextContext = new Mock<ISubtextContext>();
            var blog = new Mock<Blog>();
            blog.Object.Host = "example.com";
            blog.Setup(b => b.TimeZone.ToUtc(dateCreated)).Returns(dateCreatedUtc);
            subtextContext.Setup(c => c.Blog).Returns(blog.Object);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(dateCreatedUtc, post.DateCreated);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingNoDateSyndicated_DoesNotThrowNullReferenceException()
        {
            // arrange
            var entry = new EntryStatsView { Title = "Test Entry", DateCreated = DateTime.Now, IsActive = true };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>(), It.IsAny<Blog>())).Returns((VirtualPath)null);
            var blog = new Mock<Blog>();
            blog.Setup(b => b.TimeZone.ToUtc(It.IsAny<DateTime>())).Returns(DateTime.Now);
            blog.Object.Host = "example.com";
            subtextContext.Setup(c => c.Blog).Returns(blog.Object);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.IsNotNull(post);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingEntryName_ConvertsToBLogMLPostWithPostName()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "My-Cool-Post" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/My-Cool-Post");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual("My-Cool-Post", post.PostName);
        }

        [Test]
        public void ConvertEntry_WithEntry_ConvertsToBLogMLPostWithPostUrl()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "my-cool-post" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "foo.example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual("http://foo.example.com/my-cool-post.aspx", post.PostUrl);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingAuthor_ConvertsToBLogMLPostWithAuthorReference()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "my-cool-post" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Id=321, Host = "foo.example.com" });
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual("321", post.Authors[0].Ref);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingAttachments_IncludesAttachmentsWithoutEmbedding()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "my-cool-post", Body = @"<div><img src=""/my-dogs.jpg"" />" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Id = 321, Host = "foo.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(1, post.Attachments.Count);
            var attachment = post.Attachments[0];
            Assert.IsFalse(attachment.Embedded);
            Assert.AreEqual("/my-dogs.jpg", attachment.Url);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingFullyQualifiedImage_IgnoresImage()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "my-cool-post", Body = @"<div><img src=""http://example.com/my-dogs.jpg"" />" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Id = 321, Host = "foo.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(0, post.Attachments.Count);
        }

        [Test]
        public void ConvertEntry_WithEntryHavingAttachments_EmbedsAttachmentsWhenEmbedIsTrue()
        {
            // arrange
            var entry = new EntryStatsView { EntryName = "my-cool-post", Body = @"<div><img src=""/my-dogs.jpg"" />" };
            var subtextContext = new Mock<ISubtextContext>();
            string filePath = UnitTestHelper.UnpackEmbeddedBinaryResource("BlogMl.blank.gif", "blank.gif");
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Id = 321, Host = "foo.example.com" });
            subtextContext.Setup(c => c.HttpContext.Server.MapPath("/my-dogs.jpg")).Returns(filePath);
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, true /*embedAttachments*/);

            // assert
            Assert.AreEqual(1, post.Attachments.Count);
            var attachment = post.Attachments[0];
            Assert.IsTrue(attachment.Embedded);
            Assert.AreEqual("/my-dogs.jpg", attachment.Url);
            Assert.AreEqual("/my-dogs.jpg", attachment.Path);
            Assert.AreEqual("R0lGODlhAQABAID/AMDAwAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==", Convert.ToBase64String(attachment.Data));
        }

        [Test]
        public void ConvertEntry_WithEntryHavingCommentsAndTrackbacks_IncludesCommentsAndTrackbacks()
        {
            // arrange
            var entry = new EntryStatsView();
            entry.Comments.AddRange(new[] { new FeedbackItem(FeedbackType.Comment), new FeedbackItem(FeedbackType.Comment), new FeedbackItem(FeedbackType.PingTrack) });
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Id = 321, Host = "foo.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/my-cool-post.aspx");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var post = converter.ConvertEntry(entry, false /*embedAttachments*/);

            // assert
            Assert.AreEqual(2, post.Comments.Count);
            Assert.AreEqual(1, post.Trackbacks.Count);
        }

        [Test]
        public void ConvertComment_WithFeedBackItem_ConvertsToBlogMlComment()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment) {
                Id = 213,
                Body = "<p><![CDATA[First!]]></p>",
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog());
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertComment(feedback);

            // assert
            Assert.AreEqual("<p><![CDATA[First!]]></p>", comment.Content.UncodedText);
            Assert.AreEqual(ContentTypes.Base64, comment.Content.ContentType);

        }

        public void ConvertComment_WithFeedBackItem_ConvertsBodyToBase64EncodedText()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment)
            {
                Id = 213,
                Title = "Comment Title",
                Approved = true,
                Author = "Anonymous Troll",
                Email = "test@example.com",
                SourceUrl = new Uri("http://subtextproject.com/"),
                Body = "<p>First!</p>",
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog());
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertComment(feedback);

            // assert
            Assert.AreEqual("213", comment.ID);
            Assert.AreEqual("Comment Title", comment.Title);
            Assert.IsTrue(comment.Approved);
            Assert.AreEqual("Anonymous Troll", comment.UserName);
            Assert.AreEqual("test@example.com", comment.UserEMail);
            Assert.AreEqual("http://subtextproject.com/", comment.UserUrl);
            Assert.AreEqual("<p>First!</p>", comment.Content.Text);
        }

        [Test]
        public void ConvertComment_WithDateCreated_ConvertsToUtc()
        {
            // arrange
            DateTime dateCreated = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateCreatedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var feedback = new FeedbackItem(FeedbackType.Comment)
            {
                DateCreated = dateCreated,
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog.TimeZone.ToUtc(dateCreated)).Returns(dateCreatedUtc);
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertComment(feedback);

            // assert
            Assert.AreEqual(dateCreatedUtc, comment.DateCreated);
        }

        [Test]
        public void ConvertComment_WithDateModified_ConvertsToUtc()
        {
            // arrange
            DateTime dateModified = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateModifiedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var feedback = new FeedbackItem(FeedbackType.Comment)
            {
                DateModified = dateModified,
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog.TimeZone.ToUtc(dateModified)).Returns(dateModifiedUtc);
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertComment(feedback);

            // assert
            Assert.AreEqual(dateModifiedUtc, comment.DateModified);
        }

        [Test]
        public void ConvertComment_WithNullFeedBackItem_ThrowsArgumentNullException()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => converter.ConvertComment(null));
        }

        [Test]
        public void ConvertComment_WithFeedBackItemHavingNonCommentFeedbackType_ThrowsArgumentException()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.PingTrack);
            var subtextContext = new Mock<ISubtextContext>();
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => converter.ConvertComment(feedback));
        }

        [Test]
        public void ConvertTrackback_WithDateCreated_ConvertsDateCreatedToUtc()
        {
            // arrange
            DateTime dateCreated = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateCreatedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);

            var feedback = new FeedbackItem(FeedbackType.PingTrack)
            {
                Id = 213,
                Title = "Comment Title",
                Approved = true,
                Author = "Anonymous Troll",
                Email = "test@example.com",
                SourceUrl = new Uri("http://subtextproject.com/"),
                Body = "<p>First!</p>",
                DateCreated = dateCreated,
                DateModified = dateCreated
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog.TimeZone.ToUtc(dateCreated)).Returns(dateCreatedUtc);
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertTrackback(feedback);

            // assert
            Assert.AreEqual(dateCreatedUtc, comment.DateCreated);
        }

        [Test]
        public void ConvertTrackback_WithDateModified_ConvertsDateModifiedToUtc()
        {
            // arrange
            DateTime dateModified = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            DateTime dateModifiedUtc = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            
            var dateCreated = DateTime.Now.AddDays(-1);
            var feedback = new FeedbackItem(FeedbackType.PingTrack)
            {
                Id = 213,
                Title = "Comment Title",
                Approved = true,
                Author = "Anonymous Troll",
                Email = "test@example.com",
                SourceUrl = new Uri("http://subtextproject.com/"),
                Body = "<p>First!</p>",
                DateCreated = dateCreated,
                DateModified = dateModified
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog.TimeZone.ToUtc(dateModified)).Returns(dateModifiedUtc);
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertTrackback(feedback);

            // assert
            Assert.AreEqual(dateModifiedUtc, comment.DateModified);
        }

        [Test]
        public void ConvertTrackback_WithFeedBackItem_ConvertsToBlogMlComment()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.PingTrack)
            {
                Id = 213,
                Title = "Comment Title",
                Approved = true,
                Author = "Anonymous Troll",
                Email = "test@example.com",
                SourceUrl = new Uri("http://subtextproject.com/"),
                Body = "<p>First!</p>",
            };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog());
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var comment = converter.ConvertTrackback(feedback);

            // assert
            Assert.AreEqual("213", comment.ID);
            Assert.AreEqual("Comment Title", comment.Title);
            Assert.IsTrue(comment.Approved);
            Assert.AreEqual("http://subtextproject.com/", comment.Url);
        }

        [Test]
        public void ConvertTrackback_WithNullFeedBackItem_ThrowsArgumentNullException()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => converter.ConvertTrackback(null));
        }

        [Test]
        public void ConvertTrackback_WithFeedBackItemHavingNonTrackbackFeedbackType_ThrowsArgumentException()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment);
            var subtextContext = new Mock<ISubtextContext>();
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => converter.ConvertTrackback(feedback));
        }

        [Test]
        public void GetPostAttachments_WithFullyQualifiedImageSrcWithHostSameAsBlog_ReturnsAttachment()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "test.example.com"});
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var attachments = converter.GetPostAttachments(@"<em>Test <img src=""http://test.example.com/images/foo.jpg"" /></em>", false);

            // assert
            Assert.AreEqual(1, attachments.Count());
            Assert.AreEqual("/images/foo.jpg", attachments.First().Path);
            Assert.AreEqual("http://test.example.com/images/foo.jpg", attachments.First().Url);
        }

        [Test]
        public void GetPostAttachments_WithBlogInVirtualAppFullyQualifiedImageSrcWithHostSameAsBlog_ReturnsAttachment()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "test.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/Subtext.Web/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var attachments = converter.GetPostAttachments(@"<em>Test <img src=""http://test.example.com/subtext.web/images/foo.jpg"" /></em>", false);

            // assert
            Assert.AreEqual(1, attachments.Count());
            Assert.AreEqual("/subtext.web/images/foo.jpg", attachments.First().Path);
            Assert.AreEqual("http://test.example.com/subtext.web/images/foo.jpg", attachments.First().Url);
        }

        [Test]
        public void GetPostAttachments_WithImageSrcAsVirtualPath_ReturnsAttachment()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "test.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var attachments = converter.GetPostAttachments(@"<em>Test <img src=""/images/foo.jpg"" /></em>", false);

            // assert
            Assert.AreEqual(1, attachments.Count());
            Assert.AreEqual("/images/foo.jpg", attachments.First().Path);
            Assert.AreEqual("/images/foo.jpg", attachments.First().Url);
        }

        [Test]
        public void GetPostAttachments_WithBlogInVirtualApplicaitonImageSrcAsVirtualPath_ReturnsAttachment()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "test.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/Subtext.Web/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var attachments = converter.GetPostAttachments(@"<em>Test <img src=""/Subtext.Web/images/foo.jpg"" /></em>", false);

            // assert
            Assert.AreEqual(1, attachments.Count());
            Assert.AreEqual("/subtext.web/images/foo.jpg", attachments.First().Path);
            Assert.AreEqual("/Subtext.Web/images/foo.jpg", attachments.First().Url);
        }

        [Test]
        public void GetPostAttachments_WithImageSrcAsRelativePath_ReturnsAttachment()
        {
            // arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "test.example.com" });
            subtextContext.Setup(c => c.UrlHelper.AppRoot()).Returns("/");
            var converter = new BlogMLExportMapper(subtextContext.Object);

            // act
            var attachments = converter.GetPostAttachments(@"<em>Test <img src=""foo.jpg"" /></em>", false);

            // assert
            Assert.AreEqual(1, attachments.Count());
            Assert.AreEqual("foo.jpg", attachments.First().Path);
            Assert.AreEqual("foo.jpg", attachments.First().Url);
        }
    }
}ï»¿using System;
using System.Globalization;
using System.Linq;
using BlogML.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Components;
using Subtext.ImportExport;
using Subtext.Extensibility;
using Subtext.Framework;
using BlogML;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMLImportMapperTests
    {
        [Test]
        public void ConvertBlogPost_WithSyndicatedDate_ConvertsDateToBlogTimezone()
        {
            // arrange
            DateTime utcNow = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var post = new BlogMLPost { Approved = true, DateModified = utcNow };
            var blog = new Mock<Blog>();
            DateTime expected = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            blog.Setup(b => b.TimeZone.FromUtc(utcNow)).Returns(expected);
                var mapper = new BlogMLImportMapper();

            // act
            var entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), blog.Object);

            // assert
            Assert.AreEqual(expected, entry.DateSyndicated);
        }

        [Test]
        public void ConvertBlogPost_WithApprovedPost_SetsAppropriatePublishPropertiesOfEntry()
        {
            // arrange
            var post = new BlogMLPost {Approved = true};
            var mapper = new BlogMLImportMapper();

            // act
            var entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.IsTrue(entry.IsActive);
            Assert.IsTrue(entry.DisplayOnHomePage);
            Assert.IsTrue(entry.IncludeInMainSyndication);
            Assert.IsTrue(entry.IsAggregated);
        }

        [Test]
        public void ConvertBlogPost_WithAuthorMatchingBlogAuthor_SetsAuthorNameAndEmail()
        {
            // arrange
            var blog = new BlogMLBlog();
            blog.Authors.Add(new BlogMLAuthor { ID = "111", Title = "Not-Haacked", Email = "spam-me@example.com"});
            blog.Authors.Add(new BlogMLAuthor { ID = "222", Title = "Haacked", Email = "noneofyourbusiness@example.com"});
            var post = new BlogMLPost();
            post.Authors.Add("222");
            var mapper = new BlogMLImportMapper();
            
            // act
            var entry = mapper.ConvertBlogPost(post, blog, null);

            // assert
            Assert.AreEqual("Haacked", entry.Author);
            Assert.AreEqual("noneofyourbusiness@example.com", entry.Email);
        }

        // Subtext only supports one author per post.
        [Test]
        public void ConvertBlogPost_WithPostHavingTwoAuthors_SetsAuthorAndEmailToFirstAuthor()
        {
            // arrange
            var blog = new BlogMLBlog();
            blog.Authors.Add(new BlogMLAuthor { ID = "111", Title = "Not-Haacked", Email = "spam-me@example.com" });
            blog.Authors.Add(new BlogMLAuthor { ID = "222", Title = "Haacked", Email = "noneofyourbusiness@example.com" });
            var post = new BlogMLPost();
            post.Authors.Add("111");
            post.Authors.Add("222");
            var mapper = new BlogMLImportMapper();

            // act
            var entry = mapper.ConvertBlogPost(post, blog, null);

            // assert
            Assert.AreEqual("Not-Haacked", entry.Author);
            Assert.AreEqual("spam-me@example.com", entry.Email);
        }

        [Test]
        public void ConvertBlogPost_WithPostHavingTwoCategories_AddsBothCategoriesToEntry()
        {
            // arrange
            var blog = new BlogMLBlog();
            blog.Categories.Add(new BlogMLCategory{ID="abc", Title = "Category A"});
            blog.Categories.Add(new BlogMLCategory { ID = "def", Title = "Category B" });
            blog.Categories.Add(new BlogMLCategory { ID = "#@!", Title = "Category C" });
            var post = new BlogMLPost();
            post.Categories.Add("abc");
            post.Categories.Add("#@!");
            var mapper = new BlogMLImportMapper();

            // act
            var entry = mapper.ConvertBlogPost(post, blog, null);

            // assert
            Assert.AreEqual(2, entry.Categories.Count);
            Assert.AreEqual("Category A", entry.Categories.First());
            Assert.AreEqual("Category C", entry.Categories.Last());
        }

        [Test]
        public void ConvertBlogPost_WithTitleTooLong_TruncatesTitleToMaxLength()
        {
            // arrange
            var title = new string('a', 256);
            var post = new BlogMLPost { Title = title };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual(255, entry.Title.Length);
        }

        [Test]
        public void ConvertBlogPost_WithAuthorTitleTooLong_TruncatesTitleToMaxLength()
        {
            // arrange
            var title = new string('a', 51);
            var blog = new BlogMLBlog();
            blog.Authors.Add(new BlogMLAuthor{ID = "123", Title = title});
            var post = new BlogMLPost();
            post.Authors.Add("123");
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, blog, null);

            // assert
            Assert.AreEqual(50, entry.Author.Length);
        }

        [Test]
        public void ConvertBlogPost_WithNullPostNameButWithPostUrlContainingBlogSpotDotCom_UsesLastSegmentAsEntryName()
        {
            // arrange
            var post = new BlogMLPost { PostUrl = "http://example.blogspot.com/2003/07/the-last-segment.html" };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("the-last-segment", entry.EntryName);
        }

        [Test]
        public void ConvertBlogPost_WithNullTitleNameButWithPostUrlContainingBlogSpotDotCom_UsesLastSegmentAsTitle()
        {
            // arrange
            var post = new BlogMLPost {PostUrl = "http://example.blogspot.com/2003/07/the-last-segment.html"};
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("the last segment", entry.Title);
        }

        [Test]
        public void ConvertBlogPost_WithPostHavingBase64EncodedContent_DecodesContent()
        {
            // arrange
            var post = new BlogMLPost { Content = BlogMLContent.Create("This is a story about a 3 hour voyage", ContentTypes.Base64) };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("This is a story about a 3 hour voyage", entry.Body);
        }

        [Test]
        public void ConvertBlogPost_WithPostHavingBase64EncodedExcerpt_DecodesContent()
        {
            // arrange
            var post = new BlogMLPost { HasExcerpt = true, Excerpt = BlogMLContent.Create("This is a story about a 3 hour voyage", ContentTypes.Base64) };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("This is a story about a 3 hour voyage", entry.Description);
        }

        [Test]
        public void ConvertBlogPost_WithPostHavingExcerpt_SetsEntryDescription()
        {
            // arrange
            var post = new BlogMLPost{ HasExcerpt = true, Excerpt = new BlogMLContent {Text = "This is a story about a 3 hour voyage"}};
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("This is a story about a 3 hour voyage", entry.Description);
        }

        [Test]
        public void ConvertBlogPost_WithPostHavingNoTitleAndNoPostName_UsesPostId()
        {
            // arrange
            var post = new BlogMLPost { Title = null, PostName = null, ID = "87618298" };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("Post #87618298", entry.Title);
        }

        [Test]
        public void GetTitleFromEntry_WithPostHavingNoTitle_CreatesUsesPostNameIfAvailable()
        {
            // arrange
            var post = new BlogMLPost { Title = null, PostName = "Hello World" };
            var mapper = new BlogMLImportMapper();

            // act
            Entry entry = mapper.ConvertBlogPost(post, new BlogMLBlog(), null);

            // assert
            Assert.AreEqual("Hello World", entry.Title);
        }

        [Test]
        public void ConvertCategory_WithTitleTooLong_TruncatesTitleToMaxLength()
        {
            // arrange
            var title = new string('a', 151);
            var category = new BlogMLCategory { Title = title };
            var mapper = new BlogMLImportMapper();

            // act
            LinkCategory linkCategory = mapper.ConvertCategory(category);

            // assert
            Assert.AreEqual(150, linkCategory.Title.Length);
        }

        [Test]
        public void ConvertComment_ReturnsFeedbackItemAsComment()
        {
            // arrange
            var comment = new BlogMLComment { UserUrl = "not-valid-url" };
            var mapper = new BlogMLImportMapper();

            // act
            var convertComment = mapper.ConvertComment(comment, "123");

            // assert
            Assert.AreEqual(FeedbackType.Comment, convertComment.FeedbackType);
        }

        [Test]
        public void ConvertComment_WithUnapprovedComment_SetsFeedbackToTrash()
        {
            // arrange
            var comment = new BlogMLComment { UserUrl = "not-valid-url", Approved = false};
            var mapper = new BlogMLImportMapper();

            // act
            var convertComment = mapper.ConvertComment(comment, "123");

            // assert
            Assert.IsFalse(convertComment.Approved);
            Assert.AreEqual(FeedbackStatusFlag.NeedsModeration, convertComment.Status);
        }

        [Test]
        public void ConvertComment_WithInvalidUserUrl_IgnoresUrl()
        {
            // arrange
            var comment = new BlogMLComment { UserUrl= "not-valid-url" };
            var mapper = new BlogMLImportMapper();

            // act
            var convertComment = mapper.ConvertComment(comment, "123");

            // assert
            Assert.AreEqual(null, convertComment.SourceUrl);
        }

        [Test]
        public void ConvertTrackback_ReturnsFeedbackItemAsPingTrack()
        {
            // arrange
            var trackback = new BlogMLTrackback();
            var mapper = new BlogMLImportMapper();

            // act
            var convertedTrackback = mapper.ConvertTrackback(trackback, "123");

            // assert
            Assert.AreEqual(FeedbackType.PingTrack, convertedTrackback.FeedbackType);
        }

        [Test]
        public void ConvertTrackback_WithInvalidSourceUrl_IgnoresUrl()
        {
            // arrange
            var trackback = new BlogMLTrackback {Url = "not-valid-url"};
            var mapper = new BlogMLImportMapper();

            // act
            var convertedTrackback = mapper.ConvertTrackback(trackback, "123");

            // assert
            Assert.AreEqual(null, convertedTrackback.SourceUrl);
        }

        [Test]
        public void ConvertTrackback_WithValidSourceUrl_SetsUrlAndAuthorUsingHostname()
        {
            // arrange
            var trackback = new BlogMLTrackback { Url = "http://example.com/valid-url" };
            var mapper = new BlogMLImportMapper();

            // act
            var convertedTrackback = mapper.ConvertTrackback(trackback, "123");

            // assert
            Assert.AreEqual(new Uri("http://example.com/valid-url"), convertedTrackback.SourceUrl);
            Assert.AreEqual("example.com", convertedTrackback.Author);
        }
    }
}
ï»¿using System;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMLImportSetupTests
    {
        [Test]
        public void Ctor_WithBlogHavingDuplicateCommentsDisabled_EnablesDuplicateComments()
        {
            // arrange
            var blog = new Blog {DuplicateCommentsEnabled = false};
            var repository = new Mock<ObjectProvider>();
            bool updateCalled = false;
            repository.Setup(r => r.UpdateBlog(blog)).Callback(() => updateCalled = true);

            // act
            new BlogImportSetup(blog, repository.Object);

            // assert
            Assert.IsTrue(blog.DuplicateCommentsEnabled);
            Assert.IsTrue(updateCalled);
        }

        [Test]
        public void Ctor_WithBlogHavingDuplicateCommentsEnabled_DoesNotChangeBlog()
        {
            // arrange
            var blog = new Blog { DuplicateCommentsEnabled = true };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.UpdateBlog(blog)).Throws(new InvalidOperationException());

            // act
            new BlogImportSetup(blog, repository.Object);

            // assert
            Assert.IsTrue(blog.DuplicateCommentsEnabled);
        }

        [Test]
        public void Dispose_WithBlogHavingDuplicateCommentsEnabled_DoesNotChangeBlog()
        {
            // arrange
            var blog = new Blog { DuplicateCommentsEnabled = true };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.UpdateBlog(blog)).Throws(new InvalidOperationException());
            var scope = new BlogImportSetup(blog, repository.Object);

            // act
            scope.Dispose();

            // assert
            Assert.IsTrue(blog.DuplicateCommentsEnabled);
        }


        [Test]
        public void Dispose_WithBlogHavingDuplicateCommentsDisabled_DisablesDuplicateCommentsAgain()
        {
            // arrange
            var blog = new Blog { DuplicateCommentsEnabled = false };
            var repository = new Mock<ObjectProvider>();
            bool updateCalled = false;
            var scope = new BlogImportSetup(blog, repository.Object);
            repository.Setup(r => r.UpdateBlog(blog)).Callback(() => updateCalled = true);

            // act
            scope.Dispose();

            // assert
            Assert.IsFalse(blog.DuplicateCommentsEnabled);
            Assert.IsTrue(updateCalled);
        }
    }
}
ï»¿using System.Collections.Generic;
using System.Linq;
using BlogML.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMLSourceTests
    {
        [Test]
        public void GetBlog_WithBlogInSubtextContext_ConvertsBlogToBlogML()
        {
            // arrange
            var blog = new Blog {Title = "Test Blog Title"};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Repository.GetCategories(CategoryType.PostCollection, false)).Returns(new List<LinkCategory>());
            context.Setup(c => c.Blog).Returns(blog);
            var converter = new Mock<IBlogMLExportMapper>();
            converter.Setup(c => c.ConvertBlog(blog)).Returns(new BlogMLBlog {Title = "Converted"});
            var source = new BlogMLSource(context.Object, converter.Object);

            // act
            var blogMLBlog = source.GetBlog();

            // assert
            Assert.AreEqual("Converted", blogMLBlog.Title);
        }

        [Test]
        public void GetBlog_WithBlogHavingCategories_GetsCategoriesFromSource()
        {
            // arrange
            var categories = new List<LinkCategory> {new LinkCategory(1, "Any Title")};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog());
            context.Setup(c => c.Repository.GetCategories(CategoryType.PostCollection, false /*activeOnly*/)).Returns(categories);
            var blogMLCategories = new List<BlogMLCategory> {new BlogMLCategory {Title = "The First Category"}};
            var converter = new Mock<IBlogMLExportMapper>();
            converter.Setup(c => c.ConvertBlog(It.IsAny<Blog>())).Returns(new BlogMLBlog {Title = "Whatever"});
            converter.Setup(c => c.ConvertCategories(categories)).Returns(blogMLCategories);
            var source = new BlogMLSource(context.Object, converter.Object);

            // act
            var blogMLBlog = source.GetBlog();

            // assert
            Assert.AreEqual("The First Category", blogMLBlog.Categories[0].Title);
        }

        [Test]
        public void GetBlogPosts_WithBlogHavingPosts_ReturnsAllPosts()
        {
            // arrange
            var blog = new Blog
            {Title = "Irrelevant Title", SubTitle = "Test Blog Subtitle", Author = "Charles Dickens", Host = "example.com", ModerationEnabled = true};
            var posts = new PagedCollection<EntryStatsView> {new EntryStatsView { Title = "Test Post Title"}};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog);
            context.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            context.Setup(c => c.Repository.GetEntriesForExport(It.IsAny<int>() /*pageIndex*/, 100 /*pageSize*/)).Returns(posts);
            var converter = new Mock<IBlogMLExportMapper>();
            converter.Setup(c => c.ConvertEntry(It.IsAny<EntryStatsView>(), false /*embedAttachments*/)).Returns(new BlogMLPost { Title = "Test Post Title" });
            var source = new BlogMLSource(context.Object, converter.Object);

            // act
            var blogMLPosts = source.GetBlogPosts(false /*embedAttachments*/);

            // assert
            Assert.AreEqual("Test Post Title", blogMLPosts.ToList().First().Title);
        }

        [Test]
        public void GetBlogPosts_WithBlogPostHavingCategories_ReturnsPostsWithCategories()
        {
            // arrange
            var categories = new List<LinkCategory> { new LinkCategory(1, "Category Title"), new LinkCategory(2, "Some Other Category Title") };
            var blog = new Blog { Title = "Irrelevant Title", SubTitle = "Test Blog Subtitle", Author = "Charles Dickens", Host = "example.com", ModerationEnabled = true };
            var entry = new EntryStatsView {Title = "Test Post Title"};
            entry.Categories.Add("Some Other Category Title");
            var posts = new PagedCollection<EntryStatsView> { entry };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog);
            context.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            context.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<IEntryIdentity>())).Returns("/irrelevant");
            context.Setup(c => c.Repository.GetCategories(CategoryType.PostCollection, false /*activeOnly*/)).Returns(categories);
            context.Setup(c => c.Repository.GetEntriesForExport(It.IsAny<int>() /*pageIndex*/, 100 /*pageSize*/)).Returns(posts);
            var converter = new BlogMLExportMapper(context.Object);
            var source = new BlogMLSource(context.Object, converter);

            // act
            var blogMLPosts = source.GetBlogPosts(false /*embedAttachments*/);

            // assert
            Assert.AreEqual("2", blogMLPosts.First().Categories[0].Ref);
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using BlogML;
using BlogML.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.ImportExport;

namespace UnitTests.Subtext.BlogMl
{
    [TestFixture]
    public class BlogMLWriterTests
    {
        [Test]
        public void Write_WithSourceReturningBlog_WritesBlogInfoToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter);
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            source.Setup(s => s.GetBlog()).Returns(new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime});
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<title type=""text""><![CDATA[Subtext Blog]]></title>");
            Assert.Contains(output, @"<sub-title type=""text""><![CDATA[A test blog]]></sub-title>");
            Assert.Contains(output, @"root-url=""http://subtextproject.com/""");
            Assert.Contains(output, @"date-created=""2009-01-23T08:00:00""");
        }

        [Test]
        public void Write_WithSourceReturningBlogWithNullSubtitle_RendersEmptyStringForUrl()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter);
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            source.Setup(s => s.GetBlog()).Returns(new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://example.com/", SubTitle = null, DateCreated = dateTime });
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<sub-title type=""text""><![CDATA[]]></sub-title>");
        }

        [Test]
        public void Write_WithSourceReturningAuthors_WritesAuthorsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog {Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime};
            blog.Authors.Add(new BlogMLAuthor{ ID = "112", Title = "Phineas", Email = "phineas@example.com", Approved = true});
            source.Setup(s => s.GetBlog()).Returns(blog);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<author id=""112""");
            Assert.Contains(output, @"email=""phineas@example.com""");
            Assert.Contains(output, @"approved=""true""");
            Assert.Contains(output, @"<title type=""text""><![CDATA[Phineas]]></title>");
        }

        [Test]
        public void Write_WithBlogContainingExtendedProperties_WritesPropertiesToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            blog.ExtendedProperties.Add(new Pair<string, string>("Color", "Blue"));
            source.Setup(s => s.GetBlog()).Returns(blog);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<property name=""Color"" value=""Blue"" />");
        }

        [Test]
        public void Write_WithBlogContainingCategories_WritesCategoriesToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            blog.Categories.Add(new BlogMLCategory { ID = "221", Title = "Test Category"});
            source.Setup(s => s.GetBlog()).Returns(blog);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<category id=""221""");
            Assert.Contains(output, @"<title type=""text""><![CDATA[Test Category]]></title>");
        }

        [Test]
        public void Write_WithBlogContainingPosts_WritesPostsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var posts = new List<BlogMLPost> {new BlogMLPost {Title = "This is a blog post"}};
            posts[0].Content.Text = "<p>Test</p>";
            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, "<posts>");
            Assert.Contains(output, "</posts>");
            Assert.Contains(output, @"<title type=""text""><![CDATA[This is a blog post]]></title>");
            Assert.Contains(output, @"<content type=""text""><![CDATA[<p>Test</p>]]></content>");
        }

        [Test]
        public void Write_WithBlogContainingBase64EncodedPosts_WritesPostsToWriterAsBase64Encoded()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) { Formatting = Formatting.Indented };
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Content = BlogMLContent.Create("<p>This is a Test</p>", ContentTypes.Base64) };
            var posts = new List<BlogMLPost> { post };
            blog.Posts.Add(post);
            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Console.WriteLine(Convert.ToBase64String(Encoding.UTF8.GetBytes("<p>This is a Test</p>")));
            Assert.Contains(output, @"<content type=""base64""><![CDATA[PHA+VGhpcyBpcyBhIFRlc3Q8L3A+]]></content>");
        }

        [Test]
        public void Write_WithBlogContainingPostsWithCategories_WritesPostCategoriesToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            blog.Categories.Add(new BlogMLCategory { ID = "221", Title = "Test Category" });
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost {Title = "This is a blog post"};
            var posts = new List<BlogMLPost> { post };
            post.Categories.Add("221");
            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<categories>");
            Assert.Contains(output, @"<category ref=""221"" />");
            Assert.Contains(output, @"</categories>");
        }

        [Test]
        public void Write_WithBlogContainingPostsWithComments_WritesPostCommentsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Title = "This is a blog post" };
            var posts = new List<BlogMLPost> { post };
            var comment = new BlogMLComment {Title = "Test Comment Title", Content = {Text = "<p>Comment Body</p>"}};
            post.Comments.Add(comment);
            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<title type=""text""><![CDATA[Test Comment Title]]></title>");
            Assert.Contains(output, @"<content type=""text""><![CDATA[<p>Comment Body</p>]]></content>");
        }

        [Test]
        public void Write_WithBlogContainingTrackbacksWithComments_WritesPostTrackbacksToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Title = "This is a blog post" };
            post.Trackbacks.Add(new BlogMLTrackback { Title = "Post Test Trackback", Url = "http://example.com/trackback-source"});
            var posts = new List<BlogMLPost> { post };

            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<title type=""text""><![CDATA[Post Test Trackback]]></title>");
            Assert.Contains(output, @"url=""http://example.com/trackback-source""");
        }

        [Test]
        public void Write_WithBlogContainingEmbeddedAttachmentsWithComments_WritesPostAttachmentsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Title = "This is a blog post" };
            var attachment = new BlogMLAttachment
            {
                Data = new byte[] {1, 2, 3, 4, 5},
                Path = @"c:\\path-to-attachment.jpg",
                Url = "/foo/path-to-attachment.jpg",
                Embedded = true,
                MimeType = "img/jpeg"
            };
            post.Attachments.Add(attachment);
            var posts = new List<BlogMLPost> { post };

            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"external-uri=""c:\\path-to-attachment.jpg""");
            Assert.Contains(output, @"url=""/foo/path-to-attachment.jpg""");
            Assert.Contains(output, @"mime-type=""img/jpeg""");
            Assert.Contains(output, @"embedded=""true""");
            Assert.Contains(output, @"AQIDBAU=</attachment>");
        }

        [Test]
        public void Write_WithBlogContainingNonEmbeddedAttachmentsWithComments_WritesPostAttachmentsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Title = "This is a blog post" };
            var attachment = new BlogMLAttachment
            {
                Path = @"c:\\path-to-attachment.jpg",
                Url = "/foo/path-to-attachment.jpg",
                Embedded = false,
                MimeType = "img/jpeg"
            };
            post.Attachments.Add(attachment);
            var posts = new List<BlogMLPost> { post };

            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<attachment url=""/foo/path-to-attachment.jpg"" mime-type=""img/jpeg"" external-uri=""c:\\path-to-attachment.jpg"" embedded=""false"" />");
        }

        [Test]
        public void Write_WithBlogContainingMultipleAuthors_WritesPostAuthorsToWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var xmlWriter = new XmlTextWriter(stringWriter) {Formatting = Formatting.Indented};
            var source = new Mock<IBlogMLSource>();
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var blog = new BlogMLBlog { Title = "Subtext Blog", RootUrl = "http://subtextproject.com/", SubTitle = "A test blog", DateCreated = dateTime };
            blog.Authors.Add(new BlogMLAuthor { ID = "10"});
            blog.Authors.Add(new BlogMLAuthor { ID = "20" });
            source.Setup(s => s.GetBlog()).Returns(blog);
            var post = new BlogMLPost { Title = "This is a blog post" };
            post.Authors.Add(new BlogMLAuthorReference { Ref = "20" });
            var posts = new List<BlogMLPost> { post };

            source.Setup(s => s.GetBlogPosts(false /*embedAttachments*/)).Returns(posts);
            var writer = new BlogMLWriter(source.Object, false /*embedAttachments*/);

            // act
            ((IBlogMLWriter)writer).Write(xmlWriter);

            // assert
            string output = stringWriter.ToString();
            Assert.Contains(output, @"<author ref=""20"" />");
        }
    }
}
using System;
using System.IO;
using System.Security.Principal;
using Microsoft.SqlServer.Management.Smo;
using Subtext.Framework;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Scripting;

namespace UnitTests.Subtext
{
    public static class DatabaseHelper
    {
        public static void CreateAndInstallDatabase(ConnectionString connectionString, string databaseName,
                                                    string directory)
        {
            DeleteDatabase(connectionString.Server, databaseName, directory);
            CreateDatabase(connectionString.Server, databaseName, directory);

            var installer = new SqlInstaller(connectionString);
            installer.Install(VersionInfo.CurrentAssemblyVersion);
        }

        public static void CreateDatabase(string serverName, string databaseName, string directory)
        {
            if(!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            Server server = null;
            try
            {
                server = new Server(serverName);

                Database db = CreateDb(server, databaseName, directory);

                WindowsIdentity currentIdentity = WindowsIdentity.GetCurrent();

                CreateSqlUsersGroup(server, db);
                CreateSqlLoginForCurrentUser(server, db, currentIdentity);
                CreateSqlUserForCurrentUser(db, currentIdentity);

                server.Logins[currentIdentity.Name].AddToRole("sysadmin");
            }
            finally
            {
                if(server != null)
                {
                    server.ConnectionContext.SqlConnectionObject.Close();
                }
            }
        }

        public static void InstallDatabase(string connectionString)
        {
            var installer = new SqlInstaller(connectionString);
            installer.Install(VersionInfo.CurrentAssemblyVersion);
        }

        public static void DeleteDatabase(string serverName, string databaseName, string directory)
        {
            DetachDatabase(serverName, databaseName);

            DeleteDatabaseFiles(databaseName, directory);
        }

        public static void DeleteDatabaseFiles(string databaseName, string directory)
        {
            Console.WriteLine(@"Attempting to delete database files '{0} and {1}", databaseName + ".mdf",
                              databaseName + ".ldf");
            DeleteFile(Path.Combine(Path.GetFullPath(directory), databaseName + ".mdf"));
            DeleteFile(Path.Combine(Path.GetFullPath(directory), databaseName + ".ldf"));
        }

        private static void DeleteFile(string path)
        {
            try
            {
                if(File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            catch(Exception e)
            {
                Console.WriteLine("Could not delete database file '{0}'", path);
                Console.WriteLine(e);
            }
        }

        private static void CreateSqlUserForCurrentUser(Database db, IIdentity currentIdentity)
        {
            User user = FindUserByLogin(db, currentIdentity.Name);
            if(user == null)
            {
                try
                {
                    Console.WriteLine("CREATING USER");
                    CreateUser(db, currentIdentity.Name, currentIdentity.Name);
                }
                catch(Exception e)
                {
                    Console.WriteLine(e);
                    Console.WriteLine("Could not create sql user for current identity.");
                }
            }
        }

        private static void CreateSqlLoginForCurrentUser(Server server, NamedSmoObject db, IIdentity identity)
        {
            try
            {
                if(!server.Logins.Contains(identity.Name))
                {
                    CreateLogin(server, db, identity.Name);
                }
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine("Could not create login for current user.");
            }
        }

        private static void CreateSqlUsersGroup(Server server, Database db)
        {
            try
            {
                if(!server.Logins.Contains(@"BUILTIN\Users"))
                {
                    try
                    {
                        CreateLogin(server, db, @"BUILTIN\Users");
                    }
                    catch(FailedOperationException e)
                    {
                        Console.WriteLine(e);
                        Console.WriteLine("Trying to continue...");
                    }
                }

                if(!db.Users.Contains("Users"))
                {
                    CreateUser(db, @"BUILTIN\Users", "Users");
                }
                db.Roles["db_owner"].AddMember("Users");
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine("Could not create 'Users' group. Continuing...");
            }
        }

        private static Database CreateDb(Server server, string databaseName, string directory)
        {
            var db = new Database(server, databaseName);

            db.DatabaseOptions.AutoClose = true;
            db.DatabaseOptions.AutoShrink = true;
            db.DatabaseOptions.UserAccess = DatabaseUserAccess.Multiple;

            var fileGroup = new FileGroup(db, "PRIMARY");
            db.FileGroups.Add(fileGroup);
            var dataFile = new DataFile(fileGroup, databaseName + "_Data");
            fileGroup.Files.Add(dataFile);
            dataFile.FileName = Path.Combine(Path.GetFullPath(directory), databaseName + ".mdf");
            dataFile.Size = 5.0 * 1024.0;
            dataFile.Growth = 10.0;
            dataFile.GrowthType = FileGrowthType.Percent;

            var logFile = new LogFile(db, databaseName + "_Log");
            db.LogFiles.Add(logFile);
            logFile.FileName = Path.Combine(Path.GetFullPath(directory), databaseName + ".ldf");
            logFile.Size = 2.5 * 1024.0;
            logFile.GrowthType = FileGrowthType.Percent;
            logFile.Growth = 10.0;

            db.Create(false);
            return db;
        }

        private static User FindUserByLogin(Database db, string login)
        {
            foreach(User user in db.Users)
            {
                if(user.Login == login)
                {
                    return user;
                }
            }
            return null;
        }

        private static void CreateLogin(Server server, NamedSmoObject db, string loginName)
        {
            var login = new Login(server, loginName) {DefaultDatabase = db.Name, LoginType = LoginType.WindowsUser};
            login.AddToRole("sysadmin");
            login.Create();
        }

        private static void CreateUser(Database db, string login, string userName)
        {
            var user = new User(db, userName) {Login = login};
            user.Create();
        }

        private static void DetachDatabase(string serverName, string databaseName)
        {
            Console.WriteLine(@"Attempting to detach database '{0}\{1}", serverName, databaseName);
            // Initialise server object.
            var server = new Server(serverName);

            // Check if database is current attached to sqlexpress.
            if(!server.Databases.Contains(databaseName))
            {
                Console.WriteLine("Server does not contain db '{0}'", databaseName);
                return;
            }
            Database db = server.Databases[databaseName];

            try
            {
                DataFile dataFile = db.FileGroups[0].Files[0];
                if(!File.Exists(dataFile.FileName))
                {
                    Console.WriteLine("'{0}' does not exist. Attempting to detach without altering db..",
                                      dataFile.FileName);
                }
                db.DatabaseOptions.UserAccess = DatabaseUserAccess.Single;
            }
            catch(Exception e)
            {
                Console.WriteLine("Execution failure exception. Continuing.");
                Console.WriteLine(e);
            }

            try
            {
                server.KillAllProcesses(db.Name);
            }
            catch(Exception e)
            {
                Console.WriteLine("Could not kill all processes");
                Console.WriteLine(e);
            }

            Console.WriteLine("Altering database '{0}'", db.Name);
            try
            {
                db.Alter(TerminationClause.FailOnOpenTransactions);
            }
            catch(Exception e)
            {
                Console.WriteLine("Could not alter the database.");
                Console.WriteLine(e);
            }

            try
            {
                Console.WriteLine("Detaching existing database before restore ...");
                server.DetachDatabase(db.Name, false);
            }
            catch(Exception e)
            {
                Console.WriteLine("Detach failed, let's continue anyways.");
                Console.WriteLine(e);
            }
        }
    }
}using System.Collections.Specialized;
using MbUnit.Framework;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Email;

namespace UnitTests.Subtext.Extensibility
{
    /// <summary>
    /// Summary description for ProviderInstantiationTests.
    /// </summary>
    [TypeFixture(typeof(EmailProvider))]
    [ProviderFactory(typeof(EmailProviderFactory), typeof(EmailProvider))]
    public class EmailProviderInstantiationTests
    {
        [Test]
        public void Initialize_WithNullPort_UsesDefaultPort(EmailProvider provider)
        {
            // arrange
            var configValue = new NameValueCollection();
            configValue["port"] = null;
            
            // act
            provider.Initialize("providerTest", configValue);

            // assert
            Assert.AreEqual(25, provider.Port);
        }

        [Test]
        public void Initialize_WithValuesFromConfig_SetsConfigProperties(EmailProvider provider)
        {
            // arrange
            var configValue = new NameValueCollection();
            configValue["adminEmail"] = "admin@example.com";
            configValue["smtpServer"] = "smtp.example.com";
            configValue["password"] = "abracadabra";
            configValue["username"] = "haacked";

            // act
            provider.Initialize("providerTest", configValue);

            // assert
            Assert.AreEqual("admin@example.com", provider.AdminEmail, "Did not initialize the admin email properly.");
            Assert.AreEqual("smtp.example.com", provider.SmtpServer, "Did not initialize the SMTP server properly.");
            Assert.AreEqual("abracadabra", provider.Password, "Did not initialize the password properly.");
            Assert.AreEqual("haacked", provider.UserName, "Did not initialize the username properly.");
        }
    }

    internal class EmailProviderFactory
    {
        [Factory]
        public EmailProvider SystemMailProvider
        {
            get { return new SystemMailProvider(); }
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Extensibility.Providers;

namespace UnitTests.Subtext.Extensibility
{
	/// <summary>
	/// Summary description for ProviderBaseTests.
	/// </summary>
	[TestFixture]
	public class ProviderBaseTests
	{
		[Test]
		[ExpectedException(typeof(ProviderInstantiationException))]
		public void ThrowsProviderInstantiationExceptionWhenInvalidTypeSpecified()
		{
			ProviderInfo providerInfo = UnitTestHelper.CreateProviderInfoInstance("test", "test");
			ProviderBase.Instance("Section", providerInfo);
		}
		
		[Test]
		[ExpectedException(typeof(ArgumentNullException))]
		public void NullSectionNameThrowsException()
		{
			ProviderInfo providerInfo = UnitTestHelper.CreateProviderInfoInstance("test", "test");
			ProviderBase.Instance(null, providerInfo);
		}
		
		[Test]
		[ExpectedException(typeof(ArgumentNullException))]
		public void NullProviderInfoThrowsException()
		{
			ProviderBase.Instance("Section", null);
		}
	}
}
using System;
using System.Web;
using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Infrastructure.ActionResults;

namespace UnitTests.Subtext.Framework.ActionResults
{
    [TestFixture]
    public class CacheableFileResultTests
    {
        [Test]
        public void CtorSetsLastModified()
        {
            // arrange
            DateTime dateTime = DateTime.Now;

            // act
            var result = new CacheableFileContentResult(new byte[] {}, "image/gif", dateTime, HttpCacheability.Public);

            // assert
            Assert.AreEqual(dateTime, result.LastModified);
        }

        [Test]
        public void CtorSetsCacheability()
        {
            // arrange, act
            var result = new CacheableFileContentResult(new byte[] {}, "image/gif", DateTime.Now,
                                                        HttpCacheability.Server);

            // assert
            Assert.AreEqual(HttpCacheability.Server, result.Cacheability);
        }

        [Test]
        public void ExecuteResultSetsCacheLastModified()
        {
            // arrange
            DateTime dateTime = DateTime.Now;
            var result = new CacheableFileContentResult(new byte[] {}, "image/gif", dateTime, HttpCacheability.Server);
            var httpContext = new Mock<HttpContextBase>();
            DateTime lastModified = DateTime.MinValue;
            httpContext.Setup(h => h.Response.Cache.SetLastModified(It.IsAny<DateTime>())).Callback<DateTime>(
                date => lastModified = date);
            httpContext.Setup(h => h.Response.OutputStream.Write(It.IsAny<byte[]>(), 0, It.IsAny<int>()));
            var controllerContext = new ControllerContext();
            controllerContext.HttpContext = httpContext.Object;

            // act
            result.ExecuteResult(controllerContext);

            // assert
            Assert.AreEqual(dateTime, lastModified);
        }

        [Test]
        public void ExecuteResultSetsCacheCacheability()
        {
            // arrange
            DateTime dateTime = DateTime.Now;
            var result = new CacheableFileContentResult(new byte[] {}, "image/gif", dateTime, HttpCacheability.Public);
            var httpContext = new Mock<HttpContextBase>();
            HttpCacheability cacheability = HttpCacheability.NoCache;
            httpContext.Setup(h => h.Response.Cache.SetCacheability(It.IsAny<HttpCacheability>())).Callback
                <HttpCacheability>(cacheSetting => cacheability = cacheSetting);
            httpContext.Setup(h => h.Response.OutputStream.Write(It.IsAny<byte[]>(), 0, It.IsAny<int>()));
            var controllerContext = new ControllerContext();
            controllerContext.HttpContext = httpContext.Object;

            // act
            result.ExecuteResult(controllerContext);

            // assert
            Assert.AreEqual(HttpCacheability.Public, cacheability);
        }

        [Test]
        public void ExecuteResultWritesBytesToResponse()
        {
            // arrange
            DateTime dateTime = DateTime.Now;
            var result = new CacheableFileContentResult(new byte[] {1, 2, 3, 2, 1}, "image/gif", dateTime,
                                                        HttpCacheability.Server);
            var httpContext = new Mock<HttpContextBase>();
            DateTime lastModified = DateTime.MinValue;
            httpContext.Setup(h => h.Response.Cache.SetLastModified(It.IsAny<DateTime>())).Callback<DateTime>(
                date => lastModified = date);
            byte[] writtenBytes = null;
            httpContext.Setup(h => h.Response.OutputStream.Write(It.IsAny<byte[]>(), 0, It.IsAny<int>())).Callback
                <byte[], int, int>((bytes, i, j) => writtenBytes = bytes);
            var controllerContext = new ControllerContext();
            controllerContext.HttpContext = httpContext.Object;

            // act
            result.ExecuteResult(controllerContext);

            // assert
            Assert.AreEqual(new byte[] {1, 2, 3, 2, 1}, writtenBytes);
        }
    }
}ï»¿using System.IO;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.ImportExport;
using Subtext.Infrastructure.ActionResults;

namespace UnitTests.Subtext.Framework.ActionResults
{
    [TestFixture]
    public class ExportActionResultTests
    {
        [Test]
        public void Ctor_WithFileName_SetsFileDownloadName()
        {
            // arrange, act
            var result = new ExportActionResult(new Mock<IBlogMLWriter>().Object, "test");

            // assert
            Assert.AreEqual("test", result.FileDownloadName);
        }

        [Test]
        public void Ctor_SetsContentType_ToXml()
        {
            // arrange, act
            var result = new ExportActionResult(new Mock<IBlogMLWriter>().Object, "test");

            // assert
            Assert.AreEqual("text/xml", result.ContentType);
        }

        [Test]
        public void ExecuteResult_WritesToBlogMLWriter()
        {
            // arrange
            var stringWriter = new StringWriter();
            var writer = new Mock<IBlogMLWriter>();
            bool blogWritten = false;
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Response.Output).Returns(stringWriter);
            var controllerContext = new ControllerContext(httpContext.Object, new RouteData(), new Mock<ControllerBase>().Object);
            writer.Setup(w => w.Write(It.IsAny<XmlTextWriter>())).Callback(() => blogWritten = true);
            var result = new ExportActionResult(writer.Object, "test");

            // act
            result.ExecuteResult(controllerContext);

            // assert
            Assert.IsTrue(blogWritten);
        }
    }
}using System.Web;
using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Moq.Stub;
using Subtext.Infrastructure.ActionResults;

namespace UnitTests.Subtext.Framework.ActionResults
{
    [TestFixture]
    public class NotModifiedResultTests
    {
        [Test]
        public void NotModifiedResultSends304StatusCodeAndSuppressesContent()
        {
            // arrange
            var result = new NotModifiedResult();
            var httpContext = new Mock<HttpContextBase>();

            httpContext.Stub(h => h.Response.StatusCode);
            httpContext.Stub(h => h.Response.SuppressContent);
            var controllerContext = new ControllerContext();
            controllerContext.HttpContext = httpContext.Object;

            // act
            result.ExecuteResult(controllerContext);

            // assert
            Assert.AreEqual(304, httpContext.Object.Response.StatusCode);
            Assert.IsTrue(httpContext.Object.Response.SuppressContent);
        }
    }
}using System;
using System.Collections.Generic;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework
{
    [TestFixture]
    public class ArchiveTests
    {
        [Test]
        [RollBack2]
        public void CanGetPostsByMonthArchive()
        {
            UnitTestHelper.SetupBlog();
            ICollection<ArchiveCount> counts = Archives.GetPostCountByMonth();
            Assert.AreEqual(0, counts.Count);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title", "body");
            UnitTestHelper.Create(entry);
            counts = Archives.GetPostCountByMonth();
            Assert.AreEqual(1, counts.Count);

            foreach(ArchiveCount archiveCount in counts)
            {
                Assert.AreEqual(1, archiveCount.Count, "Expected one post in the archive.");
                Assert.AreEqual(DateTime.Now.Date.AddDays(-1 * DateTime.Now.Date.Day + 1), archiveCount.Date,
                                "Expected date to be this month.");
                Assert.AreEqual(null, archiveCount.Title);
                Assert.AreEqual(0, archiveCount.Id);
                return;
            }
        }

        [Test]
        [RollBack2]
        public void CanGetPostsByYearArchive()
        {
            UnitTestHelper.SetupBlog();
            ICollection<ArchiveCount> counts = Archives.GetPostCountByYear();
            Assert.AreEqual(0, counts.Count);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title", "body");
            entry.DateSyndicated = DateTime.Now.AddDays(-1);
            UnitTestHelper.Create(entry);
            counts = Archives.GetPostCountByYear();
            Assert.AreEqual(1, counts.Count);

            foreach(ArchiveCount archiveCount in counts)
            {
                Assert.AreEqual(1, archiveCount.Count, "Expected one post in the archive.");
                Assert.AreEqual(DateTime.Now.Date.AddDays(-1 * DateTime.Now.DayOfYear + 1), archiveCount.Date,
                                "Expected date to be this month.");
                Assert.AreEqual(null, archiveCount.Title);
                Assert.AreEqual(0, archiveCount.Id);
                return;
            }
        }

        [Test]
        [RollBack2]
        public void CanGetPostsByCategoryArchive()
        {
            UnitTestHelper.SetupBlog();
            ICollection<ArchiveCount> counts = Archives.GetPostCountByCategory();
            Assert.AreEqual(0, counts.Count);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title", "body");
            int categoryId = UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, "Test");
            int entryId = UnitTestHelper.Create(entry);
            ObjectProvider.Instance().SetEntryCategoryList(entryId, new[] {categoryId});
            counts = Archives.GetPostCountByCategory();
            Assert.AreEqual(1, counts.Count);

            foreach(ArchiveCount archiveCount in counts)
            {
                Assert.AreEqual(1, archiveCount.Count, "Expected one post in the archive.");
                archiveCount.Title = "Test";
                Assert.AreEqual("Test", archiveCount.Title);
                archiveCount.Id = 10;
                Assert.AreEqual(10, archiveCount.Id);
                return;
            }
        }
    }
}using System;
using System.Linq;
using System.Web;
using MbUnit.Framework;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework
{
    /// <summary>
    /// Tests of the <see cref="Blog"/> class.
    /// </summary>
    [TestFixture]
    public class BlogTests
    {
        [RowTest]
        [Row("example.com", "example.com", "Should not have altered the host because it doesn't start with www.")]
        [Row("example.com:1234", "example.com:1234", "should not strip the port number")]
        [Row("www.example.com:1234", "example.com:1234", "should not strip the port number, but should strip www.")]
        [Row("www.example.com", "example.com", "Should strip www.")]
        public void StripWwwPrefixFromHostFunctionsProperly(string host, string expected, string message)
        {
            Assert.AreEqual(expected, Blog.StripWwwPrefixFromHost(host), message);
        }

        [Test]
        public void StripWwwPrefixFromHost_WithNullHost_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Blog.StripWwwPrefixFromHost(null));
        }

        [RowTest]
        [Row("example.com", "example.com", "Should not have altered the host because it doesn't have the port.")]
        [Row("example.com:1234", "example.com", "should strip the port number")]
        [Row("www.example.com:12345678910", "www.example.com", "should strip the port number.")]
        public void StripPortFromHostFunctionsProperly(string host, string expected, string message)
        {
            Assert.AreEqual(expected, Blog.StripPortFromHost(host), message);
        }

        [Test]
        public void StripPortFromHost_WithNullHost_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Blog.StripPortFromHost(null));
        }

        /// <summary>
        /// Makes sure we can setup the fake HttpContext.
        /// </summary>
        [Test]
        public void SetHttpContextWithBlogRequestDoesADecentSimulation()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "");
            Assert.AreEqual(HttpContext.Current.Request.Url.Host, "localhost");
            Assert.AreEqual(HttpContext.Current.Request.ApplicationPath, "/");

            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", "Subtext.Web");

            Assert.AreEqual(HttpContext.Current.Request.Url.Host, "localhost");
            Assert.AreEqual(HttpContext.Current.Request.ApplicationPath, "/Subtext.Web");

            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "Subtext.Web");

            Assert.AreEqual(HttpContext.Current.Request.Url.Host, "localhost");
            Assert.AreEqual(HttpContext.Current.Request.ApplicationPath, "/Subtext.Web");
        }

        [Test]
        public void PropertyGetSetTests()
        {
            var blog = new Blog();

            Assert.AreEqual("Subtext Weblog", blog.Author, "Expected the default author name.");

            //blog.CustomMetaTags = "Test";
            //Assert.AreEqual("Test", blog.CustomMetaTags);

            //blog.TrackingCode = "Test";
            //Assert.AreEqual("Test", blog.TrackingCode);

            //blog.TrackbackNoficationEnabled = true;
            //Assert.IsTrue(blog.TrackbackNoficationEnabled);
            //blog.TrackbackNoficationEnabled = false;
            //Assert.IsFalse(blog.TrackbackNoficationEnabled);

            blog.CaptchaEnabled = true;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.CaptchaEnabled) == ConfigurationFlags.CaptchaEnabled);
            Assert.IsTrue(blog.CaptchaEnabled);
            blog.CaptchaEnabled = false;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.CaptchaEnabled) != ConfigurationFlags.CaptchaEnabled);

            blog.CoCommentsEnabled = true;
            Assert.IsTrue(blog.CoCommentsEnabled);
            Assert.IsTrue((blog.Flag & ConfigurationFlags.CoCommentEnabled) == ConfigurationFlags.CoCommentEnabled);
            blog.CoCommentsEnabled = false;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.CoCommentEnabled) != ConfigurationFlags.CoCommentEnabled);

            blog.IsActive = true;
            Assert.IsTrue(blog.IsActive);
            Assert.IsTrue((blog.Flag & ConfigurationFlags.IsActive) == ConfigurationFlags.IsActive);
            blog.IsActive = false;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.IsActive) != ConfigurationFlags.IsActive);

            blog.ShowEmailAddressInRss = true;
            Assert.IsTrue(blog.ShowEmailAddressInRss);
            Assert.IsTrue((blog.Flag & ConfigurationFlags.ShowAuthorEmailAddressinRss) ==
                          ConfigurationFlags.ShowAuthorEmailAddressinRss);
            blog.ShowEmailAddressInRss = false;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.ShowAuthorEmailAddressinRss) !=
                          ConfigurationFlags.ShowAuthorEmailAddressinRss);

            blog.IsAggregated = true;
            Assert.IsTrue(blog.IsAggregated);
            Assert.IsTrue((blog.Flag & ConfigurationFlags.IsAggregated) == ConfigurationFlags.IsAggregated);
            blog.IsAggregated = false;
            Assert.IsTrue((blog.Flag & ConfigurationFlags.IsAggregated) != ConfigurationFlags.IsAggregated);

            blog.CommentCount = 42;
            Assert.AreEqual(42, blog.CommentCount);

            blog.PingTrackCount = 8;
            Assert.AreEqual(8, blog.PingTrackCount);

            blog.NumberOfRecentComments = 2006;
            Assert.AreEqual(2006, blog.NumberOfRecentComments);

            blog.PostCount = 1997;
            Assert.AreEqual(1997, blog.PostCount);

            blog.RecentCommentsLength = 1993;
            Assert.AreEqual(1993, blog.RecentCommentsLength);

            blog.StoryCount = 1975;
            Assert.AreEqual(1975, blog.StoryCount);

            UnitTestHelper.AssertSimpleProperties(blog, "OpenIdUrl");
        }

        [Test]
        [RollBack2]
        public void CanGetBlogs()
        {
            // arrange
            UnitTestHelper.SetupBlog();
            
            // act
            IPagedCollection<Blog> blogs = Blog.GetBlogs(0, int.MaxValue, ConfigurationFlags.None);
            
            // assert
            Assert.GreaterEqualThan(blogs.Count, 1);
            var blog = blogs.First(b => b.Id == Config.CurrentBlog.Id);
            Assert.IsNotNull(blog);
        }

        [Test]
        public void CanTestForEquality()
        {
            var blog = new Blog();
            blog.Id = 12;
            Assert.IsFalse(blog.Equals(null), "Blog should not equal null");
            Assert.IsFalse(blog.Equals("Something Not A Blog"), "Blog should not equal a string");

            var blog2 = new Blog();
            blog2.Id = 12;
            Assert.IsTrue(blog.Equals(blog2));
        }

        [Test]
        public void CanGetDefaultTimeZone()
        {
            var blog = new Blog();
            blog.TimeZoneId = null;
            Assert.IsNotNull(blog.TimeZone);
        }

        [Test]
        public void CanGetLanguageAndLanguageCode()
        {
            var blog = new Blog();
            blog.Language = null;
            Assert.AreEqual("en-US", blog.Language, "By default, the language is en-US");
            Assert.AreEqual("en", blog.LanguageCode);

            blog.Language = "fr-FR";
            Assert.AreEqual("fr-FR", blog.Language, "The language should have changed.");
            Assert.AreEqual("fr", blog.LanguageCode);
        }

        [Test]
        public void HasNewsReturnsProperResult()
        {
            var blog = new Blog();
            Assert.IsFalse(blog.HasNews);
            blog.News = "You rock! Story at eleven";
            Assert.IsTrue(blog.HasNews);
        }

        [Test]
        public void CanGetHashCode()
        {
            var blog = new Blog();
            blog.Host = "http://subtextproject.com";
            blog.Subfolder = "blog";

            Assert.AreNotEqual(0, blog.GetHashCode());
        }

        [Test]
        public void CanSetFeedBurnerName()
        {
            var blog = new Blog();
            blog.RssProxyUrl = null;
            Assert.IsFalse(blog.RssProxyEnabled);

            blog.RssProxyUrl = "Subtext";
            Assert.IsTrue(blog.RssProxyEnabled);
        }

        [Test]
        public void GetBlogsByHostThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                                                               Blog.GetBlogsByHost(null, 0, 10,
                                                                                   ConfigurationFlags.IsActive));
        }

        [Test]
        public void RssProxyUrl_WithInvalidCharacters_ThrowsInvalidOperationException()
        {
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => new Blog().RssProxyUrl = "\\");
        }

        [Test]
        public void OpenIdUrl_WhenSetToValueWithoutHttp_PrependsHttp()
        {
            // arrange
            var blog = new Blog();

            // act
            blog.OpenIdUrl = "openid.example.com";

            // assert
            Assert.AreEqual("http://openid.example.com", blog.OpenIdUrl);
        }

        [Test]
        public void OpenIdUrl_WhenSetToValueWithHttp_SetsUrl()
        {
            // arrange
            var blog = new Blog();

            // act
            blog.OpenIdUrl = "http://openid.example.com";

            // assert
            Assert.AreEqual("http://openid.example.com", blog.OpenIdUrl);
        }

        [Test]
        public void OpenIdUrl_WhenSetToNull_IsNull()
        {
            // arrange
            var blog = new Blog();

            // act
            blog.OpenIdUrl = null;

            // assert
            Assert.IsNull(blog.OpenIdUrl);
        }
    }
}ï»¿using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework;

namespace UnitTests.Subtext.Framework
{
    [TestFixture]
    public class CollectionExtensionsTests
    {
        [Test]
        public void ForEach_WithCollection_IteratesEachItem()
        {
            // arrange
            IEnumerable<int> numbers = new[]{5, 4, 3};
            string concatenated = string.Empty;

            // act
            numbers.ForEach(number => concatenated += number);

            // assert
            Assert.AreEqual("543", concatenated);
        }

        [Test]
        public void AddRange_WithCollection_AddsAllItemsToCollection()
        {
            // arrange
            IEnumerable<int> numbers = new[] { 5, 4, 3 };
            ICollection<int> items = new List<int>();

            // act
            items.AddRange(numbers);

            // assert
            Assert.AreEqual(3, numbers.Count());
        }

        [Test]
        public void GetBoolean_WithNameValueCollectionHavingCorrespondingValue_ReturnsBoolean()
        {
            // arrange
            var collection = new NameValueCollection {{"Key", "true"}};

            // act
            var result = collection.GetBoolean("Key");

            // assert
            Assert.IsTrue(result);
        }

        [Test]
        public void GetBoolean_WithNullValueForKey_ReturnsFalse()
        {
            // arrange
            var collection = new NameValueCollection {{"Key", null}};

            // act
            var result = collection.GetBoolean("Key");

            // assert
            Assert.IsFalse(result);
        }

        [Test]
        public void GetBoolean_WithNoValueForKey_ReturnsFalse()
        {
            // arrange
            var collection = new NameValueCollection();

            // act
            var result = collection.GetBoolean("Key");

            // assert
            Assert.IsFalse(result);
        }

        [Test]
        public void GetBoolean_WithInvalidValueForKey_ReturnsFalse()
        {
            // arrange
            var collection = new NameValueCollection {{"Key", "blah"}};

            // act
            var result = collection.GetBoolean("Key");

            // assert
            Assert.IsFalse(result);
        }

        [Test]
        public void GetEnum_WithEnumValue_IgnoresCase()
        {
            // arrange
            var collection = new NameValueCollection { { "Key", "foo" } };

            // act
            var result = collection.GetEnum<TestEnum>("Key");

            // assert
            Assert.AreEqual(TestEnum.Foo, result);
        }

        public enum TestEnum
        {
            Foo,
            Bar,
        }

        [Test]
        public void Accumulate_WithTwoEnumerations_AccumulatesOneIntoTheOther()
        {
            // arrange
            var containers = new[] { new KeyValuePair<int, List<string>>(0, new List<string>()), new KeyValuePair<int, List<string>>(1, new List<string>()), new KeyValuePair<int, List<string>>(2, new List<string>()), new KeyValuePair<int, List<string>>(3, new List<string>()) };
            var items = new[] {new KeyValuePair<int, string>(1, "A"), new KeyValuePair<int, string>(1, "B"), new KeyValuePair<int, string>(3, "C")};

            // act
            containers.Accumulate(items, container => container.Key, item => item.Key, (container, item) => container.Value.Add(item.Value));

            // assert
            Assert.AreEqual(0, containers.First().Value.Count);
            var secondContainer = containers.ElementAt(1);
            Assert.AreEqual(2, secondContainer.Value.Count);
            Assert.AreEqual("A", secondContainer.Value[0]);
            Assert.AreEqual("B", secondContainer.Value[1]);
            Assert.AreEqual(0, containers.ElementAt(2).Value.Count);
            var fourthContainer = containers.ElementAt(3);
            Assert.AreEqual(1, fourthContainer.Value.Count);
            Assert.AreEqual("C", fourthContainer.Value[0]);
        }
    }
}
using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class ArchiveCountTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var archive = new ArchiveCount();
            UnitTestHelper.AssertSimpleProperties(archive);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class BlogGroupTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var group = new BlogGroup();
            UnitTestHelper.AssertSimpleProperties(group);
        }
    }
}using System;
using System.Collections.ObjectModel;
using System.Linq;
using MbUnit.Framework;
using Subtext.Extensibility.Collections;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class CollectionBookTests
    {
        [Test]
        public void CollectionBook_WithThreePages_IteratesCorrectly()
        {
            var pages = new Collection<IPagedCollection<string>>();
            IPagedCollection<string> pageZero = new PagedCollection<string> {MaxItems = 8};
            pageZero.Add("zero");
            pageZero.Add("one");
            pageZero.Add("two");
            pages.Add(pageZero);
            
            IPagedCollection<string> pageOne = new PagedCollection<string> {MaxItems = 8};
            pageOne.Add("three");
            pageOne.Add("four");
            pageOne.Add("five");
            pages.Add(pageOne);

            IPagedCollection<string> pageTwo = new PagedCollection<string> {MaxItems = 8};
            pageTwo.Add("six");
            pageTwo.Add("seven");
            pages.Add(pageTwo);

            var book = new CollectionBook<string>((pageIndex, pageSize) => pages[pageIndex], 3);

            string concatenation = string.Empty;
            int currentPageIndex = 0;
            
            // act
            foreach(var page in book)
            {
                concatenation += currentPageIndex;
                foreach(string item in page)
                {
                    concatenation += item;
                }
                currentPageIndex++;
            }

            // assert
            Assert.AreEqual("0zeroonetwo1threefourfive2sixseven", concatenation);
        }

        [Test]
        public void AsFlattenedEnumerable_AllowsEnumeratingAllPagesAsSingleEnumeration()
        {
            var pages = new Collection<IPagedCollection<string>>();
            IPagedCollection<string> pageZero = new PagedCollection<string> { MaxItems = 8 };
            pageZero.Add("zero");
            pageZero.Add("one");
            pageZero.Add("two");

            pages.Add(pageZero);
            IPagedCollection<string> pageOne = new PagedCollection<string> { MaxItems = 8 };
            pageOne.Add("three");
            pageOne.Add("four");
            pageOne.Add("five");
            pages.Add(pageOne);

            IPagedCollection<string> pageTwo = new PagedCollection<string> { MaxItems = 8 };
            pageTwo.Add("six");
            pageTwo.Add("seven");
            pages.Add(pageTwo);

            var book = new CollectionBook<string>((pageIndex, pageSize) => pages[pageIndex], 3);

            // act
            string concatenation = String.Join("", book.AsFlattenedEnumerable().ToArray());

            // assert
            Assert.AreEqual("zeroonetwothreefourfivesixseven", concatenation);
        }

    }
}using MbUnit.Framework;
using Moq;
using Subtext.Framework.Components;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Components.CommentTests
{
    [TestFixture]
    public class CommentSettingsTests
    {
        [Test]
        public void ApproveThrowsArgumentNullException()
        {
            // arrange
            var service = new Mock<ICommentSpamService>().Object;
            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                FeedbackItem.Approve(null, service));
        }
    }
}using System;
using System.Collections;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.CommentTests
{
    [TestFixture]
    public class FeedbackTests
    {
        string _hostName = string.Empty;

        [RowTest]
        [Row(FeedbackStatusFlag.Approved, true, false, false, false)]
        [Row(FeedbackStatusFlag.ApprovedByModerator, true, false, false, false)]
        [Row(FeedbackStatusFlag.FalsePositive, true, false, false, true)]
        [Row(FeedbackStatusFlag.ConfirmedSpam, false, false, true, true)]
        [Row(FeedbackStatusFlag.FlaggedAsSpam, false, false, false, true)]
        [Row(FeedbackStatusFlag.NeedsModeration, false, true, false, false)]
        [Row(FeedbackStatusFlag.Deleted, false, false, true, false)]
        [RollBack]
        public void CanCreateCommentWithStatus(FeedbackStatusFlag status, bool expectedApproved,
                                               bool expectedNeedsModeratorApproval, bool expectedDeleted,
                                               bool expectedFlaggedAsSpam)
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            FeedbackItem comment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, status);

            Assert.IsTrue((comment.Status & status) == status, "Expected the " + status + "bit to be set.");
            Assert.AreEqual(expectedApproved, comment.Approved, "We expected 'Approved' to be " + expectedApproved);
            Assert.AreEqual(expectedNeedsModeratorApproval, comment.NeedsModeratorApproval,
                            "Expected 'NeedsModeratorApproval' to be " + expectedNeedsModeratorApproval);
            Assert.AreEqual(expectedDeleted, comment.Deleted, "Expected 'Deleted' to be " + expectedDeleted);
            Assert.AreEqual(expectedFlaggedAsSpam,
                            ((comment.Status & FeedbackStatusFlag.FlaggedAsSpam) == FeedbackStatusFlag.FlaggedAsSpam),
                            "Expected that this item was ever flagged as spam to be " + expectedFlaggedAsSpam);
        }

        [Test]
        [RollBack]
        public void ConfirmSpamRemovesApprovedBitAndSetsDeletedBit()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            FeedbackItem comment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                          FeedbackStatusFlag.Approved);
            Assert.IsTrue(comment.Approved, "should be approved");

            FeedbackItem.ConfirmSpam(comment, null);
            comment = FeedbackItem.Get(comment.Id);
            Assert.IsFalse(comment.Approved, "Should not be approved now.");
            Assert.IsTrue(comment.Deleted, "Should be moved to deleted folder now.");
        }

        [Test]
        [RollBack]
        public void DeleteCommentSetsDeletedBit()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            FeedbackItem comment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                          FeedbackStatusFlag.Approved);
            Assert.IsTrue(comment.Approved, "should be approved");

            FeedbackItem.Delete(comment);
            comment = FeedbackItem.Get(comment.Id);
            Assert.IsFalse(comment.Approved, "Should not be approved now.");
            Assert.IsTrue(comment.Deleted, "Should be moved to deleted folder now.");
        }

        [Test]
        [RollBack]
        public void DestroyCommentByStatusDestroysOnlyThatStatus()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            CreateApprovedComments(3, entry);
            CreateFlaggedSpam(2, entry);
            CreateDeletedComments(3, entry);

            FeedbackItem newComment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                             FeedbackStatusFlag.Approved);
            FeedbackItem.ConfirmSpam(newComment, null);
            newComment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                FeedbackStatusFlag.FlaggedAsSpam);
            Assert.IsFalse(newComment.Approved, "should not be approved");
            FeedbackItem.Delete(newComment); //Move it to trash.

            FeedbackCounts counts = FeedbackItem.GetFeedbackCounts();
            Assert.AreEqual(3, counts.ApprovedCount, "Expected three approved still");
            Assert.AreEqual(2, counts.FlaggedAsSpamCount, "Expected two items flagged as spam.");
            Assert.AreEqual(5, counts.DeletedCount, "Expected five in the trash");

            FeedbackItem.Destroy(FeedbackStatusFlag.FlaggedAsSpam);
            counts = FeedbackItem.GetFeedbackCounts();
            Assert.AreEqual(3, counts.ApprovedCount, "Expected three approved still");
            Assert.AreEqual(0, counts.FlaggedAsSpamCount, "Expected the items flagged as spam to be gone.");
            Assert.AreEqual(5, counts.DeletedCount, "Destroying all flagged items should not touch the trash bin.");

            CreateFlaggedSpam(3, entry);
            counts = FeedbackItem.GetFeedbackCounts();
            Assert.AreEqual(3, counts.FlaggedAsSpamCount, "Expected three items flagged as spam.");

            FeedbackItem.Destroy(FeedbackStatusFlag.Deleted);
            counts = FeedbackItem.GetFeedbackCounts();
            Assert.AreEqual(3, counts.ApprovedCount, "Expected three approved still");
            Assert.AreEqual(3, counts.FlaggedAsSpamCount, "Expected three approved still");
            Assert.AreEqual(0, counts.DeletedCount, "Destroying all deleted items should not touch the flagged items.");
        }

        private static void CreateComments(int count, Entry entry, FeedbackStatusFlag status)
        {
            for(int i = 0; i < count; i++)
            {
                CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, status);
            }
        }

        private static void CreateFlaggedSpam(int count, Entry entry)
        {
            CreateComments(count, entry, FeedbackStatusFlag.FlaggedAsSpam);
        }

        private static void CreateApprovedComments(int count, Entry entry)
        {
            CreateComments(count, entry, FeedbackStatusFlag.Approved);
        }

        private static void CreateDeletedComments(int count, Entry entry)
        {
            CreateComments(count, entry, FeedbackStatusFlag.Deleted);
        }

        [Test]
        [RollBack]
        public void CreateFeedbackSetsBlogStatsCorrectly()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();
            Blog info = Config.CurrentBlog;

            Assert.AreEqual(0, info.CommentCount);
            Assert.AreEqual(0, info.PingTrackCount);

            info = Config.GetBlog(info.Host, info.Subfolder); // pull back the updated info from the datastore.
            Assert.AreEqual(0, info.CommentCount);
            Assert.AreEqual(0, info.PingTrackCount);

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.PingTrack, FeedbackStatusFlag.Approved);

            info = Config.GetBlog(info.Host, info.Subfolder);
            Assert.AreEqual(1, info.CommentCount, "Blog CommentCount should be 1");
            Assert.AreEqual(1, info.PingTrackCount, "Blog Ping/Trackback count should be 1");

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.PingTrack, FeedbackStatusFlag.Approved);

            info = Config.GetBlog(info.Host, info.Subfolder);
            Assert.AreEqual(2, info.CommentCount, "Blog CommentCount should be 2");
            Assert.AreEqual(2, info.PingTrackCount, "Blog Ping/Trackback count should be 2");
        }

        [Test]
        [RollBack]
        public void CreateEntryDoesNotResetBlogStats()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();
            Blog info = Config.CurrentBlog;

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.PingTrack, FeedbackStatusFlag.Approved);

            Entry entry2 = UnitTestHelper.CreateEntryInstanceForSyndication("johnny b goode", "foo-bar", "zaa zaa zoo.");
            UnitTestHelper.Create(entry2);
            info = Config.GetBlog(info.Host, info.Subfolder); // pull back the updated info from the datastore

            Assert.AreEqual(1, info.CommentCount, "Blog CommentCount should be 1");
            Assert.AreEqual(1, info.PingTrackCount, "Blog Ping/Trackback count should be 1");
        }

        [Test]
        [RollBack]
        public void DeleteEntrySetsBlogStats()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();
            Blog info = Config.CurrentBlog;

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.PingTrack, FeedbackStatusFlag.Approved);

            info = Config.GetBlog(info.Host, info.Subfolder);
            Assert.AreEqual(1, info.CommentCount, "Blog CommentCount should be 1");
            Assert.AreEqual(1, info.PingTrackCount, "Blog Ping/Trackback count should be 1");

            ObjectProvider.Instance().DeleteEntry(entry.Id);
            info = Config.GetBlog(info.Host, info.Subfolder);

            Assert.AreEqual(0, info.CommentCount, "Blog CommentCount should be 0");
            Assert.AreEqual(0, info.PingTrackCount, "Blog Ping/Trackback count should be 0");
        }

        [Test]
        public void DestroyCommentCannotDestroyActiveComment()
        {
            // arrange
            var comment = new FeedbackItem(FeedbackType.Comment) {Approved = true};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Repository.GetFeedback(123)).Returns(comment);
            var service = new CommentService(context.Object, null);

            // act, assert
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => service.Destroy(123));
        }

        [Test]
        [RollBack]
        public void ApproveCommentRemovesDeletedAndConfirmedSpamBits()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            FeedbackItem comment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                          FeedbackStatusFlag.ConfirmedSpam |
                                                                          FeedbackStatusFlag.Deleted);
            Assert.IsFalse(comment.Approved, "should not be approved");
            Assert.IsTrue(comment.Deleted, "should be deleted");
            Assert.IsTrue(comment.ConfirmedSpam, "should be confirmed spam");

            FeedbackItem.Approve(comment, null);
            comment = FeedbackItem.Get(comment.Id);
            Assert.IsTrue(comment.Approved, "Should be approved now.");
            Assert.IsFalse(comment.Deleted, "Should not be deleted.");
            Assert.IsFalse(comment.ConfirmedSpam, "Should not be confirmed spam.");
        }

        /// <summary>
        /// Create some comments that are approved, approved with moderation, 
        /// approved as not spam.  Make sure we get all of them when we get comments.
        /// </summary>
        [Test]
        [RollBack]
        public void CanGetAllApprovedComments()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            FeedbackItem commentOne = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                             FeedbackStatusFlag.Approved);
            FeedbackItem commentTwo = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                             FeedbackStatusFlag.ApprovedByModerator);
            FeedbackItem commentThree = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                               FeedbackStatusFlag.ConfirmedSpam);
            FeedbackItem.ConfirmSpam(commentThree, null);
            FeedbackItem commentFour = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                              FeedbackStatusFlag.FalsePositive);

            //We expect three of the four.
            IPagedCollection<FeedbackItem> feedback = ObjectProvider.Instance().GetPagedFeedback(0, 10,
                                                                                                 FeedbackStatusFlag.
                                                                                                     Approved,
                                                                                                 FeedbackStatusFlag.None,
                                                                                                 FeedbackType.Comment);
            Assert.AreEqual(3, feedback.Count, "We expected three to match.");

            //Expect reverse order
            Assert.AreEqual(commentOne.Id, feedback[2].Id, "The first does not match");
            Assert.AreEqual(commentTwo.Id, feedback[1].Id, "The first does not match");
            Assert.AreEqual(commentFour.Id, feedback[0].Id, "The first does not match");
        }

        [Test]
        [RollBack]
        public void OnlyApprovedItemsContributeToEntryFeedbackCount()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();
            int entryId = entry.Id;

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            entry = UnitTestHelper.GetEntry(entryId, PostConfig.None, false);
            Assert.AreEqual(1, entry.FeedBackCount, "Expected one approved feedback entry.");

            FeedbackItem comment = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                          FeedbackStatusFlag.FlaggedAsSpam);
            entry = UnitTestHelper.GetEntry(entryId, PostConfig.None, false);
            Assert.AreEqual(1, entry.FeedBackCount, "Expected one approved feedback entry.");

            comment.Approved = true;
            FeedbackItem.Update(comment);
            entry = UnitTestHelper.GetEntry(entryId, PostConfig.None, false);
            Assert.AreEqual(2, entry.FeedBackCount,
                            "After approving the second comment, expected two approved feedback entry.");

            comment.Approved = false;
            FeedbackItem.Update(comment);
            entry = UnitTestHelper.GetEntry(entryId, PostConfig.None, false);
            Assert.AreEqual(1, entry.FeedBackCount,
                            "After un-approving the second comment, expected one approved feedback entry.");

            FeedbackItem.Delete(comment);
            entry = UnitTestHelper.GetEntry(entryId, PostConfig.None, false);
            Assert.AreEqual(1, entry.FeedBackCount,
                            "After un-approving the second comment, expected one approved feedback entry.");
        }


        /// <summary>
        /// Make sure that we can get all feedback that is flagged as 
        /// spam.  This should exclude items marked as deleted and 
        /// items that were flagged as spam, but subsequently approved.
        /// (FlaggedAsSpam | Approved).
        /// </summary>
        [Test]
        [RollBack]
        public void CanGetItemsFlaggedAsSpam()
        {
            Entry entry = SetupBlogForCommentsAndCreateEntry();

            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.FalsePositive);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.Approved);
            CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment, FeedbackStatusFlag.ConfirmedSpam);
            FeedbackItem included = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                           FeedbackStatusFlag.FlaggedAsSpam);
            FeedbackItem includedToo = CreateAndUpdateFeedbackWithExactStatus(entry, FeedbackType.Comment,
                                                                              FeedbackStatusFlag.FlaggedAsSpam |
                                                                              FeedbackStatusFlag.NeedsModeration);

            //We expect 2 of the four.
            IPagedCollection<FeedbackItem> feedback = ObjectProvider.Instance().GetPagedFeedback(0, 10,
                                                                                                 FeedbackStatusFlag.
                                                                                                     FlaggedAsSpam,
                                                                                                 FeedbackStatusFlag.
                                                                                                     Approved |
                                                                                                 FeedbackStatusFlag.
                                                                                                     Deleted,
                                                                                                 FeedbackType.Comment);
            Assert.AreEqual(2, feedback.Count, "We expected two to match.");

            //Expect reverse order
            Assert.AreEqual(included.Id, feedback[1].Id, "The first does not match");
            Assert.AreEqual(includedToo.Id, feedback[0].Id, "The second does not match");
        }

        /// <summary>
        /// Makes sure that the content checksum hash is being created correctly.
        /// </summary>
        [Test]
        public void ChecksumHashReturnsChecksumOfCommentBody()
        {
            var comment = new FeedbackItem(FeedbackType.Comment) {Body = "Some Body"};
            Console.WriteLine(comment.ChecksumHash);
            Assert.AreEqual("834.5baPHSvKBNtABZePE+OpeQ==", comment.ChecksumHash);
        }

        static FeedbackItem CreateAndUpdateFeedbackWithExactStatus(Entry entry, FeedbackType type,
                                                                   FeedbackStatusFlag status)
        {
            var feedback = new FeedbackItem(type);
            feedback.Title = UnitTestHelper.GenerateUniqueString();
            feedback.Body = UnitTestHelper.GenerateUniqueString();
            feedback.EntryId = entry.Id;
            feedback.Author = "TestAuthor";

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Cache).Returns(new TestCache());
            subtextContext.SetupBlog(Config.CurrentBlog);
            subtextContext.SetupRepository(ObjectProvider.Instance());
            subtextContext.Setup(c => c.HttpContext.Items).Returns(new Hashtable());
            subtextContext.Setup(c => c.HttpContext).Returns(new HttpContextWrapper(HttpContext.Current));

            var service = new CommentService(subtextContext.Object, null);
            int id = service.Create(feedback, true/*runFilters*/);

            feedback = FeedbackItem.Get(id);
            feedback.Status = status;
            FeedbackItem.Update(feedback);

            return FeedbackItem.Get(id);
        }

        Entry SetupBlogForCommentsAndCreateEntry()
        {
            Config.CreateBlog(string.Empty, "username", "password", _hostName, string.Empty);
            Blog info = Config.GetBlog(_hostName, string.Empty);
            BlogRequest.Current.Blog = info;
            info.Email = "test@example.com";
            info.Title = "You've been haacked";
            info.CommentsEnabled = true;
            info.ModerationEnabled = false;

            ObjectProvider.Instance().UpdateConfigData(info);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("blah", "blah", "blah");
            UnitTestHelper.Create(entry);
            return entry;
        }

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, string.Empty);
        }

        [TearDown]
        public void TearDown()
        {
        }

        [Test]
        public void UpdateThrowsArgumentNull()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => FeedbackItem.Update(null));
        }

        [Test]
        public void ApproveThrowsArgumentNull()
        {
            // arrange
            var service = new Mock<ICommentSpamService>().Object;

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => FeedbackItem.Approve(null, service));
        }

        [Test]
        public void ConfirmSpamThrowsArgumentNull()
        {
            // arrange
            var service = new Mock<ICommentSpamService>().Object;

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => FeedbackItem.ConfirmSpam(null, service));
        }

        [Test]
        public void DeleteNullCommentThrowsArgumentNull()
        {
            // arrange
            var service = new Mock<ICommentSpamService>().Object;

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => FeedbackItem.Delete(null));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using System.Threading;
using MbUnit.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Properties;

namespace UnitTests.Subtext.Framework.Components.EnclosureTests
{
    [TestFixture]
    public class EnclosureGenericTests
    {
        [RowTest]
        [Row(100, "100 bytes")]
        [Row(1024, "1 KB")]
        [Row(1162, "1,13 KB")]
        [Row(7862732, "7,5 MB")]
        [MultipleCulture("it-IT,en-US")]
        public void SizeIsFormattedCorrectly(long size, string expected)
        {
            var enc = new Enclosure {Size = size};
            Thread.CurrentThread.CurrentCulture = new CultureInfo("it-IT");
            Assert.AreEqual(expected, enc.FormattedSize, "Not the right formatting");
        }

        [Test]
        public void IsValid_WithZeroEntryId_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure {EntryId = 0};

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_NeedsAnEntry, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithNullUrl_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = null };

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_UrlRequired, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithEmptyUrl_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = string.Empty};

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_UrlRequired, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithNullMimeType_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = "http://example.com", MimeType = null };

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_MimeTypeRequired, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithEmptyMimeType_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = "http://example.com", MimeType = string.Empty};

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_MimeTypeRequired, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithZeroSize_ReturnsFalse()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = "http://example.com", MimeType = "image/jpg", Size = 0};

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsFalse(valid);
            Assert.AreEqual(Resources.Enclosure_SizeGreaterThanZero, enclosure.ValidationMessage);
        }

        [Test]
        public void IsValid_WithValidEnclosure_ReturnsTrue()
        {
            // arrange
            var enclosure = new Enclosure { EntryId = 1, Url = "http://example.com", MimeType = "image/jpg", Size = 100};

            // act
            bool valid = enclosure.IsValid;

            // assert
            Assert.IsTrue(valid);
            Assert.IsNull(enclosure.ValidationMessage);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Components.EnclosureTests
{
    [TestFixture]
    public class EnclosureInsertTests
    {
        [RowTest]
        [Row("My wonderful podcast", "http://codeclimber.net.nz/podcast/mypodcast.mp3", "audio/mpeg", 123456789, true,
            true, "Did not create enclosure")]
        [Row("", "http://codeclimber.net.nz/podcast/mypodcast.mp3", "audio/mpeg", 123456789, true, false,
            "Did not create enclosure")]
        [Row("", "http://codeclimber.net.nz/podcast/mypodcast.mp3", "audio/mpeg", 123456789, false, true,
            "Did not create enclosure")]
        [RollBack2]
        public void CanInsertEnclosure(string title, string url, string mimetype, long size, bool addToFeed,
                                       bool showWithPost, string errMsg)
        {
            UnitTestHelper.SetupBlog();
            Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Simone Chiaretta", "Post for testing Enclosures",
                                                                       "Listen to my great podcast");
            int entryId = UnitTestHelper.Create(e);
            Enclosure enc = UnitTestHelper.BuildEnclosure(title, url, mimetype, entryId, size, addToFeed, showWithPost);

            Enclosures.Create(enc);

            Entry newEntry = ObjectProvider.Instance().GetEntry(entryId, true, false);

            Assert.IsNotNull(newEntry.Enclosure, errMsg);

            UnitTestHelper.AssertEnclosures(enc, newEntry.Enclosure);
        }

        [Test]
        public void Create_WithNullEnclosure_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Enclosures.Create(null));
        }

        [Test]
        public void Create_WithInvalidEntry_ThrowsArgumentException()
        {
            // arrange
            var enclosure = new Enclosure{ EntryId = 0};

            // act, assert
            Assert.IsFalse(enclosure.IsValid);
            UnitTestHelper.AssertThrows<ArgumentException>(() => Enclosures.Create(enclosure));
        }

        [Test]
        [RollBack2]
        public void EntryWithNoenclosureHasNullAsEnclosure()
        {
            UnitTestHelper.SetupBlog();
            Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Simone Chiaretta", "Post for testing Enclosures",
                                                                       "Listen to my great podcast");
            int entryId = UnitTestHelper.Create(e);

            Entry newEntry = ObjectProvider.Instance().GetEntry(entryId, true, false);

            Assert.IsNull(newEntry.Enclosure, "enclosure must be null");
        }
   }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Components.EnclosureTests
{
    [TestFixture]
    public class EnclosureUpdateTests
    {
        [RowTest]
        [Row("My wonderful podcast", "http://codeclimber.net.nz/podcast/mypodcast.mp3", "audio/mpeg", 123456789, true,
            false)]
        [Row("", "http://codeclimber.net.nz/podcast/mypodcast.mp3", "audio/mpeg", 123456789, true, false)]
        [RollBack2]
        public void CanUpdateEnclosure(string title, string url, string mimetype, long size, bool addToFeed,
                                       bool showWithPost)
        {
            UnitTestHelper.SetupBlog(string.Empty);
            Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Simone Chiaretta", "Post for testing Enclosures",
                                                                       "Listen to my great podcast");
            int entryId = UnitTestHelper.Create(e);
            Enclosure enc = UnitTestHelper.BuildEnclosure(title, url, mimetype, entryId, size, addToFeed, showWithPost);

            Enclosures.Create(enc);

            string randomStr = UnitTestHelper.GenerateUniqueString().Left(20);
            enc.Url = url + randomStr;

            if(!string.IsNullOrEmpty(title))
            {
                enc.Title = title + randomStr;
            }

            enc.MimeType = mimetype + randomStr;

            int randomSize = new Random().Next(10, 100);
            enc.Size = size + randomSize;

            Assert.IsTrue(Enclosures.Update(enc), "Should have updated the Enclosure");

            Entry newEntry = ObjectProvider.Instance().GetEntry(entryId, true, false);

            UnitTestHelper.AssertEnclosures(enc, newEntry.Enclosure);
        }

        [Test]
        public void Update_WithInvalidEnclosure_ThrowsArgumentException()
        {
            // arrange
            var enclosure = new Enclosure {EntryId = 0};

            // act, assert
            Assert.IsFalse(enclosure.IsValid);
            var exception = UnitTestHelper.AssertThrows<ArgumentException>(() => Enclosures.Update(enclosure));
            Assert.AreEqual(enclosure.ValidationMessage, exception.Message);
        }

        [Test]
        public void Update_WithNullEnclosure_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Enclosures.Update(null));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Components.EnclosureTests
{
    [TestFixture]
    public class EnclosureDeleteTests
    {
        [Test]
        [RollBack2]
        public void CanDeleteEnclosure()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();

            Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Simone Chiaretta", "Post for testing Enclosures",
                                                                       "Listen to my great podcast");
            int entryId = UnitTestHelper.Create(e);

            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryId, 12345678, true, true);
            Enclosures.Create(enc);

            Entry newEntry = ObjectProvider.Instance().GetEntry(entryId, true, false);

            Assert.IsNotNull(newEntry.Enclosure, "Did not create enclosure.");

            Enclosures.Delete(enc.Id);

            Entry newEntry1 = ObjectProvider.Instance().GetEntry(entryId, true, false);

            Assert.IsNull(newEntry1.Enclosure, "Did not delete enclosure.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework.Components.EnclosureTests
{
    [TestFixture]
    public class MimetypeDetectionTests
    {
        [Test]
        public void CanReadMimetypeMappings()
        {
            Assert.AreEqual(6, MimeTypesMapper.Mappings.Count);
        }

        //[Test]
        //public void CanGetListOfTypes()
        //{
        //    NameValueCollection list = MimeTypesMapper.Mappings.List;
        //    Assert.AreEqual("audio/mpeg", list[0]);
        //}

        [RowTest]
        [Row(".mp3", "audio/mpeg")]
        [Row(".zip", "application/octetstream")]
        [Row(".pdf", "application/octetstream")]
        [Row(".mp4", "video/mp4")]
        [Row(".avi", null)]
        public void MimetypeAreMappedCorrectly(string ext, string expectedType)
        {
            Assert.AreEqual(expectedType, MimeTypesMapper.Mappings.GetMimeType(ext));
        }

        [Test]
        public void GetMimeType_WithNullExtension_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => MimeTypesMapper.Mappings.GetMimeType(null));
        }

        [RowTest]
        [Row("http://mywonderfulldomain.com/podcast/episode1.mp3", "audio/mpeg")]
        [Row("http://code.google.com/codeclimbercommons/items/download/linklift-src.1.0.zip", "application/octetstream")
        ]
        [Row("http://polimi.it/ingdelsoftware/Corso di primo livello/lezione1.pdf", "application/octetstream")]
        [Row("http://wekarod.com/mvcscreencasts/screencast3.mp4", "video/mp4")]
        [Row("http://wekarod.com/mvcscreencasts/screencast3", null)]
        [Row("http://wekarod.com/mvcscreencasts/screencast3.qt", null)]
        public void CanDetectCorrectMimeType(string url, string expectedType)
        {
            Assert.AreEqual(expectedType, MimeTypesMapper.Mappings.ParseUrl(url));
        }

        [Test]
        public void ParseUrl_WithNullUrl_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => MimeTypesMapper.Mappings.ParseUrl(null));
        }

        [Test]
        public void ParseUrl_WithInvalidUrl_ThrowsArgumentException()
        {
            UnitTestHelper.AssertThrows<ArgumentException>(() => MimeTypesMapper.Mappings.ParseUrl("not/a valid\\url"));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using MbUnit.Framework;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    [TestFixture]
    public class EntriesGetTests
    {
        [SetUp]
        public void Setup()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "", "");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);
        }

        [Test]
        [RollBack2]
        public void GetRecentPostsIncludesEnclosure()
        {
            int blogId = Config.CurrentBlog.Id;
            for(int i = 0; i < 10; i++)
            {
                UnitTestHelper.CreateCategory(blogId, "cat" + i);
            }

            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");

            //Associate categories.
            for(int i = 0; i < 5; i++)
            {
                entryZero.Categories.Add("cat" + (i + 1));
                entryOne.Categories.Add("cat" + i);
            }
            entryTwo.Categories.Add("cat8");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);

            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetEntries(3, PostType.BlogPost, PostConfig.IsActive, true);

            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");

            Assert.AreEqual(1, entries.First().Categories.Count);
            Assert.AreEqual(5, entries.ElementAt(1).Categories.Count);
            Assert.AreEqual(5, entries.ElementAt(2).Categories.Count);

            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetEntriesByTagIncludesEnclosure()
        {
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");

            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);


            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            var tags = new List<string>(new[] {"Tag1", "Tag2"});
            new DatabaseObjectProvider().SetEntryTagList(entryZero.Id, tags);
            new DatabaseObjectProvider().SetEntryTagList(entryOne.Id, tags);


            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByTag(3, "Tag1");

            //Test outcome
            Assert.AreEqual(2, entries.Count, "Should have retrieved two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(1).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(1).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetEntriesByCategoryIncludesEnclosure()
        {
            //Create Category
            int blogId = Config.CurrentBlog.Id;
            int categoryId = UnitTestHelper.CreateCategory(blogId, "Test Category");

            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");


            //Associate Category
            entryZero.Categories.Add("Test Category");
            entryOne.Categories.Add("Test Category");
            entryTwo.Categories.Add("Test Category");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByCategory(3, categoryId, true);


            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");


            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetPostsByDayRangeIncludesEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");


            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);


            //Get Entries
            var beginningOfMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            ICollection<Entry> entries = ObjectProvider.Instance().GetPostsByDayRange(beginningOfMonth, beginningOfMonth.AddMonths(1),
                                                                    PostType.BlogPost, true);


            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");


            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetPostCollectionByMonthIncludesEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetPostsByMonth(DateTime.Now.Month, DateTime.Now.Year);

            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");


            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }
    }
}using System.Linq;
using MbUnit.Framework;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    [TestFixture]
    public class EntryCategoryTests
    {
        [Test]
        [RollBack]
        public void CanAddAndRemoveAllCategories()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("empty title", "username", "password", hostname, string.Empty);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty, "/");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, "");
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Me", "Unit Test Entry", "Body");
            int id = UnitTestHelper.Create(entry);

            int categoryId = UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, "My Subtext UnitTest Category");

            ObjectProvider.Instance().SetEntryCategoryList(id, new[] { categoryId });

            Entry loaded = UnitTestHelper.GetEntry(id, PostConfig.None, true);
            Assert.AreEqual("My Subtext UnitTest Category", loaded.Categories.First(),
                            "Expected a category for this entry");

            ObjectProvider.Instance().SetEntryCategoryList(id, new int[] { });

            loaded = UnitTestHelper.GetEntry(id, PostConfig.None, true);
            Assert.AreEqual(0, loaded.Categories.Count, "Expected that our category would be removed.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using MbUnit.Framework;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Web.HttpModules;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    [TestFixture]
    public class EntryDayGetTests
    {
        [SetUp]
        public void Setup()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);
        }

        [Test]
        [RollBack2]
        public void GetSingleDayReturnsDayWithEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get EntryDay
            EntryDay entries = ObjectProvider.Instance().GetEntryDay(DateTime.Now);

            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");


            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetBlogPostsReturnsAllPostsIfPostConfigNoneSpecified()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            entryZero.IsActive = true;
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            entryOne.IsActive = true;
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryTwo.IsActive = false;
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-three", "body-zero");
            entryThree.IsActive = true;
            entryThree.DateCreated = DateTime.Now.AddDays(10);
            entryThree.DateSyndicated = DateTime.Now.AddDays(10);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryOne);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryTwo);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryThree);

            Assert.IsTrue(entryThree.DateSyndicated > DateTime.Now);

            //Get EntryDay
            ICollection<EntryDay> entryList = ObjectProvider.Instance().GetBlogPostsForHomePage(10, PostConfig.None).ToList();

            //Test outcome
            Assert.AreEqual(2, entryList.Count, "Expected to find two entry days.");
            Assert.AreEqual(1, entryList.First().Count, "Expected to find one entry in the first day.");
            Assert.AreEqual(3, entryList.ElementAt(1).Count, "Expected to find three entries in the second day.");
        }

        [Test]
        [RollBack2]
        public void GetBlogPostsReturnsActiveOnlyAndNoneInFuture()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            entryZero.IsActive = true;
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            entryOne.IsActive = true;
            entryOne.DateCreated = DateTime.Now.AddDays(-1);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryTwo.IsActive = false;
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-three", "body-zero");
            entryThree.IsActive = true;
            entryThree.DateCreated.AddDays(-2);
            entryThree.DateSyndicated = DateTime.Now.AddDays(10);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryOne);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryTwo);
            Thread.Sleep(500);
            UnitTestHelper.Create(entryThree);

            Assert.IsTrue(entryThree.DateSyndicated > DateTime.Now);

            //Get EntryDay
            ICollection<EntryDay> entryList = ObjectProvider.Instance().GetBlogPostsForHomePage(10, PostConfig.IsActive).ToList();

            //Test outcome
            Assert.AreEqual(2, entryList.Count, "Expected to find two entry days.");
            Assert.AreEqual(1, entryList.First().Count);
            Assert.AreEqual(1, entryList.ElementAt(1).Count);
        }

        [Test]
        [RollBack2]
        public void GetBlogPostsReturnsDaysWithEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(500);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(500);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryTwo.IsActive = false;
            Thread.Sleep(500);
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-three", "body-three");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);
            UnitTestHelper.Create(entryThree);

            Assert.IsTrue(entryZero.DateCreated < entryOne.DateCreated);
            Assert.IsTrue(entryOne.DateCreated < entryTwo.DateCreated);
            Assert.IsTrue(entryTwo.DateCreated < entryThree.DateCreated);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get EntryDay
            ICollection<EntryDay> entryList = ObjectProvider.Instance().GetBlogPostsForHomePage(10, PostConfig.IsActive).ToList();

            Collection<Entry> entries = entryList.First();
            //Test outcome
            Assert.AreEqual(1, entryList.Count, "Expected to find one entry day.");

            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetHomePageEntriesReturnsDaysWithEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryTwo.DisplayOnHomePage = false;
            Thread.Sleep(100);
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryThree.DateCreated = DateTime.Now.AddDays(1);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);
            UnitTestHelper.Create(entryThree);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get EntryDay
            ICollection<EntryDay> entryList = ObjectProvider.Instance().GetBlogPostsForHomePage(10, PostConfig.DisplayOnHomepage | PostConfig.IsActive).ToList();

            var days = new EntryDay[2];
            entryList.CopyTo(days, 0);

            //Test outcome
            Assert.AreEqual(2, entryList.Count, "Expected to find two days.");

            EntryDay entries = days[1];
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(1).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(1).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetPostsByCategoryIDReturnsDaysWithEnclosure()
        {
            //Create Category
            int blogId = Config.CurrentBlog.Id;
            int categoryId = UnitTestHelper.CreateCategory(blogId, "Test Category");

            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            Thread.Sleep(100);
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryThree.DateCreated = DateTime.Now.AddDays(1);

            //Associate Category
            entryZero.Categories.Add("Test Category");
            entryOne.Categories.Add("Test Category");
            entryThree.Categories.Add("Test Category");


            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);
            UnitTestHelper.Create(entryThree);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get EntryDay
            ICollection<EntryDay> entryList = ObjectProvider.Instance().GetBlogPostsByCategoryGroupedByDay(10, categoryId).ToList();

            var days = new EntryDay[2];
            entryList.CopyTo(days, 0);

            //Test outcome
            Assert.AreEqual(2, entryList.Count, "Expected to find two days.");

            EntryDay entries = days[1];
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            Assert.IsNotNull(entries.ElementAt(1).Enclosure, "Entry should have enclosure.");
            UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(1).Enclosure);
        }

        [Test]
        [RollBack2]
        public void GetPostsByMonthReturnsDaysWithEnclosure()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one");
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            Thread.Sleep(100);
            Entry entryThree = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two");
            entryThree.DateCreated = DateTime.Now.AddDays(1);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            UnitTestHelper.Create(entryTwo);
            UnitTestHelper.Create(entryThree);

            //Add Enclosure
            Enclosure enc = UnitTestHelper.BuildEnclosure("Nothing to see here.", "httP://blablabla.com", "audio/mp3",
                                                          entryZero.Id, 12345678, true, true);
            Enclosures.Create(enc);

            //Get EntryDay
            //ICollection<EntryDay> entryList = Entries.GetPostsByMonth(DateTime.Now.Month, DateTime.Now.Year);

            //EntryDay[] days = new EntryDay[2];
            //entryList.CopyTo(days, 0);

            ////Test outcome
            //Assert.AreEqual(2, entryList.Count, "Expected to find two days.");

            //EntryDay entries = days[1];
            //Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            //Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
            //Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            //Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");

            //Assert.IsNull(entries.First().Enclosure, "Entry should not have enclosure.");
            //Assert.IsNull(entries.ElementAt(1).Enclosure, "Entry should not have enclosure.");
            //Assert.IsNotNull(entries.ElementAt(2).Enclosure, "Entry should have enclosure.");
            //UnitTestHelper.AssertEnclosures(enc, entries.ElementAt(2).Enclosure);
        }
    }
}using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    [TestFixture]
    public class EntryTagTests
    {
        [Test]
        [RollBack]
        public void TagDoesNotRetrieveDraftEntry()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            entry.IsActive = false;
            UnitTestHelper.Create(entry);
            var tags = new List<string>(new[] {"Tag1", "Tag2"});
            new DatabaseObjectProvider().SetEntryTagList(entry.Id, tags);
            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByTag(1, "Tag1");
            Assert.AreEqual(0, entries.Count, "Should not retrieve draft entry.");
        }

        [Test]
        [RollBack]
        public void CanTagEntry()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero");
            UnitTestHelper.Create(entry);

            var tags = new List<string>(new[] {"Tag1", "Tag2"});
            new DatabaseObjectProvider().SetEntryTagList(entry.Id, tags);

            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByTag(1, "Tag1");
            Assert.AreEqual(1, entries.Count);
            Assert.AreEqual(entry.Id, entries.First().Id);
        }
    }
}using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    /// <summary>
    /// Some unit tests around updating entries.
    /// </summary>
    [TestFixture]
    public class EntryUpdateTests
    {
        string _hostName;

        [Test]
        [RollBack]
        public void CanDeleteEntry()
        {
            Config.CreateBlog("", "username", "password", _hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, string.Empty);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test", "Body Rocking");
            UnitTestHelper.Create(entry);

            Entry savedEntry = UnitTestHelper.GetEntry(entry.Id, PostConfig.None, false);
            Assert.IsNotNull(savedEntry);

            ObjectProvider.Instance().DeleteEntry(entry.Id);

            savedEntry = UnitTestHelper.GetEntry(entry.Id, PostConfig.None, false);
            Assert.IsNull(savedEntry, "Entry should now be null.");
        }

        /// <summary>
        /// Tests that setting the date syndicated to null removes the item from syndication.
        /// </summary>
        [Test]
        [RollBack]
        public void SettingDateSyndicatedToNullRemovesItemFromSyndication()
        {
            //arrange
            Config.CreateBlog("", "username", "password", _hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, string.Empty);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test", "Body Rocking");
            UnitTestHelper.Create(entry);

            Assert.IsTrue(entry.IncludeInMainSyndication,
                          "Failed to setup this test properly.  This entry should be included in the main syndication.");
            Assert.IsFalse(NullValue.IsNull(entry.DateSyndicated),
                           "Failed to setup this test properly. DateSyndicated should be null.");

            //act
            entry.DateSyndicated = NullValue.NullDateTime;

            //assert
            Assert.IsFalse(entry.IncludeInMainSyndication,
                           "Setting the DateSyndicated to a null date should have reset 'IncludeInMainSyndication'.");

            //save it
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            UnitTestHelper.Update(entry, subtextContext.Object);
            Entry savedEntry = UnitTestHelper.GetEntry(entry.Id, PostConfig.None, false);

            //assert again
            Assert.IsFalse(savedEntry.IncludeInMainSyndication,
                           "This item should still not be included in main syndication.");
        }

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, string.Empty);
        }

        [TearDown]
        public void TearDown()
        {
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using MbUnit.Framework;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Components.EntryTests
{
    [TestFixture]
    public class FutureEntriesGetTests
    {
        [SetUp]
        public void Setup()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "", "");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);
            Config.CurrentBlog.TimeZoneId = TimeZonesTest.HawaiiTimeZoneId;
        }

        [Test]
        [RollBack2]
        public void GetRecentPostsDoesNotIncludeFuturePosts()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero", null,
                                                                               NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one", null,
                                                                              NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two", null,
                                                                              NullValue.NullDateTime);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            entryTwo.DateSyndicated = Config.CurrentBlog.TimeZone.Now.AddMinutes(20);
            UnitTestHelper.Create(entryTwo);

            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetEntries(3, PostType.BlogPost, PostConfig.IsActive, true);

            //Test outcome
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            //Get Entries
            entries = ObjectProvider.Instance().GetEntries(3, PostType.BlogPost, PostConfig.IsActive, true);

            //Test outcome
            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");

            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");
            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
        }

        [Test]
        [RollBack2]
        public void GetEntriesByTagDoesNotIncludeFuturePosts()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero", null,
                                                                               NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one", null,
                                                                              NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two", null,
                                                                              NullValue.NullDateTime);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            entryTwo.DateSyndicated = Config.CurrentBlog.TimeZone.Now.AddMinutes(20);
            UnitTestHelper.Create(entryTwo);


            var tags = new List<string>(new[] {"Tag1", "Tag2"});
            new DatabaseObjectProvider().SetEntryTagList(entryZero.Id, tags);
            new DatabaseObjectProvider().SetEntryTagList(entryOne.Id, tags);
            new DatabaseObjectProvider().SetEntryTagList(entryTwo.Id, tags);


            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByTag(3, "Tag1");

            //Test outcome
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            //Test outcome
            entries = ObjectProvider.Instance().GetEntriesByTag(3, "Tag1");

            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");
            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
        }

        [Test]
        [RollBack2]
        public void GetEntriesByCategoryDoesNotIncludeFuturePosts()
        {
            //Create Category
            int blogId = Config.CurrentBlog.Id;
            int categoryId = UnitTestHelper.CreateCategory(blogId, "Test Category");

            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero", null,
                                                                               NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one", null,
                                                                              NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two", null,
                                                                              NullValue.NullDateTime);

            //Associate Category
            entryZero.Categories.Add("Test Category");
            entryOne.Categories.Add("Test Category");
            entryTwo.Categories.Add("Test Category");

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            entryTwo.DateSyndicated = Config.CurrentBlog.TimeZone.Now.AddMinutes(20);
            UnitTestHelper.Create(entryTwo);


            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetEntriesByCategory(3, categoryId, true);


            //Test outcome
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            //Test outcome
            entries = ObjectProvider.Instance().GetEntriesByCategory(3, categoryId, true);

            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");
            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
        }

        [Test]
        [RollBack2]
        public void GetPostsByDayRangeDoesNotIncludeFuturePosts()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero", null,
                                                                               NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one", null,
                                                                              NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two", null,
                                                                              NullValue.NullDateTime);


            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            entryTwo.DateSyndicated = Config.CurrentBlog.TimeZone.Now.AddMinutes(20);
            UnitTestHelper.Create(entryTwo);

            //Get Entries
            DateTime now = Config.CurrentBlog.TimeZone.Now;
            var beginningOfMonth = new DateTime(now.Year, now.Month, 1);
            ICollection<Entry> entries = ObjectProvider.Instance().GetPostsByDayRange(beginningOfMonth, beginningOfMonth.AddMonths(1),
                                                                    PostType.BlogPost, true);

            //Test outcome
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;
            entries = ObjectProvider.Instance().GetPostsByDayRange(beginningOfMonth, beginningOfMonth.AddMonths(1), PostType.BlogPost,
                                                 true);

            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");
            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
        }

        [Test]
        [RollBack2]
        public void GetPostCollectionByMonthDoesNotIncludeFuturePosts()
        {
            //Create some entries.
            Entry entryZero = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-zero", "body-zero", null,
                                                                               NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryOne = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-one", "body-one", null,
                                                                              NullValue.NullDateTime);
            Thread.Sleep(100);
            Entry entryTwo = UnitTestHelper.CreateEntryInstanceForSyndication("me", "title-two", "body-two", null,
                                                                              NullValue.NullDateTime);

            //Persist entries.
            UnitTestHelper.Create(entryZero);
            UnitTestHelper.Create(entryOne);
            DateTime now = Config.CurrentBlog.TimeZone.Now;
            entryTwo.DateSyndicated = now.AddMinutes(20);
            UnitTestHelper.Create(entryTwo);

            //Get Entries
            ICollection<Entry> entries = ObjectProvider.Instance().GetPostsByMonth(now.Month, now.Year);

            //Test outcome
            Assert.AreEqual(2, entries.Count, "Expected to find two entries.");

            Assert.AreEqual(entries.First().Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryZero.Id, "Ordering is off.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;
            entries = ObjectProvider.Instance().GetPostsByMonth(now.Month, now.Year);

            Assert.AreEqual(3, entries.Count, "Expected to find three entries.");
            Assert.AreEqual(entries.ElementAt(1).Id, entryOne.Id, "Ordering is off.");
            Assert.AreEqual(entries.ElementAt(2).Id, entryZero.Id, "Ordering is off.");
            Assert.AreEqual(entries.First().Id, entryTwo.Id, "Ordering is off.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Linq;
using System.Threading;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.EntryTestsi
{
    /// <summary>
    /// Tests the methods to obtain the previous and next entry to an entry.
    /// </summary>
    [TestFixture]
    public class PreviousNextTests
    {
        /// <summary>
        /// Test the case where we have a previous, but no next entry.
        /// </summary>
        [Test]
        [RollBack]
        public void GetPreviousAndNextEntriesReturnsPreviousWhenNoNextExists()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry previousEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                   UnitTestHelper.GenerateUniqueString(),
                                                                                   DateTime.Now.AddDays(-1));
            Entry currentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                  UnitTestHelper.GenerateUniqueString(),
                                                                                  DateTime.Now);

            int previousId = UnitTestHelper.Create(previousEntry);
            int currentId = UnitTestHelper.Create(currentEntry);

            var entries = ObjectProvider.Instance().GetPreviousAndNextEntries(currentId,
                                                                                             PostType.BlogPost);
            Assert.AreEqual(1, entries.Count, "Since there is no next entry, should return only 1");
            Assert.AreEqual(previousId, entries.First().Id, "The previous entry does not match expectations.");
        }

        /// <summary>
        /// Test the case where we have a next, but no previous entry.
        /// </summary>
        [Test]
        [RollBack]
        public void GetPreviousAndNextEntriesReturnsNextWhenNoPreviousExists()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry currentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                  UnitTestHelper.GenerateUniqueString(),
                                                                                  DateTime.Now.AddDays(-1));
            Entry nextEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                               UnitTestHelper.GenerateUniqueString(),
                                                                               DateTime.Now);

            int currentId = UnitTestHelper.Create(currentEntry);
            int nextId = UnitTestHelper.Create(nextEntry);

            var entries = ObjectProvider.Instance().GetPreviousAndNextEntries(currentId,
                                                                                             PostType.BlogPost);
            Assert.AreEqual(1, entries.Count, "Since there is no previous entry, should return only next");
            Assert.AreEqual(nextId, entries.First().Id, "The next entry does not match expectations.");
        }

        /// <summary>
        /// Test the case where we have both a previous and next.
        /// </summary>
        [Test]
        [RollBack]
        public void GetPreviousAndNextEntriesReturnsBoth()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry previousEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                   UnitTestHelper.GenerateUniqueString(),
                                                                                   DateTime.Now.AddDays(-2));
            Entry currentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                  UnitTestHelper.GenerateUniqueString(),
                                                                                  DateTime.Now.AddDays(-1));
            Entry nextEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                               UnitTestHelper.GenerateUniqueString(),
                                                                               DateTime.Now);

            int previousId = UnitTestHelper.Create(previousEntry);
            Thread.Sleep(100);
            int currentId = UnitTestHelper.Create(currentEntry);
            Thread.Sleep(100);
            int nextId = UnitTestHelper.Create(nextEntry);

            var entries = ObjectProvider.Instance().GetPreviousAndNextEntries(currentId,
                                                                                             PostType.BlogPost);
            Assert.AreEqual(2, entries.Count, "Expected both previous and next.");

            //The more recent one is next because of desceding sort.
            Assert.AreEqual(nextId, entries.First().Id, "The next entry does not match expectations.");
            Assert.AreEqual(previousId, entries.ElementAt(1).Id, "The previous entry does not match expectations.");
        }

        /// <summary>
        /// Test the case where we have more than three entries.
        /// </summary>
        [Test]
        [RollBack]
        public void GetPreviousAndNextEntriesReturnsCorrectEntries()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry firstEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                UnitTestHelper.GenerateUniqueString(),
                                                                                DateTime.Now.AddDays(-3));
            Entry previousEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                   UnitTestHelper.GenerateUniqueString(),
                                                                                   DateTime.Now.AddDays(-2));
            Entry currentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                                  UnitTestHelper.GenerateUniqueString(),
                                                                                  DateTime.Now.AddDays(-1));
            Entry nextEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                               UnitTestHelper.GenerateUniqueString(),
                                                                               DateTime.Now);
            Entry lastEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body",
                                                                               UnitTestHelper.GenerateUniqueString(),
                                                                               DateTime.Now.AddDays(1));

            Thread.Sleep(100);
            int previousId = UnitTestHelper.Create(previousEntry);
            Thread.Sleep(100);
            int currentId = UnitTestHelper.Create(currentEntry);
            Thread.Sleep(100);
            int nextId = UnitTestHelper.Create(nextEntry);
            Thread.Sleep(100);

            var entries = ObjectProvider.Instance().GetPreviousAndNextEntries(currentId, PostType.BlogPost);
            Assert.AreEqual(2, entries.Count, "Expected both previous and next.");

            //The more recent one is next because of desceding sort.
            Assert.AreEqual(nextId, entries.First().Id, "The next entry does not match expectations.");
            Assert.AreEqual(previousId, entries.ElementAt(1).Id, "The previous entry does not match expectations.");
        }

        /// <summary>
        /// Make sure that previous and next are based on syndication date and not entry id.
        /// </summary>
        [Test]
        [RollBack]
        public void GetPreviousAndNextBasedOnSyndicationDateNotEntryId()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostname, string.Empty);

            Entry previousEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body");
            Entry currentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body");
            Entry nextEntry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "body");

            previousEntry.IsActive = false;
            currentEntry.IsActive = false;
            nextEntry.IsActive = false;

            //Create out of order.
            int currentId = UnitTestHelper.Create(currentEntry);
            int nextId = UnitTestHelper.Create(nextEntry);
            int previousId = UnitTestHelper.Create(previousEntry);

            //Now syndicate.
            previousEntry.IsActive = true;
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            UnitTestHelper.Update(previousEntry, subtextContext.Object);
            Thread.Sleep(100);
            currentEntry.IsActive = true;
            UnitTestHelper.Update(currentEntry, subtextContext.Object);
            Thread.Sleep(100);
            nextEntry.IsActive = true;
            UnitTestHelper.Update(nextEntry, subtextContext.Object);

            Assert.IsTrue(previousId > currentId, "Ids are out of order.");

            var entries = ObjectProvider.Instance().GetPreviousAndNextEntries(currentId, PostType.BlogPost);
            Assert.AreEqual(2, entries.Count, "Expected both previous and next.");
            //The first should be next because of descending sort.
            Assert.AreEqual(nextId, entries.First().Id, "The next entry does not match expectations.");
            Assert.AreEqual(previousId, entries.ElementAt(1).Id, "The previous entry does not match expectations.");
        }
    }
}using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class EntryViewTests
    {
        [Test]
        public void CtorInitializesIdsToNullValue()
        {
            var view = new EntryView();
            Assert.AreEqual(NullValue.NullInt32, view.EntryId);
            Assert.AreEqual(NullValue.NullInt32, view.BlogId);
        }

        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var view = new EntryView();
            UnitTestHelper.AssertSimpleProperties(view);
        }

        [Test]
        [RollBack2]
        public void CanSetAndGetSimpleEntryStatsViewProperties()
        {
            string host = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "blah", "blah", host, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(host, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(host, string.Empty);
            var view = new EntryStatsView();
            UnitTestHelper.AssertSimpleProperties(view);
        }
    }
}using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class ImageTests
    {
        [Test]
        [RollBack]
        public void CanGetRecentImages()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            ObjectProvider provider = ObjectProvider.Instance();
            var category = new LinkCategory
            {
                BlogId = Config.CurrentBlog.Id,
                Description = "Whatever",
                IsActive = true,
                Title = "Whatever"
            };
            int categoryId = provider.CreateLinkCategory(category);

            var image = new Image
            {
                Title = "Title",
                CategoryID = categoryId,
                BlogId = Config.CurrentBlog.Id,
                FileName = "Foo",
                Height = 10,
                Width = 10,
                IsActive = true,
            };
            int imageId = provider.InsertImage(image);

            //act
            ICollection<Image> images = provider.GetImages(Config.CurrentBlog.Host, null, 10);

            //assert
            Assert.AreEqual(1, images.Count);
            Assert.AreEqual(imageId, images.First().ImageID);
        }

        [Test]
        public void CanGetAndSetSimpleProperties()
        {
            var image = new Image();

            image.BlogId = 123;
            Assert.AreEqual(123, image.BlogId);

            image.CategoryID = 321;
            Assert.AreEqual(321, image.CategoryID);

            image.FileName = "Test.jpg";
            Assert.AreEqual("Test.jpg", image.FileName);

            image.Height = 300;
            Assert.AreEqual(300, image.Height);

            image.ImageID = 999;
            Assert.AreEqual(999, image.ImageID);

            image.IsActive = true;
            Assert.IsTrue(image.IsActive);

            image.LocalDirectoryPath = @"d:\";
            Assert.AreEqual(@"d:\", image.LocalDirectoryPath);

            image.Title = "Testing";
            Assert.AreEqual("Testing", image.Title);

            image.Width = 312;
            Assert.AreEqual(312, image.Width);
        }

        [Test]
        public void CanGetFilePath()
        {
            var image = new Image();
            image.LocalDirectoryPath = @"c:\";
            image.FileName = @"Test.jpg";
            Assert.AreEqual(@"c:\Test.jpg", image.FilePath);
        }

        [Test]
        public void GetOriginalFileNamePrependsLetterOWithUnderscore()
        {
            var image = new Image();
            image.LocalDirectoryPath = @"c:\";
            image.FileName = @"Test.jpg";
            Assert.AreEqual(@"o_Test.jpg", image.OriginalFile);
            Assert.AreEqual(@"c:\o_Test.jpg", image.OriginalFilePath);
        }

        [Test]
        public void GetOriginalThumbNailFileNamePrependsLetterTWithUnderscore()
        {
            var image = new Image();
            image.LocalDirectoryPath = @"c:\";
            image.FileName = @"Test.jpg";
            Assert.AreEqual(@"t_Test.jpg", image.ThumbNailFile);
            Assert.AreEqual(@"c:\t_Test.jpg", image.ThumbNailFilePath);
        }

        [Test]
        public void GetResizedFileNamePrependsLetterTWithUnderscore()
        {
            var image = new Image();
            image.FileName = @"Test.jpg";
            image.LocalDirectoryPath = @"c:\";
            Assert.AreEqual(@"r_Test.jpg", image.ResizedFile);
            Assert.AreEqual(@"c:\r_Test.jpg", image.ResizedFilePath);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class KeywordTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var keyword = new KeyWord();
            UnitTestHelper.AssertSimpleProperties(keyword);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class LinkTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var link = new Link();
            UnitTestHelper.AssertSimpleProperties(link);
        }

        [Test]
        public void CanSetAndGetSimpleLinkCategoryProperties()
        {
            var category = new LinkCategory();
            UnitTestHelper.AssertSimpleProperties(category);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components.MetaTagTests
{
    [TestFixture]
    public class MetaTagDeleteTests
    {
        [Test]
        [RollBack2]
        public void CanDeleteBlogMetaTag()
        {
            var blog = UnitTestHelper.CreateBlogAndSetupContext();

            MetaTag tag =
                UnitTestHelper.BuildMetaTag("Steve Harman likes to delete stuff!", "description", null, blog.Id, null,
                                            DateTime.Now);
            MetaTags.Create(tag);
            Assert.AreEqual(1, MetaTags.GetMetaTagsForBlog(blog, 0, 100).Count,
                            "Should be one (1) MetaTag for this blog.");

            // Now let's remove it from the data store
            Assert.IsTrue(MetaTags.Delete(tag.Id), "Deleting the MetaTag failed.");

            Assert.AreEqual(0, MetaTags.GetMetaTagsForBlog(blog, 0, 100).Count,
                            "Should be zero (0) MetaTags for this blog.");
        }

        [Test]
        [RollBack2]
        public void CanDeleteEntryMetaTag()
        {
            var blog = UnitTestHelper.CreateBlogAndSetupContext();
            Entry entry =
                UnitTestHelper.CreateEntryInstanceForSyndication("Steven Harman", "Sweet arse entry!",
                                                                 "Giddy, giddy, goo!");
            UnitTestHelper.Create(entry);

            MetaTag tag = UnitTestHelper.BuildMetaTag("Foo, bar, zaa?", "author", null, blog.Id, entry.Id, DateTime.Now);
            MetaTags.Create(tag);

            Assert.AreEqual(1, MetaTags.GetMetaTagsForBlog(blog, 0, 100).Count,
                            "Should be one (1) MetaTag for this blog.");
            Assert.AreEqual(1, MetaTags.GetMetaTagsForEntry(entry, 0, 100).Count,
                            "Should be one (1) MetaTag for this entry.");

            // Now let's remove it from the data store
            Assert.IsTrue(MetaTags.Delete(tag.Id), "Deleting the MetaTag failed.");

            Assert.AreEqual(0, MetaTags.GetMetaTagsForBlog(blog, 0, 100).Count,
                            "Should be zero (0) MetaTags for this blog.");
            Assert.AreEqual(0, MetaTags.GetMetaTagsForEntry(entry, 0, 100).Count,
                            "Should be zero (0) MetaTag for this entry.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Components.MetaTagTests
{
    [TestFixture]
    public class MetaTagGetTests
    {
        private Blog blog;

        [Test]
        [RollBack2]
        public void GetReturnsZeroWhenNoMetaTagsExistForBlog()
        {
            blog = UnitTestHelper.CreateBlogAndSetupContext();
            Assert.AreEqual(0, MetaTags.GetMetaTagsForBlog(blog, 0, 100).Count,
                            "Shouldn't have found any MetaTags for this blog.");
        }

        [Test]
        [RollBack2]
        public void GetReturnsZeroWhenNoMetaTagsExistForEntry()
        {
            blog = UnitTestHelper.CreateBlogAndSetupContext();

            Entry e =
                UnitTestHelper.CreateEntryInstanceForSyndication("Steve Harman", "Loves Subtexting!", "Roses are red...");
            UnitTestHelper.Create(e);

            Assert.AreEqual(0, MetaTags.GetMetaTagsForEntry(e, 0, 100).Count,
                            "Shouldn't have found any MetaTags for this entry.");
        }

        [Test]
        [RollBack2]
        public void CanGetMetaTagsForBlog()
        {
            blog = UnitTestHelper.CreateBlogAndSetupContext();

            InsertNewMetaTag("Adding description meta tag", "description", null, DateTime.Now, blog.Id, null);
            InsertNewMetaTag("no-cache", null, "cache-control", DateTime.Now, blog.Id, null);

            ICollection<MetaTag> tags = MetaTags.GetMetaTagsForBlog(blog, 0, 100);

            Assert.AreEqual(2, tags.Count, "Should be two tags for this blog.");
        }

        [Test]
        [RollBack2]
        public void CanGetMetaTagsForEntry()
        {
            blog = UnitTestHelper.CreateBlogAndSetupContext();

            Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Steve-o", "Bar",
                                                                       "Steve is still rockin it... or is he?");
            UnitTestHelper.Create(e);

            InsertNewMetaTag("Adding description meta tag", "description", null, DateTime.Now, blog.Id, null);
            InsertNewMetaTag("no-cache", null, "cache-control", DateTime.Now, blog.Id, null);

            // insert a few entry specific tags
            InsertNewMetaTag("Yet Another MetaTag", "author", null, DateTime.Now, blog.Id, e.Id);
            InsertNewMetaTag("One more for good measure", "description", null, DateTime.Now, blog.Id, e.Id);
            InsertNewMetaTag("no-cache", null, "cache-control", DateTime.Now, blog.Id, e.Id);
            InsertNewMetaTag("Mon, 22 Jul 2022 11:12:01 GMT", null, "expires", DateTime.Now, blog.Id, e.Id);

            ICollection<MetaTag> tags = MetaTags.GetMetaTagsForEntry(e, 0, 100);

            Assert.AreEqual(4, tags.Count, "Should have found 4 MetaTags for this entry.");
        }

        private static void InsertNewMetaTag(string content, string nameValue, string httpEquivValue, DateTime created,
                                             int blogId, int? entryId)
        {
            var metaTag = new MetaTag();
            metaTag.Content = content;
            metaTag.Name = nameValue;
            metaTag.HttpEquiv = httpEquivValue;
            metaTag.DateCreated = created;
            metaTag.BlogId = blogId;
            metaTag.EntryId = entryId;
            ObjectProvider.Instance().Create(metaTag);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components.MetaTagTests
{
    [TestFixture]
    public class MetaTagInsertTests
    {
        private Blog blog;

        [RowTest]
        [Row("Steve loves Testing.", "description", null, false, "Did not create blog specific MetaTag.")]
        [Row("Still testing.", "description", null, true, "Did not create Entry specific MetaTag.")]
        [Row("no-cache", null, "cache-control", false, "Did not create blog specific MetaTag.")]
        [Row("Mon, 11 Jul 2020 11:12:01 GMT", null, "expires", true, "Did not create blog specific MetaTag.")]
        [RollBack2]
        public void CanInsertNewMetaTag(string content, string name, string httpEquiv, bool withEntry, string errMsg)
        {
            blog = UnitTestHelper.CreateBlogAndSetupContext();

            int? entryId = null;
            if(withEntry)
            {
                Entry e = UnitTestHelper.CreateEntryInstanceForSyndication("Steven Harman", "My Post", "Foo Bar Zaa!");
                entryId = UnitTestHelper.Create(e);
            }

            MetaTag mt = UnitTestHelper.BuildMetaTag(content, name, httpEquiv, blog.Id, entryId, DateTime.Now);

            // make sure there are no meta-tags for this blog in the data store
            ICollection<MetaTag> tags = MetaTags.GetMetaTagsForBlog(blog, 0, 100);
            Assert.AreEqual(0, tags.Count, "Should be zero MetaTags.");

            // add the meta-tag to the data store
            int tagId = MetaTags.Create(mt);

            tags = MetaTags.GetMetaTagsForBlog(blog, 0, 100);

            Assert.AreEqual(1, tags.Count, errMsg);

            MetaTag newTag = tags.First();

            // make sure all attributes of the meta-tag were written to the data store correctly.
            Assert.AreEqual(tagId, newTag.Id, "Wrong Id");
            Assert.AreEqual(mt.Content, newTag.Content, "Wrong content");
            Assert.AreEqual(mt.Name, newTag.Name, "wrong name attribute");
            Assert.AreEqual(mt.HttpEquiv, newTag.HttpEquiv, "Wrong http-equiv attriubte");
            Assert.AreEqual(mt.BlogId, newTag.BlogId, "Wrong blogId");
            Assert.AreEqual(mt.EntryId, newTag.EntryId, "Wrong entryId");
            Assert.AreEqual(mt.DateCreated.Date, newTag.DateCreated.Date, "Wrong created date");
        }

        [Test]
        public void Create_WithNullMetaTag_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => MetaTags.Create(null));
        }

        [Test]
        public void Create_WithInvalidMetaTag_ThrowsArgumentException()
        {
            UnitTestHelper.AssertThrows<ArgumentException>(() => MetaTags.Create(new MetaTag {Content = null}));
        }

        [Test]
        public void CanNotInsertNullMetaTag()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => MetaTags.Create(null));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components.MetaTagTests
{
    [TestFixture]
    public class MetaTagIsValidTests
    {
        [RowTest]
        [Row(null, null, false, "Must supply either a Name or HttpEquiv")]
        [Row("description", null, true, "Name should be enough")]
        [Row(null, "expires", true, "HttpEquiv should be enough")]
        [Row("description", "expires", false, "Can not have both a Name and HttpEquiv!")]
        public void MetaTagRequiresEitherNameOrHttpEquivAttribute(string nameValue, string httpEquivValue,
                                                                  bool isValidResult, string errMsg)
        {
            var tag = new MetaTag("Steve rocks it!");
            tag.Name = nameValue;
            tag.HttpEquiv = httpEquivValue;

            Assert.AreEqual(tag.IsValid, isValidResult, errMsg);
        }

        [RowTest]
        [Row(null, false, "The Content attribute requires a value")]
        [Row("This is some text!", true, "The Content attribute should allow a value")]
        public void MetaTagRequiresContentAttribute(string contentValue, bool isValidResult, string errMsg)
        {
            var tag = new MetaTag(contentValue);
            tag.Name = "description";

            Assert.AreEqual(tag.IsValid, isValidResult);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Components.MetaTagTests
{
    [TestFixture]
    public class MetatTagUpdateTests
    {
        [RowTest]
        [Row("Steven Harman", "author", null)]
        [Row("no-cache", null, "cache-control")]
        [RollBack2]
        public void CanUpdateMetaTag(string content, string name, string httpequiv)
        {
            var blog = UnitTestHelper.CreateBlogAndSetupContext();

            MetaTag tag = UnitTestHelper.BuildMetaTag(content, name, httpequiv, blog.Id, null, DateTime.Now);
            MetaTags.Create(tag);

            string randomStr = UnitTestHelper.GenerateUniqueString().Left(20);
            tag.Content = content + randomStr;

            if (!string.IsNullOrEmpty(name))
            {
                tag.Name = name + randomStr;
            }

            if (!string.IsNullOrEmpty(httpequiv))
            {
                tag.HttpEquiv = httpequiv + randomStr;
            }

            Assert.IsTrue(MetaTags.Update(tag));

            MetaTag updTag = MetaTags.GetMetaTagsForBlog(blog, 0, 100)[0];

            ValidateMetaTags(tag, updTag);
        }

        [Test]
        [RollBack2]
        public void CanRemoveNameAndAddHttpEquiv()
        {
            var blog = UnitTestHelper.CreateBlogAndSetupContext();

            MetaTag tag = UnitTestHelper.BuildMetaTag("Nothing to see here.", "description", null, blog.Id, null,
                                                      DateTime.Now);
            MetaTags.Create(tag);

            tag.HttpEquiv = "cache-control";
            tag.Name = null;
            tag.Content = "no-cache";

            MetaTags.Update(tag);

            ValidateMetaTags(tag, MetaTags.GetMetaTagsForBlog(blog, 0, 100)[0]);
        }

        [Test]
        [RollBack2]
        public void CanRemoveHttpEquivAndAddName()
        {
            var blog = UnitTestHelper.CreateBlogAndSetupContext();

            MetaTag tag = UnitTestHelper.BuildMetaTag("Still nothing to see here.", null, "expires", blog.Id, null,
                                                      DateTime.Now);
            MetaTags.Create(tag);

            tag.HttpEquiv = null;
            tag.Name = "author";
            tag.Content = "Steve-o-rino!";

            MetaTags.Update(tag);

            ValidateMetaTags(tag, MetaTags.GetMetaTagsForBlog(blog, 0, 100)[0]);
        }

        [Test]
        public void Update_WithInvalidMetaTag_ThrowsArgumentException()
        {
            // arrange
            var metaTag = new MetaTag(null);

            // act, assert
            Assert.IsFalse(metaTag.IsValid);
            UnitTestHelper.AssertThrows<ArgumentException>(() => MetaTags.Update(metaTag));
        }

        [Test]
        public void Update_WithNullMetaTag_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => MetaTags.Update(null));
        }

        private static void ValidateMetaTags(MetaTag expected, MetaTag result)
        {
            Assert.AreEqual(expected.Content, result.Content, "Content didn't get updated.");
            Assert.AreEqual(expected.Name, result.Name, "Name attribute didn't get updated.");
            Assert.AreEqual(expected.HttpEquiv, result.HttpEquiv, "Http-Equiv attribute didn't get updated");
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class ReferrerTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var referrer = new Referrer();
            referrer.ReferrerUrl = "localhost";
            Assert.AreEqual("http://localhost", referrer.ReferrerUrl);
            UnitTestHelper.AssertSimpleProperties(referrer, "ReferrerUrl");
        }
    }
}using System;
using System.Globalization;
using MbUnit.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class ServerTimeZoneInfoTests
    {
        [Test]
        public void ctor_WhenServerAndLocalTimeZonesAreSame_ShowsSameTime()
        {
            //arrange
            TimeZoneInfo pacificTimeZone = TimeZones.GetTimeZones().GetById("Pacific Standard Time");
            TimeZoneInfo serverTimeZone = TimeZones.GetTimeZones().GetById("Pacific Standard Time");
            DateTime now = DateTime.ParseExact("2009/08/11 11:50 PM", "yyyy/MM/dd hh:mm tt",
                                               CultureInfo.InvariantCulture);
            DateTime utcNow = now.ToUniversalTime();

            //act
            var info = new ServerTimeZoneInfo(pacificTimeZone, serverTimeZone, now, utcNow);

            //assert
            Assert.AreEqual("2009/08/11 11:50 PM", info.CurrentTime);
            Assert.AreEqual("2009/08/11 11:50 PM", info.ServerTime);
            Assert.AreEqual("Pacific Standard Time (-07:00:00)", info.ServerTimeZone);
            Assert.AreEqual("2009/08/12 06:50 AM", info.ServerUtcTime);
        }

        [Test]
        public void ctor_WhenServerAndLocalTimeZonesAreDifferent_ShowsDifferentTimes()
        {
            //arrange
            TimeZoneInfo pacificTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            TimeZoneInfo serverTimeZone = TimeZones.GetTimeZones().GetById("Pacific Standard Time");
            DateTime now = DateTime.ParseExact("2009/08/12 12:03 AM", "yyyy/MM/dd hh:mm tt",
                                               CultureInfo.InvariantCulture);
            DateTime utcNow = now.ToUniversalTime();

            //act
            var info = new ServerTimeZoneInfo(pacificTimeZone, serverTimeZone, now, utcNow);

            //assert
            Assert.AreEqual("2009/08/12 04:03 PM", info.CurrentTime);
            Assert.AreEqual("2009/08/12 12:03 AM", info.ServerTime);
            Assert.AreEqual("Pacific Standard Time (-07:00:00)", info.ServerTimeZone);
            Assert.AreEqual("2009/08/12 07:03 AM", info.ServerUtcTime);
        }
    }
}using System.Collections.Generic;
using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class TagTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var tag = new Tag(new KeyValuePair<string, int>());
            UnitTestHelper.AssertSimpleProperties(tag);
        }
    }
}using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Components.TrackbackTests
{
    /// <summary>
    /// Summary description for TrackbackCreation.
    /// </summary>
    [TestFixture]
    public class TrackbackCreation
    {
        /// <summary>
        /// We had a problem in which creating a trackback in the database did 
        /// not set the PostConfig bitmask column correctly.  Thus we could not 
        /// select out the trackbacks.
        /// </summary>
        [Test]
        [RollBack]
        public void CreateTrackbackSetsFeedbackTypeCorrectly()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, string.Empty, string.Empty);
            Blog blog = Config.GetBlog(hostname, string.Empty);
            BlogRequest.Current.Blog = blog;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("phil", "title", "body");
            int parentId = UnitTestHelper.Create(entry);

            var trackback = new Trackback(parentId, "title", new Uri("http://url"), "phil", "body", blog.TimeZone.Now);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            //TODO: FIX!!!
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Setup(c => c.Cache).Returns(new TestCache());
            subtextContext.Setup(c => c.HttpContext.Items).Returns(new Hashtable());
            var commentService = new CommentService(subtextContext.Object, null);
            int id = commentService.Create(trackback, true/*runFilters*/);

            FeedbackItem loadedTrackback = FeedbackItem.Get(id);
            Assert.IsNotNull(loadedTrackback, "Was not able to load trackback from storage.");
            Assert.AreEqual(FeedbackType.PingTrack, loadedTrackback.FeedbackType, "Feedback should be a PingTrack");
        }

        /// <summary>
        /// Make sure that trackbacks show up when displaying feedback for an entry.
        /// </summary>
        [Test]
        [RollBack]
        public void TrackbackShowsUpInFeedbackList()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "blog");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "blog", string.Empty);
            Blog blog = Config.GetBlog(hostname, "blog");
            BlogRequest.Current.Blog = blog;

            Entry parentEntry = UnitTestHelper.CreateEntryInstanceForSyndication("philsath aeuoa asoeuhtoensth",
                                                                                 "sntoehu title aoeuao eu",
                                                                                 "snaot hu aensaoehtu body");
            int parentId = UnitTestHelper.Create(parentEntry);

            ICollection<FeedbackItem> entries = ObjectProvider.Instance().GetFeedbackForEntry(parentEntry);
            Assert.AreEqual(0, entries.Count, "Did not expect any feedback yet.");

            var trackback = new Trackback(parentId, "title", new Uri("http://url"), "phil", "body", blog.TimeZone.Now);
            Config.CurrentBlog.DuplicateCommentsEnabled = true;
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Cache).Returns(new TestCache());
            subtextContext.SetupBlog(Config.CurrentBlog);
            subtextContext.SetupRepository(ObjectProvider.Instance());
            subtextContext.Setup(c => c.HttpContext.Items).Returns(new Hashtable());
            var commentService = new CommentService(subtextContext.Object, null);
            int trackbackId = commentService.Create(trackback, true/*runFilters*/);
            FeedbackItem.Approve(trackback, null);

            entries = ObjectProvider.Instance().GetFeedbackForEntry(parentEntry);
            Assert.AreEqual(1, entries.Count, "Expected a trackback.");
            Assert.AreEqual(trackbackId, entries.First().Id,
                            "The feedback was not the same one we expected. The IDs do not match.");
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.Framework.Components
{
    [TestFixture]
    public class ViewStatTests
    {
        [Test]
        public void CanSetAndGetSimpleProperties()
        {
            var stat = new ViewStat();
            UnitTestHelper.AssertSimpleProperties(stat);
        }
    }
}using MbUnit.Framework;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Configuration
{
    [TestFixture]
    public class BlogAliasTests
    {
        [Test]
        [RollBack2]
        public void CreateBlogAlias()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            var alias = new BlogAlias();
            alias.BlogId = blog.Id;
            alias.Host = UnitTestHelper.GenerateUniqueString();
            alias.Subfolder = UnitTestHelper.GenerateUniqueString();
            Config.AddBlogAlias(alias);
            Assert.AreNotEqual(alias.Id, NullValue.NullInt32);
        }

        [Test]
        [RollBack2]
        public void GetBlogByAliasNoSubfolder()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            BlogAlias alias = UnitTestHelper.CreateBlogAlias(blog, UnitTestHelper.GenerateUniqueString(), "");

            Config.AddBlogAlias(alias);
            Blog testBlog = ObjectProvider.Instance().GetBlogByDomainAlias(alias.Host, alias.Subfolder, false);
            Assert.AreEqual(blog.Id, testBlog.Id, "Found the wrong blog.");
        }

        [Test]
        [RollBack2]
        public void GetBlogByAliasWithSubfolders()
        {
            Blog blog1 = UnitTestHelper.CreateBlogAndSetupContext();
            Blog blog2 = UnitTestHelper.CreateBlogAndSetupContext();
            string host = UnitTestHelper.GenerateUniqueString();
            BlogAlias alias1 = UnitTestHelper.CreateBlogAlias(blog1, host, UnitTestHelper.GenerateUniqueString());
            BlogAlias alias2 = UnitTestHelper.CreateBlogAlias(blog2, host, UnitTestHelper.GenerateUniqueString());

            Config.AddBlogAlias(alias1);
            Config.AddBlogAlias(alias2);

            Blog testBlog1 = ObjectProvider.Instance().GetBlogByDomainAlias(alias1.Host, alias1.Subfolder, false);
            Blog testBlog2 = ObjectProvider.Instance().GetBlogByDomainAlias(alias2.Host, alias2.Subfolder, false);

            Assert.AreEqual(blog1.Id, testBlog1.Id, "Found the wrong blog.");
            Assert.AreEqual(blog2.Id, testBlog2.Id, "Found the wrong blog.");
        }

        [Test]
        [RollBack2]
        public void CheckThatAliasChecksSubfolderIfBlogOnSameHost()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            BlogAlias alias = UnitTestHelper.CreateBlogAlias(blog, blog.Host, UnitTestHelper.GenerateUniqueString());

            Config.AddBlogAlias(alias);

            Blog testBlog = ObjectProvider.Instance().GetBlogByDomainAlias(blog.Host, "", false);
            Assert.IsNull(testBlog, "Should not have found a blog, alias is on same host.");
        }

        [Test]
        [RollBack2]
        public void GetBlogAliasById()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            BlogAlias alias = UnitTestHelper.CreateBlogAlias(blog, UnitTestHelper.GenerateUniqueString(),
                                                             UnitTestHelper.GenerateUniqueString());

            Config.AddBlogAlias(alias);

            BlogAlias testAlias = Config.GetBlogAlias(alias.Id);

            Assert.AreEqual(alias.Id, testAlias.Id, "Found the wrong alias.");
        }

        [Test]
        [RollBack2]
        public void GetBlogAliasByBlog()
        {
            string host = UnitTestHelper.GenerateUniqueString();
            Blog blog1 = UnitTestHelper.CreateBlogAndSetupContext();
            Blog blog2 = UnitTestHelper.CreateBlogAndSetupContext();
            var alias1 = new BlogAlias();
            alias1.BlogId = blog1.Id;
            alias1.Host = host;

            var alias2 = new BlogAlias();
            alias2.BlogId = blog2.Id;
            alias2.Host = host;
            alias2.Subfolder = UnitTestHelper.GenerateUniqueString();

            Config.AddBlogAlias(alias1);
            Config.AddBlogAlias(alias2);

            IPagedCollection<BlogAlias> aliases = blog1.GetBlogAliases(0, 10);
            Assert.AreEqual(1, aliases.Count);
            Assert.AreEqual(alias1.Id, aliases[0].Id);
            Assert.IsEmpty(alias1.Subfolder);
        }

        [Test]
        [RollBack2]
        public void CheckBlogNotReturnedWithoutAlias()
        {
            UnitTestHelper.CreateBlogAndSetupContext();

            Blog testBlog = ObjectProvider.Instance().GetBlogByDomainAlias(UnitTestHelper.GenerateUniqueString(),
                                                                           UnitTestHelper.GenerateUniqueString(), false);

            Assert.IsNull(testBlog);
        }

        [Test]
        [RollBack2]
        public void CheckBlogNotReturnedWithInactiveAlias()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            BlogAlias alias = UnitTestHelper.CreateBlogAlias(blog, UnitTestHelper.GenerateUniqueString(), "", false);

            BlogAlias testAlias = Config.GetBlogAlias(alias.Id);
            Blog testBlog = ObjectProvider.Instance().GetBlogByDomainAlias(alias.Host, alias.Subfolder, false);

            Assert.AreNotEqual(NullValue.NullInt32, alias.Id, "Alias was not saved.");
            Assert.AreEqual(alias.Id, testAlias.Id, "The test alias is not the alias saved.");
            Assert.IsFalse(testAlias.IsActive, "This alias is active.");
            Assert.IsNull(testBlog, "Should not have found a blog");
        }

        [Test]
        [RollBack2]
        public void UpdateBlogAlias()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            string host1 = UnitTestHelper.GenerateUniqueString();
            string host2 = UnitTestHelper.GenerateUniqueString();

            BlogAlias alias = UnitTestHelper.CreateBlogAlias(blog, host1, "");
            Config.AddBlogAlias(alias);

            BlogAlias testAlias = Config.GetBlogAlias(alias.Id);
            testAlias.Host = host2;

            Config.UpdateBlogAlias(testAlias);

            BlogAlias testAlias2 = Config.GetBlogAlias(alias.Id);

            Assert.AreEqual(alias.Id, testAlias.Id, "Did not retrieve the correct alias.");
            Assert.AreEqual(alias.Id, testAlias2.Id, "Did not retrieve the correct alias.");
            Assert.AreEqual(host2, testAlias2.Host, "Alias was not updated");
        }

        [Test]
        [RollBack2]
        public void DeleteBlogAlias()
        {
            Blog blog = UnitTestHelper.CreateBlogAndSetupContext();
            BlogAlias alias1 = UnitTestHelper.CreateBlogAlias(blog, UnitTestHelper.GenerateUniqueString(),
                                                              UnitTestHelper.GenerateUniqueString());
            BlogAlias alias2 = UnitTestHelper.CreateBlogAlias(blog, UnitTestHelper.GenerateUniqueString(),
                                                              UnitTestHelper.GenerateUniqueString());
            Config.AddBlogAlias(alias1);
            Config.AddBlogAlias(alias2);

            Config.DeleteBlogAlias(alias1);

            BlogAlias testAlias1 = Config.GetBlogAlias(alias1.Id);
            BlogAlias testAlias2 = Config.GetBlogAlias(alias2.Id);

            Assert.IsNull(testAlias1, "Did not delete the alias.");
            Assert.IsNotNull(testAlias2, "Deleted the wrong one");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Globalization;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Providers;
using Subtext.Framework.Security;

namespace UnitTests.Subtext.Framework.Configuration
{
    /// <summary>
    /// These are unit tests specifically of the blog creation process, 
    /// as there are many validation rules involved.
    /// </summary>
    [TestFixture]
    public class BlogCreationTests
    {
        string _hostName;

        /// <summary>
        /// Ensures that creating a blog will hash the password 
        /// if UseHashedPassword is set in web.config (as it should be).
        /// </summary>
        [Test]
        [RollBack]
        public void CreatingBlogHashesPassword()
        {
            const string password = "MyPassword";
            string hashedPassword = SecurityHelper.HashPassword(password);

            Config.CreateBlog("", "username", password, _hostName, "MyBlog1");
            Blog info = Config.GetBlog(_hostName, "MyBlog1");
            Assert.IsNotNull(info, "We tried to get blog at " + _hostName + "/MyBlog1 but it was null");

            Config.Settings.UseHashedPasswords = true;
            Assert.IsTrue(Config.Settings.UseHashedPasswords, "This test is voided because we're not hashing passwords");
            Assert.AreEqual(hashedPassword, info.Password, "The password wasn't hashed.");
        }

        /// <summary>
        /// Ran into a problem where saving changes to a blog would rehash the password. 
        /// We need a separate method for changing passwords.
        /// </summary>
        [Test]
        [RollBack]
        public void ModifyingBlogShouldNotChangePassword()
        {
            Config.Settings.UseHashedPasswords = true;
            Config.CreateBlog("", "username", "thePassword", _hostName, "MyBlog1");
            Blog info = Config.GetBlog(_hostName.ToUpper(CultureInfo.InvariantCulture), "MyBlog1");
            string password = info.Password;
            info.LicenseUrl = "http://subtextproject.com/";
            ObjectProvider.Instance().UpdateConfigData(info);

            info = Config.GetBlog(_hostName.ToUpper(CultureInfo.InvariantCulture), "MyBlog1");
            Assert.AreEqual(password, info.Password);
        }

        /// <summary>
        /// If a blog already exists with a domain name and subfolder, one 
        /// cannot create a blog with the same domain name and no subfolder.
        /// </summary>
        [Test]
        [RollBack]
        public void CreatingBlogWithDuplicateHostNameRequiresSubfolderName()
        {
            Config.CreateBlog("", "username", "password", _hostName, "MyBlog1");
            
            
            UnitTestHelper.AssertThrows<BlogRequiresSubfolderException>(() => Config.CreateBlog("", "username", "password", _hostName, string.Empty));
        }

        /// <summary>
        /// Make sure adding two distinct blogs doesn't raise an exception.
        /// </summary>
        [Test]
        [RollBack]
        public void CreatingMultipleBlogs_WithDistinctProperties_DoesNotThrowException()
        {
            Config.CreateBlog("title", "username", "password", UnitTestHelper.GenerateUniqueString(), string.Empty);
            Config.CreateBlog("title", "username", "password", "www2." + UnitTestHelper.GenerateUniqueString(),
                              string.Empty);
            Config.CreateBlog("title", "username", "password", UnitTestHelper.GenerateUniqueString(), string.Empty);
            Config.CreateBlog("title", "username", "password", _hostName, "Blog1");
            Config.CreateBlog("title", "username", "password", _hostName, "Blog2");
            Config.CreateBlog("title", "username", "password", _hostName, "Blog3");
        }

        /// <summary>
        /// Ensures that one cannot create a blog with a duplicate host 
        /// as another blog when both have no subfolder specified.
        /// </summary>
        [Test]
        [RollBack]
        public void CreateBlogCannotCreateOneWithDuplicateHostAndNoSubfolder()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            
            UnitTestHelper.AssertThrows<BlogDuplicationException>(() => Config.CreateBlog("title", "username2", "password2", _hostName, string.Empty));
        }

        /// <summary>
        /// Ensures that one cannot create a blog with a duplicate host 
        /// as another blog when both have no subfolder specified.
        /// </summary>
        [Test]
        [RollBack]
        public void CreateBlogCannotCreateBlogWithHostThatIsDuplicateOfAnotherBlogAlias()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            var alias = new BlogAlias {Host = "example.com", IsActive = true, BlogId = Config.GetBlog(_hostName, string.Empty).Id};
            Config.AddBlogAlias(alias);

            UnitTestHelper.AssertThrows<BlogDuplicationException>(() =>  Config.CreateBlog("title", "username2", "password2", "example.com", string.Empty));
        }

        /// <summary>
        /// Ensures that one cannot create a blog with a duplicate host 
        /// as another blog when both have no subfolder specified.
        /// </summary>
        [Test]
        [RollBack]
        public void CreateBlogCannotAddAliasThatIsDuplicateOfAnotherBlog()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            Config.CreateBlog("title", "username2", "password2", "example.com", string.Empty);

            var alias = new BlogAlias {Host = "example.com", IsActive = true, BlogId = Config.GetBlog(_hostName, string.Empty).Id};
            UnitTestHelper.AssertThrows<BlogDuplicationException>(() => Config.AddBlogAlias(alias));
        }

        /// <summary>
        /// Ensures that one cannot create a blog with a duplicate subfolder and host 
        /// as another blog.
        /// </summary>
        [Test]
        [RollBack]
        public void CreateBlogCannotCreateOneWithDuplicateHostAndSubfolder()
        {
            Config.CreateBlog("title", "username", "password", _hostName, "MyBlog");
            
            UnitTestHelper.AssertThrows<BlogDuplicationException>(() => Config.CreateBlog("title", "username2", "password2", _hostName, "MyBlog"));
        }

        /// <summary>
        /// Ensures that one cannot update a blog to have a duplicate subfolder and host 
        /// as another blog.
        /// </summary>
        [Test]
        [RollBack]
        public void UpdateBlogCannotConflictWithDuplicateHostAndSubfolder()
        {
            string secondHost = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "username", "password", _hostName, "MyBlog");
            Config.CreateBlog("title", "username2", "password2", secondHost, "MyBlog");
            Blog info = Config.GetBlog(secondHost, "MyBlog");
            info.Host = _hostName;

            UnitTestHelper.AssertThrows<BlogDuplicationException>(() => ObjectProvider.Instance().UpdateConfigData(info));
        }

        /// <summary>
        /// Ensures that one update a blog to have a duplicate host 
        /// as another blog when both have no subfolder specified.
        /// </summary>
        [Test]
        [RollBack]
        public void UpdateBlogCannotConflictWithDuplicateHost()
        {
            string anotherHost = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            Config.CreateBlog("title", "username2", "password2", anotherHost, string.Empty);
            Blog info = Config.GetBlog(anotherHost, string.Empty);
            info.Host = _hostName;

            UnitTestHelper.AssertThrows<BlogDuplicationException>(() => ObjectProvider.Instance().UpdateConfigData(info));
        }

        /// <summary>
        /// Ensures that creating a blog cannot "hide" another blog. Read the 
        /// remarks for more details.
        /// </summary>
        /// <remarks>
        /// <p>This exception occurs when adding a blog with the same hostname as another blog, 
        /// but the original blog does not have an subfolder name defined.</p>  
        /// <p>For example, if there exists a blog with the host "www.example.com" with no 
        /// subfolder defined, and the admin adds another blog with the host "www.example.com" 
        /// and subfolder as "MyBlog", this creates a multiple blog situation in the example.com 
        /// domain.  In that situation, each example.com blog MUST have an subfolder name defined. 
        /// The URL to the example.com with no subfolder becomes the aggregate blog.
        /// </p>
        /// </remarks>
        [Test]
        [RollBack]
        public void CreateBlogCannotHideAnotherBlog()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            
            UnitTestHelper.AssertThrows<BlogHiddenException>(() => Config.CreateBlog("title", "username", "password", _hostName, "MyBlog"));
        }

        /// <summary>
        /// Ensures that updating a blog cannot "hide" another blog. Read the 
        /// remarks for more details.
        /// </summary>
        /// <remarks>
        /// <p>This exception occurs when adding a blog with the same hostname as another blog, 
        /// but the original blog does not have an subfolder name defined.</p>  
        /// <p>For example, if there exists a blog with the host "www.example.com" with no 
        /// subfolder defined, and the admin adds another blog with the host "www.example.com" 
        /// and subfolder as "MyBlog", this creates a multiple blog situation in the example.com 
        /// domain.  In that situation, each example.com blog MUST have an subfolder name defined. 
        /// The URL to the example.com with no subfolder becomes the aggregate blog.
        /// </p>
        /// </remarks>
        [Test]
        [RollBack]
        public void UpdatingBlogCannotHideAnotherBlog()
        {
            Config.CreateBlog("title", "username", "password", "www.mydomain.com", string.Empty);

            Blog info = Config.GetBlog("www.mydomain.com", string.Empty);
            info.Host = "mydomain.com";
            info.Subfolder = "MyBlog";
            ObjectProvider.Instance().UpdateConfigData(info);
        }

        /// <summary>
        /// If a blog already exists with a domain name and subfolder, one 
        /// cannot modify another blog to have the same domain name, but with no subfolder.
        /// </summary>
        [Test]
        [RollBack]
        public void UpdatingBlogWithDuplicateHostNameRequiresSubfolderName()
        {
            string anotherHost = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "username", "password", _hostName, "MyBlog1");
            Config.CreateBlog("title", "username", "password", anotherHost, string.Empty);

            Blog info = Config.GetBlog(anotherHost, string.Empty);
            info.Host = _hostName;
            info.Subfolder = string.Empty;

            UnitTestHelper.AssertThrows<BlogRequiresSubfolderException>(() => ObjectProvider.Instance().UpdateConfigData(info));
        }

        /// <summary>
        /// This really tests that looking for duplicates doesn't 
        /// include the blog being edited.
        /// </summary>
        [Test]
        [RollBack]
        public void UpdatingBlogIsFine()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            Blog info = Config.GetBlog(_hostName.ToUpper(CultureInfo.InvariantCulture), string.Empty);
            info.Author = "Phil";
            ObjectProvider.Instance().UpdateConfigData(info); //Make sure no exception is thrown.
        }

        [Test]
        [RollBack]
        public void CanUpdateMobileSkin()
        {
            Config.CreateBlog("title", "username", "password", _hostName, string.Empty);
            Blog info = Config.GetBlog(_hostName.ToUpper(CultureInfo.InvariantCulture), string.Empty);
            info.MobileSkin = new SkinConfig {TemplateFolder = "Mobile", SkinStyleSheet = "Mobile.css"};
            ObjectProvider.Instance().UpdateConfigData(info);
            Blog blog = ObjectProvider.Instance().GetBlogById(info.Id);
            Assert.AreEqual("Mobile", blog.MobileSkin.TemplateFolder);
            Assert.AreEqual("Mobile.css", blog.MobileSkin.SkinStyleSheet);
        }

        /// <summary>
        /// Makes sure that every invalid character is checked 
        /// within the subfolder name.
        /// </summary>
        [Test]
        [RollBack]
        public void EnsureInvalidCharactersMayNotBeUsedInSubfolderName()
        {
            string[] badNames = {
                                    "a{b", "a}b", "a[e", "a]e", "a/e", @"a\e", "a@e", "a!e", "a#e", "a$e", "a'e", "a%",
                                    ":e", "a^", "ae&", "*ae", "a(e", "a)e", "a?e", "+a", "e|", "a\"", "e=", "a'", "e<",
                                    "a>e", "a;", ",e", "a e"
                                };
            foreach(string badName in badNames)
            {
                Assert.IsFalse(Config.IsValidSubfolderName(badName), badName + " is not a valid app name.");
            }
        }

        /// <summary>
        /// Makes sure that every invalid character is checked 
        /// within the subfolder name.
        /// </summary>
        [Test]
        [RollBack]
        public void ReservedSubtextWordsAreNotValidForSubfolders()
        {
            string[] badSubfolders = {
                                         "name.", "tags", "Admin", "bin", "ExternalDependencies", "HostAdmin", "Images",
                                         "Install", "Properties", "Providers", "Scripts", "Skins", "SystemMessages", "UI",
                                         "Modules", "Services", "Category", "Archive", "Archives", "Comments", "Articles",
                                         "Posts", "Story", "Stories", "Gallery", "aggbug", "Sitemap"
                                     };
            foreach(string subfolderCandidate in badSubfolders)
            {
                Assert.IsFalse(Config.IsValidSubfolderName(subfolderCandidate),
                               subfolderCandidate + " is not a valid app name.");
            }
        }

        /// <summary>
        /// Sets the up test fixture.  This is called once for 
        /// this test fixture before all the tests run.
        /// </summary>
        [TestFixtureSetUp]
        public void SetUpTestFixture()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, "MyBlog");
        }

        [TearDown]
        public void TearDown()
        {
        }

        /// <summary>
        /// Tests that creating a blog with a reserved keyword (bin) is not allowed.
        /// </summary>
        [Test]
        [RollBack]
        public void CannotCreateBlogWithSubfolderNameBin()
        {
            UnitTestHelper.AssertThrows<InvalidSubfolderNameException>(() => Config.CreateBlog("title", "blah", "blah", _hostName, "bin"));
        }

        /// <summary>
        /// Tests that modifying a blog with a reserved keyword (bin) is not allowed.
        /// </summary>
        [Test]
        [RollBack]
        public void CannotRenameBlogToHaveSubfolderNameBin()
        {
            Config.CreateBlog("title", "blah", "blah", _hostName, "Anything");
            Blog info = Config.GetBlog(_hostName, "Anything");
            info.Subfolder = "bin";

            UnitTestHelper.AssertThrows<InvalidSubfolderNameException>(() => ObjectProvider.Instance().UpdateConfigData(info));
        }

        /// <summary>
        /// Tests that creating a blog with a reserved keyword (archive) is not allowed.
        /// </summary>
        [Test]
        [RollBack]
        public void CannotCreateBlogWithSubfolderNameArchive()
        {
            UnitTestHelper.AssertThrows<InvalidSubfolderNameException>(() => Config.CreateBlog("title", "blah", "blah", _hostName, "archive"));
        }

        /// <summary>
        /// Tests that creating a blog that ends with . is not allowed
        /// </summary>
        [Test]
        [RollBack]
        public void CannotCreateBlogWithSubfolderNameEndingWithDot()
        {
            UnitTestHelper.AssertThrows<InvalidSubfolderNameException>(() => Config.CreateBlog("title", "blah", "blah", _hostName, "archive."));
        }

        /// <summary>
        /// Tests that creating a blog that contains invalid characters is not allowed.
        /// </summary>
        [Test]
        [RollBack]
        public void CannotCreateBlogWithSubfolderNameWithInvalidCharacters()
        {
            UnitTestHelper.AssertThrows<InvalidSubfolderNameException>(() => Config.CreateBlog("title", "blah", "blah", _hostName, "My!Blog"));
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework.Configuration
{
    [TestFixture]
    public class BlogGroupTests
    {
        [Test]
        [RollBack2]
        public void CanListBlogGroups()
        {
            Assert.Greater(Config.ListBlogGroups(true).Count, 0, "Expected at least one blog group");
        }

        [Test]
        [RollBack2]
        public void CanGetBlogGroup()
        {
            Assert.IsNotNull(Config.GetBlogGroup(1, true), "Expected the default blog group");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Configuration
{
    /// <summary>
    /// These are unit tests specifically for the Config class.
    /// </summary>
    [TestFixture]
    public class ConfigTests
    {
        string hostName;

        /// <summary>
        /// Make sure we can correctly find a blog based on it's HostName and
        /// subfolder when the system has multiple blogs with the same Host.
        /// </summary>
        [Test]
        [RollBack2]
        public void GetBlogInfoFindsBlogWithUniqueHostAndSubfolder()
        {
            string subfolder1 = UnitTestHelper.GenerateUniqueString();
            string subfolder2 = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "username", "password", hostName, subfolder1);
            Config.CreateBlog("title", "username", "password", hostName, subfolder2);

            Blog info = Config.GetBlog(hostName, subfolder1);
            Assert.IsNotNull(info, "Could not find the blog with the unique hostName & subfolder combination.");
            Assert.AreEqual(info.Subfolder, subfolder1, "Oops! Looks like we found the wrong Blog!");

            info = Config.GetBlog(hostName, subfolder2);
            Assert.IsNotNull(info, "Could not find the blog with the unique hostName & subfolder combination.");
            Assert.AreEqual(info.Subfolder, subfolder2, "Oops! Looks like we found the wrong Blog!");
        }

        [Test]
        [RollBack2]
        public void GetBlogInfoDoesNotFindBlogWithWrongSubfolderInMultiBlogSystem()
        {
            string subfolder1 = UnitTestHelper.GenerateUniqueString();
            string subfolder2 = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("title", "username", "password", hostName, subfolder1);
            Config.CreateBlog("title", "username", "password", hostName, subfolder2);

            Blog info = Config.GetBlog(hostName, string.Empty);
            Assert.IsNull(info, "Hmm... Looks like found a blog using too generic of search criteria.");
        }


        [Test]
        [RollBack2]
        public void SettingShowEmailAddressInRssFlagDoesntChangeOtherFlags()
        {
            Config.CreateBlog("title", "username", "password", hostName, string.Empty);
            Blog info = Config.GetBlog(hostName, string.Empty);
            bool test = info.IsAggregated;
            info.ShowEmailAddressInRss = false;
            ObjectProvider.Instance().UpdateConfigData(info);
            info = Config.GetBlog(hostName, string.Empty);

            Assert.AreEqual(test, info.IsAggregated);
        }


        [Test]
        [RollBack2]
        public void GetBlogInfoLoadsOpenIDSettings()
        {
            Config.CreateBlog("title", "username", "password", hostName, string.Empty);

            Blog info = Config.GetBlog(hostName, string.Empty);
            info.OpenIdServer = "http://server.example.com/";
            info.OpenIdDelegate = "http://delegate.example.com/";
            ObjectProvider.Instance().UpdateConfigData(info);
            info = Config.GetBlog(hostName, string.Empty);

            Assert.AreEqual("http://server.example.com/", info.OpenIdServer);
            Assert.AreEqual("http://delegate.example.com/", info.OpenIdDelegate);
        }

        /// <summary>
        /// Sets the up test fixture.  This is called once for 
        /// this test fixture before all the tests run.
        /// </summary>
        [TestFixtureSetUp]
        public void SetUpTestFixture()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }

        [SetUp]
        public void SetUp()
        {
            hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "MyBlog");
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Lucene.Net.Analysis;
using MbUnit.Framework;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework.Configuration
{
    [TestFixture]
    public class FullTextSearchEngineSettingsTests
    {

        [Test]
        public void FullTextSearchEngineSettings_WithEmptyConfig_LanguageIsEnglish()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.AreEqual("English", settings.Language);
        }

        [Test]
        public void FullTextSearchEngineSettings_WithEmptyConfig_StopWordsIsDefaultOne()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.AreEqual(StopAnalyzer.ENGLISH_STOP_WORDS_SET, settings.StopWords);
        }

        [Test]
        public void FullTextSearchEngineSettings_WithStopWordsSpecified_StopWordsAreTheCorrectOnes()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            settings.StopWordsString = "e,a,in,che";
            Assert.IsTrue(settings.StopWords.Contains("e"));
            Assert.IsTrue(settings.StopWords.Contains("a"));
            Assert.IsTrue(settings.StopWords.Contains("in"));
            Assert.IsTrue(settings.StopWords.Contains("che"));
            Assert.IsFalse(settings.StopWords.Contains("ch"));
        }

        [Test]
        public void FullTextSearchEngineSettings_WithEmptyConfig_TuningParametersAreDefault()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.IsNotNull(settings.Parameters);
            Assert.AreEqual(1f, settings.Parameters.EntryNameBoost);
        }

        [Test]
        public void FullTextSearchEngineSettings_WithConfig_MinimumDocumentFrequencyIsAsSet()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.IsNotNull(settings.Parameters);
            Assert.AreEqual(10, settings.Parameters.MinimumDocumentFrequency);
        }

        [Test]
        public void FullTextSearchEngineSettings_WithEmptyConfig_IndexFolderLocationIsAdd_Data()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.AreEqual("~/App_Data", settings.IndexFolderLocation);
        }

        [Test]
        public void FullTextSearchEngineSettings_WithEmptyConfig_IsEnabledIsTrue()
        {
            FullTextSearchEngineSettings settings = FullTextSearchEngineSettings.Settings;
            Assert.IsTrue(settings.IsEnabled);
        }
        
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Caching;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;
using UnitTests.Subtext.Framework.Util;
using System.Globalization;

namespace UnitTests.Subtext.Framework.Data
{
    /// <summary>
    /// Unit tests of the <see cref="Cacher"/> class.
    /// </summary>
    [TestFixture]
    public class CacherTests
    {
        [Test]
        public void GetOrInsert_WithItemNotInCache_InsertsItemReturnedByDelegate()
        {
            // arrange
            var cachedItem = new { Title = "Test" };
            var cache = new Mock<ICache>();
            cache.SetupGet(c => c["key"]).Returns(null);

            // act
            var cached = cache.Object.GetOrInsert("key", () => cachedItem);

            // assert
            Assert.AreEqual(cachedItem, cached);
            cache.Verify(c => c["key"]);
            cache.Verify(c => c.Insert("key",
                                      cachedItem,
                                      null,
                                      It.IsAny<DateTime>(),
                                      TimeSpan.Zero,
                                      CacheItemPriority.Normal,
                                      null));
        }

        [Test]
        public void GetOrInsert_WithItemNotInCache_ReturnsNullIfDelegateNullAndDoesNotTryToCache()
        {
            // arrange
            var cache = new Mock<ICache>();
            cache.SetupGet(c => c["key"]).Returns(null);
            cache.Setup(c => c.Insert("key", null, It.IsAny<CacheDependency>(), It.IsAny<DateTime>(), TimeSpan.Zero, CacheItemPriority.Normal, null)).Throws(new ArgumentNullException());

            // act
            var cached = cache.Object.GetOrInsert<Entry>("key", () => null);

            // assert
            Assert.IsNull(cached);
        }

        [Test]
        public void GetOrInsertSliding_WithItemNotInCache_ReturnsNullIfDelegateNullAndDoesNotTryToCache()
        {
            // arrange
            var cache = new Mock<ICache>();
            cache.SetupGet(c => c["key"]).Returns(null);
            cache.Setup(c => c.Insert("key", null, It.IsAny<CacheDependency>(), DateTime.MaxValue, It.IsAny<TimeSpan>(), CacheItemPriority.Normal, null)).Throws(new ArgumentNullException());

            // act
            var cached = cache.Object.GetOrInsertSliding<Entry>("key", () => null, null, 10);

            // assert
            Assert.IsNull(cached);
        }



        [Test]
        public void GetEntriesForMonth_WithEntriesInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EntryMonth:Date200901Blog1001"]).Returns(new List<Entry> { entry });
            context.Setup(c => c.Repository.GetPostsByMonth(1, 2009)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntries = Cacher.GetEntriesForMonth(dateTime, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
        }

        [Test]
        public void GetEntriesForMonth_WithEntriesNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EntryMonth:Date200901Blog1001"]).Returns(null);
            context.Setup(c => c.Repository.GetPostsByMonth(1, 2009)).Returns(new List<Entry> { entry });

            // act
            var cachedEntries = Cacher.GetEntriesForMonth(dateTime, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
            context.Verify(c => c.Cache["EntryMonth:Date200901Blog1001"]);
        }

        [Test]
        public void GetEntriesForDay_WithEntriesInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EntryDay:Date20090123Blog1001"]).Returns(new EntryDay(dateTime, new List<Entry> { entry }));
            context.Setup(c => c.Repository.GetEntryDay(dateTime)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntries = Cacher.GetEntriesForDay(dateTime, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
        }

        [Test]
        public void GetEntriesForDay_WithEntriesNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var dateTime = DateTime.ParseExact("20090123", "yyyyMMdd", CultureInfo.InvariantCulture);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EntryDay:Date20090123Blog1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntryDay(dateTime)).Returns(new EntryDay(dateTime, new List<Entry> { entry }));

            // act
            var cachedEntries = Cacher.GetEntriesForDay(dateTime, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
            context.Verify(c => c.Cache["EntryDay:Date20090123Blog1001"]);
        }

        [Test]
        public void GetEntriesByCategory_WithEntriesInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EC:Count10Category1BlogId1001"]).Returns(new List<Entry> { entry });
            context.Setup(c => c.Repository.GetEntriesByCategory(10, 1, true /*activeOnly*/)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntries = Cacher.GetEntriesByCategory(10 /*count*/, 1 /*categoryId*/, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
        }

        [Test]
        public void GetEntriesByCategory_WithEntriesNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["EC:Count10Category1BlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntriesByCategory(10, 1, true /*activeOnly*/)).Returns(new List<Entry> { entry });

            // act
            var cachedEntries = Cacher.GetEntriesByCategory(10 /*count*/, 1 /*categoryId*/, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
            context.Verify(c => c.Cache["EC:Count10Category1BlogId1001"]);
        }

        [Test]
        public void GetEntriesByTag_WithEntriesInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["ET:Count10TagTestTagBlogId1001"]).Returns(new List<Entry> { entry });
            context.Setup(c => c.Repository.GetEntriesByTag(10, "TestTag")).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntries = Cacher.GetEntriesByTag(10 /*count*/, "TestTag" /*tag*/, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
        }

        [Test]
        public void GetEntriesByTag_WithEntriesNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["ET:Count10TagTestTagBlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntriesByTag(10, "TestTag")).Returns(new List<Entry> { entry });

            // act
            var cachedEntries = Cacher.GetEntriesByTag(10 /*count*/, "TestTag" /*tag*/, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntries.First());
            context.Verify(c => c.Cache["ET:Count10TagTestTagBlogId1001"]);
        }

        [Test]
        public void GetFeedback_WithFeedbackInCache_RetrievesFromCache()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment) {Title = "Testing Cacher"};
            var parentEntry = new Entry(PostType.BlogPost) {Id = 322};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog {Id = 1001});
            context.Setup(c => c.Cache["ParentEntry:Comments:EntryId322:BlogId1001"]).Returns(new List<FeedbackItem> {feedback});
            context.Setup(c => c.Repository.GetFeedbackForEntry(parentEntry)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedFeedback = Cacher.GetFeedback(parentEntry, context.Object);

            // assert
            Assert.AreEqual(feedback, cachedFeedback.First());
        }

        [Test]
        public void GetFeedback_WithFeedbackNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment) {Title = "Testing Cacher"};
            var parentEntry = new Entry(PostType.BlogPost) {Id = 322};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog {Id = 1001});
            context.Setup(c => c.Cache["ParentEntry:Comments:EntryId322:BlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetFeedbackForEntry(parentEntry)).Returns(new List<FeedbackItem> {feedback});

            // act
            var cachedFeedback = Cacher.GetFeedback(parentEntry, context.Object);

            // assert
            Assert.AreEqual(feedback, cachedFeedback.First());
            context.Verify(c => c.Cache["ParentEntry:Comments:EntryId322:BlogId1001"]);
        }

        [Test]
        public void GetEntry_WithEntryIdAndEntryInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["Entry111BlogId1001"]).Returns(entry);
            context.Setup(c => c.Repository.GetEntry(111, true /*activeOnly*/, true /*includeCategories*/)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntry = Cacher.GetEntry(111, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntry);
        }

        [Test]
        public void GetEntry_WithEntryIdAndEntryNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, Title = "Testing Cacher" };
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["Entry111BlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntry(111, true /*activeOnly*/, true /*includeCategories*/)).Returns(entry);

            // act
            var cachedEntry = Cacher.GetEntry(111, context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntry);
            context.Verify(c => c.Cache["Entry111BlogId1001"]);
        }

        [Test]
        public void GetEntry_WithEntryNameAndEntryInCache_RetrievesFromCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, EntryName = "entry-slug", DateSyndicated = DateTime.Now.AddDays(-1)};
            var timeZone = new Mock<ITimeZone>();
            timeZone.Setup(tz => tz.Now).Returns(DateTime.Now);
            var blog = new Mock<Blog>();
            blog.Setup(b => b.TimeZone).Returns(timeZone.Object);
            blog.Object.Id = 1001;
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog.Object);
            context.Setup(c => c.Cache["EntryNameentry-slugBlogId1001"]).Returns(entry);
            context.Setup(c => c.Repository.GetEntry("entry-slug", true /*activeOnly*/, true /*includeCategories*/)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntry = Cacher.GetEntry("entry-slug", context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntry);
        }

        [Test]
        public void GetEntry_WithEntryNameAndEntryInCacheWithPublishDateInFuture_ReturnsNull()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, EntryName = "entry-slug", DateSyndicated = DateTime.Now.AddDays(2) };
            var timeZone = new Mock<ITimeZone>();
            timeZone.Setup(tz => tz.Now).Returns(DateTime.Now);
            var blog = new Mock<Blog>();
            blog.Setup(b => b.TimeZone).Returns(timeZone.Object);
            blog.Object.Id = 1001;
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog.Object);
            context.Setup(c => c.Cache["EntryNameentry-slugBlogId1001"]).Returns(entry);
            context.Setup(c => c.Repository.GetEntry("entry-slug", true /*activeOnly*/, true /*includeCategories*/)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedEntry = Cacher.GetEntry("entry-slug", context.Object);

            // assert
            Assert.IsNull(cachedEntry);
        }

        [Test]
        public void GetEntry_WithEntryNameAndEntryNotInCacheAndHasPublishDateInFuture_ReturnsNull()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, EntryName = "entry-slug", DateSyndicated = DateTime.Now.AddDays(2) };
            var timeZone = new Mock<ITimeZone>();
            timeZone.Setup(tz => tz.Now).Returns(DateTime.Now);
            var blog = new Mock<Blog>();
            blog.Setup(b => b.TimeZone).Returns(timeZone.Object);
            blog.Object.Id = 1001;
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog.Object);
            context.Setup(c => c.Cache["EntryNameentry-slugBlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntry("entry-slug", true /*activeOnly*/, true /*includeCategories*/)).Returns(entry);

            // act
            var cachedEntry = Cacher.GetEntry("entry-slug", context.Object);

            // assert
            Assert.IsNull(cachedEntry);
            context.Verify(c => c.Cache["EntryNameentry-slugBlogId1001"]);
        }

        [Test]
        public void GetEntry_WithEntryNameAndEntryNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) { Id = 111, EntryName = "entry-slug", DateSyndicated = DateTime.Now.AddDays(-1) };
            var timeZone = new Mock<ITimeZone>();
            timeZone.Setup(tz => tz.Now).Returns(DateTime.Now);
            var blog = new Mock<Blog>();
            blog.Setup(b => b.TimeZone).Returns(timeZone.Object);
            blog.Object.Id = 1001;
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(blog.Object);
            context.Setup(c => c.Cache["EntryNameentry-slugBlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetEntry("entry-slug", true /*activeOnly*/, true /*includeCategories*/)).Returns(entry);

            // act
            var cachedEntry = Cacher.GetEntry("entry-slug", context.Object);

            // assert
            Assert.AreEqual(entry, cachedEntry);
            context.Verify(c => c.Cache["EntryNameentry-slugBlogId1001"]);
        }

        [Test]
        public void GetTopTags_WithTagsInCache_RetrievesFromCache()
        {
            // arrange
            var tag = new Tag(new KeyValuePair<string, int>("Test", 123));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["TagsCount10BlogId1001"]).Returns(new[]  { tag });
            context.Setup(c => c.Repository.GetTopTags(10)).Throws(new Exception("Repository should not have been accessed"));

            // act
            var cachedTags = Cacher.GetTopTags(10, context.Object);

            // assert
            Assert.AreEqual(tag, cachedTags.First());
        }

        [Test]
        public void GetTopTags_WithTagsNotInCache_RetrievesFromRepositoryAndInsertsInCache()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog { Id = 1001 });
            context.Setup(c => c.Cache["TagsCount10BlogId1001"]).Returns(null);
            context.Setup(c => c.Repository.GetTopTags(10)).Returns(new Dictionary<string, int>{{"test", 123}});

            // act
            var cachedTags = Cacher.GetTopTags(10, context.Object);

            // assert
            Assert.AreEqual("test", cachedTags.First().TagName);
            context.Verify(c => c.Cache["TagsCount10BlogId1001"]);
        }


        /// <summary>
        /// This test is to make sure a bug I introduced never happens again.
        /// </summary>
        [Test]
        public void GetEntryFromRequest_WithIdInRouteDataMatchingEntryInRepository_ReturnsEntry()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/123.aspx");
            var routeData = new RouteData();
            routeData.Values.Add("id", "123");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupRequestContext(httpContext, routeData, new Blog {Id = 123})
                .Setup(c => c.Repository.GetEntry(123, true, true)).Returns(new Entry(PostType.BlogPost)
                {Id = 123, Title = "Testing 123"});

            //act
            Entry entry = Cacher.GetEntryFromRequest(true, subtextContext.Object);

            //assert
            Assert.AreEqual(123, entry.Id);
            Assert.AreEqual("Testing 123", entry.Title);
        }

        /// <summary>
        /// This test is to make sure a bug I introduced never happens again.
        /// </summary>
        [Test]
        [RollBack]
        public void GetEntryFromRequest_WithEntryHavingEntryNameButIdInRouteDataMatchingEntryInRepository_RedirectsToUrlWithSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();

            var entry = new Entry(PostType.BlogPost) {Id = 123, EntryName = "testing-slug", Title = "Testing 123"};
            repository.Setup(r => r.GetEntry(123, true, true)).Returns(entry);
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/archive/testing-slug.aspx");
            UnitTestHelper.SetupBlog();
            var response = new Mock<HttpResponseBase>();
            response.Setup(r => r.End());
            response.SetupSet(r => r.StatusCode, 301);
            response.SetupSet(r => r.StatusDescription, "301 Moved Permanently");
            response.SetupSet(r => r.RedirectLocation, "http://localhost/archive/testing-slug.aspx");
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/testing-slug.aspx");
            httpContext.Setup(c => c.Response).Returns(response.Object);
            
            var routeData = new RouteData();
            routeData.Values.Add("id", "123");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupRequestContext(httpContext, routeData)
                .SetupUrlHelper(urlHelper)
                .SetupRepository(repository.Object)
                .SetupBlog(new Blog {Host = "localhost"});
            subtextContext.Setup(c => c.HttpContext).Returns(httpContext.Object);

            //act
            Entry cachedEntry = Cacher.GetEntryFromRequest(true /* allowRedirect */, subtextContext.Object);

            //assert
            response.VerifySet(r => r.StatusCode, 301);
            response.VerifySet(r => r.StatusDescription, "301 Moved Permanently");
            response.VerifySet(r => r.RedirectLocation, "http://localhost/archive/testing-slug.aspx");
            Assert.AreEqual(123, cachedEntry.Id);
            Assert.AreEqual("Testing 123", cachedEntry.Title);
        }

        /// <summary>
        /// This test is to make sure a bug I introduced never happens again.
        /// </summary>
        [Test]
        public void GetEntryFromRequest_WithSlugInRouteDataMatchingEntryInRepository_ReturnsEntry()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/the-slug.aspx");
            var routeData = new RouteData();
            routeData.Values.Add("slug", "the-slug");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupRequestContext(httpContext, routeData)
                .SetupBlog(new Blog {Id = 1, TimeZoneId = TimeZonesTest.PacificTimeZoneId /* pacific */})
                .Setup(c => c.Repository.GetEntry("the-slug", true, true)).Returns(new Entry(PostType.BlogPost)
                {Id = 123, EntryName = "the-slug", Title = "Testing 123"});

            //act
            Entry entry = Cacher.GetEntryFromRequest(true, subtextContext.Object);

            //assert
            Assert.AreEqual(123, entry.Id);
            Assert.AreEqual("Testing 123", entry.Title);
            Assert.AreEqual("the-slug", entry.EntryName);
        }

        /// <summary>
        /// This test is to make sure a bug I introduced never happens again.
        /// </summary>
        [Test]
        public void GetEntryFromRequest_WithNonExistentEntry_DoesNotThrowNullReferenceException()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/99999.aspx");
            var routeData = new RouteData();
            routeData.Values.Add("id", "999999");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupRequestContext(httpContext, routeData)
                .Setup(c => c.Repository.GetEntry(It.IsAny<int>(), true, true)).Returns((Entry)null);

            //act
            Cacher.GetEntryFromRequest(true, subtextContext.Object);

            //assert
            //None needed.
        }

        [Test]
        public void SingleCategoryThrowsExceptionIfContextNull()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(
                () => Cacher.SingleCategory(null)
                );
        }

        [Test]
        public void SingleCategoryReturnsNullForNonExistentCategory()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("slug", "99");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.RequestContext).Returns(requestContext);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 123});
            subtextContext.Setup(c => c.Repository.GetLinkCategory(99, true)).Returns((LinkCategory)null);
            subtextContext.Setup(c => c.Cache[It.IsAny<string>()]).Returns(null);

            //act
            LinkCategory category = Cacher.SingleCategory(subtextContext.Object);

            //assert
            Assert.IsNull(category);
        }

        [Test]
        public void CanGetCategoryByIdRequest()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("slug", "99");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.RequestContext).Returns(requestContext);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 123});
            subtextContext.Setup(c => c.Repository.GetLinkCategory(99, true))
                .Returns(new LinkCategory {Id = 99, Title = "this is a test"});
            subtextContext.Setup(c => c.Cache[It.IsAny<string>()]).Returns(null);

            //act
            LinkCategory category = Cacher.SingleCategory(subtextContext.Object);

            //assert
            Assert.AreEqual("this is a test", category.Title);
        }

        [Test]
        public void CanGetCategoryByNameRequest()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("slug", "this-is-a-test");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.RequestContext).Returns(requestContext);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 123});
            subtextContext.Setup(c => c.Repository.GetLinkCategory("this-is-a-test", true))
                .Returns(new LinkCategory {Id = 99, Title = "this is a test"});
            subtextContext.Setup(c => c.Cache[It.IsAny<string>()]).Returns(null);

            //act
            LinkCategory category = Cacher.SingleCategory(subtextContext.Object);

            //assert
            Assert.AreEqual(99, category.Id);
        }
    }
}using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;

namespace UnitTests.Subtext.Framework.Data
{
    /// <summary>
    /// Summary description for DataHelperTests.
    /// </summary>
    [TestFixture]
    public class DataHelperTests
    {
        [Test]
        public void ReadValue_WithValueMatchingType_ReturnsValueAsType()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.SetupGet(r => r["column"]).Returns(98008);

            //act
            var result = reader.Object.ReadValue<int>("column");

            //assert
            Assert.AreEqual(98008, result);
        }

        [Test]
        public void ReadValue_WithValueReturningDbNull_ReturnsDefaultValue()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.SetupGet(r => r["column"]).Returns(DBNull.Value);

            //act
            var result = reader.Object.ReadValue("column", 8675309);

            //assert
            Assert.AreEqual(8675309, result);
        }

        [Test]
        public void ReadValue_WithValueReturningNull_ReturnsDefaultValue()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.SetupGet(r => r["column"]).Returns(null);

            //act
            var result = reader.Object.ReadValue("column", 8675309);

            //assert
            Assert.AreEqual(8675309, result);
        }

        [Test]
        public void ReadValue_WithValueFuncThrowingFormatException_ReturnsDefaultValue()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.SetupGet(r => r["column"]).Returns(null);

            //act
            var result = reader.Object.ReadValue("column", value => {throw new FormatException();}, 8675309);

            //assert
            Assert.AreEqual(8675309, result);
        }

        [Test]
        public void ReadValue_WithValueFuncThrowingIndexOutOfRangeException_ReturnsDefaultValue()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.SetupGet(r => r["column"]).Returns(null);

            //act
            var result = reader.Object.ReadValue("column", value => { throw new IndexOutOfRangeException(); }, 8675309);

            //assert
            Assert.AreEqual(8675309, result);
        }

        [Test]
        public void AsEnumerable_WithMultipleRows_ReturnsEnumerationOfRows()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(new Queue<bool>(new[] { true, true, false }).Dequeue);
            reader.SetupGet(r => r["column"]).Returns(new Queue<object>(new object[] {123, 456}).Dequeue);

            //act
            var result = reader.Object.ReadEnumerable(r => r.ReadValue<Int32>("column")).ToList();

            //assert
            Assert.AreEqual(123, result[0]);
            Assert.AreEqual(456, result[1]);
        }

        [Test]
        public void AsPagedCollection_WithMultipleRows_ReturnsPagedCollection()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(new Queue<bool>(new[] { true, true, false, true }).Dequeue);
            reader.SetupGet(r => r["column"]).Returns(new Queue<object>(new object[] { 123, 456 }).Dequeue);
            reader.SetupGet(r => r["TotalRecords"]).Returns(2);
            reader.Setup(r => r.NextResult()).Returns(true);

            //act
            var result = reader.Object.ReadPagedCollection(r => r.ReadValue<int>("column"));

            //assert
            Assert.AreEqual(123, result[0]);
            Assert.AreEqual(456, result[1]);
            Assert.AreEqual(2, result.MaxItems);
        }

        [Test]
        public void ReadObject_WithUriProperty_TriesAndParsesUrlAndSetsIt()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["Url"]).Returns("http://subtextproject.com/");
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual("http://subtextproject.com/", result.Url.ToString());
        }

        [Test]
        public void ReadObject_WithComplexProperty_DoesNotTryAndSetIt()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["ComplexObject"]).Throws(new IndexOutOfRangeException());
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(null, result.ComplexObject);
        }

        [Test]
        public void ReadObject_WithReadOnlyProperty_DoesNotTryAndSetIt()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["ReadOnlyBoolean"]).Throws(new IndexOutOfRangeException());
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(false, result.ReadOnlyBoolean);
        }

        [Test]
        public void IDataReader_WithIntColumnHavingSameNameAsProperty_PopulatesObjectWithPropertySetCorrectly()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["IntProperty"]).Returns(42);
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(42, result.IntProperty);
        }

        [Test]
        public void IDataReader_WithStringColumnHavingSameNameAsProperty_PopulatesObjectWithPropertySetCorrectly()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["StringProperty"]).Returns("Hello world");
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual("Hello world", result.StringProperty);
        }

        [Test]
        public void
            IDataReader_WithDateTimeColumnHavingSameNameAsDateTimeProperty_PopulatesObjectWithPropertySetCorrectly()
        {
            //arrange
            DateTime now = DateTime.Now;
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["DateProperty"]).Returns(now);
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(now, result.DateProperty);
        }

        [Test]
        public void IDataReader_WithNullColumn_DoesNotSetProperty()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["NullableIntProperty"]).Returns(DBNull.Value);
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(null, result.NullableIntProperty);
        }

        [Test]
        public void
            IDataReader_WithNullableIntColumnHavingSameNameAsProperty_PopulatesObjectWithNullablePropertySetCorrectly()
        {
            //arrange
            var reader = new Mock<IDataReader>();
            reader.Setup(r => r.Read()).Returns(true).AtMostOnce();
            reader.SetupGet(r => r["NullableIntProperty"]).Returns(23);
            reader.Setup(r => r.Read()).Returns(false);

            //act
            var result = reader.Object.ReadObject<ObjectWithProperties>();

            //assert
            Assert.AreEqual(23, result.NullableIntProperty);
        }

        /// <summary>
        /// Makes sure that we parse the date correctly.
        /// </summary>
        [Test]
        public void LoadArchiveCountParsesDateCorrectly()
        {
            var reader = new TestDataReader();
            reader.AddRecord(1, 2, 2005, 23);
            reader.AddRecord(1, 23, 2005, 23);

            ICollection<ArchiveCount> archive = DataHelper.ReadArchiveCount(reader);
            Assert.AreEqual(2, archive.Count, "Should only have two records.");

            ArchiveCount first = null;
            ArchiveCount second = null;

            foreach(ArchiveCount count in archive)
            {
                if(first == null)
                {
                    first = count;
                    continue;
                }

                if(second == null)
                {
                    second = count;
                    continue;
                }
            }

            Assert.AreEqual(DateTime.ParseExact("01/02/2005", "MM/dd/yyyy", CultureInfo.InvariantCulture), first.Date,
                            "Something happened to the date parsing.");
            Assert.AreEqual(DateTime.ParseExact("01/23/2005", "MM/dd/yyyy", CultureInfo.InvariantCulture), second.Date,
                            "Something happened to the date parsing.");
        }

        #region Teast class that implements IDataReader

        #region Nested type: DataReaderRecord

        internal struct DataReaderRecord
        {
            public int Count;
            public int Day;
            public int Month;
            public int Year;

            public DataReaderRecord(int month, int day, int year, int count)
            {
                Month = month;
                Day = day;
                Year = year;
                Count = count;
            }
        }

        #endregion

        #region Nested type: TestDataReader

        internal class TestDataReader : IDataReader
        {
            readonly ArrayList _records = new ArrayList();
            int _currentIndex = -1;

            #region IDataReader Members

            public string GetName(int i)
            {
                throw new NotImplementedException();
            }

            public string GetDataTypeName(int i)
            {
                throw new NotImplementedException();
            }

            public Type GetFieldType(int i)
            {
                throw new NotImplementedException();
            }

            public object GetValue(int i)
            {
                throw new NotImplementedException();
            }

            public int GetValues(object[] values)
            {
                throw new NotImplementedException();
            }

            public int GetOrdinal(string name)
            {
                throw new NotImplementedException();
            }

            public bool GetBoolean(int i)
            {
                throw new NotImplementedException();
            }

            public byte GetByte(int i)
            {
                throw new NotImplementedException();
            }

            public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
            {
                throw new NotImplementedException();
            }

            public char GetChar(int i)
            {
                throw new NotImplementedException();
            }

            public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
            {
                throw new NotImplementedException();
            }

            public Guid GetGuid(int i)
            {
                throw new NotImplementedException();
            }

            public short GetInt16(int i)
            {
                throw new NotImplementedException();
            }

            public int GetInt32(int i)
            {
                throw new NotImplementedException();
            }

            public long GetInt64(int i)
            {
                throw new NotImplementedException();
            }

            public float GetFloat(int i)
            {
                throw new NotImplementedException();
            }

            public double GetDouble(int i)
            {
                throw new NotImplementedException();
            }

            public string GetString(int i)
            {
                throw new NotImplementedException();
            }

            public decimal GetDecimal(int i)
            {
                throw new NotImplementedException();
            }

            public DateTime GetDateTime(int i)
            {
                throw new NotImplementedException();
            }

            public IDataReader GetData(int i)
            {
                throw new NotImplementedException();
            }

            public bool IsDBNull(int i)
            {
                throw new NotImplementedException();
            }

            public int FieldCount
            {
                get { throw new NotImplementedException(); }
            }

            public object this[int i]
            {
                get { throw new NotImplementedException(); }
            }

            public void Close()
            {
                throw new NotImplementedException();
            }

            public bool NextResult()
            {
                throw new NotImplementedException();
            }

            public bool Read()
            {
                return ++_currentIndex < _records.Count;
            }

            public DataTable GetSchemaTable()
            {
                throw new NotImplementedException();
            }

            public int Depth
            {
                get { throw new NotImplementedException(); }
            }

            public bool IsClosed
            {
                get { throw new NotImplementedException(); }
            }

            public int RecordsAffected
            {
                get { throw new NotImplementedException(); }
            }

            public void Dispose()
            {
                throw new NotImplementedException();
            }

            public object this[string name]
            {
                get
                {
                    if(_records.Count == 0)
                    {
                        throw new InvalidOperationException("No records in this reader.");
                    }

                    var record = (DataReaderRecord)_records[_currentIndex];
                    switch(name)
                    {
                        case "Month":
                            return record.Month;
                        case "Day":
                            return record.Day;
                        case "Year":
                            return record.Year;
                        case "Count":
                            return record.Count;
                    }
                    throw new InvalidOperationException("Unexpected column '" + name + "'");
                }
            }

            #endregion

            public void AddRecord(int month, int day, int year, int count)
            {
                _records.Add(new DataReaderRecord(month, day, year, count));
            }

            public void AddRecord(DataReaderRecord record)
            {
                _records.Add(record);
            }
        }

        #endregion

        #endregion

        #region Nested type: ObjectWithProperties

        public class ObjectWithProperties
        {
            public int IntProperty { get; set; }
            public int? NullableIntProperty { get; set; }
            public string StringProperty { get; set; }
            public bool ReadOnlyBoolean { get; private set; }
            public Blog ComplexObject { get; set; }
            public DateTime DateProperty { get; set; }
            public Uri Url { get; set; }
        }

        #endregion
    }
}using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using MbUnit.Framework;
using Microsoft.ApplicationBlocks.Data;
using Moq;
using Subtext.Extensibility;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Logging;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Util;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Data
{
    [TestFixture]
    public class PagedCollectionRetrievalTests
    {
        string _hostName;

        /// <summary>
        /// Creates some entries and makes sure that the proper 
        /// number of pages and entries per page are created 
        /// for various page sizes.
        /// </summary>
        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedEntriesHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                         int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            AssertPagedCollection(new PagedEntryCollectionTester(), expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        /// <summary>
        /// Creates some entries and makes sure that the proper 
        /// number of pages and entries per page are created 
        /// for various page sizes.
        /// </summary>
        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedEntriesByCategoryHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                                   int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            AssertPagedCollection(new PagedEntryByCategoryCollectionTester(), expectedPageCount, itemsCountOnLastPage,
                                  pageSize, total);
        }

        /// <summary>
        /// Creates some entries and makes sure that the proper 
        /// number of pages and entries per page are created 
        /// for various page sizes.
        /// </summary>
        [RowTest]
        [Ignore("TODO")]
        [Row(11, 10, 2, 1)]
        //[Row(11, 5, 3, 1)]
        //[Row(12, 5, 3, 2)]
        //[Row(10, 5, 2, 5)]
        //[Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedFeedbackHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                          int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            AssertPagedCollection(new FeedbackCollectionTester(), expectedPageCount, itemsCountOnLastPage, pageSize,
                                  total);
        }

        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedLinksHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                       int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            var tester = new LinkCollectionTester();
            AssertPagedCollection(tester, expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedLogEntriesHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                            int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            var tester = new LogEntryCollectionTester();
            AssertPagedCollection(tester, expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedMetaTagsHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                          int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            var tester = new MetaTagCollectionTester();
            AssertPagedCollection(tester, expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedKeywordsHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                          int itemsCountOnLastPage)
        {
            Config.CreateBlog("", "username", "password", _hostName, "blog");
            BlogRequest.Current.Blog = Config.GetBlog(_hostName, "blog");
            var tester = new KeyWordCollectionTester();
            AssertPagedCollection(tester, expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        [RowTest]
        [Row(11, 10, 2, 1)]
        [Row(11, 5, 3, 1)]
        [Row(12, 5, 3, 2)]
        [Row(10, 5, 2, 5)]
        [Row(10, 20, 1, 10)]
        [RollBack]
        public void GetPagedBlogsHandlesPagingProperly(int total, int pageSize, int expectedPageCount,
                                                       int itemsCountOnLastPage)
        {
            var tester = new BlogCollectionTester();
            AssertPagedCollection(tester, expectedPageCount, itemsCountOnLastPage, pageSize, total);
        }

        private static void AssertPagedCollection<TItem>(IPagedCollectionTester<TItem> pagedCollectionTester, int expectedPageCount,
                                                  int itemsCountOnLastPage, int pageSize, int total)
        {
            //Create entries
            for(int i = 0; i < total; i++)
            {
                pagedCollectionTester.Create(i);
            }

            int pageCount = 0;
            int totalSeen = 0;
            for(int pageIndex = 0; pageIndex < expectedPageCount; pageIndex++)
            {
                var items = pagedCollectionTester.GetPagedItems(pageIndex, pageSize);
                Assert.AreEqual(total, items.MaxItems, "The paged collection got the max items wrong)");

                if(pageIndex < expectedPageCount - 1)
                {
                    //Expect to see pageSize number of entries.
                    Assert.AreEqual(pageSize, pagedCollectionTester.GetCount(items),
                                    "The page at index " + pageIndex + "Did not have the correct number of records.");
                }
                else
                {
                    Assert.AreEqual(itemsCountOnLastPage, pagedCollectionTester.GetCount(items),
                                    "The last page did not have the correct number of records.");
                }
                totalSeen += pagedCollectionTester.GetCount(items);

                pageCount++;
            }

            Assert.AreEqual(expectedPageCount, pageCount, "We did not see the expected number of pages.");
            Assert.AreEqual(total, totalSeen, "We did not see the expected number of records.");
        }

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, "blog");
        }

        [TearDown]
        public void TearDown()
        {
        }
    }

    internal interface IPagedCollectionTester<TItem>
    {
        void Create(int index);
        IPagedCollection<TItem> GetPagedItems(int pageIndex, int pageSize);
        int GetCount(IPagedCollection<TItem> collection);
    }

    internal class PagedEntryCollectionTester : IPagedCollectionTester<EntryStatsView>
    {
        public void Create(int index)
        {
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Phil", "Title" + index,
                                                                                   "Who rocks the party that rocks the party?"));
        }

        public IPagedCollection<EntryStatsView> GetPagedItems(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetEntries(PostType.BlogPost, null, pageIndex, pageSize);
        }

        public int GetCount(IPagedCollection<EntryStatsView> collection)
        {
            return collection.Count;
        }
    }

    internal class PagedEntryByCategoryCollectionTester : IPagedCollectionTester<EntryStatsView>
    {
        readonly int _categoryId;

        public PagedEntryByCategoryCollectionTester()
        {
            var category = new LinkCategory {BlogId = Config.CurrentBlog.Id, IsActive = true, Title = "Foobar", Description = "Unit Test"};
            _categoryId = Links.CreateLinkCategory(category);
        }

        public void Create(int index)
        {
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Phil", "Title" + index,
                                                                           "Who rocks the party that rocks the party?");
            entry.Categories.Add("Foobar");
            UnitTestHelper.Create(entry);
        }

        public IPagedCollection<EntryStatsView> GetPagedItems(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetEntries(PostType.BlogPost, _categoryId, pageIndex, pageSize);
        }

        public int GetCount(IPagedCollection<EntryStatsView> collection)
        {
            return collection.Count;
        }
    }

    internal class FeedbackCollectionTester : IPagedCollectionTester<FeedbackItem>
    {
        public void Create(int index)
        {
            var feedbackItem = new FeedbackItem(FeedbackType.Comment)
            {
                Author = "Phil",
                Title = "Title" + index,
                Body = "Who rocks the party that rocks the party? " + index,
                SourceUrl = new Uri("http://blah/")
            };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Cache).Returns(new TestCache());
            subtextContext.SetupBlog(BlogRequest.Current.Blog);
            subtextContext.SetupRepository(ObjectProvider.Instance());
            subtextContext.Setup(c => c.HttpContext.Items).Returns(new Hashtable());
            var commentService = new CommentService(subtextContext.Object, null);
            commentService.Create(feedbackItem, true /*runFilters*/);
            FeedbackItem.Approve(feedbackItem, null);
        }

        public IPagedCollection<FeedbackItem> GetPagedItems(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetPagedFeedback(pageIndex, pageSize, FeedbackStatusFlag.Approved,
                                                              FeedbackStatusFlag.None, FeedbackType.None);
        }

        public int GetCount(IPagedCollection<FeedbackItem> collection)
        {
            return collection.Count;
        }
    }

    internal class LogEntryCollectionTester : IPagedCollectionTester<LogEntry>
    {
        public void Create(int index)
        {
            SqlParameter[] parameters = {
                                            new SqlParameter("@BlogId", Config.CurrentBlog.Id)
                                            , new SqlParameter("@Date", DateTime.Now)
                                            , new SqlParameter("@Thread", "SomeThread")
                                            , new SqlParameter("@Context", "SomeContext")
                                            , new SqlParameter("@Level", "unit test")
                                            , new SqlParameter("@Logger", "UnitTestLogger")
                                            ,
                                            new SqlParameter("@Message",
                                                             "This test was brought to you by the letter 'Q'.")
                                            , new SqlParameter("@Exception", "")
                                            , new SqlParameter("@Url", "http://localhost/")
                                        };
            SqlHelper.ExecuteNonQuery(Config.ConnectionString, CommandType.StoredProcedure, "subtext_AddLogEntry",
                                      parameters);
        }

        public IPagedCollection<LogEntry> GetPagedItems(int pageIndex, int pageSize)
        {
            return LoggingProvider.Instance().GetPagedLogEntries(pageIndex, pageSize);
        }

        public int GetCount(IPagedCollection<LogEntry> collection)
        {
            return collection.Count;
        }
    }

    internal class LinkCollectionTester : IPagedCollectionTester<Link>
    {
        readonly int _categoryId;

        public LinkCollectionTester()
        {
            var category = new LinkCategory {BlogId = Config.CurrentBlog.Id, IsActive = true, Title = "Foobar", Description = "Unit Test"};
            _categoryId = Links.CreateLinkCategory(category);

            //Create a couple links that should be ignored because postId is not null.
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Phil", "title", "in great shape");
            int entryId = UnitTestHelper.Create(entry);
            UnitTestHelper.CreateLinkInDb(_categoryId, "A Forgettable Link", entryId, String.Empty);
            UnitTestHelper.CreateLinkInDb(_categoryId, "Another Forgettable Link", entryId, String.Empty);
            UnitTestHelper.CreateLinkInDb(_categoryId, "Another Forgettable Link", entryId, String.Empty);
        }

        public void Create(int index)
        {
            UnitTestHelper.CreateLinkInDb(_categoryId, "A Link To Remember Part " + index, null, String.Empty);
        }

        public IPagedCollection<Link> GetPagedItems(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetPagedLinks(_categoryId, pageIndex, pageSize, true);
        }

        public int GetCount(IPagedCollection<Link> collection)
        {
            return collection.Count;
        }
    }

    internal class KeyWordCollectionTester : IPagedCollectionTester<KeyWord>
    {
        public void Create(int index)
        {
            var keyword = new KeyWord
            {
                BlogId = Config.CurrentBlog.Id,
                Text = "The Keyword" + index,
                Title = "Blah",
                Word = "The Word " + index,
                Rel = "Rel" + index,
                Url = "http://localhost/"
            };
            ObjectProvider.Instance().InsertKeyWord(keyword);
        }

        public IPagedCollection<KeyWord> GetPagedItems(int pageIndex, int pageSize)
        {
            return ObjectProvider.Instance().GetPagedKeyWords(pageIndex, pageSize);
        }

        public int GetCount(IPagedCollection<KeyWord> collection)
        {
            return collection.Count;
        }
    }

    internal class BlogCollectionTester : IPagedCollectionTester<Blog>
    {
        readonly string _host = UnitTestHelper.GenerateUniqueString();

        public void Create(int index)
        {
            Config.CreateBlog("title " + index, "phil", "password", _host, "Subfolder" + index);
        }

        public IPagedCollection<Blog> GetPagedItems(int pageIndex, int pageSize)
        {
            return Blog.GetBlogsByHost(_host, pageIndex, pageSize, ConfigurationFlags.IsActive);
        }

        public int GetCount(IPagedCollection<Blog> collection)
        {
            return collection.Count;
        }
    }

    internal class MetaTagCollectionTester : IPagedCollectionTester<MetaTag>
    {
       public void Create(int index)
        {
            var tag = new MetaTag("test" + index) {DateCreated = DateTime.Now, Name = "foo", BlogId = Config.CurrentBlog.Id};
           MetaTags.Create(tag);
        }

        public IPagedCollection<MetaTag> GetPagedItems(int pageIndex, int pageSize)
        {
            return MetaTags.GetMetaTagsForBlog(Config.CurrentBlog, pageIndex, pageSize);
        }

        public int GetCount(IPagedCollection<MetaTag> collection)
        {
            return collection.Count;
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework.Data
{
    [TestFixture]
    public class RepositoryExtensionsTests
    {
        [Test]
        public void GroupByDayUsingDateCreated_WithEntriesOnMultipleDays_GroupsEntriesByDay()
        {
            // arrange
            var entries = new List<Entry>
            {
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 12:34", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="First Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 09:54", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="Second Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/24", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Third Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/25", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Fourth Entry"}
            };

            // act
            var entryDays = entries.GroupByDayUsingDateCreated();

            // assert
            Assert.AreEqual(3, entryDays.Count());
            var firstDay = entryDays.First();
            Assert.AreEqual(2, firstDay.Count);
            Assert.AreEqual("First Entry", firstDay[0].Title);
            Assert.AreEqual("Second Entry", firstDay[1].Title);
            var secondDay = entryDays.ElementAt(1);
            Assert.AreEqual("Third Entry", secondDay[0].Title);
            var thirdDay = entryDays.ElementAt(2);
            Assert.AreEqual("Fourth Entry", thirdDay[0].Title);
        }

        [Test]
        public void GetBlogPostsForHomePage_GroupsPostsByDateCreated()
        {
            // arrange
            var entries = new List<Entry>
            {
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 12:34", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="First Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 09:54", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="Second Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/24", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Third Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/25", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Fourth Entry"}
            };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntries(10, PostType.BlogPost, PostConfig.None, false)).Returns(entries);

            // act
            var entryDays = repository.Object.GetBlogPostsForHomePage(10, PostConfig.None);

            // assert
            Assert.AreEqual(3, entryDays.Count());
            var firstDay = entryDays.First();
            Assert.AreEqual(2, firstDay.Count);
            Assert.AreEqual("First Entry", firstDay[0].Title);
            Assert.AreEqual("Second Entry", firstDay[1].Title);
            var secondDay = entryDays.ElementAt(1);
            Assert.AreEqual("Third Entry", secondDay[0].Title);
            var thirdDay = entryDays.ElementAt(2);
            Assert.AreEqual("Fourth Entry", thirdDay[0].Title);
        }

        [Test]
        public void GetBlogPostsByCategoryGroupedByDay_GroupsPostsByDateCreated()
        {
            // arrange
            var entries = new List<Entry>
            {
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 12:34", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="First Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/23 09:54", "yyyy/MM/dd hh:mm", CultureInfo.InvariantCulture), Title="Second Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/24", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Third Entry"},
                new Entry(PostType.BlogPost) {DateCreated = DateTime.ParseExact("2008/01/25", "yyyy/MM/dd", CultureInfo.InvariantCulture), Title="Fourth Entry"}
            };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntriesByCategory(10, 1, true)).Returns(entries);

            // act
            var entryDays = repository.Object.GetBlogPostsByCategoryGroupedByDay(10, 1);

            // assert
            Assert.AreEqual(3, entryDays.Count());
            var firstDay = entryDays.First();
            Assert.AreEqual(2, firstDay.Count);
            Assert.AreEqual("First Entry", firstDay[0].Title);
            Assert.AreEqual("Second Entry", firstDay[1].Title);
            var secondDay = entryDays.ElementAt(1);
            Assert.AreEqual("Third Entry", secondDay[0].Title);
            var thirdDay = entryDays.ElementAt(2);
            Assert.AreEqual("Fourth Entry", thirdDay[0].Title);
        }
    }
}
ï»¿using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Data;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Data
{
    [TestFixture]
    public class TransformerTests
    {
        [Test]
        public void MergeLinkCategoriesIntoSingleLinkCategory_WithMultipleCategories_ReturnsSingleCategoryWithLinkCollection()
        {
            // arrange
            var blog = new Blog {Host = "example.com"};

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.CategoryUrl(It.IsAny<Category>())).Returns("/");

            var links = new[]
            {
                new LinkCategory(1, "category 1"),
                new LinkCategory(2, "category 2"),
            };

            // act
            var mergedLinkCategory = Transformer.MergeLinkCategoriesIntoSingleLinkCategory("Title", CategoryType.StoryCollection, links, urlHelper.Object, blog);

            // assert
            Assert.AreEqual(2, mergedLinkCategory.Links.Count);
        }

        [Test]
        public void MergeLinkCategoriesIntoSingleLinkCategory_WithNoCategories_ReturnsNull()
        {
            // arrange
            var blog = new Blog { Host = "example.com" };

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.CategoryUrl(It.IsAny<Category>())).Returns("/");

            var links = new LinkCategory[0];

            // act
            var mergedLinkCategory = Transformer.MergeLinkCategoriesIntoSingleLinkCategory("Title", CategoryType.StoryCollection, links, urlHelper.Object, blog);

            // assert
            Assert.IsNull(mergedLinkCategory);
        }
    }
}
using System;
using System.Net;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Extensibility.Providers;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Email;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Email
{
    [TestFixture]
    public class EmailServiceTests
    {
        [Test]
        public void EmailCommentToBlogAuthor_WithCurrentUserIsAnAdmin_DoesNotSendEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment) {};
            var blog = new Blog {Email = "cody@example.com", UserName = "cody"};
            var emailProvider = new Mock<EmailProvider>();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(new Mock<UrlHelper>().Object);
            context.Setup(c => c.Blog).Returns(blog);
            context.Setup(c => c.User.Identity.Name).Returns("cody");
            context.Setup(c => c.User.IsInRole("Admins")).Returns(true);
            var emailService = new EmailService(emailProvider.Object, new Mock<ITemplateEngine>().Object, context.Object);
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Throws(
                new Exception());

            //act
            emailService.EmailCommentToBlogAuthor(comment);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithBlogHavingNullEmail_DoesNotSendEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment) {};
            var blog = new Blog {Email = string.Empty};
            var emailProvider = new Mock<EmailProvider>();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(new Mock<UrlHelper>().Object);
            context.Setup(c => c.Blog).Returns(blog);
            var emailService = new EmailService(emailProvider.Object, new Mock<ITemplateEngine>().Object, context.Object);
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Throws(
                new Exception());

            //act
            emailService.EmailCommentToBlogAuthor(comment);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentThatIsTrackback_DoesNotSendEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.PingTrack) {};
            var blog = new Blog {Email = "foo@example.com"};
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(new Mock<UrlHelper>().Object);
            context.Setup(c => c.Blog).Returns(blog);
            var emailProvider = new Mock<EmailProvider>();
            var emailService = new EmailService(emailProvider.Object, new Mock<ITemplateEngine>().Object, context.Object);
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Throws(
                new Exception());


            //act
            emailService.EmailCommentToBlogAuthor(comment);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithComment_UsesTitleForSubject()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "the subject", FlaggedAsSpam = false};
            var emailProvider = new Mock<EmailProvider>();
            EmailService emailService = SetupEmailService(comment, emailProvider);
            string subject = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => subject = title);
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("Comment: the subject (via the blog)", subject);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentHavingNullSource_SendsEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment) { Id = 121, Author = "me", Title = "the subject", FlaggedAsSpam = false, Entry = null };
            var emailProvider = new Mock<EmailProvider>();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog {Title = "the blog", Email = "haacked@example.com"});
            context.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            context.Setup(c => c.UrlHelper.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns((VirtualPath)null);
            var templateEngine = new Mock<ITemplateEngine>();
            var template = new Mock<ITextTemplate>();
            template.Setup(t => t.Format(It.IsAny<Object>())).Returns("whatever");
            templateEngine.Setup(t => t.GetTemplate("CommentReceived")).Returns(template.Object);
            var emailService = new EmailService(emailProvider.Object, templateEngine.Object, context.Object);
            string subject = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => subject = title);
            
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("Comment: the subject (via the blog)", subject);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentFlaggedAsSpam_PrefacesSubjectWithSpamHeader()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, FlaggedAsSpam = true, Author = "me", Title = "the subject"};
            var emailProvider = new Mock<EmailProvider>();
            EmailService emailService = SetupEmailService(comment, emailProvider);
            string subject = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => subject = title);
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("[SPAM Flagged] Comment: the subject (via the blog)", subject);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentHavingEmail_UsesEmailAsFromEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Email = "from@example.com", Author = "me", Title = "the subject", FlaggedAsSpam = true};
            var emailProvider = new Mock<EmailProvider>();
            emailProvider.Object.UseCommentersEmailAsFromAddress = true;
            emailProvider.Object.AdminEmail = "admin@example.com";
            EmailService emailService = SetupEmailService(comment, emailProvider);
            string fromEmail = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => fromEmail = from);
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("from@example.com", fromEmail);
        }

        [Test]
        public void
            EmailCommentToBlogAuthor_WithCommentHavingEmailButUseCommentersEmailAsFromAddressSetToFalse_UsesAdminEmailAsFromEmail
            ()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Email = "from@example.com", Author = "me", Title = "the subject", FlaggedAsSpam = true};
            var emailProvider = new Mock<EmailProvider>();
            emailProvider.Object.UseCommentersEmailAsFromAddress = false;
            emailProvider.Object.AdminEmail = "admin@example.com";
            EmailService emailService = SetupEmailService(comment, emailProvider);
            string fromEmail = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => fromEmail = from);
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("admin@example.com", fromEmail);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentHavingNullEmail_UsesProviderEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Email = null, Author = "me", Title = "the subject", FlaggedAsSpam = true};
            var emailProvider = new Mock<EmailProvider>();
            emailProvider.Object.AdminEmail = "admin@example.com";
            EmailService emailService = SetupEmailService(comment, emailProvider);
            string fromEmail = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => fromEmail = from);
            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("admin@example.com", fromEmail);
        }

        private static EmailService SetupEmailService(FeedbackItem comment, Mock<EmailProvider> emailProvider)
        {
            var templateEngine = new Mock<ITemplateEngine>();
            var template = new Mock<ITextTemplate>();
            templateEngine.Setup(t => t.GetTemplate(It.IsAny<string>())).Returns(template.Object);
            template.Setup(t => t.Format(It.IsAny<object>())).Returns("message");
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.FeedbackUrl(comment)).Returns("/");
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            context.Setup(c => c.Blog).Returns(new Blog
            {Email = "test@test.com", Author = "to", Host = "localhost", Title = "the blog"});

            var emailService = new EmailService(emailProvider.Object, templateEngine.Object, context.Object);
            return emailService;
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithBlog_UsesBlogEmailForToEmail()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "the subject", FlaggedAsSpam = false};
            var emailProvider = new Mock<EmailProvider>();
            var templateEngine = new Mock<ITemplateEngine>();
            var template = new Mock<ITextTemplate>();
            templateEngine.Setup(t => t.GetTemplate(It.IsAny<string>())).Returns(template.Object);
            template.Setup(t => t.Format(It.IsAny<object>())).Returns("message");
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.FeedbackUrl(comment)).Returns("/");
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            context.Setup(c => c.Blog).Returns(new Blog
            {Email = "test@test.com", Author = "to", Host = "localhost", Title = "the blog"});

            string toEmail = null;
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => toEmail = to);
            var emailService = new EmailService(emailProvider.Object, templateEngine.Object, context.Object);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("test@test.com", toEmail);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentFlaggedAsSpam_SetsSpamField()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", FlaggedAsSpam = true};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{spamflag}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("Spam Flagged ", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithCommentHavingId_SetsSourceFieldWithUrlContainingId()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", FlaggedAsSpam = true};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.source}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("http://localhost/comment#121", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithEmail_SetsFromEmailAccordingly()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", Email = "test@example.com"};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.email}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("test@example.com", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithoutEmail_SetsFromEmailToNoneProvided()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", Email = null};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.email}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("none given", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithAuthor_SetsAuthorName()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", Email = null};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.author}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("me", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithSourceUrlSpecified_SetsUrl()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", SourceUrl = new Uri("http://example.com/")};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.authorUrl}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("http://example.com/", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithSourceIp_SetsIp()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", IpAddress = IPAddress.Parse("127.0.0.1")};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.ip}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("127.0.0.1", sentMessage);
        }

        [Test]
        public void EmailCommentToBlogAuthor_WithBodyContainingHtml_CleansHtml()
        {
            //arrange
            var comment = new FeedbackItem(FeedbackType.Comment)
            {Id = 121, Author = "me", Title = "subject", Body = "This<br />is not&lt;br /&gt;right"};
            string sentMessage = null;
            EmailService emailService = SetupEmailService(comment, "{comment.body}", sent => sentMessage = sent);

            //act
            emailService.EmailCommentToBlogAuthor(comment);

            //assert
            Assert.AreEqual("This" + Environment.NewLine + "is not" + Environment.NewLine + "right", sentMessage);
        }

        private EmailService SetupEmailService(FeedbackItem comment, string templateText, Action<string> messageCallback)
        {
            var emailProvider = new Mock<EmailProvider>();
            var templateEngine = new Mock<ITemplateEngine>();
            var template = new NamedFormatTextTemplate(templateText);
            var urlHelper = new Mock<UrlHelper>();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            context.Setup(c => c.Blog).Returns(new Blog {Email = "foo@example.com", Author = "to", Host = "localhost"});

            urlHelper.Setup(u => u.FeedbackUrl(comment)).Returns<FeedbackItem>(f => "/comment#" + f.Id);
            templateEngine.Setup(t => t.GetTemplate("CommentReceived")).Returns(template);
            emailProvider.Setup(
                e => e.Send(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Callback
                <string, string, string, string>((to, from, title, message) => messageCallback(message));

            return new EmailService(emailProvider.Object, templateEngine.Object, context.Object);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Email;

namespace UnitTests.Subtext.Framework.Email
{
    [TestFixture]
    public class EmbeddedTemplateEngineTests
    {
        [Test]
        public void GetTemplate_WithCommentReceveid_ReturnsPropertTemplate()
        {
            //arrange
            var templateEngine = new EmbeddedTemplateEngine();

            //act
            ITextTemplate template = templateEngine.GetTemplate("CommentReceived");

            //assert
            Assert.IsTrue(template.ToString().StartsWith("{spamflag}"));
        }
    }
}using MbUnit.Framework;

namespace UnitTests.Subtext.Framework
{
    [TestFixture]
    public class EntryTrackerTests
    {
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using MbUnit.Framework;
using Subtext.Framework.Format;

namespace UnitTests.Subtext.Framework.Format
{
    /// <summary>
    /// Unit tests of the <see cref="UrlFormats"/> class which 
    /// is used to format Subtext specific urls.
    /// </summary>
    [TestFixture]
    public class UrlFormatTests
    {
        /// <summary>
        /// Makes sure that UrlFormats.GetBlogAppFromRequest does the right thing.
        /// </summary>
        [RowTest]
        [Row("/Subtext.Web/MyBlog/default.aspx", "/Subtext.Web", "MyBlog")]
        [Row("/subtext.web/MyBlog/default.aspx", "/Subtext.Web", "MyBlog")]
        [Row("/subtext.web/default.aspx", "/Subtext.Web", "")]
        [Row("/subtext.web", "/Subtext.Web", "")]
        [Row("/subtext.web/myBLOG/", "/Subtext.Web", "myBLOG")]
        [Row("/subtext.web/myblog", "/Subtext.Web", "myblog")]
        [Row("/foo/bar", "/", "foo")]
        public void GetBlogAppFromRequestDoesTheRightThing(string rawUrl, string subfolder, string expected)
        {
            Assert.AreEqual(expected, UrlFormats.GetBlogSubfolderFromRequest(rawUrl, subfolder));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Data;
using MbUnit.Framework;
using Microsoft.ApplicationBlocks.Data;
using Subtext.Framework;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework
{
    [TestFixture]
    public class HostInfoTests
    {
        [Test]
        [RollBack2]
        public void CanLoadHost()
        {
            SqlHelper.ExecuteNonQuery(Config.ConnectionString, CommandType.Text, "DELETE subtext_Host");

            HostInfo.LoadHost(false);

            Assert.IsNull(HostInfo.Instance, "HostInfo should be Null");

            HostInfo.CreateHost("test", "test", "email@example.com");

            Assert.IsNotNull(HostInfo.Instance, "Host should not be null.");
        }

        [Test]
        [RollBack2]
        public void CanUpdateHost()
        {
            EnsureHost();
            HostInfo host = HostInfo.Instance;
            Assert.IsNotNull(host, "Host should not be null.");

            host.HostUserName = "test2";
            host.Password = "password2";
            host.Salt = "salt2";

            HostInfo.UpdateHost(host);

            host = HostInfo.LoadHost(false);
            Assert.AreEqual("test2", host.HostUserName, "Username wasn't changed.");
        }

        static void EnsureHost()
        {
            try
            {
                HostInfo host = HostInfo.LoadHost(true);
                if(host == null)
                {
                    HostInfo.CreateHost("test", "test", "test@example.com");
                }
            }
            catch(InvalidOperationException)
            {
                //Ignore.
            }
        }
    }
}using System;
using System.IO;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework
{
    /// <summary>
    /// Tests of the Images class.
    /// </summary>
    /// <remarks>
    /// All tests should use the TestDirectory directory. For example, to create that 
    /// directory, just do this: Directory.Create(TestDirectory);
    /// </remarks>
    [TestFixture]
    public class ImageTests
    {
        private const string TestDirectory = "unit-test-dir";

        static readonly Byte[] singlePixelBytes =
            Convert.FromBase64String("R0lGODlhAQABAIAAANvf7wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==");

        [Test]
        [RollBack2]
        public void CanUpdate()
        {
            UnitTestHelper.SetupBlog();

            Image image = CreateImageInstance();
            Assert.GreaterEqualThan(Config.CurrentBlog.Id, 0);
            Assert.AreEqual(Config.CurrentBlog.Id, image.BlogId);
            int imageId = Images.InsertImage(image, singlePixelBytes);

            Image saved = ObjectProvider.Instance().GetImage(imageId, true /* activeOnly */);
            Assert.AreEqual(Config.CurrentBlog.Id, saved.BlogId, "The blog id for the image does not match!");
            saved.LocalDirectoryPath = Path.GetFullPath(TestDirectory);
            Assert.AreEqual("Test Image", saved.Title);

            saved.Title = "A Better Title";
            Images.Update(saved, singlePixelBytes);

            Image loaded = ObjectProvider.Instance().GetImage(imageId, true /* activeOnly */);
            Assert.AreEqual(Config.CurrentBlog.Id, loaded.BlogId, "The blog id for the image does not match!");
            loaded.LocalDirectoryPath = Path.GetFullPath(TestDirectory);

            Assert.AreEqual("A Better Title", loaded.Title, "The title was not updated");
        }

        [Test]
        [RollBack2]
        public void CanGetImagesByCategoryId()
        {
            UnitTestHelper.SetupBlog();
            int categoryId = UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, "UnitTestImages",
                                                           CategoryType.ImageCollection);

            Assert.AreEqual(0, Images.GetImagesByCategoryId(categoryId, true).Count);

            Image image = CreateImageInstance(Config.CurrentBlog, categoryId);
            image.IsActive = true;

            int imageId = Images.InsertImage(image, singlePixelBytes);

            ImageCollection images = Images.GetImagesByCategoryId(categoryId, true);
            Assert.AreEqual(1, images.Count, "Expected to get our one image.");
            Assert.AreEqual(imageId, images[0].ImageID);
        }

        [Test]
        [RollBack2]
        public void CanSaveImage()
        {
            string filePath = Path.GetFullPath(@TestDirectory + Path.DirectorySeparatorChar + "test.gif");

            Assert.IsTrue(Images.SaveImage(singlePixelBytes, filePath));
            FileAssert.Exists(filePath);
        }

        [Test]
        public void CanMakeAlbumImages()
        {
            var image = new Image();
            image.Title = "Test Image";
            image.Height = 1;
            image.Width = 1;
            image.IsActive = true;
            image.LocalDirectoryPath = Path.GetFullPath(TestDirectory);
            image.FileName = "test.gif";

            //Write original image.
            Images.SaveImage(singlePixelBytes, image.OriginalFilePath);
            FileAssert.Exists(image.OriginalFilePath);

            Images.MakeAlbumImages(image);
            FileAssert.Exists(image.ResizedFilePath);
            FileAssert.Exists(image.ThumbNailFilePath);
        }

        [Test]
        public void InsertImageReturnsFalseForExistingImage()
        {
            Image image = CreateStandaloneImageInstance();
            Images.SaveImage(singlePixelBytes, image.OriginalFilePath);

            Assert.AreEqual(NullValue.NullInt32, Images.InsertImage(image, singlePixelBytes));
        }

        [Test]
        [RollBack2]
        public void CanInsertAndDeleteImage()
        {
            int imageId = 0;
            Image image = CreateImageInstance();
            image.IsActive = true;
            Image loadedImage = null;
            try
            {
                imageId = Images.InsertImage(image, singlePixelBytes);
                loadedImage = ObjectProvider.Instance().GetImage(imageId, false /* activeOnly */);
                Assert.IsNotNull(loadedImage);
                Assert.AreEqual(image.CategoryID, loadedImage.CategoryID);
            }
            finally
            {
                if(loadedImage != null)
                {
                    Images.DeleteImage(loadedImage);
                }
                Assert.IsNull(ObjectProvider.Instance().GetImage(imageId, false /* activeOnly */));
            }
        }

        private static Image CreateStandaloneImageInstance()
        {
            var image = new Image();
            image.Title = "Test Image";
            image.Height = 1;
            image.Width = 1;
            image.IsActive = true;
            image.LocalDirectoryPath = Path.GetFullPath(TestDirectory);
            image.FileName = "test.gif";
            return image;
        }

        private static Image CreateImageInstance()
        {
            UnitTestHelper.SetupBlog();
            int categoryId = UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, TestDirectory);
            return CreateImageInstance(Config.CurrentBlog, categoryId);
        }

        private static Image CreateImageInstance(Blog currentBlog, int categoryId)
        {
            Image image = CreateStandaloneImageInstance();
            image.BlogId = currentBlog.Id;
            image.CategoryID = categoryId;
            return image;
        }

        [Test]
        public void SaveImageReturnsFalseForInvalidImageName()
        {
            Assert.IsFalse(Images.SaveImage(singlePixelBytes, "!"));
        }

        [Test]
        public void GalleryDirectoryPath_WithBlogAndCategoryId_ReturnPhysicalDirectoryPath()
        {
            // arrange
            UrlHelper helper = UnitTestHelper.SetupUrlHelper("/Subtext.Web");
            Mock<HttpContextBase> httpContext = Mock.Get(helper.HttpContext);
            httpContext.Setup(c => c.Server.MapPath("/Subtext.Web/images/localhost/Subtext_Web/123/")).Returns(
                @"c:\123\");
            var blog = new Blog {Host = "localhost", Subfolder = ""};

            // act
            string path = helper.GalleryDirectoryPath(blog, 123);

            // assert
            Assert.AreEqual(@"c:\123\", path);
        }

        [Test]
        public void DeleteImageThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.DeleteImage(null));
        }

        [Test]
        public void InsertImageThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.InsertImage(null, new byte[0]));
        }

        [Test]
        public void MakeAlbumImagesThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.MakeAlbumImages(null));
        }

        [Test]
        public void SaveImageThrowsArgumentNullExceptionForNullBuffer()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.SaveImage(null, "x"));
        }

        [Test]
        public void SaveImageThrowsArgumentNullExceptionForNullFileName()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.SaveImage(new byte[0], null));
        }

        [Test]
        public void SaveImageThrowsArgumentExceptionForNullFileName()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.SaveImage(new byte[0], ""));
        }

        [Test]
        public void UpdateThrowsArgumentNullExceptionForNullImage()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.Update(null, new byte[0]));
        }

        [Test]
        public void UpdateThrowsArgumentNullExceptionForNullBuffer()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.Update(new Image(), null));
        }

        [Test]
        public void UpdateImageThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => Images.UpdateImage(null));
        }

        [SetUp]
        public void SetUp()
        {
            if(Directory.Exists(TestDirectory))
            {
                Directory.Delete(TestDirectory, true);
            }
            if(Directory.Exists("image"))
            {
                Directory.Delete("image", true);
            }
        }

        [TearDown]
        public void TearDown()
        {
            SetUp();
        }
    }
}ï»¿using System;
using System.Collections.Generic;
using MbUnit.Framework;
using Moq;
using Ninject;
using Ninject.Activation;
using Ninject.Parameters;
using Ninject.Planning.Bindings;
using Subtext.Framework.Infrastructure;

namespace UnitTests.Subtext.Framework.Infrastructure
{
    [TestFixture]
    public class NinjectServiceLocatorTests
    {
        [Test]
        public void GetService_WithKernel_DelegatesToKernel()
        {
            // arrange
            Func<IEnumerable<object>> returnFunc = () => new[] {new TestService()};
            var request = new Mock<IRequest>();
            var kernel = new Mock<IKernel>();
            kernel.Setup(
                k =>
                k.CreateRequest(typeof(ITestService), It.IsAny<Func<IBindingMetadata, bool>>(),
                                It.IsAny<IEnumerable<IParameter>>(), It.IsAny<bool>())).Returns(request.Object);
            kernel.Setup(k => k.Resolve(It.IsAny<IRequest>())).Returns(returnFunc);

            var serviceLocator = new NinjectServiceLocator(kernel.Object);

            // act
            var service = serviceLocator.GetService<ITestService>();

            // assert
            Assert.IsNotNull(service);
            Assert.AreEqual(typeof(TestService), service.GetType());
        }

        [Test]
        public void GetService_WithServiceTypeAndKernel_DelegatesToKernel()
        {
            // arrange
            Func<IEnumerable<object>> returnFunc = () => new[] { new TestService() };
            var request = new Mock<IRequest>();
            var kernel = new Mock<IKernel>();
            kernel.Setup(
                k =>
                k.CreateRequest(typeof(ITestService), It.IsAny<Func<IBindingMetadata, bool>>(),
                                It.IsAny<IEnumerable<IParameter>>(), It.IsAny<bool>())).Returns(request.Object);
            kernel.Setup(k => k.Resolve(It.IsAny<IRequest>())).Returns(returnFunc);

            var serviceLocator = new NinjectServiceLocator(kernel.Object);

            // act
            var service = serviceLocator.GetService(typeof(ITestService));

            // assert
            Assert.IsNotNull(service);
            Assert.AreEqual(typeof(TestService), service.GetType());
        }
    }

    public interface ITestService
    {
        
    }

    public interface IDerivedService : ITestService {}

    public class TestService : IDerivedService {}
}
using System;
using System.Globalization;
using MbUnit.Framework;
using Subtext.Framework.Util;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Infrastructure
{
    [TestFixture]
    public class TimeZoneWrapperTests
    {
        [Test]
        public void Now_ReturnsTimeInLocalTimeZone()
        {
            // arrange
            DateTime utcNow = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt",
                                                  CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            TimeZoneInfo timeZone = TimeZones.GetTimeZones().GetById("Mountain Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(timeZone, TimeZoneInfo.Local, () => utcNow);

            // act
            DateTime now = timeZoneWrapper.Now;

            // assert
            DateTime expected = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt",
                                                    CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            Assert.AreEqual(expected, now);
        }

        [Test]
        public void UtcNow_ReturnsSpecifiedUtcNow()
        {
            // arrange
            DateTime expectedUtcNow = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt",
                                                          CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var timeZoneWrapper = new TimeZoneWrapper(TimeZoneInfo.Local, TimeZoneInfo.Local, () => expectedUtcNow);

            // act
            DateTime utcNow = timeZoneWrapper.UtcNow;

            // assert
            Assert.AreEqual(expectedUtcNow, utcNow);
        }

        [Test]
        public void ServerNow_ReturnsLocalTimeOnServer()
        {
            // arrange
            DateTime utcNow = DateTime.ParseExact("2009/08/15 11:00 PM", "yyyy/MM/dd hh:mm tt",
                                                  CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Korea Standard Time");
            TimeZoneInfo serverTimeZone = TimeZones.GetTimeZones().GetById("Mountain Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, serverTimeZone, () => utcNow);

            // act
            DateTime serverNow = timeZoneWrapper.ServerNow;

            // assert
            DateTime expected = DateTime.ParseExact("2009/08/15 05:00 PM", "yyyy/MM/dd hh:mm tt",
                                                    CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal);
            Assert.AreEqual(expected, serverNow);
        }

        [Test]
        public void ToUtc_ConvertsSpecifiedTimeInTimeZone_ToUtcTime()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => DateTime.UtcNow);
            DateTime expectedUtcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                               CultureInfo.InvariantCulture,
                                                               DateTimeStyles.AdjustToUniversal);
            DateTime tokyoDateTime = TimeZoneInfo.ConvertTimeFromUtc(expectedUtcDateTime, blogTimeZone);

            // act
            DateTime utc = timeZoneWrapper.ToUtc(tokyoDateTime);

            // assert
            Assert.AreEqual(expectedUtcDateTime, utc);
        }

        [Test]
        public void ToServerDateTime_ConvertsSpecifiedTimeInTimeZone_ToServerTimeZone()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            TimeZoneInfo serverTimeZone = TimeZones.GetTimeZones().GetById("Iran Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, serverTimeZone, () => DateTime.UtcNow);
            DateTime expectedUtcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                               CultureInfo.InvariantCulture,
                                                               DateTimeStyles.AdjustToUniversal);
            DateTime tokyoDateTime = TimeZoneInfo.ConvertTimeFromUtc(expectedUtcDateTime, blogTimeZone);
            DateTime iranDateTime = TimeZoneInfo.ConvertTimeFromUtc(expectedUtcDateTime, serverTimeZone);

            // act
            DateTime serverDateTime = timeZoneWrapper.ToServerDateTime(tokyoDateTime);

            // assert
            Assert.AreEqual(iranDateTime, serverDateTime);
        }

        [Test]
        public void FromUtc_ConvertsSpecifiedTime_ToBlogTimeZoneFromUtc()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Fiji Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => DateTime.UtcNow);
            DateTime utcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                       CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);

            // act
            DateTime fijiDateTime = timeZoneWrapper.FromUtc(utcDateTime); // To Fiji Time Zone

            // assert
            DateTime expected = DateTime.ParseExact("2009/08/16 06:18 AM", "yyyy/MM/dd hh:mm tt",
                                                    CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            Assert.AreEqual(expected, fijiDateTime);
        }

        [Test]
        public void FromUtc_ConvertsSpecifiedLocalTime_ToBlogTimeZoneFromUtc()
        {
            // arrange
            var time = new DateTime(2009, 08, 15, 18, 18, 0, DateTimeKind.Local);
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Fiji Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => DateTime.UtcNow);
            
            // act
            var fijiDateTime = timeZoneWrapper.FromUtc(time); // To Fiji Time Zone

            // assert
            DateTime expected = DateTime.ParseExact("2009/08/16 06:18 AM", "yyyy/MM/dd hh:mm tt",
                                                    CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            Assert.AreEqual(expected, fijiDateTime);
        }

        [Test]
        public void FromTimeZone_ConvertsSpecifiedTime_ToBlogTimeZoneFromSpecifiedTimeZone()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Fiji Standard Time");
            TimeZoneInfo tokyoTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => DateTime.UtcNow);
            DateTime utcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                       CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            DateTime tokyoDateTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, tokyoTimeZone);

            // act
            DateTime fijiDateTime = timeZoneWrapper.FromTimeZone(tokyoDateTime, tokyoTimeZone); // To Fiji Time Zone

            // assert
            DateTime expected = DateTime.ParseExact("2009/08/16 06:18 AM", "yyyy/MM/dd hh:mm tt",
                                                    CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            Assert.AreEqual(expected, fijiDateTime);
        }

        [Test]
        public void IsInPast_WithDateInPast_ReturnsTrue()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Fiji Standard Time");
            TimeZoneInfo tokyoTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            DateTime utcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                       CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => utcDateTime);
            DateTime tokyoDateTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, tokyoTimeZone).AddHours(-1);

            // act
            bool isInPast = timeZoneWrapper.IsInPast(tokyoDateTime, tokyoTimeZone);
            bool isInFuture = timeZoneWrapper.IsInFuture(tokyoDateTime, tokyoTimeZone);

            // assert
            Assert.IsTrue(isInPast);
            Assert.IsFalse(isInFuture);
        }

        [Test]
        public void IsInPast_WithDateInFuture_ReturnsFalse()
        {
            // arrange
            TimeZoneInfo blogTimeZone = TimeZones.GetTimeZones().GetById("Fiji Standard Time");
            TimeZoneInfo tokyoTimeZone = TimeZones.GetTimeZones().GetById("Tokyo Standard Time");
            DateTime utcDateTime = DateTime.ParseExact("2009/08/15 06:18 PM", "yyyy/MM/dd hh:mm tt",
                                                       CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
            var timeZoneWrapper = new TimeZoneWrapper(blogTimeZone, TimeZoneInfo.Local, () => utcDateTime);
            DateTime tokyoDateTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, tokyoTimeZone).AddHours(1);

            // act
            bool isInPast = timeZoneWrapper.IsInPast(tokyoDateTime, tokyoTimeZone);
            bool isInFuture = timeZoneWrapper.IsInFuture(tokyoDateTime, tokyoTimeZone);

            // assert
            Assert.IsFalse(isInPast);
            Assert.IsTrue(isInFuture);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Web;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;

namespace UnitTests.Subtext.Framework
{
    /// <summary>
    /// Unit tests of Subtext.Framework.Links class methods
    /// </summary>
    [TestFixture]
    public class LinksTests
    {
        [Test]
        [RollBack2]
        public void CanGetCategoriesByPostId()
        {
            UnitTestHelper.SetupBlog();

            int category1Id =
                Links.CreateLinkCategory(CreateCategory("Post Category 1", "Cody roolz!", CategoryType.PostCollection,
                                                        true));
            int category2Id =
                Links.CreateLinkCategory(CreateCategory("Post Category 2", "Cody roolz again!",
                                                        CategoryType.PostCollection, true));
            Links.CreateLinkCategory(CreateCategory("Post Category 3", "Cody roolz and again!",
                                                    CategoryType.PostCollection, true));

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("phil", "title", "body");
            int entryId = UnitTestHelper.Create(entry);
            ObjectProvider.Instance().SetEntryCategoryList(entryId, new[] { category1Id, category2Id });

            ICollection<LinkCategory> categories = Links.GetLinkCategoriesByPostId(entryId);
            Assert.AreEqual(2, categories.Count, "Expected two of the three categories");

            Assert.AreEqual(category1Id, categories.First().Id);
            Assert.AreEqual(category2Id, categories.ElementAt(1).Id);

            Assert.AreEqual(Config.CurrentBlog.Id, categories.First().BlogId);
        }

        [Test]
        [RollBack2]
        public void CanGetActiveCategories()
        {
            UnitTestHelper.SetupBlog();

            int[] categoryIds = CreateSomeLinkCategories();
            CreateLink("Link one", categoryIds[0], null);
            CreateLink("Link two", categoryIds[0], null);
            CreateLink("Link one-two", categoryIds[1], null);

            ICollection<LinkCategory> linkCollections = ObjectProvider.Instance().GetActiveCategories();

            //Test ordering by title
            Assert.AreEqual("Google Blogs", linkCollections.First().Title);
            Assert.AreEqual("My Favorite Feeds", linkCollections.ElementAt(1).Title);

            //Check link counts
            Assert.AreEqual(1, linkCollections.First().Links.Count);
            Assert.AreEqual(2, linkCollections.ElementAt(1).Links.Count);
        }

        [Test]
        [RollBack2]
        public void CanUpdateLink()
        {
            UnitTestHelper.SetupBlog();
            // Create the categories
            CreateSomeLinkCategories();

            int categoryId =
                Links.CreateLinkCategory(CreateCategory("My Favorite Feeds", "Some of my favorite RSS feeds",
                                                        CategoryType.LinkCollection, true));
            Link link = CreateLink("Test", categoryId, null);
            int linkId = link.Id;

            Link loaded = ObjectProvider.Instance().GetLink(linkId);
            Assert.AreEqual("Test", loaded.Title);

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "test", "test");

            //Make changes then update.
            link.PostId = entry.Id;
            link.Title = "Another title";
            link.NewWindow = true;
            ObjectProvider.Instance().UpdateLink(link);
            loaded = ObjectProvider.Instance().GetLink(linkId);
            Assert.AreEqual("Another title", loaded.Title);
            Assert.IsTrue(loaded.NewWindow);
            Assert.AreEqual(entry.Id, loaded.PostId);
        }

        [Test]
        [RollBack2]
        public void CanCreateAndDeleteLink()
        {
            UnitTestHelper.SetupBlog();

            int categoryId =
                Links.CreateLinkCategory(CreateCategory("My Favorite Feeds", "Some of my favorite RSS feeds",
                                                        CategoryType.LinkCollection, true));

            Link link = CreateLink("Title", categoryId, null);
            int linkId = link.Id;

            Link loaded = ObjectProvider.Instance().GetLink(linkId);
            Assert.AreEqual("Title", loaded.Title);
            Assert.AreEqual(NullValue.NullInt32, loaded.PostId);
            Assert.AreEqual(Config.CurrentBlog.Id, loaded.BlogId);

            Links.DeleteLink(linkId);

            Assert.IsNull(ObjectProvider.Instance().GetLink(linkId));
        }

        [Test]
        [RollBack2]
        public void CanCreateAndDeleteLinkCategory()
        {
            UnitTestHelper.SetupBlog();

            // Create some categories
            int categoryId =
                Links.CreateLinkCategory(CreateCategory("My Favorite Feeds", "Some of my favorite RSS feeds",
                                                        CategoryType.LinkCollection, true));

            LinkCategory category = ObjectProvider.Instance().GetLinkCategory(categoryId, true);
            Assert.AreEqual(Config.CurrentBlog.Id, category.BlogId);
            Assert.AreEqual("My Favorite Feeds", category.Title);
            Assert.AreEqual("Some of my favorite RSS feeds", category.Description);
            Assert.IsTrue(category.HasDescription);
            Assert.IsFalse(category.HasLinks);
            Assert.IsFalse(category.HasImages);
            Assert.IsTrue(category.IsActive);
            Assert.AreEqual(CategoryType.LinkCollection, category.CategoryType);
            Assert.IsNotNull(category);

            Links.DeleteLinkCategory(categoryId);
            Assert.IsNull(ObjectProvider.Instance().GetLinkCategory(categoryId, true));
        }

        /// <summary>
        /// Ensures CreateLinkCategory assigns unique CatIDs
        /// </summary>
        [Test]
        [RollBack2]
        public void CreateLinkCategoryAssignsUniqueCatIDs()
        {
            UnitTestHelper.SetupBlog();

            // Create some categories
            CreateSomeLinkCategories();
            ICollection<LinkCategory> linkCategoryCollection = Links.GetCategories(CategoryType.LinkCollection,
                                                                                   ActiveFilter.None);

            LinkCategory first = null;
            LinkCategory second = null;
            LinkCategory third = null;
            foreach(LinkCategory linkCategory in linkCategoryCollection)
            {
                if(first == null)
                {
                    first = linkCategory;
                    continue;
                }

                if(second == null)
                {
                    second = linkCategory;
                    continue;
                }

                if(third == null)
                {
                    third = linkCategory;
                    continue;
                }
            }

            // Ensure the CategoryIDs are unique
            UnitTestHelper.AssertAreNotEqual(first.Id, second.Id);
            UnitTestHelper.AssertAreNotEqual(first.Id, third.Id);
            UnitTestHelper.AssertAreNotEqual(second.Id, third.Id);
        }

        [Test]
        [RollBack2]
        public void CanGetPostCollectionCategories()
        {
            UnitTestHelper.SetupBlog();
            CreateSomePostCategories();

            // Retrieve the categories, grab the first one and update it
            ICollection<LinkCategory> originalCategories = Links.GetCategories(CategoryType.PostCollection,
                                                                               ActiveFilter.None);
            Assert.IsTrue(originalCategories.Count > 0);
        }

        /// <summary>
        /// Ensure UpdateLInkCategory updates the correct link category
        /// </summary>
        [Test]
        [RollBack2]
        public void UpdateLinkCategoryIsFine()
        {
            UnitTestHelper.SetupBlog();

            // Create the categories
            CreateSomeLinkCategories();

            // Retrieve the categories, grab the first one and update it
            ICollection<LinkCategory> originalCategories = Links.GetCategories(CategoryType.LinkCollection,
                                                                               ActiveFilter.None);
            Assert.Greater(originalCategories.Count, 0, "Expected some categories in there.");
            LinkCategory linkCat = null;
            foreach(LinkCategory linkCategory in originalCategories)
            {
                linkCat = linkCategory;
                break;
            }
            LinkCategory originalCategory = linkCat;
            originalCategory.Description = "New Description";
            originalCategory.IsActive = false;
            bool updated = ObjectProvider.Instance().UpdateLinkCategory(originalCategory);

            // Retrieve the categories and find the one we updated
            ICollection<LinkCategory> updatedCategories = Links.GetCategories(CategoryType.LinkCollection,
                                                                              ActiveFilter.None);
            LinkCategory updatedCategory = null;
            foreach(LinkCategory lc in updatedCategories)
            {
                if(lc.Id == originalCategory.Id)
                {
                    updatedCategory = lc;
                }
            }

            // Ensure the update was successful
            Assert.IsTrue(updated);
            Assert.IsNotNull(updatedCategory);
            Assert.AreEqual("New Description", updatedCategory.Description);
            Assert.AreEqual(false, updatedCategory.IsActive);
        }

        static int[] CreateSomeLinkCategories()
        {
            var categoryIds = new int[3];
            categoryIds[0] =
                Links.CreateLinkCategory(CreateCategory("My Favorite Feeds", "Some of my favorite RSS feeds",
                                                        CategoryType.LinkCollection, true));
            categoryIds[1] =
                Links.CreateLinkCategory(CreateCategory("Google Blogs", "My favorite Google blogs",
                                                        CategoryType.LinkCollection, true));
            categoryIds[2] =
                Links.CreateLinkCategory(CreateCategory("Microsoft Blogs", "My favorite Microsoft blogs",
                                                        CategoryType.LinkCollection, false));
            return categoryIds;
        }

        static int[] CreateSomePostCategories()
        {
            var categoryIds = new int[3];
            categoryIds[0] =
                Links.CreateLinkCategory(CreateCategory("My Favorite Feeds", "Some of my favorite RSS feeds",
                                                        CategoryType.PostCollection, true));
            categoryIds[1] =
                Links.CreateLinkCategory(CreateCategory("Google Blogs", "My favorite Google blogs",
                                                        CategoryType.PostCollection, true));
            categoryIds[2] =
                Links.CreateLinkCategory(CreateCategory("Microsoft Blogs", "My favorite Microsoft blogs",
                                                        CategoryType.PostCollection, false));
            return categoryIds;
        }

        static LinkCategory CreateCategory(string title, string description, CategoryType categoryType, bool isActive)
        {
            var linkCategory = new LinkCategory();
            linkCategory.BlogId = Config.CurrentBlog.Id;
            linkCategory.Title = title;
            linkCategory.Description = description;
            linkCategory.CategoryType = categoryType;
            linkCategory.IsActive = isActive;
            return linkCategory;
        }

        static Link CreateLink(string title, int? categoryId, int? postId)
        {
            var link = new Link();
            link.IsActive = true;
            link.BlogId = Config.CurrentBlog.Id;
            if(categoryId != null)
            {
                link.CategoryId = (int)categoryId;
            }
            link.Title = title;
            if(postId != null)
            {
                link.PostId = (int)postId;
            }
            int linkId = Links.CreateLink(link);
            Assert.AreEqual(linkId, link.Id);
            return link;
        }

        /// <summary>
        /// Sets the up test fixture.  This is called once for 
        /// this test fixture before all the tests run.
        /// </summary>
        [TestFixtureSetUp]
        public void SetUpTestFixture()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }

        [TearDown]
        public void TearDown()
        {
            HttpContext.Current = null;
        }
    }
}using System;
using System.IO;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.ModelBinders;

namespace UnitTests.Subtext.Framework.ModelBinders
{
    [TestFixture]
    public class XmlModelBinderTests
    {
        [Test]
        public void BindModel_WithXmlInInputStream_ReturnsXmlDoc()
        {
            // arrange
            var binder = new XmlModelBinder();
            var controllerContext = new ControllerContext();
            var httpContext = new Mock<HttpContextBase>();
            Stream stream =
                @"<?xml version=""1.0""?>
                            <root><node>test</node></root>".ToStream();
            httpContext.Setup(h => h.Request.InputStream).Returns(stream);
            httpContext.Setup(h => h.Request.ContentType).Returns("text/xml");
            controllerContext.HttpContext = httpContext.Object;
            var bindingContext = new ModelBindingContext();

            // act
            var doc = binder.BindModel(controllerContext, bindingContext) as XmlDocument;

            // assert
            Assert.IsNotNull(doc);
            Assert.AreEqual("test", doc.SelectSingleNode("//node").InnerText);
        }

        [Test]
        public void BindModel_WithNonTextXmlContentType_ThrowsException()
        {
            // arrange
            var binder = new XmlModelBinder();
            var controllerContext = new ControllerContext();
            var httpContext = new Mock<HttpContextBase>();
            Stream stream = @"<?xml version=""1.0""?>
                            <root><node /></root>".ToStream();
            httpContext.Setup(h => h.Request.InputStream).Returns(stream);
            httpContext.Setup(h => h.Request.ContentType).Returns("text/html");
            controllerContext.HttpContext = httpContext.Object;
            var bindingContext = new ModelBindingContext();

            // act, assert
            UnitTestHelper.AssertThrows<InvalidOperationException>(() =>
                                                                   binder.BindModel(controllerContext, bindingContext));
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Framework;

namespace UnitTests.Subtext.Framework
{
    /// <summary>
    /// Tests of the NullValue helper class
    /// </summary>
    [TestFixture]
    public class NullValueTests
    {
        [Test]
        public void IsNullReturnsTrueForNullDouble()
        {
            Assert.IsTrue(NullValue.IsNull(double.NaN));
        }

        [Test]
        public void IsNullReturnsTrueForNullGuid()
        {
            Assert.IsTrue(NullValue.IsNull(Guid.Empty));
        }

        [Test]
        public void IsNullReturnsTrueForNullInt()
        {
            Assert.IsTrue(NullValue.IsNull(int.MinValue));
        }

        [Test]
        public void IsNullReturnsTrueForNullDateTime()
        {
            Assert.IsTrue(NullValue.IsNull(DateTime.MinValue));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Specialized;
using System.Configuration.Provider;
using MbUnit.Framework;
using Subtext.Extensibility.Providers;
using Subtext.Framework.Configuration;

namespace UnitTests.Subtext.Framework.Providers
{
    /// <summary>
    /// Tests a few methods of the <see cref="ProviderBase"/> class.
    /// </summary>
    [TestFixture]
    public class ProviderConfigurationHelperTests
    {
        [Test]
        public void CanFindConnectionString()
        {
            Assert.IsNotNull(Config.ConnectionString);
        }

        /// <summary>
        /// Makes sure that we can recognize false setting pointers.
        /// </summary>
        [Test]
        public void GetConnectionStringSettingValueFindsConnectionString()
        {
            var configValue = new NameValueCollection {{"connectionStringName", "subtextData"}};
            Assert.AreEqual("Server=localhost;Database=SubtextData;Trusted_Connection=True;",
                            ProviderConfigurationHelper.GetConnectionStringSettingValue("connectionStringName",
                                                                                        configValue));
        }
    }
}using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Providers
{
    [TestFixture]
    public class SearchEngineTests
    {
        [RollBack]
        [Test]
        public void Search_WithMultipleMatchingEntries_FindsThoseEntries()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("author", "whatever 1", "body"));
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("author", "whatever 2",
                                                                                   "the body has some words"));
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");
            var search = new SearchEngine(Config.CurrentBlog, urlHelper.Object, Config.ConnectionString);

            //act
            ICollection<SearchResult> results = search.Search(Config.CurrentBlog.Id, "words");

            //assert
            Assert.AreEqual(1, results.Count);
            Assert.AreEqual("/whatever", results.First().Url.ToString());
            Assert.AreEqual("whatever 2", results.First().Title);
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class AdminUrlHelperTests
    {
        [Test]
        public void PostsList_WithBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.PostsList();

            //assert
            Assert.AreEqual("/sub/admin/posts/default.aspx", url);
        }

        [Test]
        public void PostsEdit_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.PostsEdit();

            //assert
            Assert.AreEqual("/sub/admin/posts/edit.aspx", url);
        }

        [Test]
        public void ArticlesList_WithBlogHavingSubfolder_RendersUrlToArticlesListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ArticlesList();

            //assert
            Assert.AreEqual("/sub/admin/articles/default.aspx", url);
        }

        [Test]
        public void ArticlesEdit_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToArticlesListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ArticlesEdit();

            //assert
            Assert.AreEqual("/sub/admin/articles/edit.aspx", url);
        }

        [Test]
        public void FeedbackList_WithBlogHavingSubfolder_RendersUrlToFeedbackListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.FeedbackList();

            //assert
            Assert.AreEqual("/sub/admin/feedback/default.aspx", url);
        }

        [Test]
        public void FeedbackEdit_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToFeedbackListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.FeedbackEdit(123);

            //assert
            Assert.AreEqual("/sub/admin/feedback/edit.aspx?return-to-post=true&FeedbackID=123", url);
        }

        [Test]
        public void LinksEdit_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.LinksEdit();

            //assert
            Assert.AreEqual("/sub/admin/EditLinks.aspx", url);
        }

        [Test]
        public void GalleriesEdit_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.GalleriesEdit();

            //assert
            Assert.AreEqual("/sub/admin/EditGalleries.aspx", url);
        }

        [Test]
        public void EditCategories_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.EditCategories(CategoryType.PostCollection);

            //assert
            Assert.AreEqual("/sub/admin/EditCategories.aspx?catType=PostCollection", url);
        }

        [Test]
        public void ErrorLog_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ErrorLog();

            //assert
            Assert.AreEqual("/sub/admin/ErrorLog.aspx", url);
        }

        [Test]
        public void Home_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.Home();

            //assert
            Assert.AreEqual("/sub/admin/default.aspx", url);
        }

        [Test]
        public void ImportExport_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ImportExport();

            //assert
            Assert.AreEqual("/sub/admin/ImportExport.aspx", url);
        }

        [Test]
        public void ExportUrl_WithEmbedFalseAndSubFolder_RendersUrlWithQueryStringParameter()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.Export(false);

            //assert
            Assert.AreEqual("/sub/admin/export.ashx?embed=False", url);
        }

        [Test]
        public void ExportUrl_WithEmbedTrue_RendersUrlWithQueryStringParameter()
        {
            //arrange
            AdminUrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.Export(true);

            //assert
            Assert.AreEqual("/admin/export.ashx?embed=True", url);
        }

        [Test]
        public void Statistics_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.Statistics();

            //assert
            Assert.AreEqual("/sub/admin/Statistics.aspx", url);
        }

        [Test]
        public void Options_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.Options();

            //assert
            Assert.AreEqual("/sub/admin/Options.aspx", url);
        }

        [Test]
        public void Credits_WithCategoryTypeAndBlogHavingSubfolder_RendersUrlToPostsListPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            AdminUrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.Credits();

            //assert
            Assert.AreEqual("/sub/admin/Credits.aspx", url);
        }

        private static AdminUrlHelper SetupUrlHelper(string appPath)
        {
            return SetupUrlHelper(appPath, new RouteData());
        }

        private static AdminUrlHelper SetupUrlHelper(string appPath, RouteData routeData)
        {
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request.ApplicationPath).Returns(appPath);
            httpContext.Setup(c => c.Response.ApplyAppPathModifier(It.IsAny<string>())).Returns<string>(s => s);
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var helper = new UrlHelper(requestContext, routes);
            return new AdminUrlHelper(helper);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class AggregateEnabledConstraintTests
    {
        [Test]
        public void ConstraintWithTrue_WithSettingSetToTrue_ReturnsTrue()
        {
            //arrange
            var constraint = new AggregateEnabledConstraint(null, true);

            //act
            bool result = constraint.Match(true);

            //assert
            Assert.IsTrue(result);
        }

        [Test]
        public void ConstraintWithFalse_WithSettingSetToTrue_ReturnsFalse()
        {
            //arrange
            var constraint = new AggregateEnabledConstraint(null, false);

            //act
            bool result = constraint.Match(true);

            //assert
            Assert.IsFalse(result);
        }

        [Test]
        public void ConstraintWithTrue_WithSettingSetToFalse_ReturnsFalse()
        {
            //arrange
            var constraint = new AggregateEnabledConstraint(null, true);

            //act
            bool result = constraint.Match(false);

            //assert
            Assert.IsFalse(result);
        }

        [Test]
        public void ConstraintWithFalse_WithSettingSetToFalse_ReturnsTrue()
        {
            //arrange
            var constraint = new AggregateEnabledConstraint(null, false);

            //act
            bool result = constraint.Match(false);

            //assert
            Assert.IsTrue(result);
        }
    }
}using System;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class DirectoryRouteHandlerTests
    {
        [Test]
        public void RequestContext_WithNonDirectoryRoute_CausesInvalidOperationException()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            var routeData = new RouteData
                                {
                                    Route = new Route("url",
                                                      new DirectoryRouteHandler(new Mock<ISubtextPageBuilder>().Object,
                                                                                new Mock<IServiceLocator>().Object))
                                };
            var requestContext = new RequestContext(httpContext.Object, routeData);
            IRouteHandler routeHandler = new DirectoryRouteHandler(new Mock<ISubtextPageBuilder>().Object,
                                                                   new Mock<IServiceLocator>().Object);

            //act, assert
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => routeHandler.GetHttpHandler(requestContext));
        }

        [Test]
        public void RequestWithoutSubfolder_ForDirectory_GetsHandlerInPhysicalDirectory()
        {
            //arrange
            string virtualPath = string.Empty;
            var routeData = new RouteData
                                {
                                    Route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object)
                                };
            ;
            routeData.Values.Add("pathinfo", "foo.aspx");
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            var httpHandler = new Mock<IHttpHandler>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                httpHandler.Object).Callback<string, Type>((vpath, type) => virtualPath = vpath);
            IRouteHandler routeHandler = new DirectoryRouteHandler(pageBuilder.Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/foo.aspx");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            IHttpHandler handler = routeHandler.GetHttpHandler(requestContext);

            //assert
            Assert.AreEqual("~/aspx/admin/foo.aspx", virtualPath);
        }

        [Test]
        public void DirectoryRouteHandler_InheritsRouteHandlerBase()
        {
            Assert.IsTrue(typeof(RouteHandlerBase).IsAssignableFrom(typeof(DirectoryRouteHandler)));
        }

        [Test]
        public void RequestWithoutSubfolder_ForAshxFileInDirectory_GetsHandlerInPhysicalDirectory()
        {
            //arrange
            string virtualPath = string.Empty;
            var routeData = new RouteData
                                {
                                    Route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object)
                                };
            ;
            routeData.Values.Add("pathinfo", "foo.ashx");
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            var httpHandler = new Mock<IHttpHandler>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                httpHandler.Object).Callback<string, Type>((vpath, type) => virtualPath = vpath);
            IRouteHandler routeHandler = new DirectoryRouteHandler(pageBuilder.Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/foo.ashx");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            IHttpHandler handler = routeHandler.GetHttpHandler(requestContext);

            //assert
            Assert.AreEqual("~/aspx/admin/foo.ashx", virtualPath);
        }

        //TODO: Simplify this test.
        [Test]
        public void RequestWithoutSubfolder_ForDirectoryWithoutFile_AppendsDefaultFileToVirtualPath()
        {
            //arrange
            string virtualPath = string.Empty;
            var routeData = new RouteData();
            routeData.Route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object);
            routeData.Values.Add("pathinfo", "posts");
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            var httpHandler = new Mock<IHttpHandler>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                httpHandler.Object).Callback<string, Type>((vpath, type) => virtualPath = vpath);
            IRouteHandler routeHandler = new DirectoryRouteHandler(pageBuilder.Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/posts/");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            routeHandler.GetHttpHandler(requestContext);

            //assert
            Assert.AreEqual("~/aspx/admin/posts/Default.aspx", virtualPath);
        }

        [Test]
        public void RequestWithoutSubfolder_ForDirectoryWithoutFileAndWithouEndingSlash_AppendsDefaultFileToVirtualPath()
        {
            //arrange
            string virtualPath = string.Empty;
            var routeData = new RouteData
                                {
                                    Route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object)
                                };
            ;
            routeData.Values.Add("pathinfo", "posts");
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            var httpHandler = new Mock<IHttpHandler>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                httpHandler.Object).Callback<string, Type>((vpath, type) => virtualPath = vpath);
            IRouteHandler routeHandler = new DirectoryRouteHandler(pageBuilder.Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/posts");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            routeHandler.GetHttpHandler(requestContext);

            //assert
            Assert.AreEqual("~/aspx/admin/posts/Default.aspx", virtualPath);
        }

        [Test]
        public void RequestWithSubfolder_ForDirectory_GetsHandlerInPhysicalDirectory()
        {
            //arrange
            string virtualPath = string.Empty;
            var routeData = new RouteData
                                {
                                    Route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object)
                                };
            routeData.Values.Add("subfolder", "blogsubfolder");
            routeData.Values.Add("pathinfo", "foo.aspx");
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            var httpHandler = new Mock<IHttpHandler>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                httpHandler.Object).Callback<string, Type>((vpath, type) => virtualPath = vpath);
            IRouteHandler routeHandler = new DirectoryRouteHandler(pageBuilder.Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/blogsubfolder/admin/foo.aspx", "blogsubfolder");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            IHttpHandler handler = routeHandler.GetHttpHandler(requestContext);

            //assert
            Assert.AreEqual("~/aspx/admin/foo.aspx", virtualPath);
        }
    }
}using System;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class DirectoryRouteTests
    {
        [Test]
        public void GetVirtualPath_WithoutSubolder_ReturnsUrlWithoutSubfolder()
        {
            //arrange
            var route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/posts/foo.aspx");
            var blogRequest = new BlogRequest("localhost", null, new Uri("http://localhost"), true);
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            VirtualPathData virtualPath = route.GetVirtualPath(requestContext
                                                               ,
                                                               new RouteValueDictionary(
                                                                   new {pathInfo = "posts/foo.aspx"}));

            //assert
            Assert.IsNotNull(virtualPath);
            Assert.AreEqual("admin/posts/foo.aspx", virtualPath.VirtualPath);
        }

        [Test]
        public void GetVirtualPath_WithSubolder_ReturnsUrlWithSubfolder()
        {
            //arrange
            var route = new DirectoryRoute("admin", new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/admin/");
            var blogRequest = new BlogRequest("localhost", "subfolder", new Uri("http://localhost"), false);
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            VirtualPathData virtualPath = route.GetVirtualPath(requestContext
                                                               ,
                                                               new RouteValueDictionary(
                                                                   new {pathInfo = "posts/foo.aspx"}));

            //assert
            Assert.IsNotNull(virtualPath);
            Assert.AreEqual("subfolder/admin/posts/foo.aspx", virtualPath.VirtualPath);
        }

        [Test]
        public void Ctor_WithDirectoryNameArg_AppendsPathInfoCatchAll()
        {
            //arrange, act
            var route = new DirectoryRoute("dir", new Mock<IServiceLocator>().Object);
            ;

            //assert
            Assert.AreEqual("dir/{*pathInfo}", route.Url);
        }

        [Test]
        public void Ctor_WithDirectoryNameArg_SetsDirectoryName()
        {
            //arrange, act
            var route = new DirectoryRoute("dir", new Mock<IServiceLocator>().Object);
            ;

            //assert
            Assert.AreEqual("dir", route.DirectoryName);
        }

        [Test]
        public void GetRouteData_MatchingTheImplicitSubfolderRoute_ReturnsParentDirectoryRoute()
        {
            //arrange
            var route = new DirectoryRoute("dir", new Mock<IServiceLocator>().Object);
            ;
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/dir/foo.aspx");
            var blogRequest = new BlogRequest("localhost", "subfolder", new Uri("http://localhost"), false);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object, blogRequest);

            //assert
            Assert.AreEqual(route, routeData.Route);
        }
    }
}using System;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class HttpRouteHandlerTests
    {
        [Test]
        public void RouteHandler_ConstructedWithType_InstantiatesNewHandlerEveryTime()
        {
            // arrange
            var serviceLocator = new Mock<IServiceLocator>();
            serviceLocator.Setup(l => l.GetService<FakeHttpHandler>()).Returns(() => new FakeHttpHandler());
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, new RouteData());
            IRouteHandler routeHandler = new HttpRouteHandler<FakeHttpHandler>(serviceLocator.Object);

            // act
            IHttpHandler returnedHandler = routeHandler.GetHttpHandler(requestContext);
            IHttpHandler secondHandler = routeHandler.GetHttpHandler(requestContext);

            // assert
            Assert.AreNotSame(returnedHandler, secondHandler);
        }
    }

    internal class FakeHttpHandler : IHttpHandler
    {
        private static int _instanceId;

        public FakeHttpHandler()
        {
            InstanceId = ++_instanceId;
        }

        public int InstanceId { get; private set; }

        public bool IsReusable
        {
            get { throw new NotImplementedException(); }
        }

        public void ProcessRequest(HttpContext context)
        {
            throw new NotImplementedException();
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class IgnoreRouteTests
    {
        [Test]
        public void GetVirtualPath_WithIgnoreRoute_AlwaysReturnsNull()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            var requestContext = new RequestContext(httpContext.Object, new RouteData());
            var route = new IgnoreRoute("{*catchall}");

            //act
            VirtualPathData virtualPath = route.GetVirtualPath(requestContext, new RouteValueDictionary());

            //assert
            Assert.IsNull(virtualPath);
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class ImageRouteTests
    {
        [Test]
        public void GetRouteDataWithAnyRequest_ReturnsNull()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/", string.Empty /* subfolder */, "~/");
            var route = new ImageRoute("{*anything}");

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNull(routeData);
        }
    }
}using System;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class PageRouteTests
    {
        [Test]
        public void GetVirtualPath_WithoutSubolder_ReturnsUrlWithoutSubfolder()
        {
            //arrange
            var route = new PageRoute("archive/{slug}.aspx", "~/aspx/Dtp.aspx", null,
                                      new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/slug.aspx");
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            VirtualPathData virtualPath = route.GetVirtualPath(requestContext,
                                                               new RouteValueDictionary(new {slug = "test-slug"}));

            //assert
            Assert.IsNotNull(virtualPath);
            Assert.AreEqual("archive/test-slug.aspx", virtualPath.VirtualPath);
        }

        [Test]
        public void GetVirtualPath_WithSubolder_ReturnsUrlWithSubfolder()
        {
            //arrange
            var route = new PageRoute("archive/{slug}.aspx", "~/aspx/Dtp.aspx", null,
                                      new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/slug.aspx");
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            var requestContext = new RequestContext(httpContext.Object, routeData);

            //act
            VirtualPathData virtualPath = route.GetVirtualPath(requestContext,
                                                               new RouteValueDictionary(new {slug = "test-slug"}));

            //assert
            Assert.IsNotNull(virtualPath);
            Assert.AreEqual("subfolder/archive/test-slug.aspx", virtualPath.VirtualPath);
        }

        [Test]
        public void Request_ForPageRouteWithConstraints_MatchesWhenConstraintsAreSatisfied()
        {
            //arrange
            var route = new PageRoute("archive/{year}/{month}/{day}/{slug}.aspx", "~/aspx/Dtp.aspx", null,
                                      new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object)
            {Constraints = new RouteValueDictionary(new {year = @"\d{4}"})};
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/2008/01/23/slug.aspx");
            var blogRequest = new BlogRequest("localhost", null, new Uri("http://localhost"), false);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object, blogRequest);

            //assert
            Assert.IsNotNull(routeData);
        }

        [Test]
        public void RequestWithSubfolder_ForBlogPostWithSubfolder_Matches()
        {
            //arrange
            var subtextRoute = new PageRoute("archive/{slug}", "~/aspx/Dtp.aspx", null,
                                             new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/blogsubfolder/archive/blog-post");
            //This info is provided by the BlogRequestModule.
            var blogRequest = new BlogRequest("localhost", "blogsubfolder",
                                              new Uri("http://localhost/blogsubfolder/archive/blog-post"), true);

            //act
            RouteData routeData = subtextRoute.GetRouteData(httpContext.Object, blogRequest);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blog-post", routeData.Values["slug"]);
            Assert.AreEqual("blogsubfolder", routeData.Values["subfolder"]);
        }

        [Test]
        public void RequestWithoutSubfolder_ForBlogPostWithSubfolder_DoesNotMatch()
        {
            //arrange
            var subtextRoute = new PageRoute("archive/{slug}", "~/aspx/Dtp.aspx", null,
                                             new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/blog-post");
            //This info is provided by the BlogRequestModule.
            var blogRequest = new BlogRequest("localhost", "subfolder", new Uri("http://localhost/archive/blog-post"),
                                              true);

            //act
            RouteData routeData = subtextRoute.GetRouteData(httpContext.Object, blogRequest);

            //assert.
            Assert.IsNull(routeData);
        }

        [Test]
        public void RequestWithoutSubfolder_ForBlogPostWithoutSubfolder_Matches()
        {
            //arrange
            var subtextRoute = new PageRoute("archive/{slug}", "~/aspx/Dtp.aspx", null,
                                             new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/blog-post");
            //This info is provided by the BlogRequestModule.
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/archive/blog-post"),
                                              true);

            //act
            RouteData routeData = subtextRoute.GetRouteData(httpContext.Object, blogRequest);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("blog-post", routeData.Values["slug"]);
            Assert.AreEqual(string.Empty, routeData.Values["subfolder"]);
        }

        [Test]
        public void RequestWithSubfolder_ForBlogPostWithoutSubfolder_DoesNotMatch()
        {
            //arrange
            var subtextRoute = new PageRoute("archive/{slug}", "~/aspx/Dtp.aspx", null,
                                             new Mock<ISubtextPageBuilder>().Object, new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/archive/blog-post");
            //This info is provided by the BlogRequestModule.
            var blogRequest = new BlogRequest("localhost", string.Empty,
                                              new Uri("http://localhost/subfolder/archive/blog-post"), true);

            //act
            RouteData routeData = subtextRoute.GetRouteData(httpContext.Object, blogRequest);

            //assert.
            Assert.IsNull(routeData);
        }

        [Test]
        public void GetRouteData_MatchingTheImplicitSubfolderRoute_ReturnsParentDirectoryRoute()
        {
            //arrange
            var route = new PageRoute("url", "~/aspx/Dtp.aspx", new[] {"foo"}, new Mock<ISubtextPageBuilder>().Object,
                                      new Mock<IServiceLocator>().Object);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/url");
            var blogRequest = new BlogRequest("localhost", "subfolder", new Uri("http://localhost"), false);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object, blogRequest);

            //assert
            Assert.AreEqual(route, routeData.Route);
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class RootRouteTests
    {
        [Test]
        public void GetRouteDataWithRequestForAppRoot_WhenAggregationEnabled_MatchesAndReturnsAggDefault()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/AggDefault.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
            Assert.IsFalse(routeData.DataTokens.ContainsKey(PageRoute.ControlNamesKey));
        }

        [Test]
        public void GetRouteDataWithRequestForAppRoot_WhenAggregationDisabled_MatchesAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
            Assert.IsTrue(routeData.DataTokens.ContainsKey(PageRoute.ControlNamesKey));
        }

        [Test]
        public void GetRouteDataWithRequestForSubfolder_WhenAggregationEnabled_MatchesRequestAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder", "subfolder" /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetRouteDataWithRequestForSubfolder_WhenAggregationDisabled_MatchesRequestAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder", "subfolder" /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetRouteDataWithRequestWithSubfolder_WhenAggregationEnabledAndBlogDoesNotHaveSubfolder_DoesNotMatch()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/foo", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNull(routeData);
        }

        [Test]
        public void GetRouteDataWithRequestWithSubfolder_WhenAggregationDisabledAndBlogDoesNotHaveSubfolder_DoesNotMatch
            ()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/foo", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNull(routeData);
        }

        [Test]
        public void
            GetRouteDataWithRequestWithSubfolder_WhenAggregationEnabledAndSubfolderDoesNotMatchBlogSubfolder_DoesNotMatch
            ()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/foo", "bar" /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNull(routeData);
        }

        [Test]
        public void
            GetRouteDataWithRequestWithSubfolder_WhenAggregationDisabledAndSubfolderDoesNotMatchBlogSubfolder_DoesNotMatch
            ()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/foo", "bar" /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNull(routeData);
        }

        [Test]
        public void GetRouteDataWithRequestForDefault_WhenAggregationEnabled_MatchesAndReturnsAggDefault()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/Default.aspx", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/AggDefault.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetRouteDataWithRequestForDefault_WhenAggregationDisabled_MatchesAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/Default.aspx", string.Empty /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetRouteDataWithRequestForDefaultInSubfolder_WhenAggregationEnabled_MatchesRequestAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/default.aspx", "subfolder" /* subfolder */, "~/");
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetRouteDataWithRequestForDefaultInSubfolder_WhenAggregationDisabled_MatchesRequestAndReturnsDtp()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/default.aspx", "subfolder" /* subfolder */, "~/");
            var route = new RootRoute(false, new Mock<IServiceLocator>().Object);

            //act
            RouteData routeData = route.GetRouteData(httpContext.Object);

            //assert
            var routeHandler = routeData.RouteHandler as PageRouteHandler;
            Assert.AreEqual("~/aspx/Dtp.aspx", routeHandler.VirtualPath);
            Assert.AreSame(route, routeData.Route);
        }

        [Test]
        public void GetVirtualPath_WhenAggregationEnabledAndNoSubfolderInRouteData_ReturnsRoot()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/default.aspx", string.Empty /* subfolder */, "~/");
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);
            var routeValues = new RouteValueDictionary();

            //act
            VirtualPathData virtualPathInfo = route.GetVirtualPath(requestContext, routeValues);

            //assert
            Assert.AreEqual(string.Empty, virtualPathInfo.VirtualPath);
        }

        [Test]
        public void GetVirtualPath_WhenAggregationEnabledWithSubfolderInRouteData_ReturnsSubfolder()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/default.aspx", "subfolder" /* subfolder */, "~/");
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);
            var routeValues = new RouteValueDictionary();

            //act
            VirtualPathData virtualPathInfo = route.GetVirtualPath(requestContext, routeValues);

            //assert
            Assert.AreEqual("subfolder", virtualPathInfo.VirtualPath);
        }

        [Test]
        public void GetVirtualPath_WhenAggregationEnabledWithSubfolderInRouteValues_ReturnsSubfolder()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/default.aspx", "subfolder" /* subfolder */, "~/");
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);
            var routeValues = new RouteValueDictionary(new {subfolder = "subfolder"});

            //act
            VirtualPathData virtualPathInfo = route.GetVirtualPath(requestContext, routeValues);

            //assert
            Assert.AreEqual("subfolder", virtualPathInfo.VirtualPath);
        }

        [Test]
        public void GetVirtualPath_WhenSupplyingRouteValues_ReturnsNull()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/default.aspx", string.Empty /* subfolder */, "~/");
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var route = new RootRoute(true, new Mock<IServiceLocator>().Object);
            var routeValues = new RouteValueDictionary(new {foo = "bar"});

            //act
            VirtualPathData virtualPathInfo = route.GetVirtualPath(requestContext, routeValues);

            //assert
            Assert.IsNull(virtualPathInfo);
        }
    }
}using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class RouteExtensionsTests
    {
        [Test]
        public void Ignore_AddsIgnoreRoute_ToRouteCollection()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);

            //act
            subtextRoutes.Ignore("url");

            //assert
            Assert.AreEqual(typeof(IgnoreRoute), routes[0].GetType());
        }

        [Test]
        public void MapControls_WithConstraints_AddsPageRouteWithConstraintsToCollection()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);

            //act
            subtextRoutes.MapControls("url", new {constraint = "constraintvalue"}, new[] {"controls"});

            //assert
            Assert.AreEqual("constraintvalue", ((PageRoute)routes[0]).Constraints["constraint"]);
        }

        [Test]
        public void MapControls_WithoutConstraints_AddsPageRouteWithConstraintsToCollection()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);

            //act
            subtextRoutes.MapControls("url", new[] {"controls"});

            //assert
            Assert.AreEqual("url", ((PageRoute)routes[0]).Url);
        }

        [Test]
        public void MapSystemDirectory_SetsDirectoryRouteHandlerAndAddsPathInfoToRouteUrl()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);

            //act
            subtextRoutes.MapSystemDirectory("install");

            //assert
            var route = routes[0] as Route;
            Assert.AreEqual("install/{*pathInfo}", route.Url);
            Assert.AreEqual(typeof(DirectoryRouteHandler), route.RouteHandler.GetType());
        }
    }
}using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class RoutesTests
    {
        [Test]
        public void RequestWithSubfolderForBlogRoot_WithAggregateEnabled_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/admin/foo.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);
            var routeHandler = routeData.RouteHandler as DirectoryRouteHandler;

            //assert.
            Assert.IsNotNull(routeHandler);
            Assert.AreEqual("foo.aspx", routeData.Values["pathInfo"]);
        }

        [Test]
        public void RequestWithSubfolderForBlogRoot_WithBlogHavingDifferentSubfolder_DoesNotMatch()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/admin/foo.aspx", "not-subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNull(routeData);
        }

        [Test]
        public void RequestWithSubfolder_ForAdminDirectory_UsesDirectoryRouteHandler()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/admin/foo.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);
            var routeHandler = routeData.RouteHandler as DirectoryRouteHandler;

            //assert.
            Assert.IsNotNull(routeHandler);
            Assert.AreEqual("foo.aspx", routeData.Values["pathInfo"]);
        }

        [Test]
        public void RequestWithoutSubfolder_ForProvidersDirectory_UsesDirectoryRouteHandler()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/providers/foo.aspx");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);
            var routeHandler = routeData.RouteHandler as DirectoryRouteHandler;

            //assert.
            Assert.IsNotNull(routeHandler);
            Assert.AreEqual("foo.aspx", routeData.Values["pathInfo"]);
        }

        [Test]
        public void Request_ForBlogPost_ContainsControlsForBlogPost()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/2008/12/10/blog-post.aspx");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);
            var controls = routeData.DataTokens["controls"] as IEnumerable<string>;
            //assert.

            Assert.IsTrue(controls.Contains("viewpost"));
            Assert.IsTrue(controls.Contains("comments"));
            Assert.IsTrue(controls.Contains("postcomment"));
            Assert.AreEqual("blog-post", routeData.Values["slug"]);
        }

        [Test]
        public void RequestUrlWithSingleDigitMonth_ForBlogPost_DoesNotMatchPageRoute()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/2008/1/10/blog-post.aspx");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNull(routeData);
        }

        [Test]
        public void RequestWithSubfolders_ForBlogPost_ContainsControlsForBlogPost()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/archive/2008/12/10/blog-post.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);
            var controls = routeData.DataTokens["controls"] as IEnumerable<string>;
            //assert.

            Assert.IsTrue(controls.Contains("viewpost"));
            Assert.IsTrue(controls.Contains("comments"));
            Assert.IsTrue(controls.Contains("postcomment"));
            Assert.AreEqual("blog-post", routeData.Values["slug"]);
        }

        [RowTest]
        [Row("~/subfolder/sitemap.ashx", "subfolder")]
        [Row("~/sitemap.ashx", null)]
        [Row("~/subfolder/BrowserServices.ashx", "subfolder")]
        [Row("~/BrowserServices.ashx", null)]
        [Row("~/subfolder/admin/handlers/BlogMLExport.ashx", "subfolder")]
        [Row("~/admin/handlers/BlogMLExport.ashx", null)]
        [Row("~/subfolder/admin/FooRss.axd", "subfolder")]
        [Row("~/admin/FooRss.axd", null)]
        public void Request_ForDirectHttpHandlers_Matches(string url, string subfolder)
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest(url, subfolder);

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert
            Assert.IsNotNull(routeData);
        }

        [Test]
        public void RequestWithSubfolderForCommentApiController_WithBlogHavingSubfolder_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/comments/123.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("CommentApi", routeData.Values["controller"]);
            Assert.AreEqual("Create", routeData.Values["action"]);
            Assert.AreEqual(routeData.RouteHandler.GetType(), typeof(MvcRouteHandler));
        }

        [Test]
        public void RequestWithSubfolderForAggregatorBug_WithBlogHavingSubfolder_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/aggbug/123.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("Statistics", routeData.Values["controller"]);
            Assert.AreEqual("RecordAggregatorView", routeData.Values["action"]);
            Assert.AreEqual(routeData.RouteHandler.GetType(), typeof(MvcRouteHandler));
        }

        [Test]
        public void RequestWithSubfolderForInstallDirectory_DoesNotMatch()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/subfolder/install/default.aspx", "subfolder");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNull(routeData);
        }

        [Test]
        public void RequestWithoutSubfolderForInstallDirectory_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/install/default.aspx", "");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNotNull(routeData);
        }

        [Test]
        public void GetRouteData_ForRequestForExportController_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/export.ashx", "");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("export", routeData.Values["controller"]);
            Assert.AreEqual("blogml", routeData.Values["action"]);
        }

        [Test]
        public void GetRouteData_ForRequestForEntryAdminController_Matches()
        {
            //arrange
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/admin/comments/destroy.ashx", "");

            //act
            RouteData routeData = routes.GetRouteData(httpContext.Object);

            //assert.
            Assert.IsNotNull(routeData);
            Assert.AreEqual("comment", routeData.Values["controller"]);
            Assert.AreEqual("destroy", routeData.Values["action"]);
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class SubtextContextTests
    {
        [Test]
        public void Ctor_WithAllNonNullArgs_SetsProperties()
        {
            //arrange
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, new RouteData());
            var urlHelper = new UrlHelper(requestContext, new RouteCollection());
            ObjectProvider objectRepository = new Mock<ObjectProvider>().Object;
            var blog = new Blog();

            //act
            var subtextContext = new SubtextContext(blog, requestContext, urlHelper, objectRepository, null, null, null);

            //assert
            Assert.AreEqual(blog, subtextContext.Blog);
            Assert.AreEqual(urlHelper, subtextContext.UrlHelper);
            Assert.AreEqual(requestContext, subtextContext.RequestContext);
            Assert.AreEqual(objectRepository, subtextContext.Repository);
        }
    }
}using MbUnit.Framework;
using Moq;
using Ninject;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class SubtextPageBuilderTests
    {
        [Test]
        public void CtorSetsKernel()
        {
            //arrange
            IKernel kernel = new Mock<IKernel>().Object;

            //act
            var builder = new SubtextPageBuilder(kernel);

            //assert
            Assert.AreSame(kernel, builder.Kernel);
        }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Routing;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class SubtextRouteHandlerTests
    {
        [Test]
        public void GetHandler_WhichReturnsIPageWithControls_SetsControls()
        {
            //arrange
            IEnumerable<string> controlNames = null;
            var routeData = new RouteData();
            routeData.DataTokens.Add("controls", new[] {"SomeControl"});
            var httpContext = new Mock<HttpContextBase>();
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var pageWithControls = new Mock<IPageWithControls>();
            pageWithControls.Setup(p => p.SetControls(It.IsAny<IEnumerable<string>>())).Callback<IEnumerable<string>>(
                c => controlNames = c);
            var pageBuilder = new Mock<ISubtextPageBuilder>();
            pageBuilder.Setup(b => b.CreateInstanceFromVirtualPath(It.IsAny<string>(), It.IsAny<Type>())).Returns(
                pageWithControls.Object);
            IRouteHandler subtextRouteHandler = new PageRouteHandler("~/aspx/Dtp.aspx", pageBuilder.Object,
                                                                     new Mock<IServiceLocator>().Object);

            //act
            subtextRouteHandler.GetHttpHandler(requestContext);

            //assert.
            Assert.AreEqual("SomeControl", controlNames.First());
        }
    }
}using System;
using System.Globalization;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class UrlHelperTests
    {
        [Test]
        public void EntryUrl_WithSubfolderAndEntryHavingEntryName_RendersVirtualPathToEntryWithDateAndSlugInUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            UrlHelper helper = SetupUrlHelper("/", routeData);
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                DateCreated = dateCreated,
                DateSyndicated = dateCreated,
                EntryName = "post-slug"
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/subfolder/archive/2008/01/23/post-slug.aspx", url);
        }

        [Test]
        public void EntryUrl_WithEntryHavingEntryName_RendersVirtualPathToEntryWithDateAndSlugInUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                DateSyndicated = dateCreated,
                DateCreated = dateCreated,
                EntryName = "post-slug"
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/archive/2008/01/23/post-slug.aspx", url);
        }

        [Test]
        public void EntryUrl_WithEntryHavingEntryNameAndPublishedInTheFuture_RendersVirtualPathToEntryWithDateAndSlugInUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            DateTime dateSyndicated = DateTime.ParseExact("2008/02/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                DateCreated = dateCreated,
                DateSyndicated = dateSyndicated,
                EntryName = "post-slug"
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/archive/2008/02/23/post-slug.aspx", url);
        }


        [Test]
        public void EntryUrl_WithEntryWhichIsReallyAnArticle_ReturnsArticleLink()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                DateCreated = dateCreated,
                DateSyndicated = dateCreated,
                EntryName = "post-slug",
                PostType = PostType.Story
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/articles/post-slug.aspx", url);
        }


        [Test]
        public void EntryUrl_WithEntryNotHavingEntryName_RendersVirtualPathWithId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                DateCreated = dateCreated,
                DateSyndicated = dateCreated,
                EntryName = string.Empty,
                Id = 123
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/archive/2008/01/23/123.aspx", url);
        }

        [Test]
        public void EntryUrlWithAppPath_WithEntryHavingEntryName_RendersVirtualPathToEntryWithDateAndSlugInUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/App");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                DateCreated = dateCreated,
                DateSyndicated = dateCreated,
                EntryName = "post-slug"
            };

            //act
            string url = helper.EntryUrl(entry);

            //assert
            Assert.AreEqual("/App/archive/2008/01/23/post-slug.aspx", url);
        }

        [Test]
        public void EntryUrl_WithNullEntry_ThrowsArgumentNullException()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            var requestContext = new RequestContext(httpContext.Object, new RouteData());
            var helper = new UrlHelper(requestContext, new RouteCollection());

            //act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => helper.EntryUrl(null));
        }

        [Test]
        public void EntryUrl_WithEntryHavingPostTypeOfNone_ThrowsArgumentException()
        {
            //arrange
            var httpContext = new Mock<HttpContextBase>();
            var requestContext = new RequestContext(httpContext.Object, new RouteData());
            var helper = new UrlHelper(requestContext, new RouteCollection());

            //act
            UnitTestHelper.AssertThrows<ArgumentException>(() => helper.EntryUrl(new Entry(PostType.None)));
        }


        [Test]
        public void FeedbackUrl_WithEntryHavingEntryName_RendersVirtualPathWithFeedbackIdInFragment()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                Id = 321,
                Entry = new Entry(PostType.BlogPost)
                {
                    Id = 123,
                    DateCreated = dateCreated,
                    DateSyndicated = dateCreated,
                    EntryName = "post-slug"
                }
            };

            //act
            string url = helper.FeedbackUrl(comment);

            //assert
            Assert.AreEqual("/archive/2008/01/23/post-slug.aspx#321", url);
        }

        [Test]
        public void FeedbackUrl_WithEntryHavingNoEntryName_RendersVirtualPathWithFeedbackIdInFragment()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateSyndicated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                Id = 321,
                EntryId = 1234,
                ParentDateSyndicated = dateSyndicated
            };

            //act
            string url = helper.FeedbackUrl(comment);

            //assert
            Assert.AreEqual("/archive/2008/01/23/1234.aspx#321", url);
        }

        [Test]
        public void FeedbackUrl_WithContactPageFeedback_ReturnsNullUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var comment = new FeedbackItem(FeedbackType.ContactPage)
            {
                Id = 321,
                Entry = new Entry(PostType.BlogPost)
            };

            //act
            string url = helper.FeedbackUrl(comment);

            //assert
            Assert.IsNull(url);
        }

        [Test]
        public void FeedbackUrl_WithNullEntry_ReturnsNullUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var comment = new FeedbackItem(FeedbackType.ContactPage)
            {
                Id = 321,
                Entry = null
            };

            //act
            string url = helper.FeedbackUrl(comment);

            //assert
            Assert.IsNull(url);
        }

        [Test]
        public void FeedbackUrl_WithEntryIdEqualToIntMinValue_ReturnsNull()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                Id = 123,
                Entry = new Entry(PostType.BlogPost)
                {
                    Id = NullValue.NullInt32,
                    DateCreated = dateCreated,
                    EntryName = "post-slug"
                }
            };

            //act
            string url = helper.FeedbackUrl(comment);

            //assert
            Assert.IsNull(url);
        }

        [Test]
        public void FeedbackUrl_WithNullFeedback_ThrowsArgumentNullException()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/App");

            //act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => helper.FeedbackUrl(null));
        }

        [Test]
        public void IdenticonUrl_WithAppPathWithoutSubfolder_ReturnsRootedUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");

            //act
            string url = helper.IdenticonUrl(123);

            //assert
            Assert.AreEqual("/Subtext.Web/images/services/IdenticonHandler.ashx?code=123", url);
        }

        [Test]
        public void IdenticonUrl_WithEmptyAppPathWithoutSubfolder_ReturnsRootedUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.IdenticonUrl(123);

            //assert
            Assert.AreEqual("/images/services/IdenticonHandler.ashx?code=123", url);
        }

        [Test]
        public void IdenticonUrl_WithEmptyPathWithSubfolder_IgnoresSubfolderInUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "foobar");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.IdenticonUrl(123);

            //assert
            Assert.AreEqual("/images/services/IdenticonHandler.ashx?code=123", url);
        }

        [Test]
        public void ImageUrl_WithoutBlogWithAppPathWithoutSubfolderAndImage_ReturnsRootedImageUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");

            //act
            string url = helper.ImageUrl("random.gif");

            //assert
            Assert.AreEqual("/Subtext.Web/images/random.gif", url);
        }

        [Test]
        public void ImageUrl_WithoutBlogWithEmptyAppPathWithoutSubfolderAndImage_ReturnsRootedImageUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.ImageUrl("random.gif");

            //assert
            Assert.AreEqual("/images/random.gif", url);
        }

        [Test]
        public void ImageUrl_WithoutBlogWithSubfolderAndImage_IgnoresSubfolderInUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "foobar");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ImageUrl("random.gif");

            //assert
            Assert.AreEqual("/images/random.gif", url);
        }

        [Test]
        public void ImageUrl_WithBlogWithAppPathWithoutSubfolderAndImage_ReturnsUrlForImageUploadDirectory()
        {
            //arrange
            var blog = new Blog {Host = "localhost", Subfolder = "sub"};
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");

            //act
            string url = helper.ImageUrl(blog, "random.gif");

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/sub/random.gif", url);
        }

        [Test]
        public void ImageUrl_WithBlogWithEmptyAppPathWithoutSubfolderAndImage_ReturnsUrlForImageUploadDirectory()
        {
            //arrange
            var blog = new Blog { Host = "localhost", Subfolder = "" };
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.ImageUrl(blog, "random.gif");

            //assert
            Assert.AreEqual("/images/localhost/random.gif", url);
        }

        [Test]
        public void ImageUrl_WithBlogWithSubfolderAndImage_IgnoresSubfolderInUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "foobar");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.ImageUrl("random.gif");

            //assert
            Assert.AreEqual("/images/random.gif", url);
        }

        [Test]
        public void GalleryUrl_WithId_ReturnsGalleryUrlWithId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.GalleryUrl(1234);

            //assert
            Assert.AreEqual("/gallery/1234.aspx", url);
        }

        [Test]
        public void GalleryUrl_WithImageAndBlogWithSubfolder_ReturnsGalleryUrlWithSubfolder()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var image = new Image {CategoryID = 1234, Blog = new Blog {Subfolder = "subfolder"}};

            //act
            string url = helper.GalleryUrl(image);

            //assert
            Assert.AreEqual("/subfolder/gallery/1234.aspx", url);
        }

        [Test]
        public void GalleryImageUrl_WithNullImage_ThrowsArgumentNullException()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => helper.GalleryImagePageUrl(null));
        }

        [Test]
        public void GalleryImageUrl_WithId_ReturnsGalleryUrlWithId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.GalleryImagePageUrl(new Image {ImageID = 1234, Blog = new Blog()});

            //assert
            Assert.AreEqual("/gallery/image/1234.aspx", url);
        }

        [Test]
        public void GalleryImageUrl_WithImageInBlogWithSubfolder_ReturnsGalleryUrlWithId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url =
                helper.GalleryImagePageUrl(new Image {ImageID = 1234, Blog = new Blog {Subfolder = "subfolder"}});

            //assert
            Assert.AreEqual("/subfolder/gallery/image/1234.aspx", url);
        }

        [Test]
        public void GalleryImageUrl_WithImageHavingUrlAndFileName_ReturnsUrlToImage()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var image = new Image {Url = "~/images/localhost/blog1/1234/", FileName = "close.gif"};

            //act
            string url = helper.GalleryImageUrl(image, image.OriginalFile);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/blog1/1234/o_close.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithBlogHavingSubfolderAndVirtualPathAndImageHavingNullUrlAndFileName_ReturnsUrlToImage()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};
            var image = new Image {Blog = blog, Url = null, FileName = "open.gif", CategoryID = 1234};

            //act
            string url = helper.GalleryImageUrl(image, image.OriginalFile);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/blog1/1234/o_open.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithBlogHavingSubfolderAndImageHavingNullUrlAndFileName_ReturnsUrlToImage()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};
            var image = new Image {Blog = blog, Url = null, FileName = "open.gif", CategoryID = 1234};

            //act
            string url = helper.GalleryImageUrl(image, image.OriginalFile);

            //assert
            Assert.AreEqual("/images/localhost/blog1/1234/o_open.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithBlogHavingNoSubfolderAndImageHavingNullUrlAndFileName_ReturnsUrlToImage()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = ""};
            var image = new Image {Blog = blog, Url = null, FileName = "open.gif", CategoryID = 1234};

            //act
            string url = helper.GalleryImageUrl(image, image.OriginalFile);

            //assert
            Assert.AreEqual("/images/localhost/1234/o_open.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};
            var image = new Image {CategoryID = 1234, FileName = "close.gif", Blog = blog};
            //act
            string url = helper.GalleryImageUrl(image);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/blog1/1234/o_close.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithoutAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};
            var image = new Image {CategoryID = 1234, FileName = "close.gif", Blog = blog};

            //act
            string url = helper.GalleryImageUrl(image);

            //assert
            Assert.AreEqual("/images/localhost/blog1/1234/o_close.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = ""};
            var image = new Image {CategoryID = 1234, FileName = "close.gif", Blog = blog};

            //act
            string url = helper.GalleryImageUrl(image);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/1234/o_close.gif", url);
        }

        [Test]
        public void GalleryImageUrl_WithoutAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = ""};
            var image = new Image {CategoryID = 1234, FileName = "close.gif", Blog = blog};
            //act
            string url = helper.GalleryImageUrl(image);

            //assert
            Assert.AreEqual("/images/localhost/1234/o_close.gif", url);
        }

        [Test]
        public void ImageGalleryDirectoryUrl_WithAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};

            //act
            string url = helper.ImageGalleryDirectoryUrl(blog, 1234);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/blog1/1234/", url);
        }

        [Test]
        public void ImageGalleryDirectoryUrl_WithoutAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};

            //act
            string url = helper.ImageGalleryDirectoryUrl(blog, 1234);

            //assert
            Assert.AreEqual("/images/localhost/blog1/1234/", url);
        }

        [Test]
        public void ImageGalleryDirectoryUrl_WithAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = ""};

            //act
            string url = helper.ImageGalleryDirectoryUrl(blog, 1234);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/1234/", url);
        }

        [Test]
        public void ImageGalleryDirectoryUrl_WithoutAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = ""};

            //act
            string url = helper.ImageGalleryDirectoryUrl(blog, 1234);

            //assert
            Assert.AreEqual("/images/localhost/1234/", url);
        }

        [Test]
        public void ImageDirectoryUrl_WithAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};

            //act
            string url = helper.ImageDirectoryUrl(blog);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/blog1/", url);
        }

        [Test]
        public void ImageDirectoryUrl_WithoutAppPathWithSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = "blog1"};

            //act
            string url = helper.ImageDirectoryUrl(blog);

            //assert
            Assert.AreEqual("/images/localhost/blog1/", url);
        }

        [Test]
        public void ImageDirectoryUrl_WithAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog {Host = "localhost", Subfolder = ""};

            //act
            string url = helper.ImageDirectoryUrl(blog);

            //assert
            Assert.AreEqual("/Subtext.Web/images/localhost/Subtext_Web/", url);
        }

        [Test]
        public void ImageDirectoryUrl_WithoutAppPathWithoutSubfolderAndImage_ReturnsUrlToImageFile()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "localhost", Subfolder = ""};

            //act
            string url = helper.ImageDirectoryUrl(blog);

            //assert
            Assert.AreEqual("/images/localhost/", url);
        }

        [Test]
        public void AggBugUrl_WithId_ReturnsAggBugUrlWithId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.AggBugUrl(1234);

            //assert
            Assert.AreEqual("/aggbug/1234.aspx", url);
        }

        [Test]
        public void BlogUrl_WithoutSubfolder_ReturnsVirtualPathToBlog()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.BlogUrl();

            //assert
            Assert.AreEqual("/default.aspx", url);
        }

        [Test]
        public void BlogUrl_WithSubfolder_ReturnsVirtualPathToBlogWithSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.BlogUrl();

            //assert
            Assert.AreEqual("/subfolder/default.aspx", url);
        }

        [Test]
        public void BlogUrlWithExplicitBlogNotHavingSubfolderAndVirtualPath_WithoutSubfolderInRouteData_ReturnsSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.BlogUrl(new Blog { Subfolder = null });

            //assert
            Assert.AreEqual("/Subtext.Web/default.aspx", url);
        }

        [Test]
        public void BlogUrlWithExplicitBlogHavingSubfolderAndVirtualPath_WithoutSubfolderInRouteData_ReturnsSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.BlogUrl(new Blog { Subfolder = "subfolder" });

            //assert
            Assert.AreEqual("/Subtext.Web/subfolder/default.aspx", url);
        }

        [Test]
        public void BlogUrlWithExplicitBlogHavingSubfolder_WithoutSubfolderInRouteData_ReturnsSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.BlogUrl(new Blog {Subfolder = "subfolder"});

            //assert
            Assert.AreEqual("/subfolder/default.aspx", url);
        }

        [Test]
        public void BlogUrl_WithSubfolderAndAppPath_ReturnsSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            UrlHelper helper = SetupUrlHelper("/App", routeData);

            //act
            string url = helper.BlogUrl();

            //assert
            Assert.AreEqual("/App/subfolder/default.aspx", url);
        }

        [Test]
        public void CategoryUrl_ReturnsURlWithCategoryId()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.CategoryUrl(new LinkCategory {Id = 1234});

            //assert
            Assert.AreEqual("/category/1234.aspx", url);
        }

        [Test]
        public void CategoryRssUrl_ReturnsURlWithCategoryIdInQueryString()
        {
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.CategoryRssUrl(new LinkCategory {Id = 1234});

            //assert
            Assert.AreEqual("/rss.aspx?catId=1234", url);
        }

        [Test]
        public void AdminUrl_WithoutSubfolder_ReturnsCorrectUrl()
        {
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.AdminUrl("Feedback.aspx", new {status = 2});

            //assert
            Assert.AreEqual("/admin/Feedback.aspx?status=2", url);
        }

        [Test]
        public void AdminUrl_WithSubfolderAndApplicationPath_ReturnsCorrectUrl()
        {
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "subfolder");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.AdminUrl("Feedback.aspx", new {status = 2});

            //assert
            Assert.AreEqual("/Subtext.Web/subfolder/admin/Feedback.aspx?status=2", url);
        }

        [Test]
        public void DayUrl_WithDate_ReturnsUrlWithDateInIt()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            //Make sure date isn't midnight.
            DateTime dateTime = DateTime.ParseExact("2009/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            dateTime.AddMinutes(231);

            //act
            string url = helper.DayUrl(dateTime);


            //assert
            Assert.AreEqual("/archive/2009/01/23.aspx", url);
        }

        [Test]
        public void RssProxyUrl_WithBlogHavingFeedBurnerName_ReturnsFeedburnerUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {RssProxyUrl = "test"};

            //act
            Uri url = helper.RssProxyUrl(blog);


            //assert
            Assert.AreEqual("http://feedproxy.google.com/test", url.ToString());
        }

        [Test]
        public void RssProxyUrl_WithBlogHavingSyndicationProviderUrl_ReturnsFullUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {RssProxyUrl = "http://feeds.example.com/"};

            //act
            Uri url = helper.RssProxyUrl(blog);


            //assert
            Assert.AreEqual("http://feeds.example.com/", url.ToString());
        }

        [Test]
        public void RssUrl_WithoutRssProxy_ReturnsRssUri()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "example.com"};

            //act
            Uri url = helper.RssUrl(blog);

            //assert
            Assert.AreEqual("http://example.com/rss.aspx", url.ToString());
        }

        [Test]
        public void RssUrl_ForBlogWithSubfolderWithoutRssProxy_ReturnsRssUri()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");
            var blog = new Blog { Host = "example.com", Subfolder = "blog"};

            //act
            Uri url = helper.RssUrl(blog);

            //assert
            Assert.AreEqual("http://example.com/Subtext.Web/blog/rss.aspx", url.ToString());
        }

        [Test]
        public void RssUrl_WithRssProxy_ReturnsProxyUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "example.com", RssProxyUrl = "http://feeds.example.com/feed"};

            //act
            Uri url = helper.RssUrl(blog);

            //assert
            Assert.AreEqual("http://feeds.example.com/feed", url.ToString());
        }

        [Test]
        public void AtomUrl_WithoutRssProxy_ReturnsRssUri()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "example.com"};

            //act
            Uri url = helper.AtomUrl(blog);

            //assert
            Assert.AreEqual("http://example.com/atom.aspx", url.ToString());
        }

        [Test]
        public void AtomUrl_WithRssProxy_ReturnsRssUri()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");
            var blog = new Blog {Host = "example.com", RssProxyUrl = "http://atom.example.com/atom"};

            //act
            Uri url = helper.AtomUrl(blog);

            //assert
            Assert.AreEqual("http://atom.example.com/atom", url.ToString());
        }

        [Test]
        public void AdminUrl_WithPage_RendersAdminUrlToPage()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string url = helper.AdminUrl("log.aspx");

            //assert
            Assert.AreEqual("/admin/log.aspx", url);
        }

        [Test]
        public void AdminUrl_WithBlogHavingSubfolder_RendersAdminUrlToPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.AdminUrl("log.aspx");

            //assert
            Assert.AreEqual("/sub/admin/log.aspx", url);
        }

        [Test]
        public void AdminUrl_WithBlogHavingSubfolderAndVirtualPath_RendersAdminUrlToPage()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.AdminUrl("log.aspx");

            //assert
            Assert.AreEqual("/Subtext.Web/sub/admin/log.aspx", url);
        }

        [Test]
        public void AdminRssUrl_WithFeednameAndSubfolderAndApp_ReturnsAdminRssUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.AdminRssUrl("Referrers");

            //assert
            Assert.AreEqual("/Subtext.Web/sub/admin/ReferrersRss.axd", url.ToString());
        }

        [Test]
        public void LoginUrl_WithSubfolderAndApp_ReturnsLoginUrlInSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.LoginUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/login.aspx", url);
        }

        [Test]
        public void LoginUrl_WithSubfolderAndAppAndReturnUrl_ReturnsLoginUrlWithReturnUrlInQueryString()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.LoginUrl("/Subtext.Web/AdminPage.aspx").ToString().ToLowerInvariant();

            //assert
            Assert.AreEqual(("/Subtext.Web/sub/login.aspx?ReturnUrl=" + HttpUtility.UrlEncode("/Subtext.Web/AdminPage.aspx")).ToLowerInvariant(), url);
        }

        [Test]
        public void LogoutUrl_WithSubfolderAndApp_ReturnsLoginUrlInSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.LogoutUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/account/logout.ashx", url);
        }

        [Test]
        public void LogoutUrl_WithoutSubfolderAndApp_ReturnsLoginUrlInSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.LogoutUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/account/logout.ashx", url);
        }

        [Test]
        public void ArchivesUrl_WithSubfolderAndApp_ReturnsUrlWithAppAndSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.ArchivesUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/archives.aspx", url);
        }

        [Test]
        public void ContactFormUrl_WithSubfolderAndApp_ReturnsUrlWithAppAndSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.ContactFormUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/contact.aspx", url);
        }

        [Test]
        public void WlwManifestUrl_WithoutSubfolderWithoutApp_ReturnsPerBlogManifestUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/");

            //act
            string manifestUrl = helper.WlwManifestUrl();

            //assert
            Assert.AreEqual("/wlwmanifest.xml.ashx", manifestUrl);
        }

        [Test]
        public void WlwManifestUrl_WithoutSubfolderAndApp_ReturnsPerBlogManifestUrl()
        {
            //arrange
            UrlHelper helper = SetupUrlHelper("/Subtext.Web");

            //act
            string manifestUrl = helper.WlwManifestUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/wlwmanifest.xml.ashx", manifestUrl);
        }

        [Test]
        public void WlwManifestUrl_WithSubfolderAndApp_ReturnsPerBlogManifestUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string manifestUrl = helper.WlwManifestUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/wlwmanifest.xml.ashx", manifestUrl);
        }

        [Test]
        public void MetaWeblogApiUrl_WithSubfolderAndApp_ReturnsFullyQualifiedUrl()
        {
            //arrange
            var blog = new Blog {Host = "example.com", Subfolder = "sub"};
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            Uri url = helper.MetaWeblogApiUrl(blog);

            //assert
            Assert.AreEqual("http://example.com/Subtext.Web/sub/services/metablogapi.aspx", url.ToString());
        }

        [Test]
        public void RsdUrl_WithSubfolderAndApp_ReturnsFullyQualifiedUrl()
        {
            //arrange
            var blog = new Blog {Host = "example.com", Subfolder = "sub"};
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            Uri url = helper.RsdUrl(blog);

            //assert
            Assert.AreEqual("http://example.com/Subtext.Web/sub/rsd.xml.ashx", url.ToString());
        }

        [Test]
        public void CustomCssUrl_WithSubfolderAndApp_ReturnsFullyQualifiedUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.CustomCssUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/customcss.aspx", url.ToString());
        }

        [Test]
        public void TagUrl_WithSubfolderAndApp_ReturnsTagUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.TagUrl("tagName");

            //assert
            Assert.AreEqual("/Subtext.Web/sub/tags/tagName/default.aspx", url.ToString());
        }

        [Test]
        public void TagUrl_CorrectlyEncodesPoundCharacter()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.TagUrl("C#");

            //assert
            Assert.AreEqual("/Subtext.Web/sub/tags/C%23/default.aspx", url.ToString());
        }

        [Test]
        public void TagCloudUrl_WithSubfolderAndApp_ReturnsTagCloudUrl()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.TagCloudUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/sub/tags/default.aspx", url.ToString());
        }

        [Test]
        public void AppRootUrl_WithSubfolder_ReturnsAppRootAndIgnoresSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            VirtualPath url = helper.AppRoot();

            //assert
            Assert.AreEqual("/", url.ToString());
        }

        [Test]
        public void AppRootUrl_WithSubfolderAndApp_ReturnsAppRootAndIgnoresSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.AppRoot();

            //assert
            Assert.AreEqual("/Subtext.Web/", url.ToString());
        }

        [Test]
        public void EditIcon_WithSubfolderAndApp_ReturnsAppRootAndIgnoresSubfolder()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            VirtualPath url = helper.EditIconUrl();

            //assert
            Assert.AreEqual("/Subtext.Web/images/icons/edit.gif", url.ToString());
        }

        [Test]
        public void HostAdminUrl_WithBlogHavingSubfolder_RendersUrlToHostAdmin()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/", routeData);

            //act
            string url = helper.HostAdminUrl("default.aspx");

            //assert
            Assert.AreEqual("/hostadmin/default.aspx", url);
        }

        [Test]
        public void HostAdminUrl_WithAppPathAndBlogHavingSubfolder_RendersUrlToHostAdmin()
        {
            //arrange
            var routeData = new RouteData();
            routeData.Values.Add("subfolder", "sub");
            UrlHelper helper = SetupUrlHelper("/Subtext.Web", routeData);

            //act
            string url = helper.HostAdminUrl("default.aspx");

            //assert
            Assert.AreEqual("/Subtext.Web/hostadmin/default.aspx", url);
        }

        private static UrlHelper SetupUrlHelper(string appPath)
        {
            return SetupUrlHelper(appPath, new RouteData());
        }

        private static UrlHelper SetupUrlHelper(string appPath, RouteData routeData)
        {
            return UnitTestHelper.SetupUrlHelper(appPath, routeData);
        }

        [RowTest]
        [Row("http://www.google.com/search?q=asp.net+mvc&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a", "asp.net mvc")]
        [Row("http://it.search.yahoo.com/search;_ylt=A03uv8bsRjNLZ0ABugAbDQx.?p=asp.net+mvc&fr2=sb-top&fr=yfp-t-709&rd=r1&sao=1", "asp.net mvc")]
        [Row("http://www.google.com/#hl=en&source=hp&q=asp.net+mvc&btnG=Google+Search&aq=0p&aqi=g-p3g7&oq=as&fp=cbc2f75bf9d43a8f", "asp.net mvc")]
        [Row("http://www.bing.com/search?q=asp.net+mvc&go=&form=QBLH&filt=all", "asp.net mvc")]
        [Row("http://www.google.com/search?hl=en&safe=off&client=firefox-a&rls=org.mozilla%3Aen-US%3Aofficial&hs=MUl&q=%22asp.net+mvc%22&aq=f&oq=&aqi=g-p3g7", "\"asp.net mvc\"")]
        [Row("http://codeclimber.net.nz/search.aspx?q=%22asp.net%20mvc%22", "")]
        [Row("http://www.google.it/search?rlz=1C1GGLS_enIT354IT354&sourceid=chrome&ie=UTF-8&q=site:http://haacked.com/+water+birth", "water birth")]
        [Row("http://www.google.it/search?rlz=1C1GGLS_enIT354IT354&sourceid=chrome&ie=UTF-8&q=site:https://haacked.com/+water+birth", "water birth")]
        [Row("http://www.google.it/search?rlz=1C1GGLS_enIT354IT354&sourceid=chrome&ie=UTF-8&q=water+birth+site:https://haacked.com/", "water birth")]
        public void UrlHelper_ExtractKeywordsFromReferrer_ParsesCorrectly(string referralUrl, string expectedResult)
        {
            Uri referrer = new Uri(referralUrl);
            Uri currentPath = new Uri("http://codeclimber.net.nz/archive/2009/05/20/book-review-asp.net-mvc-1.0-quickly.aspx");
            string query = UrlHelper.ExtractKeywordsFromReferrer(referrer, currentPath);
            Assert.AreEqual(expectedResult, query);
        }
    }
}using System;
using System.Web;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Routing;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class VirtualPathTests
    {
        [Test]
        public void Ctor_WithNull_ThrowsArgumentNullException()
        {
            //arrange, act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => new VirtualPath(null));
        }

        [Test]
        public void VirtualPath_WithFragment_SetsFragmentPropertyWithFragment()
        {
            //arrange
            var vp = new VirtualPath("/foo#bar");

            //assert
            Assert.AreEqual("/foo#bar", vp.ToString());
            Assert.AreEqual("#bar", vp.ToFullyQualifiedUrl(new Blog {Host = "localhost"}).Fragment);
        }

        [Test]
        public void VirtualPath_WithSpecialPoundSequence_ReplacesSequenceWithEncodedPoundSign()
        {
            //arrange
            var vp = new VirtualPath("/foo%7B:#:%7Dbar/");

            //assert
            Assert.AreEqual("/foo%23bar/", vp.ToString());
        }

        [Test]
        public void VirtualPathHasImplicitConversionToString()
        {
            //arrange
            var vp = new VirtualPath("/foo");

            //act
            string s = vp;

            //assert
            Assert.AreEqual("/foo", s);
        }

        [Test]
        public void NullString_ConvertsToNullVirtualPath()
        {
            //arrange, act
            VirtualPath vp = (string)null;

            //assert
            Assert.IsNull(vp);
        }

        [Test]
        public void EmptyString_ConvertsToNullVirtualPath()
        {
            //arrange, act
            VirtualPath vp = string.Empty;

            //assert
            Assert.IsNull(vp);
        }

        [Test]
        public void VirtualPathHasImplicitConversionFromString()
        {
            //arrange, act
            VirtualPath vp = "/foo";

            //assert
            Assert.AreEqual("/foo", (string)vp);
        }

        [Test]
        public void ToFullyQualifiedUrl_WithBlog_ReturnsUri()
        {
            //arrange
            VirtualPath vp = "/foo";

            //act
            Uri fullyQualified = vp.ToFullyQualifiedUrl(new Blog {Host = "localhost"});

            //assert
            Assert.AreEqual("http://localhost/foo", fullyQualified.ToString());
        }

        [Test]
        public void ToFullyQualifiedUrl_WithBlogAndPort_ReturnsUriWithPort()
        {
            //arrange
            try
            {
                VirtualPath vp = "/foo";
                UnitTestHelper.SetHttpContextWithBlogRequest("localhost", 8080, "", "");

                //act
                Uri fullyQualified = vp.ToFullyQualifiedUrl(new Blog {Host = "localhost"});

                //assert
                Assert.AreEqual("http://localhost:8080/foo", fullyQualified.ToString());
            }
            finally
            {
                HttpContext.Current = null;
            }
        }

        [Test]
        public void ToFullyQualifiedUrl_WithQueryString_ReturnsUriWithQueryString()
        {
            var x = new Uri("/foo", UriKind.Relative);
            Console.WriteLine(x.ToString());
            //arrange
            VirtualPath vp = "/foo?a=b";

            //act
            Uri uri = vp.ToFullyQualifiedUrl(new Blog {Host = "localhost"});

            //assert
            Assert.AreEqual("?a=b", uri.Query);
        }

        [Test]
        public void ToFullyQualifiedUrl_WithNullVirtualPath_ReturnsNull()
        {
            VirtualPath vp = null;
            Assert.IsNull(vp.ToFullyQualifiedUrl(new Blog()));
            Assert.IsNull(vp.ToFullyQualifiedUrl(null));
        }

        [Test]
        public void ToFullyQualifiedUrl_WithNullBlog_ThrowsArgumentNullException()
        {
            VirtualPath vp = "/";
            UnitTestHelper.AssertThrowsArgumentNullException(() => vp.ToFullyQualifiedUrl(null));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Security;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.SecurityHandling
{
    /// <summary>
    /// Summary description for SecurityTests.
    /// </summary>
    [TestFixture]
    public class SecurityTests
    {
        /// <summary>
        /// Makes sure that the UpdatePassword method hashes the password.
        /// </summary>
        [Test]
        [RollBack]
        public void UpdatePasswordHashesPassword()
        {
            string hostName = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "MyBlog");

            Config.Settings.UseHashedPasswords = true;
            Config.CreateBlog("", "username", "thePassword", hostName, "MyBlog");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, "MyBlog");
            string password = SecurityHelper.HashPassword("newPass");

            SecurityHelper.UpdatePassword("newPass");
            Blog info = Config.GetBlog(hostName, "MyBlog");
            Assert.AreEqual(password, info.Password);
        }

        [Test]
        public void IsValidPassword_WithBlogHavingHashedPasswordMatchingGivenClearTextPassword_ReturnsTrue()
        {
            // arrange
            const string password = "myPassword";
            const string hashedPassword = "Bc5M0y93wXmtXNxwW6IJVA==";
            Assert.AreEqual(hashedPassword, SecurityHelper.HashPassword(password));
            var blog = new Blog {UserName = "username", Password = hashedPassword, IsPasswordHashed = true};

            // act
            bool isValidPassword = SecurityHelper.IsValidPassword(blog, password);

            // assert
            Assert.IsTrue(isValidPassword);
        }

        [Test]
        public void IsValidPassword_WithPasswordHashingEnabledAndGivenTheHashedPassword_ReturnsFalse()
        {
            // arrange
            const string password = "myPassword";
            const string hashedPassword = "Bc5M0y93wXmtXNxwW6IJVA==";
            Assert.AreEqual(hashedPassword, SecurityHelper.HashPassword(password));
            var blog = new Blog {UserName = "username", Password = hashedPassword, IsPasswordHashed = true};

            // act
            bool isValidPassword = SecurityHelper.IsValidPassword(blog, hashedPassword);

            // assert
            Assert.IsFalse(isValidPassword);
        }

        [Test]
        public void IsValidPassword_WithClearTextPasswordMatchingBlogPassword_ReturnsTrue()
        {
            // arrange
            const string password = "myPassword";
            var blog = new Blog {UserName = "username", Password = password, IsPasswordHashed = false};

            // act
            bool isValidPassword = SecurityHelper.IsValidPassword(blog, password);

            // assert
            Assert.IsTrue(isValidPassword);
        }

        /// <summary>
        /// Ensures HashesPassword is case sensitive.
        /// </summary>
        [Test]
        public void HashPasswordIsCaseSensitive()
        {
            const string lowercase = "password";
            const string uppercase = "Password";
            UnitTestHelper.AssertAreNotEqual(SecurityHelper.HashPassword(lowercase),
                                             SecurityHelper.HashPassword(uppercase),
                                             "A lower cased and upper cased password should not be equivalent.");
            UnitTestHelper.AssertAreNotEqual(SecurityHelper.HashPassword(lowercase),
                                             SecurityHelper.HashPassword(uppercase.ToUpper(CultureInfo.InvariantCulture)),
                                             "A lower cased and a completely upper cased password should not be equivalent.");
        }

        /// <summary>
        /// Want to make sure that we still understand the old 
        /// bitconverter created password.
        /// </summary>
        [Test]
        public void IsValidPassword_GivenValidPasswordHashedUsingOldBitConverterStyleHash_ReturnsTrue()
        {
            // arrange
            const string password = "myPassword";
            Byte[] clearBytes = new UnicodeEncoding().GetBytes(password);
            Byte[] hashedBytes = new MD5CryptoServiceProvider().ComputeHash(clearBytes);
            string bitConvertedPassword = BitConverter.ToString(hashedBytes);
            var blog = new Blog {UserName = "username", Password = bitConvertedPassword, IsPasswordHashed = true};

            // act
            bool isValid = SecurityHelper.IsValidPassword(blog, password);

            // assert
            Assert.IsTrue(isValid);
        }

        [Test]
        public void SelectAuthenticationCookie_WithCookieNameMatchingBlog_ReturnsThatCookie()
        {
            // arrange
            var cookies = new HttpCookieCollection
            {
                new HttpCookie("This Is Not The Cookie You're Looking For"),
                new HttpCookie(".ASPXAUTH.42") {Path = "/Subtext.Web"},
                new HttpCookie("Awful Cookie")
            };
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());
            request.Setup(r => r.Cookies).Returns(cookies);

            // act
            HttpCookie cookie = request.Object.SelectAuthenticationCookie(new Blog {Id = 42});

            // assert
            Assert.IsNotNull(cookie);
            Assert.AreEqual(".ASPXAUTH.42", cookie.Name);
            Assert.AreEqual("/Subtext.Web", cookie.Path);
        }

        [Test]
        public void GetFullCookieName_WithBlog_ReturnsCookieNameWithBlogId()
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());
            var blog = new Blog {Id = 42};

            // act
            string cookieName = request.Object.GetFullCookieName(blog);

            // assert
            Assert.AreEqual(".ASPXAUTH.42", cookieName);
        }

        [Test]
        public void GetFullCookieName_WithNullBlog_ReturnsCookieNameWithHostAdminMarker()
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());

            // act
            string cookieName = request.Object.GetFullCookieName(null);

            // assert
            Assert.AreEqual(".ASPXAUTH.HA.null", cookieName);
        }

        [Test]
        public void GetFullCookieName_WithAggregateBlog_ReturnsCookieNameWithHostAdminMarker()
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());

            // act
            string cookieName = request.Object.GetFullCookieName(new Blog(true /*isAggregateBlog*/));

            // assert
            Assert.AreEqual(".ASPXAUTH.HA.null", cookieName);
        }

        [Test]
        public void GetFullCookieName_WithReturnUrlPointingToHostAdmin_ReturnsCookieNameWithBlogIdAndHostAdminInitials()
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            var queryStringParams = new NameValueCollection {{"ReturnUrl", "/HostAdmin"}};
            request.Setup(r => r.QueryString).Returns(queryStringParams);
            var blog = new Blog {Id = 42};

            // act
            string cookieName = request.Object.GetFullCookieName(blog, false);

            // assert
            Assert.AreEqual(".ASPXAUTH.HA.42", cookieName);
        }

        [Test]
        public void GetFullCookieName_WithForceHostAdminTrueAndNullBlog_ReturnsCookieNameWithHostAdminInitials()
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());

            // act
            string cookieName = request.Object.GetFullCookieName(null, true);

            // assert
            Assert.AreEqual(".ASPXAUTH.HA.null", cookieName);
        }

        [Test]
        public void CanAuthenticateAdmin()
        {
            // arrange
            var cookies = new HttpCookieCollection();
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.Path).Returns("/whatever");
            request.Setup(r => r.Cookies).Returns(cookies);
            request.Setup(r => r.QueryString).Returns(new NameValueCollection());
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(request.Object);
            httpContext.Setup(c => c.Response.Cookies).Returns(cookies);
            var blog = new Blog {UserName = "the-username", Password = "thePassword", IsPasswordHashed = false};

            // act
            bool authenticated = httpContext.Object.Authenticate(blog, "the-username", "thePassword", true);

            // assert
            Assert.IsTrue(authenticated);
            HttpCookie cookie = request.Object.SelectAuthenticationCookie(blog);
            Assert.IsNotNull(cookie);
        }

        [Test]
        public void CanGenerateSymmetricEncryptionKey()
        {
            byte[] key = SecurityHelper.GenerateSymmetricKey();
            Assert.IsTrue(key.Length > 0, "Expected a non-zero key.");
        }

        [Test]
        public void CanSymmetricallyEncryptAndDecryptText()
        {
            const string clearText = "Hello world!";
            byte[] key = SecurityHelper.GenerateSymmetricKey();
            byte[] iv = SecurityHelper.GenerateInitializationVector();

            string encrypted = SecurityHelper.EncryptString(clearText, Encoding.UTF8, key, iv);
            Assert.IsTrue(encrypted != clearText, "Encrypted text should not equal the clear text.");
            string unencrypted = SecurityHelper.DecryptString(encrypted, Encoding.UTF8, key, iv);
            Assert.AreEqual(clearText, unencrypted, "Round trip encrypt/decrypt failed to produce original string.");
        }

        /// <summary>
        /// Sets the up test fixture.  This is called once for 
        /// this test fixture before all the tests run.
        /// </summary>
        [TestFixtureSetUp]
        public void SetUpTestFixture()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }
    }
}using System;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility.Interfaces;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class BlogLookupServiceTests
    {
        [Test]
        public void Request_WithMatchingHost_ReturnsCorrespondingBlog()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns(new Blog {Host = "example.com"});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false));

            //assert
            Assert.IsNotNull(result.Blog);
            Assert.IsNull(result.AlternateUrl);
        }

        [Test]
        public void Request_WithNonMatchingHostButAlternativeHostMatches_ReturnsAlternativeHost()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns(new Blog
            {Host = "www.example.com"});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false));

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://www.example.com/foo/bar", result.AlternateUrl.ToString());
        }

        [Test]
        public void Request_MatchingActiveAlias_RedirectsToPrimary()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("blog.example.com", It.IsAny<string>())).Returns(new Blog
            {Host = "www.example.com"});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("blog.example.com", string.Empty,
                                               new Uri("http://blog.example.com/foo/bar"), false));

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://www.example.com/foo/bar", result.AlternateUrl.ToString());
        }

        [Test]
        public void Request_MatchingActiveAliasWithSubfolder_RedirectsToPrimaryWithoutSubfolder()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("blog.example.com", "sub")).Returns(new Blog
            {Host = "www.example.com", Subfolder = ""});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("blog.example.com", "sub", new Uri("http://blog.example.com/sub/foo/bar"),
                                               false));

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://www.example.com/foo/bar", result.AlternateUrl.ToString());
        }

        [Test]
        public void Request_MatchingActiveAliasWithoutSubfolder_RedirectsToPrimaryWithSubfolder()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("blog.example.com", string.Empty)).Returns(new Blog
            {Host = "www.example.com", Subfolder = "sub"});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("blog.example.com", string.Empty,
                                               new Uri("http://blog.example.com/foo/bar"), false));

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://www.example.com/sub/foo/bar", result.AlternateUrl.ToString());
        }

        [Test]
        public void Request_MatchingActiveAliasWithSubfolder_RedirectsToPrimaryWithDifferentSubfolder()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("blog.example.com", "notsub")).Returns(new Blog
            {Host = "www.example.com", Subfolder = "sub"});
            repository.Setup(r => r.GetBlogByDomainAlias("blog.example.com", "notsub", It.IsAny<bool>())).Returns(
                new Blog {Host = "www.example.com", Subfolder = "sub"});
            var service = new BlogLookupService(repository.Object, new HostInfo());

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("blog.example.com", "notsub",
                                               new Uri("http://blog.example.com/notsub/foo/bar"), false));

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://www.example.com/sub/foo/bar", result.AlternateUrl.ToString());
        }

        [Test]
        public void Request_NotMatchingAnyBlog_ReturnsNull()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns((Blog)null);
            var pagedCollection = new Mock<IPagedCollection<Blog>>();
            pagedCollection.Setup(p => p.MaxItems).Returns(0);
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection.Object);
            var service = new BlogLookupService(repository.Object, new HostInfo {BlogAggregationEnabled = false});

            //act
            BlogLookupResult result =
                service.Lookup(new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false));

            //assert
            Assert.IsNull(result);
        }

        [Test]
        public void RequestNotMatchingAnyBlog_ButWithAggregateBlogsEnabledAndActiveBlogsInTheSystem_ReturnsAggregateBlog
            ()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns((Blog)null);
            var onlyBlog = new Blog {Host = "example.com", Subfolder = "not-sub"};
            var pagedCollection = new PagedCollection<Blog> {onlyBlog};
            pagedCollection.MaxItems = 1;
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection);
            var aggregateBlog = new Blog();
            var service = new BlogLookupService(repository.Object,
                                                new HostInfo
                                                {BlogAggregationEnabled = true, AggregateBlog = aggregateBlog});
            var blogRequest = new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false);

            //act
            BlogLookupResult result = service.Lookup(blogRequest);

            //assert
            Assert.AreSame(aggregateBlog, result.Blog);
        }

        [Test]
        public void RequestWithSubfolderNotMatchingAnyBlog_ButWithAggregateBlogsEnabledAndMoreThanOneActiveBlogsInTheSystem_ReturnsNull()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns((Blog)null);
            var blog1 = new Blog { Host = "example.com", Subfolder = "not-sub" };
            var blog2 = new Blog { Host = "example.com", Subfolder = "not-sub-2" };
            var pagedCollection = new PagedCollection<Blog> {blog1, blog2};
            pagedCollection.MaxItems = 2;
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection);
            var aggregateBlog = new Blog();
            var service = new BlogLookupService(repository.Object,
                                                new HostInfo { BlogAggregationEnabled = true, AggregateBlog = aggregateBlog });
            var blogRequest = new BlogRequest("example.com", "blog1234", new Uri("http://example.com/foo/bar"), false);

            //act
            BlogLookupResult result = service.Lookup(blogRequest);

            //assert
            Assert.IsNull(result);
        }

        /// <summary>
        /// This test makes sure we deal gracefully with a common deployment problem. 
        /// A user sets up the blog on his/her local machine (aka "localhost"), then 
        /// deploys the database to their production server. The hostname in the db 
        /// should be changed to the new domain.
        /// </summary>
        [Test]
        public void
            RequestNotMatchingAnyBlog_ButWithASingleBlogInSystemWithMatchingHostButDifferentSubfolder_RedirectsToOnlyBlog
            ()
        {
            //arrange
            var onlyBlog = new Blog {Host = "example.com", Subfolder = "not-sub"};
            var pagedCollection = new PagedCollection<Blog> {onlyBlog};
            pagedCollection.MaxItems = 1;

            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", "sub")).Returns((Blog)null);
            repository.Setup(r => r.GetBlog("example.com", "not-sub")).Returns(onlyBlog);
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection);
            var service = new BlogLookupService(repository.Object, new HostInfo {BlogAggregationEnabled = false});
            var blogRequest = new BlogRequest("example.com", "sub", new Uri("http://example.com/Subtext.Web/sub/bar"),
                                              false, RequestLocation.Blog, "/Subtext.Web");

            //act
            BlogLookupResult result = service.Lookup(blogRequest);

            //assert
            Assert.IsNull(result.Blog);
            Assert.AreEqual("http://example.com/Subtext.Web/not-sub/bar", result.AlternateUrl.ToString());
        }

        /// <summary>
        /// This test makes sure we deal gracefully with a common deployment problem. 
        /// A user sets up the blog on his/her local machine (aka "localhost"), then 
        /// deploys the database to their production server. The hostname in the db 
        /// should be changed to the new domain.
        /// </summary>
        [Test]
        public void RequestNotMatchingAnyBlog_ButWithASingleBlogInSystemWithLocalHost_ReturnsThatBlogAndUpdatesItsHost()
        {
            //arrange
            var onlyBlog = new Blog {Host = "localhost", Subfolder = ""};
            var pagedCollection = new PagedCollection<Blog> {onlyBlog};
            pagedCollection.MaxItems = 1;

            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns((Blog)null);
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection);
            var service = new BlogLookupService(repository.Object, new HostInfo {BlogAggregationEnabled = false});
            var blogRequest = new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false);

            //act
            BlogLookupResult result = service.Lookup(blogRequest);

            //assert
            Assert.IsNotNull(result.Blog);
            Assert.IsNull(result.AlternateUrl);
            Assert.AreEqual("example.com", result.Blog.Host);
            Assert.AreEqual("example.com", onlyBlog.Host);
            repository.Verify(r => r.UpdateBlog(It.IsAny<Blog>()));
        }

        /// <summary>
        /// This test makes sure we deal gracefully with a common deployment problem. 
        /// A user sets up the blog on his/her local machine (aka "localhost"), then 
        /// deploys the database to their production server. The hostname in the db 
        /// should be changed to the new domain.
        /// </summary>
        [Test]
        public void
            RequestNotMatchingAnyBlog_ButWithASingleBlogInSystemWithLocalHostButNotMatchingSubfolder_ReturnsUpdatesItsHostThenRedirectsToSubfolder
            ()
        {
            //arrange
            var onlyBlog = new Blog {Host = "localhost", Subfolder = "sub"};
            var pagedCollection = new PagedCollection<Blog> {onlyBlog};
            pagedCollection.MaxItems = 1;

            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetBlog("example.com", It.IsAny<string>())).Returns((Blog)null);
            repository.Setup(r => r.GetPagedBlogs(null, 0, It.IsAny<int>(), ConfigurationFlags.None)).Returns(
                pagedCollection);
            var service = new BlogLookupService(repository.Object, new HostInfo {BlogAggregationEnabled = false});
            var blogRequest = new BlogRequest("example.com", string.Empty, new Uri("http://example.com/foo/bar"), false);

            //act
            BlogLookupResult result = service.Lookup(blogRequest);

            //assert
            Assert.IsNull(result.Blog);
            Assert.IsNotNull(result.AlternateUrl);
            Assert.AreEqual("http://example.com/sub/foo/bar", result.AlternateUrl.ToString());
            Assert.AreEqual("example.com", onlyBlog.Host);
            repository.Verify(r => r.UpdateBlog(It.IsAny<Blog>()));
        }
    }
}using System.Collections.Generic;
using System.Net;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class CommentFilterTests
    {
        /// <summary>
        /// Make sure that comments and Track/Pingbacks generated 
        /// by the blog owner (logged in Administrator) don't get 
        /// filtered.
        /// </summary>
        [Test]
        public void FilterBeforePersistDoesNotAllowTooManyCommentsWithinCommentDelay()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            var cache = new TestCache();
            cache["COMMENT FILTER:127.0.0.1"] = new FeedbackItem(FeedbackType.Comment);
            subtextContext.Setup(c => c.Cache).Returns(cache);
            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(false); // change to true.
            subtextContext.Setup(c => c.Blog).Returns(new Blog {CommentDelayInMinutes = 100});
            var commentSpamFilter = new Mock<ICommentSpamService>();
            var commentFilter = new CommentFilter(subtextContext.Object, commentSpamFilter.Object);

            //act, assert (no throw)
            UnitTestHelper.AssertThrows<CommentFrequencyException>(() =>
                                                                   commentFilter.FilterBeforePersist(
                                                                       new FeedbackItem(FeedbackType.Comment)
                                                                       {IpAddress = IPAddress.Parse("127.0.0.1")})
                );
        }

        /// <summary>
        /// Make sure that comments and Track/Pingbacks generated 
        /// by the blog owner (logged in Administrator) don't get 
        /// filtered.
        /// </summary>
        [Test]
        public void FilterBeforePersistIgnoresAdminRole()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            var cache = new TestCache();
            cache["COMMENT FILTER:127.0.0.1"] = new FeedbackItem(FeedbackType.Comment);
            subtextContext.Setup(c => c.Cache).Returns(cache);
            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(true);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {CommentDelayInMinutes = 1});
            var commentSpamFilter = new Mock<ICommentSpamService>();
            var commentFilter = new CommentFilter(subtextContext.Object, commentSpamFilter.Object);

            //act, assert (no throw)
            commentFilter.FilterBeforePersist(new FeedbackItem(FeedbackType.PingTrack)
            {IpAddress = IPAddress.Parse("127.0.0.1")});
        }

        [Test]
        public void FilterBeforePersistDoesNotAllowDuplicateComments()
        {
            //arrange
            var recentCommentChecksums = new Queue<string>();
            recentCommentChecksums.Enqueue("TestChecksum");
            var subtextContext = new Mock<ISubtextContext>();
            var cache = new TestCache();
            cache["COMMENT FILTER:.RECENT_COMMENTS"] = recentCommentChecksums;
            subtextContext.Setup(c => c.Cache).Returns(cache);
            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            subtextContext.Setup(c => c.Blog).Returns(new Blog
            {CommentDelayInMinutes = 0, DuplicateCommentsEnabled = false});
            var commentSpamFilter = new Mock<ICommentSpamService>();
            var commentFilter = new CommentFilter(subtextContext.Object, commentSpamFilter.Object);

            //act, assert
            UnitTestHelper.AssertThrows<CommentDuplicateException>(() =>
                                                                   commentFilter.FilterBeforePersist(
                                                                       new FeedbackItem(FeedbackType.Comment)
                                                                       {ChecksumHash = "TestChecksum"})
                );
        }

        [Test]
        [RollBack]
        public void FilterAfterPersistWithCommentModerationDisabledCausesNewCommentsToBeActive()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            var cache = new TestCache();
            subtextContext.Setup(c => c.Cache).Returns(cache);
            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {ModerationEnabled = false});
            FeedbackItem savedFeedback = null;
            subtextContext.Setup(c => c.Repository.Update(It.IsAny<FeedbackItem>())).Callback<FeedbackItem>(
                f => savedFeedback = f);

            var commentSpamFilter = new Mock<ICommentSpamService>();
            var commentFilter = new CommentFilter(subtextContext.Object, commentSpamFilter.Object);
            var feedback = new FeedbackItem(FeedbackType.Comment) {};
            Assert.IsFalse(feedback.Approved);

            //act
            commentFilter.FilterAfterPersist(feedback);

            //assert
            Assert.IsTrue(savedFeedback.Approved);
        }

        [Test]
        [RollBack]
        public void FilterAfterPersistWithCommentModerationEnabledCausesNewCommentsToNeedApproval()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            var cache = new TestCache();
            subtextContext.Setup(c => c.Cache).Returns(cache);
            subtextContext.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {ModerationEnabled = true});
            FeedbackItem savedFeedback = null;
            subtextContext.Setup(c => c.Repository.Update(It.IsAny<FeedbackItem>())).Callback<FeedbackItem>(
                f => savedFeedback = f);

            var commentSpamFilter = new Mock<ICommentSpamService>();
            var commentFilter = new CommentFilter(subtextContext.Object, commentSpamFilter.Object);
            var feedback = new FeedbackItem(FeedbackType.Comment);
            Assert.IsFalse(feedback.NeedsModeratorApproval);

            //act
            commentFilter.FilterAfterPersist(feedback);

            //assert
            Assert.IsTrue(savedFeedback.NeedsModeratorApproval);
        }

        [Test]
        public void CommentFilterExceptionMessage_WithOneMinute_ProvidesSingularMessage()
        {
            // arrange
            var exception = new CommentFrequencyException(1);

            // act
            string message = exception.Message;

            // assert
            Assert.AreEqual("Sorry, but there is a delay between allowing comments originating from the same source. Please wait for 1 minute and try again.", message);
        }

        [Test]
        public void CommentFilterExceptionMessage_WithTwoMinutes_ProvidesPluralMessage()
        {
            // arrange
            var exception = new CommentFrequencyException(2);

            // act
            string message = exception.Message;

            // assert
            Assert.AreEqual("Sorry, but there is a delay between allowing comments originating from the same source. Please wait for 2 minutes and try again.", message);
        }
    }
}using System;
using System.Collections;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class CommentServiceTests
    {
        //TODO This test is RIDICULOUS! We need to refactor some code.
        [Test]
        [Ignore("Need to refactor")]
        public void CreateSetsDateCreatedToBlogTime()
        {
            //arrange
            var blog = new Mock<Blog>();
            DateTime dateCreated = DateTime.Now;
            blog.Object.Id = 1;
            blog.Setup(b => b.TimeZone.Now).Returns(dateCreated);
            var entry = new Entry(PostType.BlogPost, blog.Object) {Id = 123, BlogId = 1, CommentingClosed = false};
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);
            var context = new Mock<ISubtextContext>();
            context.SetupGet(c => c.Repository).Returns(repository.Object);
            context.SetupGet(c => c.Blog).Returns(blog.Object);
            context.SetupGet(c => c.HttpContext.Items).Returns(new Hashtable());
            context.SetupGet(c => c.Cache).Returns(new TestCache());

            var service = new CommentService(context.Object, null);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {EntryId = 123, BlogId = 1, Body = "test", Title = "title"};

            //act
            service.Create(comment, true/*runFilters*/);

            //assert
            Assert.AreEqual(dateCreated, comment.DateCreated);
        }

        [Test]
        public void CreateDoesNotChangeDateCreatedAndDateModifiedIfAlreadySpecified()
        {
            //arrange
            var blog = new Mock<Blog>();
            DateTime dateCreated = DateTime.Now;
            blog.Object.Id = 1;
            blog.Setup(b => b.TimeZone.Now).Returns(dateCreated);
            var entry = new Entry(PostType.BlogPost, blog.Object) {Id = 123, BlogId = 1, CommentingClosed = false};
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);
            var context = new Mock<ISubtextContext>();
            context.SetupGet(c => c.Repository).Returns(repository.Object);
            context.SetupGet(c => c.Blog).Returns(blog.Object);
            context.SetupGet(c => c.HttpContext.Items).Returns(new Hashtable());
            context.SetupGet(c => c.Cache).Returns(new TestCache());

            var service = new CommentService(context.Object, null);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                EntryId = 123,
                BlogId = 1,
                Body = "test",
                Title = "title",
                DateCreated = dateCreated.AddDays(-2),
                DateModified = dateCreated.AddDays(-1)
            };

            //act
            service.Create(comment, true/*runFilters*/);

            //assert
            Assert.AreEqual(dateCreated.AddDays(-2), comment.DateCreated);
            Assert.AreEqual(dateCreated.AddDays(-1), comment.DateModified);
        }

        [Test]
        public void Create_WithFilters_CallsIntoCommentFilters()
        {
            //arrange
            var blog = new Mock<Blog>();
            DateTime dateCreated = DateTime.Now;
            blog.Object.Id = 1;
            blog.Setup(b => b.TimeZone.Now).Returns(dateCreated);
            var entry = new Entry(PostType.BlogPost, blog.Object) {Id = 123, BlogId = 1, CommentingClosed = false};
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);
            var context = new Mock<ISubtextContext>();
            context.SetupGet(c => c.Repository).Returns(repository.Object);
            context.SetupGet(c => c.Blog).Returns(blog.Object);
            context.SetupGet(c => c.HttpContext.Items).Returns(new Hashtable());
            context.SetupGet(c => c.Cache).Returns(new TestCache());

            var commentFilter = new Mock<ICommentFilter>();
            bool wasBeforeCalled = false;
            bool wasAfterCalled = false;
            commentFilter.Setup(f => f.FilterBeforePersist(It.IsAny<FeedbackItem>())).Callback(
                () => wasBeforeCalled = true);
            commentFilter.Setup(f => f.FilterAfterPersist(It.IsAny<FeedbackItem>())).Callback(
                () => wasAfterCalled = true);
            var service = new CommentService(context.Object, commentFilter.Object);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                EntryId = 123,
                BlogId = 1,
                Body = "test",
                Title = "title",
                DateCreated = dateCreated.AddDays(-2),
                DateModified = dateCreated.AddDays(-1)
            };

            //act
            service.Create(comment, true /*runFilters*/);

            //assert
            Assert.IsTrue(wasBeforeCalled);
            Assert.IsTrue(wasAfterCalled);
            Assert.IsTrue(comment.FlaggedAsSpam);
        }

        [Test]
        public void Create_ForEntry_SetsEntryPropertyBeforeCallingFilters()
        {
            //arrange
            var blog = new Mock<Blog>();
            DateTime dateCreated = DateTime.Now;
            blog.Object.Id = 1;
            blog.Setup(b => b.TimeZone.Now).Returns(dateCreated);
            var entry = new Entry(PostType.BlogPost, blog.Object) { Id = 123, BlogId = 1, CommentingClosed = false };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);
            var context = new Mock<ISubtextContext>();
            context.SetupGet(c => c.Repository).Returns(repository.Object);
            context.SetupGet(c => c.Blog).Returns(blog.Object);
            context.SetupGet(c => c.HttpContext.Items).Returns(new Hashtable());
            context.SetupGet(c => c.Cache).Returns(new TestCache());

            var commentFilter = new Mock<ICommentFilter>();
            FeedbackItem feedback = null;
            commentFilter.Setup(f => f.FilterBeforePersist(It.IsAny<FeedbackItem>())).Callback<FeedbackItem>(fb => feedback = fb);
            var service = new CommentService(context.Object, commentFilter.Object);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                EntryId = 123,
                BlogId = 1,
                Body = "test",
                Title = "title",
                DateCreated = dateCreated.AddDays(-2),
                DateModified = dateCreated.AddDays(-1)
            };

            //act
            service.Create(comment, true /*runFilters*/);

            //assert
            Assert.AreEqual(entry, feedback.Entry);
        }


        [Test]
        public void Create_WithRunFiltersFalse_DoesNotSetFlaggedSpamToTrue()
        {
            //arrange
            var blog = new Mock<Blog>();
            DateTime dateCreated = DateTime.Now;
            blog.Object.Id = 1;
            blog.Setup(b => b.TimeZone.Now).Returns(dateCreated);
            var entry = new Entry(PostType.BlogPost, blog.Object) { Id = 123, BlogId = 1, CommentingClosed = false };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);
            var context = new Mock<ISubtextContext>();
            context.SetupGet(c => c.Repository).Returns(repository.Object);
            context.SetupGet(c => c.Blog).Returns(blog.Object);
            context.SetupGet(c => c.HttpContext.Items).Returns(new Hashtable());
            context.SetupGet(c => c.Cache).Returns(new TestCache());

            var service = new CommentService(context.Object, null);
            var comment = new FeedbackItem(FeedbackType.Comment)
            {
                EntryId = 123,
                BlogId = 1,
                Body = "test",
                Title = "title",
                DateCreated = dateCreated.AddDays(-2),
                DateModified = dateCreated.AddDays(-1)
            };

            //act
            service.Create(comment, false /*runFilters*/);

            //assert
            Assert.IsFalse(comment.FlaggedAsSpam);
        }

        [Test]
        public void UpdateStatus_WithDeletedFlag_SetsDeleted()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            var feedback = new FeedbackItem(FeedbackType.Comment) {Approved = true, Deleted = false};
            context.Setup(c => c.Repository.GetFeedback(112)).Returns(feedback);
            var service = new CommentService(context.Object, null);

            // act
            service.UpdateStatus(feedback, FeedbackStatusFlag.Deleted);

            // assert
            Assert.IsTrue(feedback.Deleted);
        }

        [Test]
        public void Destroy_DestroysTheFeedback()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            var feedback = new FeedbackItem(FeedbackType.Comment) { Approved = true, Deleted = false };
            context.Setup(c => c.Repository.GetFeedback(112)).Returns(feedback);
            context.Setup(c => c.Repository.DestroyFeedback(123));
            var service = new CommentService(context.Object, null);

            // act
            service.Destroy(123);

            // assert
            context.Verify(c => c.Repository.DestroyFeedback(123));
        }
    }
}using MbUnit.Framework;
using Moq;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class CompositeTextTransformationTests
    {
        [Test]
        public void Transform_WithMultipleTransformations_RunsThemAll()
        {
            //arrange
            var transform1 = new Mock<ITextTransformation>();
            transform1.Setup(t => t.Transform(It.IsAny<string>())).Returns<string>(s => s + "t1");
            var transform2 = new Mock<ITextTransformation>();
            transform2.Setup(t => t.Transform(It.IsAny<string>())).Returns<string>(s => s + "t2");
            var composite = new CompositeTextTransformation();
            composite.Add(transform1.Object);
            composite.Add(transform2.Object);

            //act
            string transformed = composite.Transform("This is a test. ");

            //assert
            Assert.AreEqual("This is a test. t1t2", transformed);
        }
    }
}using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework.Emoticons;

namespace UnitTests.Subtext.Framework.Emoticons
{
    [TestFixture]
    public class EmoticonsFileSourceTests
    {
        [Test]
        public void GetEmoticons_WithFileSource_LoadsEmoticonsFromStreamReader()
        {
            //arrange
            var memoryStream = new MemoryStream();
            var writer = new StreamWriter(memoryStream);
            writer.WriteLine("[:)]");
            writer.WriteLine("<img src=\"{0}\" title=\"happy\" />");
            writer.WriteLine("[:(]");
            writer.WriteLine("<img src=\"{0}\" title=\"sad\" />");
            writer.Flush();
            memoryStream.Position = 0;
            var emoticonsSource = new EmoticonsFileSource(new StreamReader(memoryStream));

            //act
            IEnumerable<Emoticon> emoticons = emoticonsSource.GetEmoticons();

            //assert
            Assert.AreEqual(2, emoticons.Count());
            Assert.AreEqual("[:)]", emoticons.First().EmoticonText);
            Assert.AreEqual("<img src=\"{0}\" title=\"happy\" />", emoticons.First().ImageTag);
            Assert.AreEqual("[:(]", emoticons.ElementAt(1).EmoticonText);
            Assert.AreEqual("<img src=\"{0}\" title=\"sad\" />", emoticons.ElementAt(1).ImageTag);
        }

        [Test]
        [Category("Integration")]
        public void GetEmoticons_WithFileSource_LoadsEmoticonsFromFile()
        {
            //arrange
            string path = UnitTestHelper.GetPathInExecutingAssemblyLocation("emoticons.txt");
            UnitTestHelper.UnpackEmbeddedResource("Web.emoticons.txt", path);
            var emoticonsSource = new EmoticonsFileSource(path);

            //act
            IEnumerable<Emoticon> emoticons = emoticonsSource.GetEmoticons();

            //assert
            Assert.AreEqual(24, emoticons.Count());
        }
    }
}using System.Collections.Generic;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Emoticons;

namespace UnitTests.Subtext.Framework.Emoticons
{
    [TestFixture]
    public class EmoticonsTransformationTests
    {
        [Test]
        public void Transform_WithSmiley_TransformsSmiley()
        {
            //arrange
            var emoticons = new List<Emoticon>();
            emoticons.Add(new Emoticon("[:'(]", "<img src=\"{0}\" />"));
            var emoticonsSource = new Mock<IEmoticonsSource>();
            emoticonsSource.Setup(es => es.GetEmoticons()).Returns(emoticons);
            var transformation = new EmoticonsTransformation(emoticonsSource.Object, "http://example.com/");

            //act
            string result = transformation.Transform("[:'(]");

            //assert
            Assert.AreEqual(@"<img src=""http://example.com/"" />", result);
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Emoticons;

namespace UnitTests.Subtext.Framework.Emoticons
{
    [TestFixture]
    public class EmoticonTests
    {
        [Test]
        public void Transform_WithSmiley_TransformsSmiley()
        {
            //arrange
            var emoticon = new Emoticon("[:'(]", "<img src=\"{0}\" />");

            //act
            string result = emoticon.Replace("[:'(]", "http://example.com/");

            //assert
            Assert.AreEqual(@"<img src=""http://example.com/"" />", result);
        }

        [Test]
        public void Transform_WithSmileyInText_TransformsSmiley()
        {
            //arrange
            var emoticon = new Emoticon("[:'(]", "<img src=\"{0}\" />");

            //act
            string result = emoticon.Replace("abc[:'(]def", "http://example.com/");

            //assert
            Assert.AreEqual(@"abc<img src=""http://example.com/"" />def", result);
        }
    }
}using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Configuration;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;
using Subtext.Framework.Services.SearchEngine;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class EntryPublisherTests
    {
        [Test]
        public void Ctor_WithNullContext_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(
                () =>
                new EntryPublisher(null, EmptyTextTransformation.Instance,
                                   new SlugGenerator(FriendlyUrlSettings.Settings),null));
        }

        [Test]
        public void Publish_WithTransformations_RunsTransformationAgainstEntryBody()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var transform = new Mock<ITextTransformation>();
            var searchengine = new Mock<IIndexingService>();
            transform.Setup(t => t.Transform(It.IsAny<string>())).Returns<string>(s => s + "t1");
            var publisher = new EntryPublisher(context.Object, transform.Object, null, searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "Test", Body = "test"};
            entry.Blog = new Blog() {Title = "MyTestBlog"};

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual("testt1", entry.Body);
        }

        [Test]
        public void Publish_WithEntryTitleButNoSlug_CreatesSlug()
        {
            //arrange
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            var slugGenerator = new Mock<ISlugGenerator>();
            slugGenerator.Setup(g => g.GetSlugFromTitle(entry)).Returns("this-is-a-test");
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            var searchengine = new Mock<IIndexingService>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var publisher = new EntryPublisher(context.Object, null, slugGenerator.Object, searchengine.Object);

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual("this-is-a-test", entry.EntryName);
        }

        [Test]
        public void Publish_WithEntryTitleAndSlug_DoesNotOverideSlug()
        {
            //arrange
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", EntryName = "testing"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            var slugGenerator = new Mock<ISlugGenerator>();
            slugGenerator.Setup(g => g.GetSlugFromTitle(entry)).Returns("this-is-a-test");
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, slugGenerator.Object, searchengine.Object);

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual("testing", entry.EntryName);
        }

        [Test]
        public void Publish_WithEntry_SavesInRepository()
        {
            //arrange
            Entry savedEntry = null;
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null)).Callback<Entry, IEnumerable<int>>(
                (e, i) => savedEntry = e);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null,searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual(entry, savedEntry);
        }

        [Test]
        public void Publish_WithEntry_SetsDateCreatedToBlogCurrentTimeZoneTime()
        {
            //arrange
            DateTime currentTime = DateTime.Now;
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(currentTime);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual(currentTime, entry.DateCreated);
            //cheating by shoving this extra assert here. MUAHAHAHA!!! ;)
            Assert.IsTrue(NullValue.IsNull(entry.DateSyndicated));
        }

        [Test]
        public void Publish_WithActiveEntryAndIncludeInSyndication_SetsDateSyndicatedToBlogCurrentTimeZoneTime()
        {
            //arrange
            var currentTime = DateTime.Now;
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(currentTime);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", IsActive = true, IncludeInMainSyndication = true};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual(currentTime, entry.DateSyndicated);
        }

        [Test]
        public void Publish_WithEntryHavingCategories_CreatesEntryWithAssociatedCategoryIds()
        {
            //arrange
            DateTime currentTime = DateTime.Now;
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetLinkCategory("category1", true)).Returns(new LinkCategory(11, "category1"));
            repository.Setup(r => r.GetLinkCategory("category2", true)).Returns(new LinkCategory(22, "category2"));
            repository.Setup(r => r.GetLinkCategory("category3", true)).Returns(new LinkCategory(33, "category3"));
            IEnumerable<int> categoryIds = null;
            repository.Setup(r => r.Create(It.IsAny<Entry>(), It.IsAny<IEnumerable<int>>())).Callback
                <Entry, IEnumerable<int>>((e, ids) => categoryIds = ids);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(currentTime);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            entry.Categories.Add("category1");
            entry.Categories.Add("category2");
            entry.Categories.Add("category3");

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual(11, categoryIds.First());
            Assert.AreEqual(22, categoryIds.ElementAt(1));
            Assert.AreEqual(33, categoryIds.ElementAt(2));
        }

        [Test]
        public void Publish_WithEntryBodyHavingTags_SetsEntryTags()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            IEnumerable<string> tagNames = null;
            repository.Setup(r => r.SetEntryTagList(It.IsAny<int>(), It.IsAny<IEnumerable<string>>()))
                .Callback<int, IEnumerable<string>>((i, t) => tagNames = t);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchengine = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null,searchengine.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", Body = ""};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.IsNotNull(tagNames);
        }

        [Test]
        public void Publish_WithEntry_AddsToSearchEngine()
        {
            //arrange
            var searchEngineService = new Mock<IIndexingService>();
            Entry searchEngineEntry = null;
            searchEngineService.Setup(s => s.AddPost(It.IsAny<Entry>(),It.IsAny<IList<string>>()))
                .Callback<Entry, IList<string>>((e,l) => searchEngineEntry = e);
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) { Title = "this is a test", Body = "", IsActive=true };
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            

            //act
            publisher.Publish(entry);

            //assert
            Assert.IsNotNull(searchEngineEntry);
        }


        [Test]
        public void Publish_WithScriptTagsAllowed_AllowsScriptTagInBody()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", Body = "Some <script></script> Body"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            Config.Settings.AllowScriptsInPosts = true;

            //act
            publisher.Publish(entry);

            //assert
            //no exception thrown.
        }

        [Test]
        public void Publish_WithNullEntry_ThrowsArgumentNullException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);

            //act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => publisher.Publish(null));
        }

        [Test]
        public void Publish_WithEntryHavingPostTypeNone_ThrowsArgumentException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null,searchEngineService.Object);

            //act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => publisher.Publish(new Entry(PostType.None)));
        }

        [Test]
        public void Publish_WithDuplicateEntryName_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            var exception = new Mock<DbException>();
            exception.Setup(e => e.Message).Returns("pick a unique EntryName");
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null)).Throws(exception.Object);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", EntryName = "test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act, assert
            UnitTestHelper.AssertThrows<DuplicateEntryException>(() =>
                                                                 publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithRepositoryThrowingException_PropagatesException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            var exception = new Mock<DbException>();
            exception.Setup(e => e.Message).Returns("unknown");
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null)).Throws(exception.Object);
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null,searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", EntryName = "test"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act, assert
            UnitTestHelper.AssertThrows<DbException>(() =>
                                                     publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithScriptTagInBody_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test", Body = "Some <script></script> Body"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            Config.Settings.AllowScriptsInPosts = false;

            //act, assert
            UnitTestHelper.AssertThrows<IllegalPostCharactersException>(() =>
                                                                        publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithScriptTagInTitle_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null,searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test<script></script>", Body = "Some Body"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            Config.Settings.AllowScriptsInPosts = false;

            //act, assert
            UnitTestHelper.AssertThrows<IllegalPostCharactersException>(() =>
                                                                        publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithScriptTagInSlug_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost)
            {Title = "stuff", EntryName = "<script></script>", Body = "Some Body"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            Config.Settings.AllowScriptsInPosts = false;

            //act, assert
            UnitTestHelper.AssertThrows<IllegalPostCharactersException>(() =>
                                                                        publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithScriptTagInDescription_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, null, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost)
            {Title = "this is a test", Body = "Whatever", Description = "Some <script></script> Body"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            Config.Settings.AllowScriptsInPosts = false;

            //act, assert
            UnitTestHelper.AssertThrows<IllegalPostCharactersException>(() =>
                                                                        publisher.Publish(entry)
                );
        }

        [Test]
        public void Publish_WithEntryHavingValidEntryName_DoesNotChangeEntryName()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var transform = new Mock<ITextTransformation>();
            transform.Setup(t => t.Transform(It.IsAny<string>())).Returns<string>(s => s);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, transform.Object, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "Test", Body = "test", EntryName = "original-entry-name"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual("original-entry-name", entry.EntryName);
        }

        [Test]
        public void Publish_WithEntryHavingNumericIntegerEntryName_PrependsNUnderscore()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.Create(It.IsAny<Entry>(), null));
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog.TimeZone.Now).Returns(DateTime.Now);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var transform = new Mock<ITextTransformation>();
            transform.Setup(t => t.Transform(It.IsAny<string>())).Returns<string>(s => s);
            var searchEngineService = new Mock<IIndexingService>();
            var publisher = new EntryPublisher(context.Object, transform.Object, null, searchEngineService.Object);
            var entry = new Entry(PostType.BlogPost) {Title = "Test", Body = "test", EntryName = "4321"};
            entry.Blog = new Blog() { Title = "MyTestBlog" };

            //act
            publisher.Publish(entry);

            //assert
            Assert.AreEqual("n_4321", entry.EntryName);
        }
    }
}using System;
using System.Collections.Specialized;
using MbUnit.Framework;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class GravatarServiceTests
    {
        [Test]
        public void GenerateUrlHashesEmailAddress()
        {
            //arrange
            var service = new GravatarService("{0}", GravatarEmailFormat.Md5, true);

            //act
            string url = service.GenerateUrl("test@example.com", (string)null);

            //assert
            Assert.Contains(url, "55502f40dc8b7c769880b10874abc9d0");
        }

        [Test]
        public void GenerateUrlFormatsEmail()
        {
            //arrange
            var service = new GravatarService("http://example.com/{0}/sike", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl("test@example.com", (string)null);

            //assert
            Assert.Contains(url, "http://example.com/test%40example.com/sike");
        }

        [Test]
        public void GenerateUrlEncodesEmail()
        {
            //arrange
            var service = new GravatarService("{0}", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl("te st@example.com", (string)null);

            //assert
            Assert.Contains(url, "te+st%40example.com");
        }

        [Test]
        public void GenerateUrlWithNullDefaultUsesIdenticon()
        {
            //arrange
            var service = new GravatarService("{0}/{1}", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl("test@example.com", (string)null);

            //assert
            Assert.AreEqual("test%40example.com/identicon", url);
        }

        [Test]
        public void GenerateUrlWithDefaultIncludesDefault()
        {
            //arrange
            var service = new GravatarService("{0}/{1}", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl("test@example.com", "http://localhost/test.gif");

            //assert
            Assert.AreEqual("test%40example.com/http://localhost/test.gif", url);
        }

        [Test]
        public void GenerateUrlWithDefaultUriIncludesDefaultUri()
        {
            //arrange
            var service = new GravatarService("{0}/{1}", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl("test@example.com", new Uri("http://localhost/test.gif"));

            //assert
            Assert.AreEqual("test%40example.com/http://localhost/test.gif", url);
        }

        [Test]
        public void GenerateUrlWithEmptyEmailReturnsEmptyString()
        {
            //arrange
            var service = new GravatarService("{0}/{1}", GravatarEmailFormat.Plain, true);

            //act
            string url = service.GenerateUrl(string.Empty, (string)null);

            //assert
            Assert.AreEqual(string.Empty, url);
        }

        [Test]
        public void CanCreateGravatarServiceWithNameValueCollection()
        {
            //arrange
            var settings = new NameValueCollection
            {
                {"GravatarEnabled", "true"},
                {"GravatarUrlFormatString", "{0}/{1}"},
                {"GravatarEmailFormat", "md5"}
            };

            //act
            var service = new GravatarService(settings);

            //assert
            Assert.IsTrue(service.Enabled);
            Assert.AreEqual("{0}/{1}", service.UrlFormatString);
            Assert.AreEqual(GravatarEmailFormat.Md5, service.EmailFormat);
        }

        [Test]
        public void WhenCreatingGravatarServiceWithNullBoolean_NoExceptionIsThrown()
        {
            //arrange
            var settings = new NameValueCollection
            {
                {"GravatarEnabled", null},
                {"GravatarUrlFormatString", "{0}/{1}"},
                {"GravatarEmailFormat", "md5"}
            };

            //act
            var service = new GravatarService(settings);

            //assert
            Assert.IsFalse(service.Enabled);
            Assert.AreEqual("{0}/{1}", service.UrlFormatString);
            Assert.AreEqual(GravatarEmailFormat.Md5, service.EmailFormat);
        }

        [Test]
        public void WhenCreatingGravatarServiceWithNonsensicalBoolean_NoExceptionIsThrown()
        {
            //arrange
            var settings = new NameValueCollection
            {
                {"GravatarEnabled", "Blablabla"},
                {"GravatarUrlFormatString", "{0}/{1}"},
                {"GravatarEmailFormat", "PLAIN"}
            };

            //act
            var service = new GravatarService(settings);

            //assert
            Assert.IsFalse(service.Enabled);
            Assert.AreEqual("{0}/{1}", service.UrlFormatString);
            Assert.AreEqual(GravatarEmailFormat.Plain, service.EmailFormat);
        }
    }
}ï»¿using System;
using System.IO;
using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Services.Identicon;

namespace UnitTests.Subtext.Framework.Services.Identicon
{
    [TestFixture]
    public class IdenticonResultTests
    {
        [Test]
        public void ExecuteResult_WithEtag_AddsEtagToHeader()
        {
            // arrange
            var result = new IdenticonResult(123, 40, "some-etag-value");
            var context = new Mock<ControllerContext>();
            string etag = null;
            context.Setup(c => c.HttpContext.Response.AppendHeader("ETag", It.IsAny<string>())).Callback<string, string>((key, value) => etag = value);
            context.Setup(c => c.HttpContext.Response.OutputStream).Returns(new MemoryStream());

            // act
            result.ExecuteResult(context.Object);

            // assert
            Assert.AreEqual("some-etag-value", etag);
        }

        [Test]
        public void ExecuteResult_WithNullEtag_DoesNotAddEtagToHeader()
        {
            // arrange
            var result = new IdenticonResult(123, 40, "");
            var context = new Mock<ControllerContext>();
            context.Setup(c => c.HttpContext.Response.AppendHeader("ETag", It.IsAny<string>())).Throws(new InvalidOperationException());
            context.Setup(c => c.HttpContext.Response.OutputStream).Returns(new MemoryStream());

            // act, assert
            result.ExecuteResult(context.Object);
        }

        [Test]
        public void ExecuteResult_SetsProperContentType()
        {
            // arrange
            var result = new IdenticonResult(123, 40, "");
            var context = new Mock<ControllerContext>();
            context.SetupSet(c => c.HttpContext.Response.ContentType, "image/png");
            context.Setup(c => c.HttpContext.Response.OutputStream).Returns(new MemoryStream());

            // act
            result.ExecuteResult(context.Object);

            // assert
            context.VerifySet(c => c.HttpContext.Response.ContentType, "image/png");
        }
        
        [Test]
        public void ExecuteResult_ClearsResponse()
        {
            // arrange
            var result = new IdenticonResult(123, 40, null);
            var context = new Mock<ControllerContext>();
            bool responseCleared = false;
            context.Setup(c => c.HttpContext.Response.Clear()).Callback(() => responseCleared = true);
            context.Setup(c => c.HttpContext.Response.OutputStream).Returns(new MemoryStream());

            // act
            result.ExecuteResult(context.Object);

            // assert
            Assert.IsTrue(responseCleared);
        }
    }
}
using MbUnit.Framework;
using Subtext.Identicon;

namespace UnitTests.Subtext.Framework.Services.Identicon
{
    [TestFixture]
    public class IdenticonUtilTests
    {
        /// <summary>
        /// Run some tests using some pre-calculated salts, ip addresses, 
        /// and codes.
        /// </summary>
        /// <param name="ip"></param>
        /// <param name="salt"></param>
        /// <param name="expectedCode"></param>
        [RowTest]
        [Row("127.0.0.1", "RandomSalt", 2038335937)]
        [Row("127.0.0.1", "AnotherSalt", -516553779)]
        [Row("210.120.68.16", "AnotherSalt", 1592465917)]
        public void CodeReturnsProperHash(string ip, string salt, long expectedCode)
        {
            IdenticonUtil.Salt = salt;
            Assert.AreEqual(expectedCode, IdenticonUtil.Code(ip));
        }

        [Test]
        public void Code_WithNullIp_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => IdenticonUtil.Code(null));
        }
    }
}using System.Collections.Generic;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class KeywordExpanderTests
    {
        [Test]
        public void Replace_WithStringContainingKeyword_ExpandsKeyword()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "sucky example",
                    Text = "cool example",
                    Url = "http://example.com/",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("This is a sucky example");

            //assert
            Assert.AreEqual("This is a <a href=\"http://example.com/\">cool example</a>", result);
        }

        [Test]
        public void Replace_WithStringContainingKeyword_ExpandsKeywordWithFirstMatchOnly()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "sucky example",
                    Text = "cool example",
                    Url = "http://example.com/",
                    ReplaceFirstTimeOnly = true,
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("This is a sucky example");

            //assert
            Assert.AreEqual("This is a <a href=\"http://example.com/\">cool example</a>", result);
        }

        [Test]
        public void Replace_WithStringContainingKeyword_ExpandsKeywordWithTitle()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "sucky example",
                    Text = "cool example",
                    Url = "http://example.com/",
                    Title = "the title"
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("This is a sucky example");

            //assert
            Assert.AreEqual("This is a <a href=\"http://example.com/\" title=\"the title\">cool example</a>", result);
        }

        [Test]
        public void Replace_WithKeywordSurroundedByUnderscores_IsNotExpanded()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "is",
                    Text = "is",
                    Url = "http://example.com/{0}",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform(" _is_ ");

            //assert
            Assert.AreEqual(" _is_ ", result);
        }

        [Test]
        public void Replace_WithStringContainingKeyword_IsNotCaseSensitive()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "is",
                    Text = "is",
                    Url = "http://example.com/",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform(" it IS true ");

            //assert
            Assert.AreEqual(" it <a href=\"http://example.com/\">is</a> true ", result);
        }

        [Test]
        public void Replace_WithStringContainingKeywordSpecifiedAsCaseSensitive_IsCaseSensitive()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "is",
                    Text = "is",
                    Url = "http://example.com/",
                    CaseSensitive = true
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform(" it IS true ");

            //assert
            Assert.AreEqual(" it IS true ", result);
        }

        [Test]
        public void Replace_WithStringContainingKeywordInsideAnchorTagAttribute_DoesNotExpandKeyword()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "keyword",
                    Text = "keyword",
                    Url = "http://example.com/",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("<a title=\"keyword\" href=\"http://x\">test</a>");

            //assert
            Assert.AreEqual("<a title=\"keyword\" href=\"http://x\">test</a>", result);
        }

        [Test]
        public void Replace_WithStringContainingKeywordInsideAnchorTagInnerText_DoesNotExpandKeyword()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "keyword",
                    Text = "keyword",
                    Url = "http://example.com/",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("<a href=\"http://x\">a keyword test</a>");

            //assert
            Assert.AreEqual("<a href=\"http://x\">a keyword test</a>", result);
        }

        [Test]
        public void Replace_WithStringContainingKeywordInAnotherWord_DoesNotExpandKeyword()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "is",
                    Text = "is",
                    Url = "http://example.com/",
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("This should not expand");

            //assert
            Assert.AreEqual("This should not expand", result);
        }

        // Issue #132: http://code.google.com/p/subtext/issues/detail?id=132
        [Test]
        public void Transform_WithStringContainingBracketsAndReplacingFirstOccurrenceOnly_ReturnsConvertedKeywordAndBrackets()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "OLD",
                    Text = "NEW",
                    Url = "http://example.com/",
                    Title = "NEW",
                    ReplaceFirstTimeOnly = true
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("OLD {} OLD");

            //assert
            Assert.AreEqual(@"<a href=""http://example.com/"" title=""NEW"">NEW</a> {} OLD", result);
        }

        [Test]
        public void Transform_WithStringContainingBrackets_ReturnsConvertedKeywordAndBrackets()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "OLD",
                    Text = "NEW",
                    Url = "http://example.com/",
                    Title = "NEW",
                    ReplaceFirstTimeOnly = false
                }
            };
            var keywordExpander = new KeywordExpander(keywords);

            //act
            string result = keywordExpander.Transform("OLD {} OLD {}");

            //assert
            Assert.AreEqual(@"<a href=""http://example.com/"" title=""NEW"">NEW</a> {} <a href=""http://example.com/"" title=""NEW"">NEW</a> {}", result);
        }

        [Test]
        public void Ctor_WithRepository_GetsKeywordsFromRepository()
        {
            //arrange
            var keywords = new List<KeyWord>
            {
                new KeyWord
                {
                    Word = "is",
                    Text = "is",
                    Url = "http://example.com/",
                }
            };
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetKeyWords()).Returns(keywords);

            //act
            var keywordExpander = new KeywordExpander(keywords);

            //assert
            Assert.AreEqual(keywords, keywordExpander.Keywords);
        }
    }
}ï»¿using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MbUnit.Framework;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services.SearchEngine;

namespace UnitTests.Subtext.Framework.Services.SearchEngine
{
    [TestFixture]
    public class EntryExtensionMethodsTest
    {
        [Test]
        public void EntryExtensionMethodsTest_ConvertToSearchEngineEntry_WithTags_ConvertsTagsToString()
        {
            Entry post = new Entry(PostType.BlogPost)
                             {
                                 Blog = new  Blog(){ Title="MyTitle", BlogGroupId=1},
                             };
            IList<String> tags = new List<string>() {"tag1","tag2"};
            SearchEngineEntry searchEntry = post.ConvertToSearchEngineEntry(tags);

            Assert.AreEqual("tag1,tag2", searchEntry.Tags);
        }

        [Test]
        public void EntryExtensionMethodsTest_ConvertToSearchEngineEntry_StripsHtmlTags()
        {
            Entry post = new Entry(PostType.BlogPost)
            {
                Blog = new Blog() { Title = "MyTitle", BlogGroupId = 1 },
                Body = "this is <b>bold</b> text"
            };
            SearchEngineEntry searchEntry = post.ConvertToSearchEngineEntry();

            Assert.AreEqual("this is bold text", searchEntry.Body);
        }

        [Test]
        public void EntryExtensionMethodsTest_ConvertToSearchEngineEntry_WithOutTags_ConvertsTagsToString()
        {
            Entry post = new Entry(PostType.BlogPost)
            {
                Blog = new Blog() { Title = "MyTitle", BlogGroupId = 1 },
                Body = "<a href=\"http://blah.com/subdir/tag1/\" rel=\"tag\">tag1</a><a href=\"http://blah.com/another-dir/tag2/\" rel=\"tag\">tag2</a>"
            };
            SearchEngineEntry searchEntry = post.ConvertToSearchEngineEntry();

            Assert.AreEqual("tag1,tag2", searchEntry.Tags);
        }
    }
}
ï»¿using Lucene.Net.Analysis.Standard;
using Lucene.Net.Store;
using Lucene.Net.Util;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Services.SearchEngine;

namespace UnitTests.Subtext.Framework.Services.SearchEngine
{
    [TestFixture]
    public class IndexingServiceTests
    {
        private SearchEngineService _service;
        
        [SetUp]
        public void CreateSearchEngine()
        {
            _service = new SearchEngineService(new RAMDirectory(), new StandardAnalyzer(Version.LUCENE_29), new FullTextSearchEngineSettings());
        }
        
        [TearDown]
        public void DestroySearchEngine()
        {
            _service.Dispose();
        }

        [Test]
        public void RebuildIndex_LoadEntriesFromRepository()
        {
            var context = new Mock<ISubtextContext>();
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntries(PostType.BlogPost, null, It.IsAny<int>(), It.IsAny<int>())).Returns(
                new PagedCollection<EntryStatsView>());
            context.Setup(c => c.Repository).Returns(repository.Object);

            var indexService = new IndexingService(context.Object, _service);

            indexService.RebuildIndex();

            repository.Verify(rep => rep.GetEntries(PostType.BlogPost, null, It.IsAny<int>(), It.IsAny<int>()));
        }

        [Test]
        public void RebuildIndex_AddsDataToIndex()
        {
            var context = new Mock<ISubtextContext>();
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntries(PostType.BlogPost, null, It.IsAny<int>(), It.IsAny<int>())).Returns(
                BuildFakeCollection());
            context.Setup(c => c.Repository).Returns(repository.Object);

            var indexService = new IndexingService(context.Object, _service);

            indexService.RebuildIndex();

            Assert.AreEqual(1,_service.GetTotalIndexedEntryCount());
        }

        [Test]
        public void RebuildIndex_WithEntryNotPublished_DoesntAddsDataToIndex()
        {
            var context = new Mock<ISubtextContext>();
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntries(PostType.BlogPost, null, It.IsAny<int>(), It.IsAny<int>())).Returns(
                BuildFakeCollectionNotPublished());
            context.Setup(c => c.Repository).Returns(repository.Object);

            var indexService = new IndexingService(context.Object, _service);

            indexService.RebuildIndex();

            Assert.AreEqual(0, _service.GetTotalIndexedEntryCount());
        }


        [Test]
        public void IndexService_WithPublishedPost_AddsPostToIndex()
        {
            var context = new Mock<ISubtextContext>();
            var searchEngine = new Mock<ISearchEngineService>();
            SearchEngineEntry entry = null;
            searchEngine.Setup(s => s.AddPost(It.IsAny<SearchEngineEntry>())).Callback<SearchEngineEntry>(e => entry = e);

            var indexService = new IndexingService(context.Object, searchEngine.Object);

            var blogEntry = new Entry(PostType.BlogPost)
                            {
                                Title ="Sample Post",
                                Blog = new Blog() { Title = "My Blog" },
                                IsActive=true,
                            };

            indexService.AddPost(blogEntry);
            Assert.IsNotNull(entry);
        }

        [Test]
        public void IndexService_WithNotPublishedPost_DoesntAddsPostToIndex()
        {
            var context = new Mock<ISubtextContext>();
            var searchEngine = new Mock<ISearchEngineService>();
            searchEngine.Setup(s => s.AddPost(It.IsAny<SearchEngineEntry>())).Never();

            var indexService = new IndexingService(context.Object, searchEngine.Object);

            var entry = new Entry(PostType.BlogPost)
            {
                Title = "Sample Post",
                Blog = new Blog() { Title = "My Blog" },
                IsActive = false,
            };

            indexService.AddPost(entry);
        }

        [Test]
        public void IndexService_WithNotPublishedPost_RemovesPostFromIndex()
        {
            var context = new Mock<ISubtextContext>();
            var searchEngine = new Mock<ISearchEngineService>();
            bool deleted = false;
            searchEngine.Setup(s => s.RemovePost(It.IsAny<int>())).Callback(() => deleted = true);

            var indexService = new IndexingService(context.Object, searchEngine.Object);

            var entry = new Entry(PostType.BlogPost)
            {
                Title = "Sample Post",
                Blog = new Blog() { Title = "My Blog" },
                IsActive = false,
            };

            indexService.AddPost(entry);
            Assert.IsTrue(deleted);
        }

        private PagedCollection<EntryStatsView> BuildFakeCollection()
        {
            var coll = new PagedCollection<EntryStatsView>();
            coll.Add(new EntryStatsView()
                         {
                             Title = "My Post Title",
                             EntryName = "this-is-the-title",
                             IsActive = true,
                             Blog = new Blog(){Title = "My Blog"}
                         });
            return coll;
        }

        private PagedCollection<EntryStatsView> BuildFakeCollectionNotPublished()
        {
            var coll = new PagedCollection<EntryStatsView>();
            coll.Add(new EntryStatsView()
            {
                Title = "My Post Title",
                EntryName = "this-is-the-title",
                IsActive = false,
                Blog = new Blog() { Title = "My Blog" }
            });
            return coll;
        }
    }
}
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using Lucene.Net.Analysis;
using Lucene.Net.Analysis.Snowball;
using Lucene.Net.Store;
using MbUnit.Framework;
using Subtext.Framework.Configuration;
using Subtext.Framework.Services.SearchEngine;

namespace UnitTests.Subtext.Framework.Services.SearchEngine
{
    [TestFixture]
    public class SearchEngineServiceTest
    {
        private SearchEngineService _service;
        private string[] stopWords;

        [SetUp]
        public void CreateSearchEngine()
        {
            stopWords = new string[StopAnalyzer.ENGLISH_STOP_WORDS_SET.Values.Count];
            int i = 0;
            foreach (string value in StopAnalyzer.ENGLISH_STOP_WORDS_SET.Values)
            {
                stopWords[i++] = value;
            }
            _service = new SearchEngineService(new RAMDirectory(), new SnowballAnalyzer("English", stopWords), new FullTextSearchEngineSettings());
        }

        [TearDown]
        public void DestroySearchEngine()
        {
            _service.Dispose();
        }

        [Test]
        public void SearchEngineService_WithEntry_AddsToIndex()
        {
            _service.AddPost(new SearchEngineEntry
            {
                                    EntryId = 1,
                                    Body = "This is a sample post",
                                    Title = "This is the title",
                                    Tags = "Title",
                                    BlogName = "MyTestBlog",
                                    IsPublished = true,
                                    PublishDate = DateTime.Now,
                                    EntryName = "this-is-the-title"
                                }
                );

            _service.AddPost(new SearchEngineEntry
            {
                        EntryId = 2,
                        Body = "This is another sample post",
                        Title = "This is another title",
                        Tags = "Title another",
                        BlogName = "MyTestBlog",
                        IsPublished = true,
                        PublishDate = DateTime.Now,
                        EntryName = "this-is-the-title"
                    }
            );

            var result = _service.Search("sample", 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(2, result.Count);
        }

        [Test]
        public void SearchEngineService_WithEntryNameNull_RetrievesEntryNameNull()
        {
            _service.AddPost(new SearchEngineEntry()
                    {
                        EntryId = 1,
                        Body = "This is a sample post",
                        Title = "This is the title",
                        Tags = "Title",
                        BlogName = "MyTestBlog",
                        IsPublished = true,
                        PublishDate = DateTime.Now,
                        EntryName = null
                    }
                );

            var result = _service.Search("sample", 100, 0) as List<SearchEngineResult>;
            Assert.IsNull(result[0].EntryName);
        }

        [Test]
        public void SearchEngineService_ConvertsToSearchResult()
        {
            _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = 1,
                    Body = "This is a sample post",
                    Title = "This is the title",
                    Tags = "Title",
                    BlogName = "MyTestBlog",
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
            );

            var result = _service.Search("sample", 100,0) as List<SearchEngineResult>;

            Assert.AreEqual("This is the title", result[0].Title);
            Assert.AreEqual("MyTestBlog", result[0].BlogName);
            Assert.AreEqual(1, result[0].EntryId);
        }

        [Test]
        public void SearchEngineService_WhenAddingToItemWithSamePostId_UpdatesOriginalEntry()
        {
            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 1,
                Body = "This is a sample post",
                Title = "This is the title",
                Tags = "Title",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 1,
                Body = "This is a post",
                Title = "This is the title",
                Tags = "Title",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            var result = _service.Search("sample", 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count);

            result = _service.Search("post", 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(1, result[0].EntryId);
        }

        [Test]
        public void SearchEngineService_DeletesEntry()
        {
            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 1,
                Body = "This is a sample post",
                Title = "This is the title",
                Tags = "Title",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            _service.RemovePost(1);

            var result = _service.Search("sample", 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count);
        }

        [Test]
        public void SearchEngineService_ReturnsCorrectTotalNumber()
        {
            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 1,
                BlogId = 1,
                Body = "This is a sample post",
                Title = "This is the title",
                Tags = "Title",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
                );

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 2,
                BlogId = 2,
                Body = "This is another sample post",
                Title = "This is another title",
                Tags = "Title another",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            int totNumber = _service.GetTotalIndexedEntryCount();
            Assert.AreEqual(2,totNumber);
        }

        [Test]
        public void SearchEngineService_ReturnsCorrectNumberOfPostsByBlog()
        {
            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 1,
                BlogId = 1,
                Body = "This is a sample post",
                Title = "This is the title",
                Tags = "Title",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
                );

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 2,
                BlogId = 2,
                Body = "This is another sample post",
                Title = "This is another title",
                Tags = "Title another",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 3,
                BlogId = 2,
                Body = "This is another sample post",
                Title = "This is another title",
                Tags = "Title another",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            }
            );

            int postCountBlog1 = _service.GetIndexedEntryCount(1);
            int postCountBlog2 = _service.GetIndexedEntryCount(2);
            Assert.AreEqual(1, postCountBlog1);
            Assert.AreEqual(2, postCountBlog2);
        }

        [Test]
        public void SearchEngineService_PerformsMoreLikeThisSearch()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                                {
                                    EntryId = i,
                                    Body = "This is a sample post",
                                    Title = "This is the title of the post",
                                    Tags = ".net, mvc, post",
                                    BlogName = "MyTestBlog",
                                    IsPublished = true,
                                    PublishDate = DateTime.Now,
                                    EntryName = "this-is-the-title"
                                }
                );
            }


            var result = _service.RelatedContents(1, 100,0) as List<SearchEngineResult>;
            Assert.IsTrue(result.Count>0);
        }

        [Test]
        public void SearchEngineService_MoreLikeThisSearch_FiltersOriginalDocOut()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }

            var result = _service.RelatedContents(1, 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count(r => r.EntryId==1));
        }

        [Test]
        public void SearchEngineService_MoreLikeThisSearch_WithMinDocumentSet_ReturnsEmptySet()
        {
            _service.Dispose();
            _service = new SearchEngineService(new RAMDirectory(), new SnowballAnalyzer("English", stopWords), new FullTextSearchEngineSettings() { Parameters = new TuningParameters() { MinimumDocumentFrequency = 20 } });

            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }
            

            var result = _service.RelatedContents(1, 100, 0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count());

        }

        [Test]
        public void SearchEngineService_Search_DoesntIncludeNotActiveEntries()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 20,
                Body = "This is a sample post",
                Title = "This is the title of the post",
                Tags = ".net, mvc, post",
                BlogName = "MyTestBlog",
                IsPublished = false,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            });


            var result = _service.RelatedContents(1, 100,0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count(r => r.EntryId == 20));
        }

        [Test]
        public void SearchEngineService_Search_DoesntIncludeFuturePosts()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 20,
                Body = "This is a sample post",
                Title = "This is the title of the post",
                Tags = ".net, mvc, post",
                BlogName = "MyTestBlog",
                IsPublished = true,
                PublishDate = DateTime.Now.AddDays(1),
                EntryName = "this-is-the-title"
            });


            var result = _service.RelatedContents(1,100,0) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count(r => r.EntryId == 20));
        }

        [Test]
        public void SearchEngineService_Search_DoesntIncludePostsFromOtherBlogs()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    BlogId = 1,
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }

            _service.AddPost(new SearchEngineEntry()
            {
                EntryId = 20,
                Body = "This is a sample post",
                Title = "This is the title of the post",
                Tags = ".net, mvc, post",
                BlogName = "MyTestBlog",
                BlogId = 2,
                IsPublished = true,
                PublishDate = DateTime.Now,
                EntryName = "this-is-the-title"
            });


            var result = _service.RelatedContents(1, 100, 1) as List<SearchEngineResult>;
            Assert.AreEqual(0, result.Count(r => r.EntryId == 20));
        }

        [Test]
        public void SearchEngineService_Search_WhenAllTheSame_ReturnsCorrectNumberOfHits()
        {
            for (int i = 1; i <= 10; i++)
            {
                _service.AddPost(new SearchEngineEntry()
                {
                    EntryId = i,
                    Body = "This is a sample post",
                    Title = "This is the title of the post",
                    Tags = ".net, mvc, post",
                    BlogName = "MyTestBlog",
                    BlogId = 1,
                    IsPublished = true,
                    PublishDate = DateTime.Now,
                    EntryName = "this-is-the-title"
                }
                );
            }

            var result = _service.RelatedContents(1, 10, 1) as List<SearchEngineResult>;
            Assert.AreEqual(9, result.Count);
        }

    }
}
ï»¿using System;
using System.Collections.Specialized;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Services.Account;

namespace UnitTests.Subtext.Framework.Services.Account
{
    [TestFixture]
    public class AccountServiceTests
    {
        [Test]
        public void Logout_ClearsAuthCookie()
        {
            // arrange
            var responseCookies = new HttpCookieCollection();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.HttpContext.Request.QueryString).Returns(new NameValueCollection());
            context.Setup(c => c.HttpContext.Response.Cookies).Returns(responseCookies);
            var service = new AccountService();

            // act
            try
            {
                service.Logout(context.Object);
            }
            catch // Exception thrown due to call to FormsAuthentication.SignOut();
            {
            }

            // assert
            Assert.AreEqual(1, responseCookies.Count);
            Assert.IsTrue(responseCookies[0].Expires < DateTime.Now);
        }
    }
}
ï»¿using System;
using System.Collections.Specialized;
using MbUnit.Framework;
using Moq;
using Subtext.Configuration;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class SlugGeneratorTests
    {
        [Test]
        public void ConvertTitleToSlug_WithNullEntry_ThrowsArgumentNullException()
        {
            //arrange
            var generator = new SlugGenerator(null);

            //act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => generator.GetSlugFromTitle(null));
        }

        [Test]
        public void ConvertTitleToSlug_WithNullOrEmptyTitle_ThrowsArgumentException()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = string.Empty};

            //act, assert
            UnitTestHelper.AssertThrows<ArgumentException>(() => generator.GetSlugFromTitle(entry));
        }

        [Test]
        public void Ctor_WithNullFriendlySettings_UsesDefaults()
        {
            //arrange
            var generator = new SlugGenerator(null);

            //act
            FriendlyUrlSettings settings = generator.SlugSettings;

            //act
            Assert.IsTrue(settings.Enabled);
            Assert.AreEqual("-", settings.SeparatingCharacter);
            Assert.AreEqual(TextTransform.LowerCase, settings.TextTransformation);
            Assert.AreEqual(10, settings.WordCountLimit);
        }

        [Test]
        public void ConvertTitleToSlug_WithSpacesInTitle_ReplacesSpacesInTitle()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this-is-a-test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithNullCharacterDelimiterAndSpacesInTitle_RemovesSpacesAndPascalCasesTitle()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", "");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = " this is a test "};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("ThisIsATest", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithTextTransformToUpperCase_TransformsUrlToUpperCase()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", ".");
            config.Add("TextTransform", "UpperCase");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("THIS.IS.A.TEST", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithTitleHavingExtraWhitespace_NormalizesWhitespace()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", "-");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "    this  is   a test\r\n"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this-is-a-test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithMoreWordsThanAllowed_TruncatesRemainingWords()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "2");
            config.Add("separatingCharacter", "_");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this_is", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithInvalidSeparator_UsesDefault()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", "*");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this-is-a-test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithDotSeparator_UsesDot()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", ".");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "this is a test"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this.is.a.test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithInternationalizedTitles_ConvertsToAnsiUrlSlug()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = "ÃÃ±Ã§hÃ²r Ã§Ã¹Ã¨ HÃ©llÃ² wÃ¶rld"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("anchor-cue-hello-world", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithNonEuropeanInternationalizedTitles_ConvertsToUrlEncodedTitle()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = "ì-ëíì­ëê¹"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("%ec%95%88-%eb%85%95%ed%95%98%ec%8b%ad%eb%8b%88%ea%b9%8c", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithNonWordCharacters_RemoveNonWordCharacters()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = @"[!""'`;:~@#foo$%^&-bar*(){\[}\]?+/=\\|<>_baz"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar_baz", slug);
        }

        [Test]
        public void ConvertTitleToSlug_UsingPeriod_NormalizesPeriods()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", ".");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "this. is...a test."};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this.is.a.test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_UsingDash_NormalizesDashes()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", "-");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "-this - is - a - test-"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("this-is-a-test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithTitleEndingInPeriod_RemovesTrailingPeriod()
        {
            //arrange
            var config = new NameValueCollection();
            config.Add("limitWordCount", "10");
            config.Add("separatingCharacter", "-");
            var settings = new FriendlyUrlSettings(config);
            var generator = new SlugGenerator(settings);
            var entry = new Entry(PostType.BlogPost) {Title = "a test."};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("a-test", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithAllNumericTitle_PrependsLetterNToAvoidConflicts()
        {
            //arrange
            var generator = new SlugGenerator(null);
            var entry = new Entry(PostType.BlogPost) {Title = @"1234"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("n_1234", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingExistingEntry_AppendsAgainToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-again", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingTwoExistingEntries_AppendsAgainToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Yet-Again", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-yet-again", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingThreeExistingEntries_AppendsUniqueSuffixToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Yet-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-And-Again", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-and-again", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingFourExistingEntries_AppendsUniqueSuffixToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Yet-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-And-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Once-Again", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-once-again", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingFiveExistingEntries_AppendsUniqueSuffixToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Yet-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-And-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Once-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Once-More", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-once-more", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugMatchingSixExistingEntries_AppendsUniqueSuffixToSlug()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry("foo-bar", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Yet-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-And-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Once-Again", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-Once-More", false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-To-Beat-A-Dead-Horse", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act
            string slug = generator.GetSlugFromTitle(entry);

            //act
            Assert.AreEqual("foo-bar-to-beat-a-dead-horse", slug);
        }

        [Test]
        public void ConvertTitleToSlug_WithSlugAndAllPrefixesMatchingExistingEntries_ThrowsException()
        {
            //arrange
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<string>(), false, false)).Returns(new Entry(PostType.BlogPost));
            repository.Setup(r => r.GetEntry("foo-bar-again", false, false)).Returns((Entry)null);
            var generator = new SlugGenerator(null, repository.Object);
            var entry = new Entry(PostType.BlogPost) {Title = @"foo bar"};

            //act, assert
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => generator.GetSlugFromTitle(entry));
        }
    }
}using System;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class StatisticsServiceTests
    {
        [Test]
        public void CtorSetsSubtextContextAndSettings()
        {
            //arrange
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            ISubtextContext subtextContext = new Mock<ISubtextContext>().Object;

            //act
            var statisticsService = new StatisticsService(subtextContext, settings);

            //assert
            Assert.AreEqual(subtextContext, statisticsService.SubtextContext);
            Assert.AreEqual(settings, statisticsService.Settings);
        }

        [Test]
        public void RecordAggregatorViewRecordsEntry()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView entryView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                e => entryView = e);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableAggBugs = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordAggregatorView(new EntryView {EntryId = 66});

            //assert
            Assert.AreEqual(66, entryView.EntryId);
        }

        [Test]
        public void RecordAggViewWithStatsDisabledDoesNotTrackEntry()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            bool wasCalled = false;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback(() => wasCalled = true);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableAggBugs = false};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordAggregatorView(new EntryView {EntryId = 66});

            //assert
            Assert.IsFalse(wasCalled);
        }

        [Test]
        public void RecordAggViewDoesNotRecordHttpPost()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            bool wasCalled = false;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback(() => wasCalled = true);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("POST");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableAggBugs = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordAggregatorView(new EntryView {EntryId = 66});

            //assert
            Assert.IsFalse(wasCalled);
        }

        [Test]
        public void RecordWebViewRecordsEntry()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView entryView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                e => entryView = e);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.AreEqual(66, entryView.EntryId);
        }

        [Test]
        public void RecordWebViewWithStatsDisabledDoesNotTrackEntry()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            bool wasCalled = false;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback(() => wasCalled = true);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = false};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.IsFalse(wasCalled);
        }

        [Test]
        public void RecordWebViewDoesNotRecordHttpPost()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            bool wasCalled = false;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback(() => wasCalled = true);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("POST");
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.IsFalse(wasCalled);
        }

        [Test]
        public void RecordWebViewRecordsReferrer()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView recordedView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                view => recordedView = view);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "haacked.com"});
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            subtextContext.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://subtextproject.com/"));
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.AreEqual("http://subtextproject.com/", recordedView.ReferralUrl);
        }

        [Test]
        public void RecordWebViewFromSameReferrerDoesNotRecordsReferrer()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView recordedView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                view => recordedView = view);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "www.haacked.com"});
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            subtextContext.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://haacked.com/"));
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.IsNull(recordedView.ReferralUrl);
        }

        [Test]
        public void RecordWebViewFromSameReferrerDomainDoesNotRecordsReferrer()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView recordedView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                view => recordedView = view);
            subtextContext.Setup(c => c.UrlHelper.BlogUrl()).Returns("/");
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "haacked.com"});
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            subtextContext.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://www.haacked.com/"));
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.IsNull(recordedView.ReferralUrl);
        }

        [Test]
        public void RecordWebViewWithBadReferrerIgnoresReferer()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            EntryView recordedView = null;
            subtextContext.Setup(c => c.Repository.TrackEntry(It.IsAny<EntryView>())).Callback<EntryView>(
                view => recordedView = view);
            subtextContext.Setup(c => c.HttpContext.Request.HttpMethod).Returns("GET");
            subtextContext.Setup(c => c.HttpContext.Request.UrlReferrer).Throws(new UriFormatException());
            var settings = new global::Subtext.Framework.Configuration.Tracking {EnableWebStats = true};
            var statisticsService = new StatisticsService(subtextContext.Object, settings);

            //act
            statisticsService.RecordWebView(new EntryView {EntryId = 66});

            //assert
            Assert.IsNull(recordedView.ReferralUrl);
        }
    }
}using System.Globalization;
using MbUnit.Framework;
using Subtext.Framework.Services;

namespace UnitTests.Subtext.Framework.Services
{
    [TestFixture]
    public class XhtmlConverterTests
    {
        [RowTest]
        [Row("", "")]
        [Row("This is some text", "This is some text")]
        [Row("<span>This is some text</span>", "<span>This is some text</span>")]
        [Row("<img src=\"blah\" />", "<img src=\"blah\" />")]
        [Row("<style type=\"text/css\"><![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>",
            "<style type=\"text/css\"><![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>")]
        public void Transform_WithValidMarkup_DoesNotChangeIt(string markup, string expected)
        {
            //arrange
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(markup);

            //assert
            Assert.AreEqual(expected, result);
        }

        [Test]
        public void Transform_WithAngleBracketInAttributeValue_EncodesAttribute()
        {
            const string html = @"<a title="">"">b</a>";
            const string expected = @"<a title=""&gt;"">b</a>";

            //arrange
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(html);

            //assert
            Assert.AreEqual(expected, result);
        }

        [Test]
        [Ignore("Need to follow up with the SgmlReader on this")]
        public void Transform_WithStyleTag_DoesNotWrapStyleInCdata()
        {
            const string html = "<style>.test {color: blue;}</style>";
            const string expected = html;

            //arrange
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(html);

            //assert
            Assert.AreEqual(expected, result);
        }

        [Test]
        public void Transform_WithConverter_AppliesConverterWhileConvertingHtml()
        {
            const string html = "<p title=\"blah blah\"> blah blah </p>";
            const string expected = "<p title=\"blah blah\"> yadda yadda </p>";

            //arrange
            var converter = new XhtmlConverter(input => input.Replace("blah", "yadda"));

            //act
            string result = converter.Transform(html);

            //assert
            Assert.AreEqual(expected, result);
        }

        [Test]
        public void ConvertHtmlToXHtmlLeavesNestedMarkupAlone()
        {
            //arrange
            const string expected = "<p><span>This is some text</span> <span>this is more text</span></p>";
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(expected);

            //assert
            Assert.AreEqual(expected, result);
        }

        /// <summary>
        /// Makes sure that IsValidXHTML recognizes invalid markup.
        /// </summary>
        [RowTest]
        [Row("<a href=\"xyz\">test<b>Test</b>", "<a href=\"xyz\">test<b>Test</b></a>")]
        [Row("This <br /><br />is bad <p> XHTML.", "This <br /><br />is bad <p> XHTML.</p>")]
        [Row("This <br /><br style=\"blah\" />is bad <p> XHTML.",
            "This <br /><br style=\"blah\" />is bad <p> XHTML.</p>")]
        [Row("This <P>is bad </P> XHTML.", "This <p>is bad </p> XHTML.")]
        [Row("<style type=\"text/css\">\r\n<![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>",
            "<style type=\"text/css\"><![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>")]
        [Row("<style type=\"text/css\">\r\n\r\n<![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>",
            "<style type=\"text/css\"><![CDATA[\r\n.blah\r\n{\r\n  font-size: small;\r\n}\r\n]]></style>")]
        public void ConvertHtmlToXHtmlCorrectsInvalidMarkup(string badMarkup, string corrected)
        {
            //arrange
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(badMarkup);

            //assert
            Assert.AreEqual(corrected, result);
        }

        [RowTest]
        [Row("<a name=\"test\"></a>", "<a name=\"test\"></a>", "Anchor tags should not be self-closed.")]
        [Row("<a name=\"test\" />", "<a name=\"test\"></a>", "Anchor tags should not be self-closed.")]
        [Row("<script src=\"test\" />", "<script src=\"test\"></script>", "Script tags should not be self-closed.")]
        [Row("<script src=\"test\"></script>", "<script src=\"test\"></script>",
            "Script tags should not be self-closed.")]
        public void ConvertHtmlToXhtmlEnsuresSomeTagsMustNotBeSelfClosed(string html, string expected, string message)
        {
            //arrange
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(html);

            //assert
            Assert.AreEqual(expected, result);
        }

        [RowTest]
        [Row("br")]
        [Row("hr")]
        [Row("meta")]
        [Row("link")]
        [Row("input")]
        [Row("img")]
        public void ConvertHtmlToXhtmlEnsuresSomeTagsMustBeSelfClosed(string tag)
        {
            //arrange
            string html = string.Format(CultureInfo.InvariantCulture, "<{0} src=\"blah-blah\"></{0}>", tag);
            string expected = string.Format(CultureInfo.InvariantCulture, "<{0} src=\"blah-blah\" />", tag);
            var converter = new XhtmlConverter();

            //act
            string result = converter.Transform(html);

            //assert
            Assert.AreEqual(expected, result);
        }
    }
}ï»¿using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Web.Handlers;
using Subtext.Web.Skins._System.Controls;

namespace UnitTests.Subtext.Framework.Skinning
{
    [TestFixture]
    public class ErrorUserControlTests
    {
        [Test]
        public void ShowErrorDetails_ForLocalHostNonAdmin_ReturnsTrue()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(true);
            context.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            var page = new SubtextPage {SubtextContext = context.Object};
            var control = new Error {Page = page};

            // act
            bool result = control.ShowErrorDetails;

            // assert
            Assert.IsTrue(result);
        }

        [Test]
        public void ShowErrorDetails_ForLocalHostAdmin_ReturnsTrue()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(true);
            context.Setup(c => c.User.IsInRole("Admins")).Returns(true);
            var page = new SubtextPage { SubtextContext = context.Object };
            var control = new Error { Page = page };

            // act
            bool result = control.ShowErrorDetails;

            // assert
            Assert.IsTrue(result);
        }

        [Test]
        public void ShowErrorDetails_ForNonLocalHost_ReturnsFalse()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            context.Setup(c => c.User.IsInRole("Admins")).Returns(false);
            var page = new SubtextPage { SubtextContext = context.Object };
            var control = new Error { Page = page };

            // act
            bool result = control.ShowErrorDetails;

            // assert
            Assert.IsFalse(result);
        }

        [Test]
        public void ShowErrorDetails_ForAdminNonLocalHost_ReturnsTrue()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            context.Setup(c => c.User.IsInRole("Admins")).Returns(true);
            var page = new SubtextPage { SubtextContext = context.Object };
            var control = new Error { Page = page };

            // act
            bool result = control.ShowErrorDetails;

            // assert
            Assert.IsTrue(result);
        }
    }
}
ï»¿using System.Web;
using System.Web.UI;
using MbUnit.Framework;
using Moq;
using Moq.Stub;
using Subtext.Framework.Configuration;
using Subtext.Framework.UI.Skinning;
using Subtext.Web.Skins._System.Controls;

namespace UnitTests.Subtext.Framework.Skinning
{
    [TestFixture]
    public class SkinControlLoaderTests
    {
        [Test]
        public void LoadControl_WithControlName_LoadsTheControlFromTheSkinFolder()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var loadedControl = new UserControl { ID = "Foo.Bar" };
            containerControl.Setup(tc => tc.LoadControl("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx")).Returns(loadedControl);
            var skin = new SkinConfig {TemplateFolder = "OfMyChinnyChinChin"};
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);
            
            // act
            var control = skinControlLoader.LoadControl("ViewPost");

            // assert
            Assert.AreSame(loadedControl, control);
        }

        [Test]
        public void LoadControl_WithControlName_ReplacesDotWithUnderscoreInId()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var loadedControl = new UserControl {ID = "Foo.Bar"};
            containerControl.Setup(tc => tc.LoadControl("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx")).Returns(loadedControl);
            var skin = new SkinConfig { TemplateFolder = "OfMyChinnyChinChin" };
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);

            // act
            var control = skinControlLoader.LoadControl("ViewPost");

            // assert
            Assert.AreEqual("Foo_Bar", control.ID);
        }


        [Test]
        public void LoadControl_WithControlThrowingHttpException_LoadsFallbackControl()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var fallbackControl = new UserControl { ID = "Foo.Bar" };
            containerControl.Setup(tc => tc.LoadControl("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx")).Throws(new HttpException());
            containerControl.Setup(tc => tc.LoadControl("~/Skins/_System/Controls/ViewPost.ascx")).Returns(fallbackControl);
            var skin = new SkinConfig { TemplateFolder = "OfMyChinnyChinChin" };
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);

            // act
            var control = skinControlLoader.LoadControl("ViewPost");

            // assert
            Assert.AreSame(fallbackControl, control);
        }

        [Test]
        public void LoadControl_WithControlThrowingHttpParseException_LoadsErrorControlWithExceptionProperty()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var exception = new HttpParseException();
            var userControl = new Mock<UserControl>();
            userControl.Stub(c => c.ID);
            var errorControl = userControl.As<IErrorControl>();
            userControl.Object.ID = "Foo.Bar";
            errorControl.Stub(c => c.Exception);
            containerControl.Setup(tc => tc.LoadControl("~/Skins/VsShirts/Controls/ViewPost.ascx")).Throws(exception);
            containerControl.Setup(tc => tc.LoadControl("~/Skins/_System/Controls/Error.ascx")).Returns((UserControl)errorControl.Object);
            var skin = new SkinConfig { TemplateFolder = "VsShirts" };
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);

            // act
            var control = skinControlLoader.LoadControl("ViewPost") as IErrorControl;

            // assert
            Assert.AreEqual(exception, control.Exception.InnerException);
        }

        [Test]
        public void LoadControl_WithControlThrowingHttpParseException_LoadsErrorControlWithExceptionHavingControlPath()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var exception = new HttpParseException();
            var errorControl = new Error();
            containerControl.Setup(tc => tc.LoadControl("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx")).Throws(exception);
            containerControl.Setup(tc => tc.LoadControl("~/Skins/_System/Controls/Error.ascx")).Returns(errorControl);
            var skin = new SkinConfig { TemplateFolder = "OfMyChinnyChinChin" };
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);

            // act
            var control = skinControlLoader.LoadControl("ViewPost") as IErrorControl;

            // assert
            Assert.AreEqual("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx", control.Exception.ControlPath);
        }

        [Test]
        public void LoadControl_WithControlAndFallbackThrowingHttpException_LoadsErrorControl()
        {
            // arrange
            var containerControl = new Mock<IContainerControl>();
            var errorControl = new Error();
            containerControl.Setup(tc => tc.LoadControl("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx")).Throws(new HttpException());
            containerControl.Setup(tc => tc.LoadControl("~/Skins/_System/Controls/ViewPost.ascx")).Throws(new HttpException());
            containerControl.Setup(tc => tc.LoadControl("~/Skins/_System/Controls/Error.ascx")).Returns(errorControl);
            var skin = new SkinConfig { TemplateFolder = "OfMyChinnyChinChin" };
            var skinControlLoader = new SkinControlLoader(containerControl.Object, skin);

            // act
            var control = skinControlLoader.LoadControl("ViewPost") as Error;

            // assert
            Assert.AreSame(errorControl, control);
            Assert.AreEqual("~/Skins/OfMyChinnyChinChin/Controls/ViewPost.ascx", control.Exception.ControlPath);
        }
    }
}using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web.Hosting;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.UI.Skinning;

namespace UnitTests.Subtext.Framework.Skinning
{
    [TestFixture]
    public class SkinEngineTests
    {
        [Test]
        public void GetSkinTemplates_WithFolders_ReturnsSkinPerFolder()
        {
            //arrange
            var directories = new List<VirtualDirectory>();
            for(int i = 0; i < 3; i++)
            {
                var skinDir = new Mock<VirtualDirectory>("~/skins/skin" + i);
                skinDir.Setup(d => d.Name).Returns("Skin" + i);
                directories.Add(skinDir.Object);
            }
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(false /* mobile */);

            //assert
            Assert.AreEqual(3, skinTemplates.Count);
            Assert.AreEqual("Skin0", skinTemplates.Values.First().Name);
            Assert.AreEqual("Skin0", skinTemplates.Values.First().TemplateFolder);
        }

        [Test]
        public void GetSkinTemplates_WithSpecialFolders_IgnoresSpecialFolders()
        {
            //arrange
            var directories = new List<VirtualDirectory>();
            var nonSkinDir = new Mock<VirtualDirectory>("~/skins/_system");
            nonSkinDir.Setup(d => d.Name).Returns("_system");
            directories.Add(nonSkinDir.Object);
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(false /* mobile */);

            //assert
            Assert.AreEqual(1, skinTemplates.Count);
            Assert.AreEqual("Skin1", skinTemplates.Values.First().Name);
        }

        [Test]
        public void GetSkinTemplates_WithSkinConfigInFolder_AppliesConfig()
        {
            //arrange
            var virtualFile = new Mock<VirtualFile>("~/skins/skin1/skin.config");
            Stream stream =
                @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <SkinTemplate Name=""Skinny"" StyleMergeMode=""MergedAfter"" ScriptMergeMode=""Merge"">
      <Styles>
        <Style href=""~/skins/_System/commonstyle.css"" />
      </Styles>
    </SkinTemplate>
</SkinTemplates>"
                    .ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);

            var directories = new List<VirtualDirectory>();
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            vpp.Setup(v => v.FileExists("~/skins/Skin1/skin.config")).Returns(true);
            vpp.Setup(v => v.GetFile("~/skins/Skin1/skin.config")).Returns(virtualFile.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(false /* mobile */);

            //assert
            Assert.AreEqual(1, skinTemplates.Count);
            SkinTemplate template = skinTemplates.Values.First();
            Assert.AreEqual("Skinny", template.Name);
            Assert.AreEqual("Skin1", template.TemplateFolder);
            Assert.AreEqual(StyleMergeMode.MergedAfter, template.StyleMergeMode);
            Assert.AreEqual(ScriptMergeMode.Merge, template.ScriptMergeMode);
            Assert.AreEqual(1, template.Styles.Count());
        }

        [Test]
        public void GetSkinTemplates_WithMobileSpecified_ReturnsSkinWithMobileSupportSetToMobileOnly()
        {
            //arrange
            var virtualFile = new Mock<VirtualFile>("~/skins/skin1/skin.config");
            Stream stream =
                @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <SkinTemplate Name=""Mobile"" MobileSupport=""MobileOnly"">
      <Styles>
        <Style href=""~/skins/_System/commonstyle.css"" />
      </Styles>
    </SkinTemplate>
</SkinTemplates>"
                    .ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);

            var directories = new List<VirtualDirectory>();
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            vpp.Setup(v => v.FileExists("~/skins/Skin1/skin.config")).Returns(true);
            vpp.Setup(v => v.GetFile("~/skins/Skin1/skin.config")).Returns(virtualFile.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(true /* mobile */);

            //assert
            Assert.AreEqual(1, skinTemplates.Count);
            SkinTemplate template = skinTemplates.Values.First();
            Assert.AreEqual("Mobile", template.Name);
        }

        [Test]
        public void GetSkinTemplates_WithMobileSpecified_ReturnsSkinWithMobileSupportSetToSupported()
        {
            //arrange
            var virtualFile = new Mock<VirtualFile>("~/skins/skin1/skin.config");
            Stream stream =
                @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <SkinTemplate Name=""Mobile"" MobileSupport=""Supported"">
      <Styles>
        <Style href=""~/skins/_System/commonstyle.css"" />
      </Styles>
    </SkinTemplate>
</SkinTemplates>"
                    .ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);

            var directories = new List<VirtualDirectory>();
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            vpp.Setup(v => v.FileExists("~/skins/Skin1/skin.config")).Returns(true);
            vpp.Setup(v => v.GetFile("~/skins/Skin1/skin.config")).Returns(virtualFile.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(true /* mobile */);

            //assert
            Assert.AreEqual(1, skinTemplates.Count);
            SkinTemplate template = skinTemplates.Values.First();
            Assert.AreEqual("Mobile", template.Name);
        }

        [Test]
        public void GetSkinTemplates_WithMobileNotSpecified_ReturnsSkinWithMobileSupportSetToSupported()
        {
            //arrange
            var virtualFile = new Mock<VirtualFile>("~/skins/skin1/skin.config");
            Stream stream =
                @"<?xml version=""1.0""?>
<SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <SkinTemplate Name=""Mobile"" MobileSupport=""Supported"">
      <Styles>
        <Style href=""~/skins/_System/commonstyle.css"" />
      </Styles>
    </SkinTemplate>
</SkinTemplates>"
                    .ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);

            var directories = new List<VirtualDirectory>();
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            vpp.Setup(v => v.FileExists("~/skins/Skin1/skin.config")).Returns(true);
            vpp.Setup(v => v.GetFile("~/skins/Skin1/skin.config")).Returns(virtualFile.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(false /* mobile */);

            //assert
            Assert.AreEqual(1, skinTemplates.Count);
            SkinTemplate template = skinTemplates.Values.First();
            Assert.AreEqual("Mobile", template.Name);
        }

        [Test]
        public void GetSkinTemplates_WithMobileSpecified_DoesNotReturnSkinThatDoesNotSupportMobile()
        {
            //arrange
            var virtualFile = new Mock<VirtualFile>("~/skins/skin1/skin.config");
            Stream stream =
                @"<?xml version=""1.0""?>
    <SkinTemplates xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
        <SkinTemplate Name=""Skinny"" MobileSupported=""None"">
          <Styles>
            <Style href=""~/skins/_System/commonstyle.css"" />
          </Styles>
        </SkinTemplate>
    </SkinTemplates>"
                    .ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);

            var directories = new List<VirtualDirectory>();
            var skinDir = new Mock<VirtualDirectory>("~/skins/skin1");
            skinDir.Setup(d => d.Name).Returns("Skin1");
            directories.Add(skinDir.Object);
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            var vpp = new Mock<VirtualPathProvider>();
            vpp.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);
            vpp.Setup(v => v.FileExists("~/skins/Skin1/skin.config")).Returns(true);
            vpp.Setup(v => v.GetFile("~/skins/Skin1/skin.config")).Returns(virtualFile.Object);
            var skins = new SkinEngine(vpp.Object);

            //act
            IDictionary<string, SkinTemplate> skinTemplates = skins.GetSkinTemplates(true /* mobile */);

            //assert
            Assert.AreEqual(0, skinTemplates.Count);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Generic;
using System.Web.Hosting;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.UI.Skinning;

namespace UnitTests.Subtext.Framework.Skinning
{
    [TestFixture]
    public class SkinScriptsTests
    {
        [Test]
        public void CanGetScriptMergeModeAttribute()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);

            SkinTemplate templateWithMergeScriptMergeMode = templates["Piyo"];
            Assert.IsTrue(templateWithMergeScriptMergeMode.MergeScripts, "ScriptMergeMode should be Merge.");

            SkinTemplate templateWithDontMergeScriptMergeMode = templates["Semagogy"];
            Assert.IsFalse(templateWithDontMergeScriptMergeMode.MergeScripts, "ScriptMergeMode should be DontMerge.");

            SkinTemplate templateWithoutScriptMergeMode = templates["RedBook-Green.css"];
            Assert.IsFalse(templateWithoutScriptMergeMode.MergeScripts, "ScriptMergeMode should be None.");
        }

        [Test]
        public void ScriptElementCollectionRendererRendersScriptElements()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);

            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            var renderer = new ScriptElementCollectionRenderer(skinEngine);
            string scriptElements = renderer.RenderScriptElementCollection("RedBook-Green.css");

            string script = @"<script type=""text/javascript"" src=""/Skins/RedBook/blah.js""></script>";
            Assert.IsTrue(scriptElements.Contains(script), "Rendered the script improperly.");

            scriptElements = renderer.RenderScriptElementCollection("Nature-Leafy.css");
            script = @"<script type=""text/javascript"" src=""/scripts/XFNHighlighter.js""></script>";
            Assert.IsTrue(scriptElements.Contains(script), "Rendered the script improperly. We got: " + scriptElements);
        }

        [Test]
        public void ScriptElementCollectionRendererRendersJSHandlerScript()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);

            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new ScriptElementCollectionRenderer(skinEngine);
            string scriptElements = renderer.RenderScriptElementCollection("RedBook-Blue.css");

            string script =
                @"<script type=""text/javascript"" src=""/Skins/RedBook/js.axd?name=RedBook-Blue.css""></script>";
            Assert.IsTrue(scriptElements.Contains(script), "Rendered the script improperly.");
        }

        [Test]
        public void SkinsWithNoScriptsAreNotMerged()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);
            SkinTemplate template = templates["Gradient"];
            bool canBeMerged = ScriptElementCollectionRenderer.CanScriptsBeMerged(template);

            Assert.IsFalse(canBeMerged, "Skins without scripts should not be mergeable.");
        }

        [Test]
        public void ScriptsWithRemoteSrcAreNotMerged()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);
            SkinTemplate template = templates["RedBook-Red.css"];
            bool canBeMerged = ScriptElementCollectionRenderer.CanScriptsBeMerged(template);

            Assert.IsFalse(canBeMerged, "Skins with remote scripts should not be mergeable.");
        }

        [Test]
        public void ScriptsWithNoneScriptMergeModeAreNotMerged()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);
            SkinTemplate template = templates["Semagogy"];
            bool canBeMerged = ScriptElementCollectionRenderer.CanScriptsBeMerged(template);

            Assert.IsFalse(canBeMerged, "Skins with ScriptMergeMode=\"DontMerge\" should not be mergeable.");
        }

        [Test]
        public void ScriptsWithParametricSrcAreNotMerged()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);
            SkinTemplate template = templates["Piyo"];
            bool canBeMerged = ScriptElementCollectionRenderer.CanScriptsBeMerged(template);

            Assert.IsFalse(canBeMerged, "Skins with scripts that have query string parameters should not be mergeable.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Web.Hosting;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Text;
using Subtext.Framework.UI.Skinning;

namespace UnitTests.Subtext.Framework.Skinning
{
    [TestFixture]
    public class SkinStylesTests
    {
        [Test]
        public void CanGetExcludeDefaultStyleAttribute()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);

            SkinTemplate templateWithTrueExcludedDefault = templates["RedBook-Blue.css"];
            Assert.IsTrue(templateWithTrueExcludedDefault.ExcludeDefaultStyle, "ExcludeDefaultStyle should be True.");

            SkinTemplate templateWithFalseExcludedDefault = templates["Gradient"];
            Assert.IsFalse(templateWithFalseExcludedDefault.ExcludeDefaultStyle, "ExcludeDefaultStyle should be false.");

            SkinTemplate templateWithoutExcludedDefault = templates["Piyo"];
            Assert.IsFalse(templateWithoutExcludedDefault.ExcludeDefaultStyle, "ExcludeDefaultStyle should be false.");
        }

        [Test]
        public void CanGetMergeModeAttribute()
        {
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false /* mobile */);

            SkinTemplate templateWithMergedFirstMergeMode = templates["Semagogy"];
            Assert.AreEqual(StyleMergeMode.MergedFirst, templateWithMergedFirstMergeMode.StyleMergeMode,
                            "MergeMode should be MergedFirst.");

            SkinTemplate templateWithMergedAfterMergeMode = templates["RedBook-Green.css"];
            Assert.AreEqual(StyleMergeMode.MergedAfter, templateWithMergedAfterMergeMode.StyleMergeMode,
                            "MergeMode should be MergedAfter.");

            SkinTemplate templateWithNoneMergeMode = templates["RedBook-Red.css"];
            Assert.AreEqual(StyleMergeMode.None, templateWithNoneMergeMode.StyleMergeMode, "MergeMode should be None.");

            Assert.AreNotEqual(StyleMergeMode.MergedAfter, templateWithNoneMergeMode.StyleMergeMode,
                               "MergeMode should not be MergedAfter.");

            SkinTemplate templateWithoutMergeMode = templates["RedBook-Blue.css"];
            Assert.AreEqual(StyleMergeMode.None, templateWithoutMergeMode.StyleMergeMode, "MergeMode should be None.");
        }

        [RowTest]
        [Row("", "", "/Skins/RedBook/print.css", "/Skins/RedBook/style.css")]
        [Row("blog", "", "/Skins/RedBook/print.css", "/Skins/RedBook/style.css")]
        [Row("blog", "Subtext.Web", "/Subtext.Web/Skins/RedBook/print.css", "/Subtext.Web/Skins/RedBook/style.css")]
        public void StyleSheetElementCollectionRendererRendersPlainCssLinkElementsWithNoneMergeMode(string subFolder,
                                                                                                    string
                                                                                                        applicationPath,
                                                                                                    string
                                                                                                        expectedPrintCssPath,
                                                                                                    string
                                                                                                        expectedDefaultCssPath)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", subFolder, applicationPath);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);
            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            string styleElements = renderer.RenderStyleElementCollection("RedBook-Red.css");

            string printCss =
                string.Format(@"<link media=""print"" type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                              expectedPrintCssPath);
            Assert.IsTrue(styleElements.Contains(printCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the printcss to be there.");

            string defaultCss = string.Format(@"<link type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                                              expectedDefaultCssPath);
            Assert.IsTrue(styleElements.Contains(defaultCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the default css to be there.");
        }

        [Test]
        public void RenderStyleElementCollection_WithNoStyles_RendersDefaultStyle()
        {
            // arrange
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", string.Empty, "/");
            var pathProvider = new Mock<VirtualPathProvider>();
            var skinEngine = new SkinEngine(pathProvider.Object);
            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            var skinTemplate = new SkinTemplate {ExcludeDefaultStyle = false, Styles = null, TemplateFolder = "TestSkin"};

            // act
            string styleElements = renderer.RenderStyleElementCollection("TestSkin", skinTemplate);

            // assert
            const string defaultStyle = @"<link type=""text/css"" rel=""stylesheet"" href=""/Skins/TestSkin/style.css"" />";
            Assert.AreEqual(defaultStyle, styleElements.Trim());
        }

        [RowTest]
        [Row("", "", "/Skins/WPSkin/print.css", "/Skins/WPSkin/style.css")]
        [Row("blog", "", "/Skins/WPSkin/print.css", "/Skins/WPSkin/style.css")]
        [Row("blog", "Subtext.Web", "/Subtext.Web/Skins/WPSkin/print.css", "/Subtext.Web/Skins/WPSkin/style.css")]
        public void StyleSheetElementCollectionRenderer_WithNoneMergeModeAndExcludeDefault_RendersPlainCssLinkElements(
            string subFolder, string applicationPath, string expectedPrintCssPath, string expectedDefaultCssPath)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", subFolder, applicationPath);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            string styleElements = renderer.RenderStyleElementCollection("WPSkin");

            string printCss =
                string.Format(@"<link media=""print"" type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                              expectedPrintCssPath);
            Assert.IsTrue(styleElements.Contains(printCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the print css to be there.");

            string defaultCss = string.Format(@"<link type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                                              expectedDefaultCssPath);
            Assert.IsTrue(!styleElements.Contains(defaultCss, StringComparison.OrdinalIgnoreCase),
                          "Not expected the default css to be there.");
        }

        [RowTest]
        [Row("", "", "/Skins/Lightz/print.css", "/Skins/Lightz/style.css", "/Skins/Lightz/light.css")]
        [Row("blog", "", "/Skins/Lightz/print.css", "/Skins/Lightz/style.css", "/Skins/Lightz/light.css")]
        [Row("blog", "Subtext.Web", "/Subtext.Web/Skins/Lightz/print.css", "/Subtext.Web/Skins/Lightz/style.css",
            "/Subtext.Web/Skins/Lightz/light.css")]
        public void StyleSheetElementCollectionRenderer_WithNoneMergeModeAndSecondaryStyle_RendersPlainCssLinkElements(
            string subFolder, string applicationPath, string expectedPrintCssPath, string expectedDefaultCssPath,
            string expectedSecondaryCssPath)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", subFolder, applicationPath);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            string styleElements = renderer.RenderStyleElementCollection("Lightz-light.css");

            string printCss =
                string.Format(@"<link media=""print"" type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                              expectedPrintCssPath);
            Assert.IsTrue(styleElements.Contains(printCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the printcss to be there.");

            string defaultCss = string.Format(@"<link type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                                              expectedDefaultCssPath);
            Assert.IsTrue(styleElements.Contains(defaultCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the default css to be there.");

            string secondaryCss = string.Format(@"<link type=""text/css"" rel=""stylesheet"" href=""{0}"" />",
                                                expectedSecondaryCssPath);
            Assert.IsTrue(styleElements.Contains(secondaryCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the secondary css to be there.");
        }

        [RowTest]
        [Row("KeyWest", true)]
        [Row("Gradient", false)]
        public void StyleSheetElementCollectionRendererRendersLinkElementsInRightOrder(string skinKey,
                                                                                       bool expectedFirst)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);

            string styleElements = renderer.RenderStyleElementCollection(skinKey);
            SkinTemplate template = skinEngine.GetSkinTemplates(false)[skinKey];

            styleElements = styleElements.Trim('\r', '\n');
            string mergedCss = @"<link type=""text/css"" rel=""stylesheet"" href=""/Skins/" + template.TemplateFolder +
                               "/css.axd?name=" + skinKey + @""" />";
            if(expectedFirst)
            {
                Assert.IsTrue(styleElements.StartsWith(mergedCss, StringComparison.OrdinalIgnoreCase),
                              "Merged CSS is not in first position");
            }
            else
            {
                Assert.IsTrue(styleElements.EndsWith(mergedCss, StringComparison.OrdinalIgnoreCase),
                              "Merged CSS is not in last position");
            }
        }


        [RowTest]
        [Row("", "", "/Skins/Piyo/css.axd?name=Piyo&media=screen&title=fixed")]
        [Row("blog", "", "/Skins/Piyo/css.axd?name=Piyo&media=screen&title=fixed")]
        [Row("blog", "Subtext.Web", "/Subtext.Web/Skins/Piyo/css.axd?name=Piyo&media=screen&title=fixed")]
        public void StyleSheetElementCollectionRendererRendersMergedCssLinkElements(string subFolder,
                                                                                    string applicationPath,
                                                                                    string expectedPrintCssPath)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", subFolder, applicationPath);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            string styleElements = renderer.RenderStyleElementCollection("Piyo");

            string printCss =
                string.Format(
                    @"<link media=""screen"" type=""text/css"" rel=""stylesheet"" title=""fixed"" href=""{0}"" />",
                    expectedPrintCssPath);
            Assert.IsTrue(styleElements.Contains(printCss, StringComparison.OrdinalIgnoreCase),
                          "Expected the fixed screen css to be there.");
        }

        [RowTest]
        [Row("AnotherEon001",
            @"<link type=""text/css"" rel=""stylesheet"" href=""http://haacked.com/skins/_System/commonstyle.css"" />")]
        [Row("Gradient",
            "<!--[if IE]>\r\n" +
            @"<link media=""screen"" type=""text/css"" rel=""stylesheet"" href=""/Skins/Gradient/css.axd?name=Gradient&media=screen&conditional=if+IE"" />" +
            "\r\n<![endif]-->")]
        [Row("RedBook-Green.css",
            "<!--[if IE]>\r\n" +
            @"<link type=""text/css"" rel=""stylesheet"" href=""/Skins/RedBook/css.axd?name=RedBook-Green.css&conditional=if+IE"" />" +
            "\r\n<![endif]-->")]
        [Row("Nature-leafy.css", "")]
        [Row("Origami", "")]
        [Row("Piyo",
            @"<link media=""screen"" type=""text/css"" rel=""stylesheet"" title=""fixed"" href=""/Skins/Piyo/css.axd?name=Piyo&media=screen&title=fixed"" />" +
            "\r\n" +
            @"<link media=""screen"" type=""text/css"" rel=""stylesheet"" title=""elastic"" href=""/Skins/Piyo/css.axd?name=Piyo&media=screen&title=elastic"" />"
            )]
        [Row("Submarine",
            "<!--[if IE]>\r\n" +
            @"<link type=""text/css"" rel=""stylesheet"" href=""/Skins/Submarine/css.axd?name=Submarine&conditional=if+IE"" />" +
            "\r\n<![endif]-->")]
        public void CallsToCssHandlerAreNotRepeated(string skinKey, string exptectedElements)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            string styleElements = renderer.RenderStyleElementCollection(skinKey);
            IDictionary<string, SkinTemplate> templates = skinEngine.GetSkinTemplates(false);
            SkinTemplate template = templates[skinKey];

            string mergedCss = @"<link type=""text/css"" rel=""stylesheet"" href=""/Skins/" + template.TemplateFolder +
                               "/css.axd?name=" + skinKey + @""" />";
            styleElements = styleElements.Replace(mergedCss, string.Empty);
            Assert.IsTrue(styleElements.Trim('\r', '\n').Equals(exptectedElements), "Not the expected stylesheet links");
        }


        [RowTest]
        [Row("", "print", "", "print.css", true)]
        [Row("", "print", "fixed", "print.css", false)]
        [Row("", "", "", "~/skins/_System/csharp.css", true)]
        [Row("if gte IE 7", "", "", "IE7Patches.css", false)]
        [Row("", "screen", "", "~/css/lightbox.css", true)]
        [Row("", "all", "", "Styles/user-styles.css", true)]
        [Row("", "", "fixed", "print.css", false)]
        [Row("", "all", "fixed", "Styles/user-styles.css", false)]
        [Row("if gte IE 7", "all", "", "Styles/user-styles.css", false)]
        [Row("", "", "", "http://www.google.com/style.css", false)]
        public void StyleToBeMergedAreCorrectlyDetected(string conditional, string media, string title, string href,
                                                        bool canBeMerged)
        {
            var style = new Style();
            style.Conditional = conditional;
            style.Media = media;
            style.Href = href;
            style.Title = title;

            bool isMergeable = StyleSheetElementCollectionRenderer.CanStyleBeMerged(style);
            if(canBeMerged)
            {
                Assert.IsTrue(isMergeable, "Expected to be mergeable");
            }
            else
            {
                Assert.IsFalse(isMergeable, "Expected not to be mergeable");
            }
        }

        [Test]
        public void MergedCssDoesntContainDefaultIfExcluded()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            var mergedStyles = (List<StyleDefinition>)renderer.GetStylesToBeMerged("WPSkin");

            Assert.IsFalse(mergedStyles.Contains(new StyleDefinition("/Skins/WPSkin/style.css")),
                           "Skin WPSkin should not have the default style.css");
        }

        [Test]
        public void MergedCssContainsDefaultStyle()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            var mergedStyles = (List<StyleDefinition>)renderer.GetStylesToBeMerged("Submarine");

            Assert.IsTrue(mergedStyles.Contains(new StyleDefinition("/Skins/Submarine/style.css")),
                          "Skin Submarine should have the default style.css");
        }


        [Test]
        public void MergedCssContainsStyleWithMedia()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            var mergedStyles = (List<StyleDefinition>)renderer.GetStylesToBeMerged("Piyo");

            Assert.IsTrue(mergedStyles.Contains(new StyleDefinition("/Skins/Piyo/print.css", "print")),
                          "Skin Piyo should have the print css in the merged css");
        }

        [Test]
        public void MergedCssDoesntContainStyleWithMediaAndTitle()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog", string.Empty);
            var pathProvider = new Mock<VirtualPathProvider>();
            pathProvider.SetupSkins();
            var skinEngine = new SkinEngine(pathProvider.Object);

            var renderer = new StyleSheetElementCollectionRenderer(skinEngine);
            var mergedStyles = (List<StyleDefinition>)renderer.GetStylesToBeMerged("Piyo");

            Assert.IsFalse(mergedStyles.Contains(new StyleDefinition("/Skins/Piyo/piyo-fixed.css", "screen")),
                           "Skin Piyo should not have the fixed screen css in the merged CSS");
        }
    }
}using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web.Hosting;
using Moq;

namespace UnitTests.Subtext.Framework.Skinning
{
    public static class SkinTestExtensions
    {
        public static void SetupSkin(this Mock<VirtualPathProvider> vppMock, IList<VirtualDirectory> directories,
                                     string skinName, string skinConfigContents)
        {
            string skinConfigPath = string.Format(CultureInfo.InvariantCulture, "~/skins/{0}/skin.config", skinName);
            var virtualFile = new Mock<VirtualFile>(skinConfigPath);
            Stream stream = skinConfigContents.ToStream();
            virtualFile.Setup(vf => vf.Open()).Returns(stream);
            vppMock.Setup(v => v.FileExists(skinConfigPath)).Returns(true);
            vppMock.Setup(v => v.GetFile(skinConfigPath)).Returns(virtualFile.Object);
            var skinDir =
                new Mock<VirtualDirectory>(string.Format(CultureInfo.InvariantCulture, "~/skins/{0}", skinName));
            skinDir.Setup(d => d.Name).Returns(skinName);
            directories.Add(skinDir.Object);
        }

        public static VirtualPathProvider SetupSkins(this Mock<VirtualPathProvider> vppMock)
        {
            string piyoConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Piyo"" TemplateFolder=""Piyo"" StyleMergeMode=""MergedAfter"" ScriptMergeMode=""Merge"">
	    <Scripts>
		    <Script Src=""Scripts/piyo.js"" />
            <Script Src=""~/scripts/prototype.js"" />
            <Script Src=""~/scripts/scriptaculous.js?load=effects"" />
            <Script Src=""~/scripts/lightbox.js"" />
	    </Scripts>
	    <Styles>
		    <Style href=""~/skins/_System/csharp.css"" />
		    <Style href=""~/skins/_System/commonstyle.css"" />
		    <Style href=""~/skins/_System/commonlayout.css"" />
            <Style href=""~/css/lightbox.css"" media=""screen"" />
		    <Style title=""fixed"" href=""piyo-fixed.css"" media=""screen""/>
            <Style title=""elastic"" href=""piyo-elastic.css"" media=""screen""/>
		    <Style href=""print.css"" media=""print"" />
	    </Styles>
    </SkinTemplate>
</SkinTemplates>";

            string semagogyConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Semagogy"" TemplateFolder=""Semagogy"" ScriptMergeMode=""DontMerge"" StyleMergeMode=""MergedFirst"" >
        <Scripts>
            <Script Src=""Scripts/DarkHorseLayoutEngine.js"" />
        </Scripts>
        <Styles>
            <Style href=""~/skins/_System/csharp.css"" />
            <Style href=""~/skins/_System/commonstyle.css"" />
            <Style href=""~/skins/_System/commonlayout.css"" />
            <Style href=""print.css"" media=""print"" />
        </Styles>
    </SkinTemplate>
</SkinTemplates>";

            string redbookConfig =
                @"<SkinTemplates>
	<SkinTemplate Name=""RedBook"" TemplateFolder=""RedBook"" StyleSheet=""Red.css"" ScriptMergeMode=""Merge"" StyleMergeMode=""None"">
		<Scripts>
			<Script Src=""~/scripts/niceforms.js"" />
            <Script Src=""http://www.google.com/adsense.js"" />
		</Scripts>
		<Styles>
			<Style href=""~/skins/_System/csharp.css"" />
			<Style href=""~/skins/_System/commonstyle.css"" />
			<Style href=""~/skins/_System/commonlayout.css"" />
			<Style href=""niceforms-default.css"" />
			<Style href=""print.css"" media=""print"" />
		</Styles>
	</SkinTemplate>

    <SkinTemplate Name=""BlueBook"" TemplateFolder=""RedBook"" StyleSheet=""Blue.css"" ExcludeDefaultStyle=""true"" ScriptMergeMode=""Merge"">
	    <Scripts>
		    <Script Src=""~/scripts/niceforms.js"" />
	    </Scripts>
	    <Styles>
		    <Style href=""~/skins/_System/csharp.css"" />
		    <Style href=""~/skins/_System/commonstyle.css"" />
		    <Style href=""~/skins/_System/commonlayout.css"" />
		    <Style href=""niceforms-default.css"" />
		    <Style href=""IEHacks.css"" conditional=""if IE"" />
		    <Style href=""print.css"" media=""print"" />
	    </Styles>
    </SkinTemplate>

    <SkinTemplate Name=""GreenBook"" TemplateFolder=""RedBook"" StyleSheet=""Green.css"" StyleMergeMode=""MergedAfter"">
	    <Scripts>
		    <Script Src=""~/scripts/niceforms.js"" />
		    <Script Src=""blah.js"" />
	    </Scripts>
	    <Styles>
		    <Style href=""~/skins/_System/csharp.css"" />
		    <Style href=""~/skins/_System/commonstyle.css"" />
		    <Style href=""~/skins/_System/commonlayout.css"" />
		    <Style href=""niceforms-default.css"" />
            <Style href=""IEHacks.css"" conditional=""if IE"" />
		    <Style href=""print.css"" media=""print"" />
	    </Styles>
    </SkinTemplate>
</SkinTemplates>";

            string natureConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Leafy"" TemplateFolder=""Nature"" StyleSheet=""leafy.css"" StyleMergeMode=""MergedAfter"">
        <Styles>
            <Style href=""~/css/lightbox.css"" media=""screen"" />
            <Style href=""~/scripts/XFNHighlighter.css"" />
            <Style href=""~/skins/_System/csharp.css"" />
            <Style href=""~/skins/_System/commonstyle.css"" />
            <Style href=""~/skins/_System/commonlayout.css"" />
            <Style href=""print.css"" media=""print"" />
        </Styles>
        <Scripts>
            <Script Src=""~/scripts/XFNHighlighter.js"" />
            <Script Src=""~/scripts/lightbox.js"" />
        </Scripts>
    </SkinTemplate>
</SkinTemplates>";

            string gradientConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Gradient"" TemplateFolder=""Gradient"" ExcludeDefaultStyle=""false"" StyleMergeMode=""MergedAfter"" ScriptMergeMode=""Merge"">
		<Styles>
			<Style href=""~/skins/_System/csharp.css"" />
			<Style href=""~/skins/_System/commonstyle.css"" />
			<Style href=""~/skins/_System/commonlayout.css"" />
			<Style href=""IEPatches.css"" conditional=""if IE"" media=""screen"" />
			<Style href=""print.css"" media=""print"" />
		</Styles>
	</SkinTemplate>
</SkinTemplates>";

            string wpConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""WPSkin"" TemplateFolder=""WPSkin"" StyleMergeMode=""None"" ExcludeDefaultStyle=""true"" >
		<Styles>
			<Style href=""~/skins/_System/csharp.css"" />
			<Style href=""~/skins/_System/commonstyle.css"" />
			<Style href=""~/skins/_System/commonlayout.css"" />
			<Style href=""print.css"" media=""print"" />
		</Styles>
	</SkinTemplate>
</SkinTemplates>";

            string submarineConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Submarine"" TemplateFolder=""Submarine"" StyleMergeMode=""MergedAfter"" ScriptMergeMode=""Merge"">
		<Scripts>
			<Script Src=""~/scripts/niceforms.js"" />
			<Script Src=""~/scripts/lightbox.js"" />
			<Script Src=""~/scripts/XFNHighlighter.js"" />
			<Script Src=""~/scripts/ExternalLinks.js"" />
			<Script Src=""~/scripts/LiveCommentPreview.js"" />
			<Script Src=""~/scripts/AmazonTooltips.js"" />
		</Scripts>
		<Styles>
			<Style href=""~/skins/_System/csharp.css"" />
			<Style href=""~/skins/_System/commonstyle.css"" />
			<Style href=""~/skins/_System/commonlayout.css"" />
			<Style href=""~/scripts/XFNHighlighter.css"" />
			<Style href=""~/css/lightbox.css"" />
			<Style href=""niceforms-default.css"" media=""all"" conditional=""if IE""/>
            <Style href=""IEHacks.css"" conditional=""if IE"" />
			<Style href=""print.css"" media=""print"" />
		</Styles>
	</SkinTemplate>
</SkinTemplates>";

            string origamiConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Origami"" TemplateFolder=""Origami"" StyleMergeMode=""MergedAfter"" ScriptMergeMode=""Merge"">
        <Styles>
            <Style href=""~/skins/_System/csharp.css"" />
            <Style href=""~/skins/_System/commonstyle.css"" />
            <Style href=""~/skins/_System/commonlayout.css"" />
            <Style href=""Styles/user-styles.css"" media=""all"" />
            <Style href=""Styles/print.css"" media=""print"" />
            <Style href=""Styles/core.css"" media=""screen"" />
            <Style href=""Styles/tables.css"" media=""screen"" />
        </Styles>
        <Scripts>
            <Script Src=""Scripts/cookies.js"" />
            <Script Src=""Scripts/prototype.js"" Defer=""true""/>
            <Script Src=""Scripts/effects.js"" />
            <Script Src=""Scripts/init.js"" />
            <Script Src=""Scripts/behaviour.js"" />
            <Script Src=""Scripts/coreFunctions.js"" />
            <Script Src=""Scripts/styleSwitcher.js"" />
        </Scripts>
    </SkinTemplate>
</SkinTemplates>";

            string anotherEonConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""AnotherEon001"" TemplateFolder=""AnotherEon001"" StyleMergeMode=""MergedAfter"">
	    <Styles>
		    <Style href=""~/skins/_System/csharp.css"" />
		    <Style href=""http://haacked.com/skins/_System/commonstyle.css"" />
		    <Style href=""~/skins/_System/commonlayout.css"" />
		    <Style href=""print.css"" media=""print"" />
	    </Styles>
    </SkinTemplate>
</SkinTemplates>";

            string keyWestConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""KeyWest"" TemplateFolder=""KeyWest"" StyleMergeMode=""MergedFirst"">
        <Styles>
            <Style href=""~/skins/_System/csharp.css"" />
            <Style href=""~/skins/_System/commonstyle.css"" />
            <Style href=""~/skins/_System/commonlayout.css"" />
            <Style href=""print.css"" media=""print"" />
        </Styles>
    </SkinTemplate>
</SkinTemplates>";

            string lightZConfig =
                @"<SkinTemplates>
    <SkinTemplate Name=""Lightz"" TemplateFolder=""Lightz"" StyleSheet=""light.css"" StyleMergeMode=""None"">
		<Styles>
			<Style href=""~/skins/_System/csharp.css"" />
			<Style href=""~/skins/_System/commonstyle.css"" />
			<Style href=""~/skins/_System/commonlayout.css"" />
			<Style href=""print.css"" media=""print"" />
		</Styles>
	</SkinTemplate>
</SkinTemplates>";

            var directories = new List<VirtualDirectory>();
            var skinsDir = new Mock<VirtualDirectory>("~/skins");
            skinsDir.Setup(s => s.Directories).Returns(directories);
            vppMock.Setup(v => v.GetDirectory("~/skins")).Returns(skinsDir.Object);

            vppMock.SetupSkin(directories, "Piyo", piyoConfig);
            vppMock.SetupSkin(directories, "Semagogy", semagogyConfig);
            vppMock.SetupSkin(directories, "RedBook", redbookConfig);
            vppMock.SetupSkin(directories, "Nature", natureConfig);
            vppMock.SetupSkin(directories, "Gradient", gradientConfig);
            vppMock.SetupSkin(directories, "WPSkin", wpConfig);
            vppMock.SetupSkin(directories, "Submarine", submarineConfig);
            vppMock.SetupSkin(directories, "Origami", origamiConfig);
            vppMock.SetupSkin(directories, "AnotherEon001", anotherEonConfig);
            vppMock.SetupSkin(directories, "KeyWest", keyWestConfig);
            vppMock.SetupSkin(directories, "lightz", lightZConfig);
            return vppMock.Object;
        }
    }
}using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using Subtext.Framework.Syndication.Admin;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Syndication.Admin
{
    [TestFixture]
    public class ModeratedCommentRssWriterTests : SyndicationTestBase
    {
        /// <summary>
        /// Tests that a valid feed is produced even if a post has no comments.
        /// </summary>
        [Test]
        [RollBack]
        public void CommentRssWriterProducesValidEmptyFeed()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "blog");

            var blogInfo = new Blog();
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = "blog";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.Title = "My Blog Rulz";
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);

            var entry = new Entry(PostType.None);
            entry.AllowComments = true;
            entry.Title = "Comments requiring your approval.";
            entry.Body = "The following items are waiting approval.";
            entry.PostType = PostType.None;

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(url => url.ImageUrl(It.IsAny<string>())).Returns("/images/RSS2Image.gif");
            urlHelper.Setup(url => url.GetVirtualPath(It.IsAny<string>(), It.IsAny<object>())).Returns(
                "/blog/Admin/Feedback.aspx?status=2");
            urlHelper.Setup(url => url.EntryUrl(It.IsAny<Entry>())).Returns("/blog/Admin/Feedback.aspx?status=2");
            urlHelper.Setup(url => url.AdminUrl(It.IsAny<string>(), It.IsAny<object>())).Returns(
                "/blog/Admin/Feedback.aspx?status=2");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blogInfo);
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            var writer = new ModeratedCommentRssWriter(new StringWriter(), new List<FeedbackItem>(), entry,
                                                       subtextContext.Object);

            string expected = @"<rss version=""2.0"" "
                              + @"xmlns:dc=""http://purl.org/dc/elements/1.1/"" "
                              + @"xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" "
                              + @"xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" "
                              + @"xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" "
                              + @"xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" "
                              + @"xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" + Environment.NewLine
                              + indent() + @"<channel>" + Environment.NewLine
                              + indent(2) + @"<title>Comments requiring your approval.</title>" + Environment.NewLine
                              + indent(2) + @"<link>http://localhost/blog/Admin/Feedback.aspx?status=2</link>" +
                              Environment.NewLine
                              + indent(2) + @"<description>The following items are waiting approval.</description>" +
                              Environment.NewLine
                              + indent(2) + @"<language>en-US</language>" + Environment.NewLine
                              + indent(2) + @"<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                              + indent(2) + @"<generator>{0}</generator>" + Environment.NewLine
                              + indent(2) + @"<image>" + Environment.NewLine
                              + indent(3) + @"<title>Comments requiring your approval.</title>" + Environment.NewLine
                              + indent(3) + @"<url>http://localhost/images/RSS2Image.gif</url>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/blog/Admin/Feedback.aspx?status=2</link>" +
                              Environment.NewLine
                              + indent(3) + @"<width>77</width>" + Environment.NewLine
                              + indent(3) + @"<height>60</height>" + Environment.NewLine
                              + indent(2) + @"</image>" + Environment.NewLine
                              + indent(1) + @"</channel>" + Environment.NewLine
                              + @"</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            Assert.AreEqual(expected, writer.Xml);
        }

        /// <summary>
        /// Tests that a valid feed is produced even if a post has no comments.
        /// </summary>
        [Test]
        [RollBack]
        public void CommentRssWriterProducesValidFeed()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "Subtext.Web");

            var blogInfo = new Blog();
            blogInfo.Host = "localhost";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.Title = "My Blog Rulz";
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);

            var rootEntry = new Entry(PostType.None);
            rootEntry.AllowComments = true;
            rootEntry.Title = "Comments requiring your approval.";
            rootEntry.Body = "The following items are waiting approval.";
            rootEntry.PostType = PostType.None;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication(blogInfo, "haacked", "title of the post",
                                                                           "Body of the post.");
            entry.EntryName = "titleofthepost";
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/02/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Id = 1001;

            var comment = new FeedbackItem(FeedbackType.Comment);
            comment.Id = 1002;
            comment.DateCreated =
                comment.DateModified = DateTime.ParseExact("2006/02/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            comment.Title = "re: titleofthepost";
            comment.ParentEntryName = entry.EntryName;
            comment.ParentDateCreated = entry.DateCreated;
            comment.Body = "<strong>I rule!</strong>";
            comment.Author = "Jane Schmane";
            comment.Email = "jane@example.com";
            comment.EntryId = entry.Id;
            comment.Status = FeedbackStatusFlag.NeedsModeration;

            var comments = new List<FeedbackItem>();
            comments.Add(comment);

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(url => url.EntryUrl(It.IsAny<Entry>())).Returns(
                "/Subtext.Web/archive/2006/02/01/titleofthepost.aspx");
            urlHelper.Setup(url => url.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns(
                "/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#1002");
            urlHelper.Setup(url => url.ImageUrl(It.IsAny<string>())).Returns("/Subtext.Web/images/RSS2Image.gif");
            urlHelper.Setup(url => url.AdminUrl(It.IsAny<string>(), It.IsAny<object>())).Returns(
                "/Subtext.Web/Admin/Feedback.aspx?status=2");
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            context.Setup(c => c.Blog).Returns(blogInfo);

            var writer = new ModeratedCommentRssWriter(new StringWriter(), comments, rootEntry, context.Object);

            string expected = @"<rss version=""2.0"" "
                              + @"xmlns:dc=""http://purl.org/dc/elements/1.1/"" "
                              + @"xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" "
                              + @"xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" "
                              + @"xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" "
                              + @"xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" "
                              + @"xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" + Environment.NewLine
                              + indent() + @"<channel>" + Environment.NewLine
                              + indent(2) + @"<title>Comments requiring your approval.</title>" + Environment.NewLine
                              + indent(2) + @"<link>http://localhost/Subtext.Web/Admin/Feedback.aspx?status=2</link>" +
                              Environment.NewLine
                              + indent(2) + @"<description>The following items are waiting approval.</description>" +
                              Environment.NewLine
                              + indent(2) + @"<language>en-US</language>" + Environment.NewLine
                              + indent(2) + @"<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                              + indent(2) + @"<generator>{0}</generator>" + Environment.NewLine
                              + indent(2) + @"<image>" + Environment.NewLine
                              + indent(3) + @"<title>Comments requiring your approval.</title>" + Environment.NewLine
                              + indent(3) + @"<url>http://localhost/Subtext.Web/images/RSS2Image.gif</url>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<link>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx</link>" +
                              Environment.NewLine
                              + indent(3) + @"<width>77</width>" + Environment.NewLine
                              + indent(3) + @"<height>60</height>" + Environment.NewLine
                              + indent(2) + @"</image>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>re: titleofthepost</title>" + Environment.NewLine
                              + indent(3) +
                              @"<link>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#1002</link>" +
                              Environment.NewLine
                              + indent(3) + @"<description>&lt;strong&gt;I rule!&lt;/strong&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Jane Schmane</dc:creator>" + Environment.NewLine
                              + indent(3) +
                              @"<guid>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#1002</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Wed, 01 Feb 2006 08:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent() + @"</channel>" + Environment.NewLine
                              + @"</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            Assert.AreEqual(expected, writer.Xml);
        }

        [Test]
        public void Ctor_WithNullEntryCollection_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => 
                new CommentRssWriter(new StringWriter(), null, new Entry(PostType.BlogPost),
                                 new Mock<ISubtextContext>().Object)
                );
            
        }

        [Test]
        public void Ctor_WithNullEntry_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => 
                new CommentRssWriter(new StringWriter(), new List<FeedbackItem>(), null, new Mock<ISubtextContext>().Object)
            );
        }
    }
}using System;
using System.Globalization;
using System.Web;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Syndication
{
    /// <summary>
    /// Summary description for AtomHandlerTests.
    /// </summary>
    [TestFixture]
    public class AtomHandlerTests
    {
        /// <summary>
        /// Tests writing a simple RSS feed from some database entries.
        /// </summary>
        [Test]
        [RollBack]
        public void AtomWriterProducesValidFeedFromDatabase()
        {
            string hostName = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("Test", "username", "password", hostName, string.Empty);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            Config.CurrentBlog.Email = "Subtext@example.com";
            Config.CurrentBlog.RFC3229DeltaEncodingEnabled = false;

            DateTime dateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Author", "testtitle", "testbody", null,
                                                                           dateCreated);

            UnitTestHelper.Create(entry); //persist to db.

            var subtextContext = new Mock<ISubtextContext>();
            string rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/archive/2008/01/23/testtitle.aspx");
            var handler = new AtomHandler(subtextContext.Object);

            handler.ProcessRequest();
            HttpContext.Current.Response.Flush();

            var doc = new XmlDocument();
            doc.LoadXml(rssOutput);
            var nsmanager = new XmlNamespaceManager(doc.NameTable);
            nsmanager.AddNamespace("atom", "http://www.w3.org/2005/Atom");

            XmlNodeList itemNodes = doc.SelectNodes("/atom:feed/atom:entry", nsmanager);
            Assert.AreEqual(1, itemNodes.Count, "expected one entry node.");

            Assert.AreEqual("testtitle", itemNodes[0].SelectSingleNode("atom:title", nsmanager).InnerText,
                            "Not what we expected for the title.");
            string urlFormat = "http://{0}/archive/2008/01/23/{1}.aspx";

            string expectedUrl = string.Format(urlFormat, hostName, "testtitle");

            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("atom:id", nsmanager).InnerText,
                            "Not what we expected for the link.");
            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("atom:link/@href", nsmanager).InnerText,
                            "Not what we expected for the link.");
        }
    }
}using System;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Syndication
{
    /// <summary>
    /// Tests the CommentRSS HttpHandler.
    /// </summary>
    [TestFixture]
    public class CommentRssHandlerTests
    {
        /// <summary>
        /// <para>
        /// Makes sure that the CommentRssHandler produces a valid RSS feed even if 
        /// the entry has no feed items.
        /// </para>
        /// </summary>
        [Test]
        [RollBack]
        public void CommentRssHandlerProducesValidEmptyFeed()
        {
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            //BlogInfo blog = new BlogInfo {
            //    Host = hostName,
            //    Email = "Subtext@example.com",
            //    RFC3229DeltaEncodingEnabled = false,
            //};
            int blogId = Config.CreateBlog("Test", "username", "password", hostName, string.Empty);
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            Blog blog = Config.CurrentBlog;
            blog.Host = hostName;
            blog.Email = "Subtext@example.com";
            blog.RFC3229DeltaEncodingEnabled = false;


            DateTime dateCreated = DateTime.Now;
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication(blog, "Author", "Best post EVER", "testbody",
                                                                           null, dateCreated);
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetEntry(It.IsAny<int>(), true, true)).Returns(entry);

            int id = UnitTestHelper.Create(entry); //persist to db.

            string rssOutput = null;

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blog, "/" + id + ".aspx", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(repository.Object);
            subtextContext.Object.RequestContext.RouteData.Values.Add("id", id.ToString());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever/entry");

            var handler = new RssCommentHandler(subtextContext.Object);
            handler.ProcessRequest();

            var doc = new XmlDocument();
            doc.LoadXml(rssOutput);

            XmlNodeList titleNodes = doc.SelectNodes("/rss/channel/title");
            Assert.IsNotNull(titleNodes, "The title node should not be null.");
            Assert.AreEqual("Best post EVER", titleNodes[0].InnerText,
                            "Did not get the expected value of the title node.");
        }
    }
}using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Syndication
{
    /// <summary>
    /// Unit tests of the <see cref="CommentRssWriter"/> class.
    /// </summary>
    [TestFixture]
    public class CommentRssWriterTests : SyndicationTestBase
    {
        /// <summary>
        /// Tests that a valid feed is produced even if a post has no comments.
        /// </summary>
        [Test]
        public void CommentRssWriterProducesValidEmptyFeed()
        {
            var blogInfo = new Blog();
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = "blog";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.Title = "My Blog Rulz";
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication(blogInfo, "haacked", "title of the post",
                                                                           "Body of the post.");
            entry.EntryName = "titleofthepost";
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/04/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);

            var context = new Mock<ISubtextContext>();
            context.FakeSyndicationContext(blogInfo, "/", null);
            Mock<UrlHelper> urlHelper = Mock.Get(context.Object.UrlHelper);
            urlHelper.Setup(url => url.EntryUrl(It.IsAny<Entry>())).Returns(
                "/blog/archive/2006/04/01/titleofthepost.aspx");

            var writer = new CommentRssWriter(new StringWriter(), new List<FeedbackItem>(), entry, context.Object);

            Assert.IsTrue(entry.HasEntryName, "This entry should have an entry name.");

            string expected = @"<rss version=""2.0"" "
                              + @"xmlns:dc=""http://purl.org/dc/elements/1.1/"" "
                              + @"xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" "
                              + @"xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" "
                              + @"xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" "
                              + @"xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" "
                              + @"xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" + Environment.NewLine
                              + indent() + @"<channel>" + Environment.NewLine
                              + indent(2) + @"<title>title of the post</title>" + Environment.NewLine
                              + indent(2) + @"<link>http://localhost/blog/archive/2006/04/01/titleofthepost.aspx</link>" +
                              Environment.NewLine
                              + indent(2) + @"<description>Body of the post.</description>" + Environment.NewLine
                              + indent(2) + @"<language>en-US</language>" + Environment.NewLine
                              + indent(2) + @"<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                              + indent(2) + @"<generator>{0}</generator>" + Environment.NewLine
                              + indent(2) + @"<image>" + Environment.NewLine
                              + indent(3) + @"<title>title of the post</title>" + Environment.NewLine
                              + indent(3) + @"<url>http://localhost/images/RSS2Image.gif</url>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/blog/archive/2006/04/01/titleofthepost.aspx</link>" +
                              Environment.NewLine
                              + indent(3) + @"<width>77</width>" + Environment.NewLine
                              + indent(3) + @"<height>60</height>" + Environment.NewLine
                              + indent(2) + @"</image>" + Environment.NewLine
                              + indent(1) + @"</channel>" + Environment.NewLine
                              + @"</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            Assert.AreEqual(expected, writer.Xml);
        }

        /// <summary>
        /// Tests that a valid feed is produced even if a post has no comments.
        /// </summary>
        [Test]
        public void CommentRssWriterProducesValidFeed()
        {
            var blogInfo = new Blog();
            blogInfo.Host = "localhost";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.Title = "My Blog Rulz";
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication(blogInfo, "haacked", "title of the post",
                                                                           "Body of the post.");
            entry.EntryName = "titleofthepost";
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/02/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Id = 1001;

            var comment = new FeedbackItem(FeedbackType.Comment);
            comment.Id = 1002;
            comment.DateCreated =
                comment.DateModified = DateTime.ParseExact("2006/02/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            comment.Title = "re: titleofthepost";
            comment.ParentEntryName = entry.EntryName;
            comment.ParentDateCreated = entry.DateCreated;
            comment.Body = "<strong>I rule!</strong>";
            comment.Author = "Jane Schmane";
            comment.Email = "jane@example.com";
            comment.EntryId = entry.Id;

            var comments = new List<FeedbackItem>();
            comments.Add(comment);

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blogInfo, "/Subtext.Web/Whatever", "Subtext.Web", null);
            Mock<HttpContextBase> httpContext = Mock.Get(subtextContext.Object.RequestContext.HttpContext);
            httpContext.Setup(c => c.Request.ApplicationPath).Returns("/Subtext.Web");
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.FeedbackUrl(It.IsAny<FeedbackItem>())).Returns(
                "/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#" + comment.Id);
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns(
                "/Subtext.Web/archive/2006/02/01/titleofthepost.aspx");

            var writer = new CommentRssWriter(new StringWriter(), comments, entry, subtextContext.Object);

            Assert.IsTrue(entry.HasEntryName, "This entry should have an entry name.");

            string expected = @"<rss version=""2.0"" "
                              + @"xmlns:dc=""http://purl.org/dc/elements/1.1/"" "
                              + @"xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" "
                              + @"xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" "
                              + @"xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" "
                              + @"xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" "
                              + @"xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" + Environment.NewLine
                              + indent() + @"<channel>" + Environment.NewLine
                              + indent(2) + @"<title>title of the post</title>" + Environment.NewLine
                              + indent(2) +
                              @"<link>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx</link>" +
                              Environment.NewLine
                              + indent(2) + @"<description>Body of the post.</description>" + Environment.NewLine
                              + indent(2) + @"<language>en-US</language>" + Environment.NewLine
                              + indent(2) + @"<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                              + indent(2) + @"<generator>{0}</generator>" + Environment.NewLine
                              + indent(2) + @"<image>" + Environment.NewLine
                              + indent(3) + @"<title>title of the post</title>" + Environment.NewLine
                              + indent(3) + @"<url>http://localhost/Subtext.Web/images/RSS2Image.gif</url>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<link>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx</link>" +
                              Environment.NewLine
                              + indent(3) + @"<width>77</width>" + Environment.NewLine
                              + indent(3) + @"<height>60</height>" + Environment.NewLine
                              + indent(2) + @"</image>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>re: titleofthepost</title>" + Environment.NewLine
                              + indent(3) +
                              @"<link>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#1002</link>" +
                              Environment.NewLine
                              + indent(3) + @"<description>&lt;strong&gt;I rule!&lt;/strong&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Jane Schmane</dc:creator>" + Environment.NewLine
                              + indent(3) +
                              @"<guid>http://localhost/Subtext.Web/archive/2006/02/01/titleofthepost.aspx#1002</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Wed, 01 Feb 2006 08:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent() + @"</channel>" + Environment.NewLine
                              + @"</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            Assert.AreEqual(expected, writer.Xml);
        }

        [TearDown]
        public void TearDown()
        {
        }

        [Test]
        public void Ctor_WithNullEntryCollection_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => 
                new CommentRssWriter(new StringWriter(), null, new Entry(PostType.BlogPost),
                                 new Mock<ISubtextContext>().Object)
            );
        }

        [Test]
        public void Ctor_WithNullEntry_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => 
                new CommentRssWriter(new StringWriter(), new List<FeedbackItem>(), null, new Mock<ISubtextContext>().Object)
            );
        }
    }
}using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using MbUnit.Framework;
using Moq;
using Moq.Stub;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;

namespace UnitTests.Subtext.Framework.Syndication
{
    [TestFixture]
    public class OpmlHandlerTests
    {
        [Test]
        public void OpmlHandler_WithRequest_SetsContentTypeToXml()
        {
            //arrange
            var context = new Mock<ISubtextContext>();
            context.Stub(c => c.HttpContext.Response.ContentType);
            context.Setup(c => c.HttpContext.Response.Output).Returns(new StringWriter());
            context.SetupUrlHelper(new Mock<UrlHelper>());
            var writer = new Mock<OpmlWriter>();
            writer.Setup(w => w.Write(It.IsAny<IEnumerable<Blog>>(), It.IsAny<TextWriter>(), It.IsAny<UrlHelper>()));
            var handler = new OpmlHandler(context.Object, writer.Object);

            //act
            handler.ProcessRequest(new HostInfo());

            //assert
            Assert.AreEqual("text/xml", context.Object.HttpContext.Response.ContentType);
        }

        [Test]
        public void OpmlHandler_WithRequestForAggregateBlog_GetsGroupIdFromQueryString()
        {
            //arrange
            var queryString = new NameValueCollection {{"GroupID", "310"}};

            var context = new Mock<ISubtextContext>();
            context.Stub(c => c.HttpContext.Response.ContentType);
            context.Setup(c => c.HttpContext.Response.Output).Returns(new StringWriter());
            context.Setup(c => c.HttpContext.Request.QueryString).Returns(queryString);
            context.Setup(c => c.HttpContext.Request.Url).Returns(new Uri("http://example.com/"));
            context.SetupUrlHelper(new Mock<UrlHelper>());
            var repository = new Mock<ObjectProvider>();
            int? parsedGroupId = null;
            repository.Setup(r => r.GetBlogsByGroup("example.com", It.IsAny<int?>())).Callback<string, int?>(
                (host, groupId) => parsedGroupId = groupId);
            context.SetupRepository(repository);

            var writer = new Mock<OpmlWriter>();
            writer.Setup(w => w.Write(It.IsAny<IEnumerable<Blog>>(), It.IsAny<TextWriter>(), It.IsAny<UrlHelper>()));
            var handler = new OpmlHandler(context.Object, writer.Object);
            var hostInfo = new HostInfo {BlogAggregationEnabled = true, AggregateBlog = new Blog()};

            //act
            handler.ProcessRequest(hostInfo);

            //assert
            Assert.AreEqual(310, parsedGroupId.Value);
        }
    }
}using System;
using System.IO;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;

namespace UnitTests.Subtext.Framework.Syndication
{
    [TestFixture]
    public class OpmlWriterTests
    {
        [Test]
        public void OpmlWriter_WithTwoBlogs_RendersCorrectIndentedOpml()
        {
            //arrange
            var blogs = new[]
            {
                new Blog {Id = 1, Host = "example.com", Subfolder = "blog1", Title = "example blog"},
                new Blog {Id = 2, Host = "haacked.com", Title = "You've Been Haacked"}
            };
            var writer = new StringWriter();
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.RssUrl(blogs[0])).Returns(new Uri("http://example.com/blog1/Rss.aspx"));
            urlHelper.Setup(u => u.RssUrl(blogs[1])).Returns(new Uri("http://haacked.com/Rss.aspx"));
            var opml = new OpmlWriter();

            //act
            opml.Write(blogs, writer, urlHelper.Object);

            //assert
            const string expected =
                @"<opml version=""1.0"">
	<head>
		<title>A Subtext Community</title>
	</head>
	<body>
		<outline text=""A Subtext Community Feeds"">
			<outline type=""rss"" text=""example blog"" xmlUrl=""http://example.com/blog1/Rss.aspx"" />
			<outline type=""rss"" text=""You've Been Haacked"" xmlUrl=""http://haacked.com/Rss.aspx"" />
		</outline>
	</body>
</opml>";

            UnitTestHelper.AssertStringsEqualCharacterByCharacter(expected, writer.ToString());
            Assert.AreEqual(expected, writer.ToString());
        }
    }
}using System;
using System.Globalization;
using System.Text;
using System.Threading;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using Subtext.Framework.Web.HttpModules;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Syndication
{
    /// <summary>
    /// Tests of the RssHandler http handler class.
    /// </summary>
    [TestFixture]
    public class RssHandlerTests
    {
        /// <summary>
        /// Tests writing a simple RSS feed from some database entries.
        /// </summary>
        [Test]
        [RollBack]
        public void RssWriterProducesValidFeedFromDatabase()
        {
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            Config.CreateBlog("Test", "username", "password", hostName, string.Empty);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);

            Config.CurrentBlog.Email = "Subtext@example.com";
            Config.CurrentBlog.RFC3229DeltaEncodingEnabled = false;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Author",
                                                                           "testtitle",
                                                                           "testbody",
                                                                           null,
                                                                           NullValue.NullDateTime);
            entry.DateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.DateSyndicated = entry.DateCreated;
            UnitTestHelper.Create(entry); //persist to db.

            string rssOutput = null;
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/archive/2008/01/23/testtitle.aspx");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(1, itemNodes.Count, "expected one item nodes.");

            string urlFormat = "http://{0}/archive/2008/01/23/{1}.aspx";
            string expectedUrl = string.Format(urlFormat, hostName, "testtitle");

            Assert.AreEqual("testtitle", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the title.");
            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("link").InnerText,
                            "Not what we expected for the link.");
            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("guid").InnerText,
                            "Not what we expected for the link.");
            Assert.AreEqual(expectedUrl + "#feedback", itemNodes[0].SelectSingleNode("comments").InnerText,
                            "Not what we expected for the link.");
        }

        [Test]
        [RollBack]
        public void RssWriterProducesValidFeedWithEnclosureFromDatabase()
        {
            string hostName = UnitTestHelper.GenerateUniqueString() + ".com";
            Config.CreateBlog("Test", "username", "password", hostName, string.Empty);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            Config.CurrentBlog.Email = "Subtext@example.com";
            Config.CurrentBlog.RFC3229DeltaEncodingEnabled = false;

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("Author", "testtitle", "testbody", null,
                                                                           NullValue.NullDateTime);
            entry.DateCreated = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.DateSyndicated = entry.DateCreated;
            int entryId = UnitTestHelper.Create(entry); //persist to db.

            string enclosureUrl = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            string enclosureMimeType = "audio/mp3";
            long enclosureSize = 26707573;

            Enclosure enc =
                UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              enclosureUrl, enclosureMimeType, entryId, enclosureSize, true, true);
            Enclosures.Create(enc);

            var subtextContext = new Mock<ISubtextContext>();
            string rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/archive/2008/01/23/testtitle.aspx");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(1, itemNodes.Count, "expected one item nodes.");

            string urlFormat = "http://{0}/archive/2008/01/23/{1}.aspx";
            string expectedUrl = string.Format(urlFormat, hostName, "testtitle");

            Assert.AreEqual("testtitle", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the title.");
            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("link").InnerText,
                            "Not what we expected for the link.");
            Assert.AreEqual(expectedUrl, itemNodes[0].SelectSingleNode("guid").InnerText,
                            "Not what we expected for the guid.");
            Assert.AreEqual(enclosureUrl, itemNodes[0].SelectSingleNode("enclosure/@url").InnerText,
                            "Not what we expected for the enclosure url.");
            Assert.AreEqual(enclosureMimeType, itemNodes[0].SelectSingleNode("enclosure/@type").InnerText,
                            "Not what we expected for the enclosure mimetype.");
            Assert.AreEqual(enclosureSize.ToString(), itemNodes[0].SelectSingleNode("enclosure/@length").InnerText,
                            "Not what we expected for the enclosure size.");
            Assert.AreEqual(expectedUrl + "#feedback", itemNodes[0].SelectSingleNode("comments").InnerText,
                            "Not what we expected for the link.");
        }

        /// <summary>
        /// Tests that a simple regular RSS feed works.
        /// </summary>
        [Test]
        [RollBack]
        public void RssHandlerProducesValidRssFeed()
        {
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            Config.CreateBlog("", "username", "password", hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);

            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test",
                                                                                   "Body Rocking"));
            Thread.Sleep(50);
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test 2",
                                                                                   "Body Rocking Pt 2"));

            var subtextContext = new Mock<ISubtextContext>();
            string rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(2, itemNodes.Count, "expected two item nodes.");

            Assert.AreEqual("Title Test 2", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the second title.");
            Assert.AreEqual("Title Test", itemNodes[1].SelectSingleNode("title").InnerText,
                            "Not what we expected for the first title.");

            Assert.AreEqual("Body Rocking Pt 2",
                            itemNodes[0].SelectSingleNode("description").InnerText.Substring(0,
                                                                                             "Body Rocking pt 2".Length),
                            "Not what we expected for the second body.");
            Assert.AreEqual("Body Rocking",
                            itemNodes[1].SelectSingleNode("description").InnerText.Substring(0, "Body Rocking".Length),
                            "Not what we expected for the first body.");
        }

        /// <summary>
        /// Tests that items without a date syndicated are not syndicated.
        /// </summary>
        [Test]
        [RollBack]
        public void RssHandlerHandlesDateSyndicatedProperly()
        {
            // arrange
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            Config.CreateBlog("", "username", "password", hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);

            //Create two entries, but only include one in main syndication.
            Entry entryForSyndication = UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test",
                                                                                         "Body Rocking");
            UnitTestHelper.Create(entryForSyndication);
            Entry entryTwoForSyndication = UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test 2",
                                                                                            "Body Rocking Pt 2");
            int id = UnitTestHelper.Create(entryTwoForSyndication);
            Entry entry = UnitTestHelper.GetEntry(id, PostConfig.None, false);
            DateTime date = entry.DateSyndicated;
            entry.IncludeInMainSyndication = false;
            entry.Blog = new Blog() { Title = "MyTestBlog" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            UnitTestHelper.Update(entry, subtextContext.Object);
            Assert.AreEqual(date, entry.DateSyndicated);

            string rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(1, itemNodes.Count, "expected one item node.");

            Assert.AreEqual("Title Test", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the first title.");
            Assert.AreEqual("Body Rocking",
                            itemNodes[0].SelectSingleNode("description").InnerText.Substring(0, "Body Rocking".Length),
                            "Not what we expected for the first body.");

            //Include the second entry back in the syndication.
            entry.IncludeInMainSyndication = true;
            UnitTestHelper.Update(entry, subtextContext.Object);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "", "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(2, itemNodes.Count, "Expected two items in the feed now.");
        }

        /// <summary>
        /// Tests that the RssHandler orders items by DateSyndicated.
        /// </summary>
        [Test]
        [RollBack]
        public void RssHandlerSortsByDateSyndicated()
        {
            // Setup
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            Config.CreateBlog("", "username", "password", hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);

            //Create two entries.
            int firstId =
                UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test",
                                                                                       "Body Rocking"));
            Thread.Sleep(1000);
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test 2",
                                                                                   "Body Rocking Pt 2"));

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            string rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);

            //Expect the first item to be the second entry.
            Assert.AreEqual("Title Test 2", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the first title.");
            Assert.AreEqual("Title Test", itemNodes[1].SelectSingleNode("title").InnerText,
                            "Not what we expected for the second title.");

            //Remove first entry from syndication.
            Entry firstEntry = UnitTestHelper.GetEntry(firstId, PostConfig.None, false);
            firstEntry.IncludeInMainSyndication = false;
            firstEntry.Blog = new Blog() { Title = "MyTestBlog" };
            UnitTestHelper.Update(firstEntry, subtextContext.Object);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());

            rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(1, itemNodes.Count, "Here we were expeting only one item");

            Thread.Sleep(10);
            //Now add it back in changing the DateSyndicated
            firstEntry.IncludeInMainSyndication = true;
            firstEntry.DateSyndicated = Config.CurrentBlog.TimeZone.Now;
            UnitTestHelper.Update(firstEntry, subtextContext.Object);

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());

            rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);

            //Expect the second item to be the second entry.
            Assert.AreEqual(2, itemNodes.Count, "Here we were expeting 2 items");
            Assert.AreEqual("Title Test", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the first title.");
            Assert.AreEqual("Title Test 2", itemNodes[1].SelectSingleNode("title").InnerText,
                            "Not what we expected for the second title.");
        }

        [Test]
        [RollBack]
        public void RssHandlerHandlesDoesNotSyndicateFuturePosts()
        {
            // Setup
            string hostName = UnitTestHelper.GenerateUniqueHostname();
            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            Config.CreateBlog("", "username", "password", hostName, string.Empty);
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            Config.CurrentBlog.TimeZoneId = TimeZonesTest.HawaiiTimeZoneId;

            //Create two entries, but only include one in main syndication.
            UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test",
                                                                                   "Body Rocking", null,
                                                                                   NullValue.NullDateTime));
            Entry futureEntry = UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test 2",
                                                                                 "Body Rocking Pt 2", null,
                                                                                 NullValue.NullDateTime);
            futureEntry.DateSyndicated = Config.CurrentBlog.TimeZone.Now.AddMinutes(20);
            UnitTestHelper.Create(futureEntry);

            string rssOutput = null;
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            XmlNodeList itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(1, itemNodes.Count, "expected one item node.");

            Assert.AreEqual("Title Test", itemNodes[0].SelectSingleNode("title").InnerText,
                            "Not what we expected for the first title.");
            Assert.AreEqual("Body Rocking",
                            itemNodes[0].SelectSingleNode("description").InnerText.Substring(0, "Body Rocking".Length),
                            "Not what we expected for the first body.");

            Config.CurrentBlog.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostName, string.Empty);
            subtextContext = new Mock<ISubtextContext>();
            rssOutput = null;
            subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever");

            itemNodes = GetRssHandlerItemNodes(subtextContext.Object, ref rssOutput);
            Assert.AreEqual(2, itemNodes.Count, "Expected two items in the feed now.");
        }

        private static XmlNodeList GetRssHandlerItemNodes(ISubtextContext context, ref string rssOutput)
        {
            var handler = new RssHandler(context);
            handler.ProcessRequest();
            var doc = new XmlDocument();
            doc.LoadXml(rssOutput);
            return doc.SelectNodes("/rss/channel/item");
        }

        private static XmlNodeList GetRssHandlerItemNodes(ISubtextContext context, StringBuilder sb)
        {
            string output = sb.ToString();
            return GetRssHandlerItemNodes(context, ref output);
        }

        /// <summary>
        /// Tests that sending a Gzip compressed RSS Feed sends the feed 
        /// properly compressed.  USed the RSS Bandit decompress code 
        /// to decompress the feed and test it.
        /// </summary>
        [Test]
        [RollBack]
        [Ignore("Need to review")]
        public void TestCompressedFeedWorks()
        {
            //string hostName = UnitTestHelper.GenerateUniqueHostname();
            //StringBuilder sb = new StringBuilder();
            //TextWriter output = new StringWriter(sb);

            //SimulatedHttpRequest workerRequest = UnitTestHelper.SetHttpContextWithBlogRequest(hostName, "", "", "", output);
            //workerRequest.Headers.Add("Accept-Encoding", "gzip");
            //Config.CreateBlog("", "username", "password", hostName, string.Empty);
            //Config.CurrentBlog.UseSyndicationCompression = true;

            //UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test", "Body Rocking"));
            //Thread.Sleep(50);
            //UnitTestHelper.Create(UnitTestHelper.CreateEntryInstanceForSyndication("Haacked", "Title Test 2", "Body Rocking Pt 2"));

            //RssHandler handler = new RssHandler();
            //Assert.IsNotNull(HttpContext.Current.Request.Headers, "Headers collection is null! Not Good.");
            //var subtextContext = new Mock<ISubtextContext>();
            //string rssOutput = null;
            //subtextContext.FakeSyndicationContext(Config.CurrentBlog, "/", s => rssOutput = s);
            //handler.ProcessRequest(subtextContext.Object);

            ////I'm cheating here!
            //MethodInfo method = typeof(HttpResponse).GetMethod("FilterOutput", BindingFlags.NonPublic | BindingFlags.Instance);
            //method.Invoke(HttpContext.Current.Response, new object[] {});

            //MemoryStream stream = new MemoryStream(Encoding.Default.GetBytes(sb.ToString()));
            //Stream deflated = UnitTestHelper.GetDeflatedResponse("gzip", stream);
            //using(StreamReader reader = new StreamReader(deflated))
            //{
            //    rssOutput = reader.ReadToEnd();
            //}

            //XmlDocument doc = new XmlDocument();
            //doc.LoadXml(rssOutput);

            //XmlNodeList itemNodes = doc.SelectNodes("/rss/channel/item");
            //Assert.AreEqual(2, itemNodes.Count, "expected two item nodes.");

            //Assert.AreEqual("Title Test 2", itemNodes[0].SelectSingleNode("title").InnerText, "Not what we expected for the second title.");
            //Assert.AreEqual("Title Test", itemNodes[1].SelectSingleNode("title").InnerText, "Not what we expected for the first title.");

            //Assert.AreEqual("Body Rocking Pt 2", itemNodes[0].SelectSingleNode("description").InnerText.Substring(0, "Body Rocking pt 2".Length), "Not what we expected for the second body.");
            //Assert.AreEqual("Body Rocking", itemNodes[1].SelectSingleNode("description").InnerText.Substring(0, "Body Rocking".Length), "Not what we expected for the first body.");
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Routing;
using Subtext.Framework.Syndication;
using Subtext.Framework.Web.HttpModules;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Syndication
{
    /// <summary>
    /// Unit tests for the RSSWriter classes.
    /// </summary>
    [TestFixture]
    public class RssWriterTests : SyndicationTestBase
    {
        [RowTest]
        [Row("Subtext.Web", "", "http://localhost/Subtext.Web/images/RSS2Image.gif")]
        [Row("Subtext.Web", "blog", "http://localhost/Subtext.Web/images/RSS2Image.gif")]
        [Row("", "", "http://localhost/images/RSS2Image.gif")]
        [Row("", "blog", "http://localhost/images/RSS2Image.gif")]
        [RollBack]
        public void RssImageUrlConcatenatedProperly(string application, string subfolder, string expected)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", subfolder, application);
            var blogInfo = new Blog();
            BlogRequest.Current.Blog = blogInfo;
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = subfolder;
            blogInfo.Title = "My Blog Is Better Than Yours";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blogInfo, "/", application, null);
            Mock<HttpContextBase> httpContext = Mock.Get(subtextContext.Object.RequestContext.HttpContext);
            httpContext.Setup(h => h.Request.ApplicationPath).Returns(application);

            var writer = new RssWriter(new StringWriter(), new List<Entry>(), DateTime.Now, false, subtextContext.Object);
            Uri rssImageUrl = writer.GetRssImage();
            Assert.AreEqual(expected, rssImageUrl.ToString(), "not the expected url.");
        }

        /// <summary>
        /// Tests writing a simple RSS feed.
        /// </summary>
        [Test]
        [RollBack]
        public void RssWriterProducesValidFeed()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "Subtext.Web");

            var blogInfo = new Blog();
            BlogRequest.Current.Blog = blogInfo;
            blogInfo.Host = "localhost";
            blogInfo.Title = "My Blog Is Better Than Yours";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;
            blogInfo.ShowEmailAddressInRss = true;
            blogInfo.TrackbacksEnabled = true;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);

            var entries = new List<Entry>(CreateSomeEntries());
            entries[0].Categories.AddRange(new[] {"Category1", "Category2"});
            entries[0].Email = "nobody@example.com";
            entries[2].Categories.Add("Category 3");

            var enc = new Enclosure();

            enc.Url = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            enc.Title = "<Digital Photography Explained (for Geeks) with Aaron Hockley/>";
            enc.Size = 26707573;
            enc.MimeType = "audio/mp3";
            enc.AddToFeed = true;
            entries[2].Enclosure = enc;

            var enc1 = new Enclosure();

            enc1.Url = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            enc1.Title = "<Digital Photography Explained (for Geeks) with Aaron Hockley/>";
            enc1.Size = 26707573;
            enc1.MimeType = "audio/mp3";
            enc1.AddToFeed = false;

            entries[3].Enclosure = enc1;

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blogInfo, "/", "Subtext.Web", null);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/Subtext.Web/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns<Entry>(
                e => "/Subtext.Web/whatever/" + e.Id + ".aspx");

            var writer = new RssWriter(new StringWriter(), entries, NullValue.NullDateTime, false, subtextContext.Object);

            string expected = @"<rss version=""2.0"" "
                              + @"xmlns:dc=""http://purl.org/dc/elements/1.1/"" "
                              + @"xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" "
                              + @"xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" "
                              + @"xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" "
                              + @"xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" "
                              + @"xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" + Environment.NewLine
                              + indent() + @"<channel>" + Environment.NewLine
                              + indent(2) + @"<title>My Blog Is Better Than Yours</title>" + Environment.NewLine
                              + indent(2) + @"<link>http://localhost/Subtext.Web/Default.aspx</link>" +
                              Environment.NewLine
                              + indent(2) + @"<description />" + Environment.NewLine
                              + indent(2) + @"<language>en-US</language>" + Environment.NewLine
                              + indent(2) + @"<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                              + indent(2) + @"<managingEditor>Subtext@example.com</managingEditor>" +
                              Environment.NewLine
                              + indent(2) + @"<generator>{0}</generator>" + Environment.NewLine
                              + indent(2) + @"<image>" + Environment.NewLine
                              + indent(3) + @"<title>My Blog Is Better Than Yours</title>" + Environment.NewLine
                              + indent(3) + @"<url>http://localhost/Subtext.Web/images/RSS2Image.gif</url>" +
                              Environment.NewLine
                              + indent(3) + @"<link>http://localhost/Subtext.Web/Default.aspx</link>" +
                              Environment.NewLine
                              + indent(3) + @"<width>77</width>" + Environment.NewLine
                              + indent(3) + @"<height>60</height>" + Environment.NewLine
                              + indent(2) + @"</image>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>Title of 1001.</title>" + Environment.NewLine
                              + indent(3) + @"<category>Category1</category>" + Environment.NewLine
                              + indent(3) + @"<category>Category2</category>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/Subtext.Web/whatever/1001.aspx</link>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<description>Body of 1001&lt;img src=""http://localhost/Subtext.Web/aggbug/1001.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                              + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever/1001.aspx</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Sun, 23 Feb 1975 08:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(3) +
                              @"<comments>http://localhost/Subtext.Web/whatever/1001.aspx#feedback</comments>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1001.aspx</wfw:commentRss>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<trackback:ping>http://localhost/Subtext.Web/services/trackbacks/1001.aspx</trackback:ping>" +
                              Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>Title of 1002.</title>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/Subtext.Web/whatever/1002.aspx</link>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<description>Body of 1002&lt;img src=""http://localhost/Subtext.Web/aggbug/1002.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                              + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever/1002.aspx</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Fri, 25 Jun 1976 07:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(3) +
                              @"<comments>http://localhost/Subtext.Web/whatever/1002.aspx#feedback</comments>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1002.aspx</wfw:commentRss>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<trackback:ping>http://localhost/Subtext.Web/services/trackbacks/1002.aspx</trackback:ping>" +
                              Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>Title of 1003.</title>" + Environment.NewLine
                              + indent(3) + @"<category>Category 3</category>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/Subtext.Web/whatever/1003.aspx</link>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<description>Body of 1003&lt;img src=""http://localhost/Subtext.Web/aggbug/1003.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                              + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever/1003.aspx</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Tue, 16 Oct 1979 07:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(3) +
                              @"<comments>http://localhost/Subtext.Web/whatever/1003.aspx#feedback</comments>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1003.aspx</wfw:commentRss>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<trackback:ping>http://localhost/Subtext.Web/services/trackbacks/1003.aspx</trackback:ping>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<enclosure url=""http://perseus.franklins.net/hanselminutes_0107.mp3"" length=""26707573"" type=""audio/mp3"" />" +
                              Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent(2) + @"<item>" + Environment.NewLine
                              + indent(3) + @"<title>Title of 1004.</title>" + Environment.NewLine
                              + indent(3) + @"<link>http://localhost/Subtext.Web/whatever/1004.aspx</link>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<description>Body of 1004&lt;img src=""http://localhost/Subtext.Web/aggbug/1004.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                              Environment.NewLine
                              + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                              + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever/1004.aspx</guid>" +
                              Environment.NewLine
                              + indent(3) + @"<pubDate>Mon, 14 Jul 2003 07:00:00 GMT</pubDate>" + Environment.NewLine
                              + indent(3) +
                              @"<comments>http://localhost/Subtext.Web/whatever/1004.aspx#feedback</comments>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1004.aspx</wfw:commentRss>" +
                              Environment.NewLine
                              + indent(3) +
                              @"<trackback:ping>http://localhost/Subtext.Web/services/trackbacks/1004.aspx</trackback:ping>" +
                              Environment.NewLine
                              + indent(2) + @"</item>" + Environment.NewLine
                              + indent() + @"</channel>" + Environment.NewLine
                              + @"</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            UnitTestHelper.AssertStringsEqualCharacterByCharacter(expected, writer.Xml);
        }

        /// <summary>
        /// Makes sure the RSS Writer can write the delta of a feed based 
        /// on the RFC3229 with feeds 
        /// <see href="http://bobwyman.pubsub.com/main/2004/09/using_rfc3229_w.html"/>.
        /// </summary>
        [Test]
        [RollBack]
        public void RssWriterHandlesRFC3229DeltaEncoding()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "Subtext.Web");

            var blogInfo = new Blog();
            BlogRequest.Current.Blog = blogInfo;
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = "";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = true;
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);

            var entries = new List<Entry>(CreateSomeEntriesDescending());
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blogInfo, "/", "Subtext.Web", null);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/Subtext.Web/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/Subtext.Web/whatever");

            // Tell the write we already received 1002 published 6/25/1976.
            var writer = new RssWriter(new StringWriter(), entries,
                                       DateTime.ParseExact("06/25/1976", "MM/dd/yyyy", CultureInfo.InvariantCulture),
                                       true, subtextContext.Object);

            // We only expect 1003 and 1004
            string expected =
                @"<rss version=""2.0"" xmlns:dc=""http://purl.org/dc/elements/1.1/"" xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" +
                Environment.NewLine
                + indent() + "<channel>" + Environment.NewLine
                + indent(2) + "<title />" + Environment.NewLine
                + indent(2) + "<link>http://localhost/Subtext.Web/Default.aspx</link>" + Environment.NewLine
                + indent(2) + "<description />" + Environment.NewLine
                + indent(2) + "<language>en-US</language>" + Environment.NewLine
                + indent(2) + "<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                + indent(2) + "<generator>{0}</generator>" + Environment.NewLine
                + indent(2) + "<image>" + Environment.NewLine
                + indent(3) + "<title />" + Environment.NewLine
                + indent(3) + "<url>http://localhost/Subtext.Web/images/RSS2Image.gif</url>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/Default.aspx</link>" + Environment.NewLine
                + indent(3) + "<width>77</width>" + Environment.NewLine
                + indent(3) + "<height>60</height>" + Environment.NewLine
                + indent(2) + "</image>" + Environment.NewLine
                + indent(2) + @"<item>" + Environment.NewLine
                + indent(3) + @"<title>Title of 1004.</title>" + Environment.NewLine
                + indent(3) + @"<link>http://localhost/Subtext.Web/whatever</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1004&lt;img src=""http://localhost/Subtext.Web/aggbug/1004.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever</guid>" + Environment.NewLine
                + indent(3) + @"<pubDate>Mon, 14 Jul 2003 07:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + @"<comments>http://localhost/Subtext.Web/whatever#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1004.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + @"</item>" + Environment.NewLine
                + indent(2) + @"<item>" + Environment.NewLine
                + indent(3) + "<title>Title of 1003.</title>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/whatever</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1003&lt;img src=""http://localhost/Subtext.Web/aggbug/1003.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + @"<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + @"<guid>http://localhost/Subtext.Web/whatever</guid>" + Environment.NewLine
                + indent(3) + @"<pubDate>Tue, 16 Oct 1979 07:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + @"<comments>http://localhost/Subtext.Web/whatever#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                @"<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1003.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + "</item>" + Environment.NewLine
                + indent() + "</channel>" + Environment.NewLine
                + "</rss>";

            expected = string.Format(expected, VersionInfo.VersionDisplayText);

            Assert.AreEqual(expected, writer.Xml);

            Assert.AreEqual(DateTime.ParseExact("06/25/1976", "MM/dd/yyyy", CultureInfo.InvariantCulture),
                            writer.DateLastViewedFeedItemPublished,
                            "The Item ID Last Viewed (according to If-None-Since is wrong.");
            Assert.AreEqual(DateTime.ParseExact("07/14/2003", "MM/dd/yyyy", CultureInfo.InvariantCulture),
                            writer.LatestPublishDate, "The Latest Feed Item ID sent to the client is wrong.");
        }

        /// <summary>
        /// Tests writing a simple RSS feed.
        /// </summary>
        [Test]
        [RollBack]
        public void RssWriterSendsWholeFeedWhenRFC3229Disabled()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "", "Subtext.Web");

            var blogInfo = new Blog();
            BlogRequest.Current.Blog = blogInfo;
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = "";
            blogInfo.Email = "Subtext@example.com";
            blogInfo.RFC3229DeltaEncodingEnabled = false;
            blogInfo.TimeZoneId = TimeZonesTest.PacificTimeZoneId;

            HttpContext.Current.Items.Add("BlogInfo-", blogInfo);

            var entries = new List<Entry>(CreateSomeEntriesDescending());
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.FakeSyndicationContext(blogInfo, "/Subtext.Web/", "Subtext.Web", null);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/Subtext.Web/");
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns<Entry>(e => "/Subtext.Web/whatever/" + e.Id);

            var writer = new RssWriter(new StringWriter(), entries,
                                       DateTime.ParseExact("07/14/2003", "MM/dd/yyyy", CultureInfo.InvariantCulture),
                                       false, subtextContext.Object);

            string expected =
                @"<rss version=""2.0"" xmlns:dc=""http://purl.org/dc/elements/1.1/"" xmlns:trackback=""http://madskills.com/public/xml/rss/module/trackback/"" xmlns:wfw=""http://wellformedweb.org/CommentAPI/"" xmlns:slash=""http://purl.org/rss/1.0/modules/slash/"" xmlns:copyright=""http://blogs.law.harvard.edu/tech/rss"" xmlns:image=""http://purl.org/rss/1.0/modules/image/"">" +
                Environment.NewLine
                + indent() + "<channel>" + Environment.NewLine
                + indent(2) + "<title />" + Environment.NewLine
                + indent(2) + "<link>http://localhost/Subtext.Web/Default.aspx</link>" + Environment.NewLine
                + indent(2) + "<description />" + Environment.NewLine
                + indent(2) + "<language>en-US</language>" + Environment.NewLine
                + indent(2) + "<copyright>Subtext Weblog</copyright>" + Environment.NewLine
                + indent(2) + "<generator>{0}</generator>" + Environment.NewLine
                + indent(2) + "<image>" + Environment.NewLine
                + indent(3) + "<title />" + Environment.NewLine
                + indent(3) + "<url>http://localhost/Subtext.Web/images/RSS2Image.gif</url>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/Default.aspx</link>" + Environment.NewLine
                + indent(3) + "<width>77</width>" + Environment.NewLine
                + indent(3) + "<height>60</height>" + Environment.NewLine
                + indent(2) + "</image>" + Environment.NewLine
                + indent(2) + @"<item>" + Environment.NewLine
                + indent(3) + "<title>Title of 1004.</title>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/whatever/1004</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1004&lt;img src=""http://localhost/Subtext.Web/aggbug/1004.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + "<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + "<guid>http://localhost/Subtext.Web/whatever/1004</guid>" + Environment.NewLine
                + indent(3) + "<pubDate>Mon, 14 Jul 2003 07:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + "<comments>http://localhost/Subtext.Web/whatever/1004#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                "<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1004.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + "</item>" + Environment.NewLine
                + indent(2) + "<item>" + Environment.NewLine
                + indent(3) + "<title>Title of 1003.</title>" + Environment.NewLine
                + indent(3) + @"<link>http://localhost/Subtext.Web/whatever/1003</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1003&lt;img src=""http://localhost/Subtext.Web/aggbug/1003.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + "<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + "<guid>http://localhost/Subtext.Web/whatever/1003</guid>" + Environment.NewLine
                + indent(3) + "<pubDate>Tue, 16 Oct 1979 07:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + "<comments>http://localhost/Subtext.Web/whatever/1003#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                "<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1003.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + "</item>" + Environment.NewLine
                + indent(2) + @"<item>" + Environment.NewLine
                + indent(3) + "<title>Title of 1002.</title>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/whatever/1002</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1002&lt;img src=""http://localhost/Subtext.Web/aggbug/1002.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + "<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + "<guid>http://localhost/Subtext.Web/whatever/1002</guid>" + Environment.NewLine
                + indent(3) + "<pubDate>Fri, 25 Jun 1976 07:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + "<comments>http://localhost/Subtext.Web/whatever/1002#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                "<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1002.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + "</item>" + Environment.NewLine
                + indent(2) + @"<item>" + Environment.NewLine
                + indent(3) + "<title>Title of 1001.</title>" + Environment.NewLine
                + indent(3) + "<link>http://localhost/Subtext.Web/whatever/1001</link>" + Environment.NewLine
                + indent(3) +
                @"<description>Body of 1001&lt;img src=""http://localhost/Subtext.Web/aggbug/1001.aspx"" width=""1"" height=""1"" /&gt;</description>" +
                Environment.NewLine
                + indent(3) + "<dc:creator>Phil Haack</dc:creator>" + Environment.NewLine
                + indent(3) + "<guid>http://localhost/Subtext.Web/whatever/1001</guid>" + Environment.NewLine
                + indent(3) + "<pubDate>Sun, 23 Feb 1975 08:00:00 GMT</pubDate>" + Environment.NewLine
                + indent(3) + "<comments>http://localhost/Subtext.Web/whatever/1001#feedback</comments>" +
                Environment.NewLine
                + indent(3) +
                "<wfw:commentRss>http://localhost/Subtext.Web/comments/commentRss/1001.aspx</wfw:commentRss>" +
                Environment.NewLine
                + indent(2) + "</item>" + Environment.NewLine
                + indent() + "</channel>" + Environment.NewLine
                + "</rss>";
            expected = string.Format(expected, VersionInfo.VersionDisplayText);
            UnitTestHelper.AssertStringsEqualCharacterByCharacter(expected, writer.Xml);
        }

        Entry[] CreateSomeEntries()
        {
            return new[]
            {
                CreateEntry(1001, "Title of 1001.", "Body of 1001",
                            DateTime.ParseExact("01/23/1975", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1002, "Title of 1002.", "Body of 1002",
                            DateTime.ParseExact("05/25/1976", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1003, "Title of 1003.", "Body of 1003",
                            DateTime.ParseExact("09/16/1979", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1004, "Title of 1004.", "Body of 1004",
                            DateTime.ParseExact("06/14/2003", "MM/dd/yyyy", CultureInfo.InvariantCulture))
            };
        }

        Entry[] CreateSomeEntriesDescending()
        {
            return new[]
            {
                CreateEntry(1004, "Title of 1004.", "Body of 1004",
                            DateTime.ParseExact("06/14/2003", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1003, "Title of 1003.", "Body of 1003",
                            DateTime.ParseExact("09/16/1979", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1002, "Title of 1002.", "Body of 1002",
                            DateTime.ParseExact("05/25/1976", "MM/dd/yyyy", CultureInfo.InvariantCulture))
                ,
                CreateEntry(1001, "Title of 1001.", "Body of 1001",
                            DateTime.ParseExact("01/23/1975", "MM/dd/yyyy", CultureInfo.InvariantCulture))
            };
        }

        static Entry CreateEntry(int id, string title, string body, DateTime dateCreated)
        {
            var entry = new Entry(PostType.BlogPost)
                            {
                                DateCreated = dateCreated,
                                Title = title,
                                Author = "Phil Haack",
                                Body = body,
                                Id = id
                            };
            entry.DateModified = entry.DateCreated;
            entry.DateSyndicated = entry.DateCreated.AddMonths(1);

            return entry;
        }

        /// <summary>
        /// Sets the up test fixture.  This is called once for 
        /// this test fixture before all the tests run.
        /// </summary>
        [TestFixtureSetUp]
        public void SetUpTestFixture()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }

        [SetUp]
        public void SetUp()
        {
        }

        [TearDown]
        public void TearDown()
        {
        }
    }
}namespace UnitTests.Subtext.Framework.Syndication
{
    public class SyndicationTestBase
    {
        protected string indent()
        {
            return "    ";
        }

        protected string indent(int count)
        {
            string returnval = string.Empty;
            for(int i = 0; i < count; i++)
            {
                returnval += indent();
            }
            return returnval;
        }
    }
}using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using System;

namespace UnitTests.Subtext.Framework
{
    [TestFixture]
    public class TagsTests
    {
        [RowTest]
        [Row(-1, 1, 1)]
        [Row(0, 1, 2)]
        [Row(.25, 1, 3)]
        [Row(.49, 1, 4)]
        [Row(.9, 1, 5)]
        [Row(1.9, 1, 6)]
        [Row(2, 1, 7)]
        public void CanComputeWeight(double factor, double stdDev, int expected)
        {
            Assert.AreEqual(expected, Tags.ComputeWeight(factor, stdDev));
        }

        [Test]
        public void GetTopTagsThrowsArgumentExceptionForNegativeValues()
        {
            UnitTestHelper.AssertThrows<ArgumentException>(() =>ObjectProvider.Instance().GetMostUsedTags(-1));
        }

        [Test]
        [RollBack2]
        public void GetGetTopTags()
        {
            UnitTestHelper.SetupBlog();

            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "the title for this post", "test");
            UnitTestHelper.Create(entry);
            Tags.SetTagsOnEntry(entry.Id, new List<string>(new[] {"tag1", "tag2", "tag3"}));

            entry = UnitTestHelper.CreateEntryInstanceForSyndication("test", "the title for this post",
                                                                     @"<a href=""http://blah/tag3/"" rel=""tag"">test</a>");
            UnitTestHelper.Create(entry);

            ICollection<Tag> topTags = ObjectProvider.Instance().GetMostUsedTags(1);
            Assert.AreEqual("tag3", topTags.First().TagName);
        }
    }
}using System;
using System.Collections.Specialized;
using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    /// <summary>
    /// Unit tests of the ConvertToAllowedHtml method and 
    /// just that method (plus its overrides).
    /// </summary>
    [TestFixture]
    public class ConvertToAllowedHtmlTests
    {
        [Test]
        public void Ctor_WithNullText_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                                                             HtmlHelper.ConvertToAllowedHtml(null));
        }

        [RowTest]
        [Row("", "")]
        [Row("How now brown cow.", "How now brown cow.")]
        [Row("How now brown cow.", "How now brown cow.")]
        [Row("&", "&amp;")]
        [Row("<", "&lt;")]
        [Row(">", "&gt;")]
        [Row("\r\r\n", "<br />")]
        public void StripsDefaultHtmlWhenNoAllowedTagsSpecified(string text, string expected)
        {
            Assert.AreEqual(expected, HtmlHelper.ConvertToAllowedHtml(null, text));
        }

        [RowTest]
        [Row("", "")]
        [Row("<", "&lt;")]
        [Row(">", "&gt;")]
        [Row("<>", "&lt;&gt;")]
        [Row("How now brown cow.", "How now brown cow.")]
        [Row("How <strong>now</strong> brown cow.", "How <strong>now</strong> brown cow.")]
        [Row("How <strong>now</strong> brown <cow.", "How <strong>now</strong> brown &lt;cow.")]
        [Row("<How <strong>now</strong>", "&lt;How <strong>now</strong>")]
        [Row("Text Before <a href=\"test\">a</a> Text After", "Text Before <a href=\"test\">a</a> Text After")]
        [Row("<a href=\"test\">a</a>", "<a href=\"test\">a</a>")]
        [Row("<a href=\"test\" rel=\"notallowed\">a</a>", "<a href=\"test\">a</a>")]
        [Row("<a title=\">\">a</a>", "<a title=\"&gt;\">a</a>")]
        [Row("<A TITLE=\">\">a</a>", "<a title=\"&gt;\">a</a>")]
        [Row("<a\r\ntitle=\">\">a</a>", "<a title=\"&gt;\">a</a>")]
        [Row("<a href='test'></a>", "<a href=\"test\"></a>")]
        [Row("<a href=test></a>", "<a href=\"test\"></a>")]
        [Row("<a href=test title=\"cool\"></a>", "<a href=\"test\" title=\"cool\"></a>")]
        [Row("<a href=test title=cool></a>", "<a href=\"test\" title=\"cool\"></a>")]
        [Row("<a title></a>", "<a></a>")]
        [Row("<a title href=\"test\"></a>", "<a href=\"test\"></a>")]
        [Row("<a title href=\"test\" title></a>", "<a href=\"test\"></a>")]
        [Row("<a title href=\"test\" title title title></a>", "<a href=\"test\"></a>")]
        [Row("<a title=\"one\" title=\"two\"></a>", "<a title=\"one,two\"></a>")]
        [Row("<a title=\"one\" title=\"two\"></a>", "<a title=\"one,two\"></a>")]
        [Row("This is a comment <em>That forgets to close the <em> tag.",
            "This is a comment <em>That forgets to close the <em> tag.</em></em>")]
        public void StripsNonAllowedHtml(string text, string expected)
        {
            var allowedTags = new NameValueCollection(StringComparer.InvariantCultureIgnoreCase);
            allowedTags.Add("a", "href,title");
            allowedTags.Add("strong", "");
            allowedTags.Add("em", "");
            UnitTestHelper.AssertStringsEqualCharacterByCharacter(expected,
                                                                  HtmlHelper.ConvertToAllowedHtml(allowedTags, text));
        }

        [Test]
        public void ClosesOpenTags()
        {
            var allowedTags = new NameValueCollection(StringComparer.InvariantCultureIgnoreCase);
            allowedTags.Add("u", "");
            string result = HtmlHelper.ConvertToAllowedHtml(allowedTags,
                                                            "This is <u>Underlined. But I forgot to close it.");
            Assert.AreEqual("This is <u>Underlined. But I forgot to close it.</u>", result,
                            "Expected that the tag would get closed");
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    [TestFixture]
    public class FormatExpressionTests
    {
        [Test]
        public void Format_WithExpressionReturningNull_ReturnsEmptyString()
        {
            //arrange
            var expr = new FormatExpression("{foo}");

            //assert
            Assert.AreEqual(string.Empty, expr.Eval(new {foo = (string)null}));
        }

        [Test]
        public void Format_WithoutColon_ReadsWholeExpression()
        {
            //arrange
            var expr = new FormatExpression("{foo}");

            //assert
            Assert.AreEqual("foo", expr.Expression);
        }

        [Test]
        public void Format_WithColon_ParsesoutFormat()
        {
            //arrange
            var expr = new FormatExpression("{foo:#.##}");

            //assert
            Assert.AreEqual("#.##", expr.Format);
        }

        [Test]
        public void Eval_WithNamedExpression_EvalsPropertyOfExpression()
        {
            //arrange
            var expr = new FormatExpression("{foo}");

            //act
            string result = expr.Eval(new {foo = 123});

            //assert
            Assert.AreEqual("123", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Eval_WithNamedExpressionAndFormat_EvalsPropertyOfExpression()
        {
            //arrange
            var expr = new FormatExpression("{foo:#.##}");

            //act
            string result = expr.Eval(new {foo = 1.23456});

            //assert
            float expected = 1.23f;
            Assert.AreEqual(expected.ToString(), result);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI.WebControls;
using MbUnit.Framework;
using Subtext.Framework;
using Subtext.Framework.Text;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Text
{
    /// <summary>
    /// Tests of the <see cref="HtmlHelper"/> class.
    /// </summary>
    [TestFixture]
    public class HtmlHelperTests
    {
        [RowTest]
        [Row("", 10, "")]
        [Row("http://example.com/", 50, "http://example.com/")]
        [Row("http://example.com/testxtest.aspx", 25, "example.com")]
        [Row("http://example.com/", 10, "example...")]
        [Row("http://example.com/", 11, "example.com")]
        [Row("http://example.com", 11, "example.com")]
        [Row("http://example.com", 5, "ex...")]
        public void CanShortenUrl(string url, int max, string expected)
        {
            Assert.AreEqual(expected, url.ShortenUrl(max));
        }

        [Test]
        public void ShortenUrl_WithNullUrl_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => ((string)null).ShortenUrl(10) );
        }

        [Test]
        public void ShortenUrl_WithTwoSegmentsEndingWithFileName_OnlyCompressesMiddleSegment()
        {
            const string url = "http://example.com/test/test.aspx";

            string shorty = url.ShortenUrl(25);

            Assert.AreEqual("example.com/.../test.aspx", shorty);
        }

        [Test]
        public void ShortenUrl_WithTwoSegmentsAndTrailingSlash_OnlyCompressesMiddleSegment()
        {
            const string url = "http://example.com/test/testagain/";

            string shorty = url.ShortenUrl(26);

            Assert.AreEqual("example.com/.../testagain/", shorty);
        }

        [Test]
        public void ShortenUrl_WithMaxLessThanFive_ThrowsArgumentOutOfRangeException()
        {
            // arrange
            const string url = "http://subtextproject.com/";

            // act, assert
            UnitTestHelper.AssertThrows<ArgumentOutOfRangeException>(() => url.ShortenUrl(4));
        }

        [Test]
        public void ShortenUrl_WithQueryParamsMakingUrlTooLong_RemovesQueryParams()
        {
            // arrange
            const string url = "http://do.com/?foo=bar";

            // act
            string shorty = url.ShortenUrl(6);

            // assert
            Assert.AreEqual("do.com", shorty);
        }

        [RowTest]
        [Row("http://example.com", "www.example.com", "http://www.example.com")]
        [Row("http://example.com", "example.com", "http://example.com")]
        [Row("http://example.com/", "example.com", "http://example.com/")]
        [Row("http://example.com/example.com/", "example.com", "http://example.com/example.com/")]
        [Row("http://www.example.com", "example.com", "http://example.com")]
        [Row("http://example.com/", "www.example.com", "http://www.example.com/")]
        [Row("http://example.com:8080/", "www.example.com", "http://www.example.com:8080/")]
        [Row("http://example.com:8080/example.com/blah.html", "www.example.com",
            "http://www.example.com:8080/example.com/blah.html")]
        [Row("http://example.com/example.com/blah.html", "www.example.com",
            "http://www.example.com/example.com/blah.html")]
        [Row("http://example.com/example.com/", "www.example.com", "http://www.example.com/example.com/")]
        public void CanReplaceHostInUrl(string url, string host, string expected)
        {
            Assert.AreEqual(expected, HtmlHelper.ReplaceHost(url, host));
        }

        [Test]
        public void AppendNullClassThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => HtmlHelper.AppendCssClass(new TextBox(), null));
        }

        [Test]
        public void AppendClassToNullControlThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => HtmlHelper.AppendCssClass(null, "blah"));
        }

        [Test]
        public void RemoveNullClassThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => HtmlHelper.RemoveCssClass(new TextBox(), null));
        }

        [Test]
        public void RemoveClassFromNullControlThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => HtmlHelper.RemoveCssClass(null, "blah"));
        }

        [Test]
        public void RemoveClassFromControlWithNoClasHasNoEffect()
        {
            var textbox = new TextBox();
            HtmlHelper.RemoveCssClass(textbox, "blah");
            Assert.AreEqual(string.Empty, textbox.CssClass);
        }

        [Test]
        public void CanAppendCssClassToControl()
        {
            var textbox = new TextBox();
            HtmlHelper.AppendCssClass(textbox, "testclass");
            Assert.AreEqual("testclass", textbox.CssClass);

            HtmlHelper.AppendCssClass(textbox, "testclass");
            Assert.AreEqual("testclass", textbox.CssClass);

            HtmlHelper.AppendCssClass(textbox, "blah");
            Assert.AreEqual("testclass blah", textbox.CssClass);

            HtmlHelper.AppendCssClass(textbox, "BLAH");
            Assert.AreEqual("testclass blah BLAH", textbox.CssClass);
        }

        [Test]
        public void CanRemoveCssClassToControl()
        {
            var textbox = new TextBox();
            HtmlHelper.AppendCssClass(textbox, "testclass");
            HtmlHelper.AppendCssClass(textbox, "blah");
            HtmlHelper.AppendCssClass(textbox, "BLAH");
            Assert.AreEqual("testclass blah BLAH", textbox.CssClass);

            HtmlHelper.RemoveCssClass(textbox, "blah");
            Assert.AreEqual("testclass BLAH", textbox.CssClass);

            HtmlHelper.RemoveCssClass(textbox, "BLAH");
            HtmlHelper.RemoveCssClass(textbox, "testclass");
            Assert.AreEqual(string.Empty, textbox.CssClass);
        }

        /// <summary>
        /// Tests that EnableUrls formats urls with anchor tags.
        /// </summary>
        [RowTest]
        [Row("", "")]
        [Row("http://haacked.com/one/two/three/four/five/six/seven/eight/nine/ten.aspx",
            "<a rel=\"nofollow external\" href=\"http://haacked.com/one/two/three/four/five/six/seven/eight/nine/ten.aspx\" title=\"http://haacked.com/one/two/three/four/five/six/seven/eight/nine/ten.aspx\">haacked.com/.../ten.aspx</a>"
            )]
        [Row("begin http://haacked.com/ end.",
            "begin <a rel=\"nofollow external\" href=\"http://haacked.com/\" title=\"http://haacked.com/\">http://haacked.com/</a> end."
            )]
        [Row("begin http://haacked.com/ two http://localhost/someplace/some.page.aspx end.",
            "begin <a rel=\"nofollow external\" href=\"http://haacked.com/\" title=\"http://haacked.com/\">http://haacked.com/</a> two <a rel=\"nofollow external\" href=\"http://localhost/someplace/some.page.aspx\" title=\"http://localhost/someplace/some.page.aspx\">http://localhost/someplace/some.page.aspx</a> end."
            )]
        [Row("this www.haacked.com",
            "this <a rel=\"nofollow external\" href=\"http://www.haacked.com\" title=\"www.haacked.com\">www.haacked.com</a>"
            )]
        [Row("<p>www.haacked.com</p>",
            "<p><a rel=\"nofollow external\" href=\"http://www.haacked.com\" title=\"www.haacked.com\">www.haacked.com</a></p>"
            )]
        [Row("<b>www.haacked.com</b>",
            "<b><a rel=\"nofollow external\" href=\"http://www.haacked.com\" title=\"www.haacked.com\">www.haacked.com</a></b>"
            )]
        [Row("subtextproject.com", "subtextproject.com")]
        [Row("www.subtextproject.com?test=test&blah=blah",
            "<a rel=\"nofollow external\" href=\"http://www.subtextproject.com?test=test&amp;blah=blah\" title=\"www.subtextproject.com?test=test&amp;blah=blah\">www.subtextproject.com?test=test&amp;blah=blah</a>"
            )]
        [Row("<a href=\"http://example.com/\">Test</a>", "<a href=\"http://example.com/\">Test</a>")]
        [Row("<img src=\"http://example.com/\" />", "<img src=\"http://example.com/\" />")]
        [Row("<a href='http://example.com/'>Test</a>", "<a href=\"http://example.com/\">Test</a>")]
        [Row("<a href=http://example.com/>Test</a>", "<a href=\"http://example.com/\">Test</a>")]
        [Row("<b title=\"blah http://example.com/ blah\" />", "<b title=\"blah http://example.com/ blah\" />")]
        [Row("a < b blah http://example.com/",
            "a &lt; b blah <a rel=\"nofollow external\" href=\"http://example.com/\" title=\"http://example.com/\">http://example.com/</a>"
            )]
        [Row("www.haacked.com<a href=\"test\">test</a>",
            "<a rel=\"nofollow external\" href=\"http://www.haacked.com\" title=\"www.haacked.com\">www.haacked.com</a><a href=\"test\">test</a>"
            )]
        public void ConvertUrlsToHyperLinksConvertsUrlsToAnchorTags(string html, string expected)
        {
            Assert.AreEqual(expected, HtmlHelper.ConvertUrlsToHyperLinks(html));
        }

        [Test]
        public void ConvertUrlsToHyperLinks_WithNullHtml_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => HtmlHelper.ConvertUrlsToHyperLinks(null));
        }

        [Test]
        public void ConvertUrlToHyperlinksIgnoreAnchorContents()
        {
            string html = "<a href=\"/\"><b>http://example.com/</b></a>";
            Assert.AreEqual(html, HtmlHelper.ConvertUrlsToHyperLinks(html));
        }

        [Test]
        public void Html_WithEncodedMarkup_IsNotUnencoded()
        {
            string html = "&lt;script /&gt;";
            Assert.AreEqual(html, HtmlHelper.ConvertUrlsToHyperLinks(html));
        }

        /// <summary>
        /// HasIllegalContent throws exception when encountering encoded tag.
        /// </summary>
        [RowTest]
        [Row("blah &#60script ", true)]
        [Row("blah <script ", true)]
        [Row("blah script ", false)]
        public void HasIllegalContentReturnsExpectedAnswer(string html, bool expected)
        {
            Assert.AreEqual(expected, HtmlHelper.HasIllegalContent(html));
        }

        [Test]
        public void CanParseTag()
        {
            IList<string> tags =
                "blah blah <a href=\"http://blah.com/subdir/mytag/\" rel=\"tag\">test1</a> goo goo".ParseTags();
            Assert.AreEqual(1, tags.Count, "Should have found one tag.");
            Assert.AreEqual("mytag", tags[0], "Should have found one tag.");
        }

        [Test]
        public void ParseTags_WithDuplicateTags_DoesNotParseDuplicate()
        {
            IList<string> tags =
                "<a href=\"http://blah.com/subdir/mytag/\" rel=\"tag\">test1</a><a href=\"http://blah.com/another-dir/mytag/\" rel=\"tag\">test2</a>"
                    .ParseTags();
            Assert.AreEqual(1, tags.Count, "The same tag exists twice, should only count as one.");
        }

        [Test]
        public void ParseTagsDoesNotMatchRelOfAnotherTag()
        {
            IList<string> tags =
                ("<a title=\"blah\" href=\"http://blah.com/subdir/mytag1/\" " + Environment.NewLine +
                 " rel=\"lightbox\">mytag1</a>other junk " + Environment.NewLine +
                 "<a href=\"http://blah.com/another-dir/mytag2/\" rel=\"tag\">mytag2</a>").ParseTags();
            Assert.AreEqual(1, tags.Count, "The first anchor is not a tag.");
            Assert.AreEqual("mytag2", tags[0]);
        }

        [Test]
        public void ParseTags_WithWhitespaceBetweenAttributes_ParsesTagCorrectly()
        {
            IList<string> tags =
                ("<a title=\"blah\" href = " + Environment.NewLine + " \"http://blah.com/subdir/mytag1/\" rel = " +
                 Environment.NewLine + " \"tag\">mytag1</a>").ParseTags();
            Assert.AreEqual(1, tags.Count, "The attributes contain whitespace but should be recognized as valid");
            Assert.AreEqual("mytag1", tags[0]);
        }

        [Test]
        public void ParseTags_WithWeirdWhiteSpace_ParsesTagCorrectly()
        {
            IList<string> tags =
                ("<a title=\"Programmer's Bill of Rights\" href=\"http://www.codinghorror.com/blog/archives/000666.html\">Programmer&rsquo;s Bill of Rights</a> that <a rel=\"friend met\" href=\"http://www.codinghorror.com/blog/\">Jeff Atwood</a>" +
                 Environment.NewLine +
                 "<div class=\"tags\">Technorati tags: <a rel=\"tag\" href=\"http://technorati.com/tag/Programming\">Programming</a>")
                    .ParseTags();
            Assert.AreEqual(1, tags.Count, "The attributes contain whitespace but should be recognized as valid");
            Assert.AreEqual("Programming", tags[0]);
        }

        [Test]
        public void ParseTags_WithUrlEndingWithDefaultAspx_WeirdWhiteSpace()
        {
            // arrange
            string html =
                "<a title=\"Programmer's Bill of Rights\" href=\"http://www.codinghorror.com/blog/archives/000666.html\">Programmer&rsquo;s Bill of Rights</a> that <a rel=\"friend met\" href=\"http://www.codinghorror.com/blog/\">Jeff Atwood</a>" +
                Environment.NewLine +
                "<div class=\"tags\">Technorati tags: <a rel=\"tag\" href=\"http://technorati.com/tag/Programming/default.aspx\">Programming</a>";

            // act
            IList<string> tags = html.ParseTags();

            // assert
            Assert.AreEqual(1, tags.Count, "The attributes contain whitespace but should be recognized as valid");
            Assert.AreEqual("Programming", tags[0]);
        }

        [Test]
        public void ParseTags_WithMultipleRelAttributeValues_ParsesTag()
        {
            // arrange
            string html = "<a href=\"http://blah/yourtag\" rel=\"tag friend\">nothing</a>";

            // act
            IList<string> tags = html.ParseTags();

            // assert
            Assert.AreEqual("yourtag", tags.First());
        }

        [RowTest]
        [Row("http://blah.com/blah/", "blah")]
        [Row("http://blah.com/foo-bar", "foo-bar")]
        [Row("http://blah.com/query?someparm=somevalue", "query")]
        [Row("http://blah.com/query/?someparm=somevalue", "query")]
        [Row("http://blah.com/decode+test", "decode test")]
        [Row("http://blah.com/decode%20test2", "decode test2")]
        [Row("http://blah.com/another+decode%20test", "another decode test")]
        public void CanParseEntryTags(string url, string expectedTag)
        {
            // arrange
            string html = "<a href=\"" + url + "\" rel=\"tag\">nothing</a>";

            // act
            IList<string> tags = html.ParseTags();

            // assert;
            Assert.AreEqual(1, tags.Count);
            Assert.AreEqual(expectedTag, tags.First());
        }

        [RowTest]
        [Row(" rel = \"tag\" ", " rel = \"tag\"", true)]
        [Row(" xrel = \"tag\" ", null, false)]
        [Row(" rel = \"friend tag\" ", " rel = \"friend tag\"", true)]
        [Row(" rel = \"friend tag met\" ", " rel = \"friend tag met\"", true)]
        [Row(" rel = \"tag met\" ", " rel = \"tag met\"", true)]
        [Row(" rel=\"friend met\"> rel=\"tag\" ", " rel=\"tag\"", true)]
        [Row(" rel = \'tag\' ", " rel = \'tag\'", true)]
        [Row(" xrel = \'tag\' ", null, false)]
        [Row(" rel = \'friend tag\' ", " rel = \'friend tag\'", true)]
        [Row(" rel = \'friend tag met\' ", " rel = \'friend tag met\'", true)]
        [Row(" rel = \'tag met\' ", " rel = \'tag met\'", true)]
        [Row(" rel=\'friend met\'> rel=\'tag\' ", " rel=\'tag\'", true)]
        public void CanParseRelTag(string original, string matched, bool expected)
        {
            var relRegex = new Regex(@"\s+rel\s*=\s*(""[^""]*?\btag\b.*?""|'[^']*?\btag\b.*?')",
                                     RegexOptions.IgnoreCase | RegexOptions.Singleline);
            Match match = relRegex.Match(original);
            Assert.AreEqual(expected, match.Success);
            if(match.Success)
            {
                Assert.AreEqual(matched, match.Value);
            }
        }

        [RowTest]
        [Row("  <a href=\"foo\">test</a>  ", "<a href=\"foo\">test</a>", true)]
        [Row("  <a href=\"foo\" title=\"blah\">test</a>  ", "<a href=\"foo\" title=\"blah\">test</a>", true)]
        [Row("  <a href = \"foo\" >test</a>  ", "<a href = \"foo\" >test</a>", true)]
        [Row("  <span title=\"test <a href=\"> <a href=\"foo2\">test2</a>", "<a href=\"foo2\">test2</a>", true)]
        public void CanParseAnchorTags(string original, string expectedMatchValue, bool expectedMatch)
        {
            var regex = new Regex(@"<a(\s+\w+\s*=\s*(?:""[^""]*?""|'[^']*?')(?!\w))+\s*>.*?</a>",
                                  RegexOptions.IgnoreCase | RegexOptions.Singleline);
            Match match = regex.Match(original);
            Assert.AreEqual(expectedMatch, match.Success);
            if(match.Success)
            {
                string matchValue = match.Value;
                Assert.AreEqual(expectedMatchValue, matchValue);
            }
        }

        [Test]
        public void ParseUri_WithValidUri_ReturnsNull()
        {
            // arrange
            string notUri = "http://haacked.com/";

            // act
            Uri parsed = notUri.ParseUri();

            // assert
            Assert.AreEqual("haacked.com", parsed.Host);
        }

        [Test]
        public void ParseUri_WithInvalidUri_ReturnsNull()
        {
            // arrange
            string notUri = "blah@example.com";

            // act
            Uri parsed = notUri.ParseUri();

            // assert
            Assert.IsNull(parsed);
        }

        [Test]
        public void EnsureUrl_WithoutHttp_PrependsHttp()
        {
            // arrange
            string text = "subtextproject.com";

            // act
            Uri url = text.EnsureUrl();

            // assert
            Assert.IsNotNull(url);
            Assert.AreEqual("subtextproject.com", url.Host);
        }

        [Test]
        public void EnsureUrl_WithNull_ReturnsNull()
        {
            // arrange
            string text = null;

            // act
            Uri url = text.EnsureUrl();

            // assert
            Assert.IsNull(url);
        }

        [Test]
        public void EnsureUrl_WithStringHavingOnlyWhitespace_ReturnsNull()
        {
            // arrange
            string text = "     ";

            // act
            Uri url = text.EnsureUrl();

            // assert
            Assert.IsNull(url);
        }

        [Test]
        public void GetAttributeValues_WithHtmlContainingAttributeValues_ReturnsAttributeValues()
        {
            // arrange
            string html =
                @"<html>
                <img src=""test.jpg"" />
                <img src=""test2.jpg""></img>
            </html>";

            // act
            IEnumerable<string> imageSources = html.GetAttributeValues("img", "src");

            // assert
            Assert.AreEqual(2, imageSources.Count());
            Assert.AreEqual("test.jpg", imageSources.First());
            Assert.AreEqual("test2.jpg", imageSources.ElementAt(1));
        }

        [Test]
        public void GetAttributeValues_WithNonBalancedQuoteInMiddle_ReturnsAttributeValuesContainingQuoteCharacter()
        {
            // arrange
            string html =
                @"<html>
                <img src=""test's.jpg"" />
                <img src='test2"".jpg'></img>
            </html>";

            // act
            IEnumerable<string> imageSources = html.GetAttributeValues("img", "src");

            // assert
            Assert.AreEqual(2, imageSources.Count());
            Assert.AreEqual("test's.jpg", imageSources.First());
            Assert.AreEqual("test2\".jpg", imageSources.ElementAt(1));
        }

        [Test]
        public void
            GetAttributeValues_WithHtmlHavingDuplicateHtmlTagsAndContainingAttributeValues_ReturnsAttributeValues()
        {
            // arrange
            string html =
                @"<html><html>
                <img src=""test.jpg"" />
                <img src=""test2.jpg""></img>
            </html></html>";

            // act
            IEnumerable<string> imageSources = html.GetAttributeValues("img", "src");

            // assert
            Assert.AreEqual(2, imageSources.Count());
            Assert.AreEqual("test.jpg", imageSources.First());
            Assert.AreEqual("test2.jpg", imageSources.ElementAt(1));
        }

        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }

        [SetUp]
        public void SetUp()
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "MyBlog");
            var blogInfo = new Blog();
            blogInfo.Host = "localhost";
            blogInfo.Subfolder = "MyBlog";

            BlogRequest.Current.Blog = blogInfo;
        }

        [TearDown]
        public void TearDown()
        {
            HttpContext.Current = null;
        }
    }
}using MbUnit.Framework;

namespace UnitTests.Subtext.Framework.Text
{
    [TestFixture]
    public class HtmlToXhtmlTransformationTests
    {
    }
}using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    [TestFixture]
    public class LiteralFormatTests
    {
        [Test]
        public void Literal_WithEscapedCloseBraces_CollapsesDoubleBraces()
        {
            //arrange
            var literal = new LiteralFormat("hello}}world");
            //act
            string result = literal.Eval(null);
            //assert
            Assert.AreEqual("hello}world", result);
        }

        [Test]
        public void Literal_WithEscapedOpenBraces_CollapsesDoubleBraces()
        {
            //arrange
            var literal = new LiteralFormat("hello{{world");
            //act
            string result = literal.Eval(null);
            //assert
            Assert.AreEqual("hello{world", result);
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    [TestFixture]
    public class NamedFormatTests
    {
        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void StringFormat_WithMultipleExpressions_FormatsThemAll()
        {
            //arrange
            var o = new {foo = 123.45, bar = 42, baz = "hello"};

            //act
            string result = "{foo} {foo} {bar}{baz}".NamedFormat(o);

            //assert
            float expectedNum = 123.45f;
            string expected = String.Format("{0} {1} 42hello", expectedNum, expectedNum);
            Assert.AreEqual(expected, result);
        }

        [Test]
        public void StringFormat_WithDoubleEscapedCurlyBraces_DoesNotFormatString()
        {
            //arrange
            var o = new {foo = 123.45};

            //act
            string result = "{{{{foo}}}}".NamedFormat(o);

            //assert
            Assert.AreEqual("{{foo}}", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void StringFormat_WithFormatSurroundedByDoubleEscapedBraces_FormatsString()
        {
            //arrange
            var o = new {foo = 123.45};

            //act
            string result = "{{{{{foo}}}}}".NamedFormat(o);

            //assert
            float expected = 123.45f;
            Assert.AreEqual("{{" + expected + "}}", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithEscapeSequence_EscapesInnerCurlyBraces()
        {
            var o = new {foo = 123.45};

            //act
            string result = "{{{foo}}}".NamedFormat(o);

            //assert
            float expected = 123.45f;
            Assert.AreEqual("{" + expected + "}", result);
        }

        [Test]
        public void Format_WithEmptyString_ReturnsEmptyString()
        {
            var o = new {foo = 123.45};

            //act
            string result = string.Empty.NamedFormat(o);

            //assert
            Assert.AreEqual(string.Empty, result);
        }

        [Test]
        public void Format_WithNoFormats_ReturnsFormatStringAsIs()
        {
            var o = new {foo = 123.45};

            //act
            string result = "a b c".NamedFormat(o);

            //assert
            Assert.AreEqual("a b c", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithFormatType_ReturnsFormattedExpression()
        {
            var o = new {foo = 123.45};

            //act
            string result = "{foo:#.#}".NamedFormat(o);

            //assert
            float expected = 123.5f;
            Assert.AreEqual(expected.ToString(), result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithSubProperty_ReturnsValueOfSubProperty()
        {
            var o = new {foo = new {bar = 123.45}};

            //act
            string result = "{foo.bar:#.#}ms".NamedFormat(o);

            //assert
            float expected = 123.5f;
            Assert.AreEqual(expected + "ms", result);
        }

        [Test]
        public void Format_WithFormatNameNotInObject_ThrowsFormatException()
        {
            //arrange
            var o = new {foo = 123.45};

            //act, assert
            UnitTestHelper.AssertThrows<FormatException>(() => "{bar}".NamedFormat(o));
        }

        [Test]
        public void Format_WithNoEndFormatBrace_ThrowsFormatException()
        {
            //arrange
            var o = new {foo = 123.45};

            //act, assert
            UnitTestHelper.AssertThrows<FormatException>(() => "{bar".NamedFormat(o));
        }

        [Test]
        public void Format_WithEscapedEndFormatBrace_ThrowsFormatException()
        {
            //arrange
            var o = new {foo = 123.45};


            //act, assert
            UnitTestHelper.AssertThrows<FormatException>(() => "{foo}}".NamedFormat(o));
        }

        [Test]
        public void Format_WithDoubleEscapedEndFormatBrace_ThrowsFormatException()
        {
            //arrange
            var o = new {foo = 123.45};

            //act, assert
            UnitTestHelper.AssertThrows<FormatException>(() => "{foo}}}}bar".NamedFormat(o));
        }

        [Test]
        public void Format_WithDoubleEscapedEndFormatBraceWhichTerminatesString_ThrowsFormatException()
        {
            //arrange
            var o = new {foo = 123.45};

            //act, assert
            UnitTestHelper.AssertThrows<FormatException>(() => "{foo}}}}".NamedFormat(o));
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithEndBraceFollowedByEscapedEndFormatBraceWhichTerminatesString_FormatsCorrectly()
        {
            var o = new {foo = 123.45};

            //act
            string result = "{foo}}}".NamedFormat(o);

            //assert
            float expected = 123.45f;
            Assert.AreEqual(expected + "}", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithEndBraceFollowedByEscapedEndFormatBrace_FormatsCorrectly()
        {
            var o = new {foo = 123.45};

            //act
            string result = "{foo}}}bar".NamedFormat(o);

            //assert
            float expected = 123.45f;
            Assert.AreEqual(expected + "}bar", result);
        }

        [Test]
        [MultipleCulture("en-US,en-NZ,it-IT")]
        public void Format_WithEndBraceFollowedByDoubleEscapedEndFormatBrace_FormatsCorrectly()
        {
            var o = new {foo = 123.45};

            //act
            string result = "{foo}}}}}bar".NamedFormat(o);

            //assert
            float expected = 123.45f;
            Assert.AreEqual(expected + "}}bar", result);
        }

        [Test]
        public void Format_WithNullFormatString_ThrowsArgumentNullException()
        {
            //arrange, act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => ((string)null).NamedFormat(123));
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
	/// <summary>
	/// Unit tests of the <see cref="HtmlHelper.RemoveHtmlComments"/> method and 
	/// just that method.
	/// </summary>
	[TestFixture]
	public class RemoveCommentsTests
	{

		/// <summary>
		/// Passes in each row to the test. Calls <see cref="HtmlHelper.RemoveHtmlComments"/> on 
		/// the input and compares against the expected value.
		/// </summary>
		/// <param name="input">text to strip comments from.</param>
		/// <param name="expected">Expected return value.</param>
		[RowTest]
		[Row("", "")]
		[Row(null, null)]
		[Row("<!--", "<!--")]
		[Row("-->", "-->")]
		[Row("&lt;!--", "&lt;!--")]
		[Row("--&gt;", "--&gt;")]
		[Row("aBc", "aBc")]
		[Row("<!--Comment text-->String","String")]
		[Row("<!--Comment --&gt; text-->String", "String")]
		[Row("&lt;!--Comment text-->String", "&lt;!--Comment text-->String")]
		[Row("<!--Comment text--&gt;String", "<!--Comment text--&gt;String")]
		public void RemoveCommentsStripsHtmlCommentsProperly(string input, string expected)
		{
			Assert.AreEqual(expected, HtmlHelper.RemoveHtmlComments(input), "Did not strip comments from [" + input + "] properly.");
		}
	}
}
using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    /// <summary>
    /// Unit tests of the <see cref="HtmlHelper.RemoveHtml"/> method and 
    /// just that method.
    /// </summary>
    [TestFixture]
    public class RemoveHtmlTests
    {
        [Test]
        public void NullHtml_ReturnsEmptyString()
        {
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(null));
        }

        [Test]
        public void Html_WithEmptyString_ReturnsEmpty()
        {
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(string.Empty));
        }

        [Test]
        public void Html_WithNoTags_ReturnsTextOnly()
        {
            string html = "This has no tags!";
            Assert.AreEqual(html, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithOnlyATag_ReturnsEmptyString()
        {
            string html = "<foo>";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithOnlyConsecutiveTags_ReturnsEmptyString()
        {
            string html = "<foo><bar><baz />";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTextBeforeTag_ReturnsText()
        {
            string html = "Hello<foo>";
            Assert.AreEqual("Hello", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTextAfterTag_ReturnsText()
        {
            string html = "<foo>World";
            Assert.AreEqual("World", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTextBetweenTags_ReturnsText()
        {
            string html = "<p><foo>World</foo></p>";
            Assert.AreEqual("World", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithClosingTagInAttrValue_StripsEntireTag()
        {
            string html = "<foo title=\"/>\" />";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithSingleQuotedAttrContainingDoubleQuotesAndEndTagChar_StripsEntireTag()
        {
            string html = @"<foo ='test""/>title' />";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithDoubleQuotedAttributeContainingSingleQuotesAndEndTagChar_StripsEntireTag()
        {
            string html = @"<foo =""test'/>title"" />";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithNonQuotedAttribute_StripsEntireTagWithoutStrippingText()
        {
            string html = @"<foo title=test>title />";
            Assert.AreEqual("title />", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithNonQuotedAttributeContainingDoubleQuotes_StripsEntireTagWithoutStrippingText()
        {
            string html = @"<p title = test-test""-test>title />Test</p>";
            Assert.AreEqual("title />Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithNonQuotedAttributeContainingQuotedSection_StripsEntireTagWithoutStrippingText()
        {
            string html = @"<p title = test-test""- >""test> ""title />Test</p>";
            Assert.AreEqual(@"""test> ""title />Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTagClosingCharInAttributeValueWithNoNameFollowedByText_ReturnsText()
        {
            string html = @"<foo = "" />title"" />Test";
            Assert.AreEqual("Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTextThatLooksLikeTag_ReturnsText()
        {
            string html = @"<çoo = "" />title"" />Test";
            Assert.AreEqual(html, HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithCommentOnly_ReturnsEmptyString()
        {
            string s = "<!-- this go bye bye>";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithNonDashDashComment_ReturnsEmptyString()
        {
            string s = "<! this go bye bye>";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithTwoConsecutiveComments_ReturnsEmptyString()
        {
            string s = "<!-- this go bye bye><!-- another comment>";
            Assert.AreEqual(string.Empty, HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithTextBeforeComment_ReturnsText()
        {
            string s = "Hello<!-- this go bye bye -->";
            Assert.AreEqual("Hello", HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithTextAfterComment_ReturnsText()
        {
            string s = "<!-- this go bye bye -->World";
            Assert.AreEqual("World", HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithAngleBracketsButNotHtml_ReturnsText()
        {
            string s = "<$)*(@&$(@*>";
            Assert.AreEqual(s, HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithCommentInterleavedWithText_ReturnsText()
        {
            string s = "Hello <!-- this go bye bye --> World <!--> This is fun";
            Assert.AreEqual("Hello  World  This is fun", HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithCommentBetweenNonTagButLooksLikeTag_DoesStripComment()
        {
            string s = @"<ç123 title=""<!bc def>"">";
            Assert.AreEqual(@"<ç123 title="""">", HtmlHelper.RemoveHtml(s));
        }

        [Test]
        public void Html_WithTagClosedByStartTag_StripsFirstTag()
        {
            string html = "<foo<>Test";
            Assert.AreEqual("<>Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTagClosedByStartComment_StripsFirstTag()
        {
            //Note in Firefox, this renders: <!--foo>Test
            string html = "<foo<!--foo>Test";
            Assert.AreEqual("Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTagClosedByProperComment_StripsFirstTag()
        {
            string html = "<FOO<!-- FOO -->Test";
            Assert.AreEqual("Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_WithTagClosedByEmptyComment_StripsFirstTag()
        {
            string html = "<foo<!>Test";
            Assert.AreEqual("Test", HtmlHelper.RemoveHtml(html));
        }

        [Test]
        public void Html_ThatBrokeSubtextBefore_NowDoesntPegCPU()
        {
            string html =
                @"Hi Friends,<br /><br />I have some different problem to validate the HTML<br /><br />html code is something like <br /><br /><html><br />.<br />.<br />.<br /><body ...><br /><br /><table ..><br /><tr ..><td><br />  <img src=""test.asp?t=123"" border=0 alt=test /><br />  ...<br /><br />  <script type='text/javascript'><br />  <!--<br />     function test(xvar){<br />        var text = xvar;<br />        .................<br />     }<br />   --><br /></td><br /></tr><br /></body><br /></html<br /><br /><br />Now i need to validate all tag attributes value should be with ""<br /><br />e.g <br />img tag alt and border attribute values are without "" <br />there are various tags like table and div has same problem <br /><br /><br />can anyone help me find attributes value without quotation mark and replace with quotation mark (please note that some javascript or URL's with query para should not should not effect)<br /><br /><br />Sincerely thanks in advance<br /><br />";
            string expected =
                @"Hi Friends,I have some different problem to validate the HTMLhtml code is something like ...    ...         function test(xvar){        var text = xvar;        .................     }   -->Now i need to validate all tag attributes value should be with ""e.g img tag alt and border attribute values are without "" there are various tags like table and div has same problem can anyone help me find attributes value without quotation mark and replace with quotation mark (please note that some javascript or URL's with query para should not should not effect)Sincerely thanks in advance";
            Assert.AreEqual(expected, HtmlHelper.RemoveHtml(html));
        }
    }
}using System;
using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Subtext.Framework.Text;

namespace UnitTests.Subtext.Framework.Text
{
    /// <summary>
    /// Summary description for StringHelperTests.
    /// </summary>
    [TestFixture]
    public class StringHelperTests
    {
        [Test]
        public void Remove_PassingInTextWithRepeatingSequenceAndOccurrenceCountOfOne_RemovesFirstOccurrence()
        {
            //act
            string result = "foo/bar/foo".Remove("Foo", 1, StringComparison.OrdinalIgnoreCase);

            //assert
            Assert.AreEqual("/bar/foo", result);
        }

        [Test]
        public void Remove_PassingInTextWithRepeatingSequenceAndOccurrenceCountOfTwo_RemovesAllOccurrences()
        {
            //act
            string result = "foo/bar/foo".Remove("Foo", 2, StringComparison.OrdinalIgnoreCase);

            //assert
            Assert.AreEqual("/bar/", result);
        }

        [Test]
        public void Remove_PassingInTextWithRepeatingSequenceAndOccurrenceCountOfFour_RemovesAllOccurrences()
        {
            //act
            string result = "foo/bar/foo".Remove("Foo", 4, StringComparison.OrdinalIgnoreCase);

            //assert
            Assert.AreEqual("/bar/", result);
        }

        [RowTest]
        [Row("Blah..Blah", '.', "Blah.Blah")]
        [Row("Blah...Blah", '.', "Blah.Blah")]
        [Row("Blah....Blah", '.', "Blah.Blah")]
        [Row("Blah- -Blah", '-', "Blah- -Blah")]
        [Row("Blah--Blah", '.', "Blah--Blah")]
        public void CanRemoveDoubleCharacter(string text, char character, string expected)
        {
            Assert.AreEqual(expected, text.RemoveDoubleCharacter(character));
        }

        [Test]
        public void RemoveDoubleCharacter_WithNullCharacter_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(
                () => "6 bdy.RemoveDoubleCharacter(e)".RemoveDoubleCharacter(Char.MinValue)
            );
        }


        /// <summary>
        /// Tests that we can properly pascal case text.
        /// </summary>
        /// <remarks>
        /// Does not remove punctuation.
        /// </remarks>
        /// <param name="original"></param>
        /// <param name="expected"></param>
        [RowTest]
        [Row("", "")]
        [Row("a", "A")]
        [Row("A", "A")]
        [Row("A B", "AB")]
        [Row("a bee keeper's dream.", "ABeeKeeper'sDream.")]
        public void PascalCaseTests(string original, string expected)
        {
            Assert.AreEqual(expected, original.ToPascalCase());
        }

        [Test]
        public void PascalCaseThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                StringHelper.ToPascalCase(null)
            );
        }

        [RowTest]
        [Row("BLAH Tast", "a", 6, StringComparison.Ordinal)]
        [Row("BLAH Tast", "a", 2, StringComparison.InvariantCultureIgnoreCase)]
        public void IndexOfHandlesCaseSensitivity(string source, string search, int expectedIndex,
                                                  StringComparison comparison)
        {
            Assert.AreEqual(expectedIndex, source.IndexOf(search, comparison),
                            "Did not find the string '{0}' at the index {1}", search, expectedIndex);
        }

        [RowTest]
        [Row("Blah/Default.aspx", "Default.aspx", "Blah/", StringComparison.Ordinal)]
        [Row("Blah/Default.aspx", "default.aspx", "Blah/", StringComparison.InvariantCultureIgnoreCase)]
        [Row("Blah/Default.aspx", "default.aspx", "Blah/Default.aspx", StringComparison.Ordinal)]
        public void LeftBeforeOfHandlesCaseSensitivity(string source, string search, string expected,
                                                       StringComparison comparison)
        {
            Assert.AreEqual(expected, source.LeftBefore(search, comparison),
                            "Truncating did not return the correct result.");
        }

        [Test]
        public void SplitIntoWords_WithStringContainingSpaces_SplitsIntoWords()
        {
            //arrange, act
            IEnumerable<string> words = "this is a test".SplitIntoWords().ToList();

            //assert
            Assert.AreEqual(4, words.Count());
            Assert.AreEqual("this", words.First());
            Assert.AreEqual("is", words.ElementAt(1));
            Assert.AreEqual("a", words.ElementAt(2));
            Assert.AreEqual("test", words.ElementAt(3));
        }

        [Test]
        public void SplitIntoWords_WithStringContainingTabsAndDoubleSpaces_SplitsIntoWords()
        {
            //arrange, act
            IEnumerable<string> words = "  this \t is\ta  test  \t".SplitIntoWords().ToList();

            //assert
            Assert.AreEqual(4, words.Count());
            Assert.AreEqual("this", words.First());
            Assert.AreEqual("is", words.ElementAt(1));
            Assert.AreEqual("a", words.ElementAt(2));
            Assert.AreEqual("test", words.ElementAt(3));
        }


        /*
               "string\r\n".chop   #=> "string"
               "string\n\r".chop   #=> "string\n"
               "string\n".chop     #=> "string"
               "string".chop       #=> "strin"
               "x".chop.chop       #=> ""
             */

        [Test]
        public void Chop_WithStringEndingWithWindowsNewLine_ReturnsStringWithoutNewline()
        {
            Assert.AreEqual("string", "string\r\n".Chop());
        }

        [Test]
        public void Chop_WithStringEndingWithSlashR_OnlyChopsSlashR()
        {
            Assert.AreEqual("string\n", "string\n\r".Chop());
        }

        [Test]
        public void Chop_WithStringEndingWithNewline_ChopsNewline()
        {
            Assert.AreEqual("string", "string\n".Chop());
        }

        [Test]
        public void Chop_WithStringEndingWithLetter_ReturnsStringWithoutLastLetter()
        {
            Assert.AreEqual("strin", "string".Chop());
        }

        [Test]
        public void Chop_WithOneLetter_ReturnsEmptyString()
        {
            Assert.AreEqual(string.Empty, "x".Chop());
        }

        /*
         "hello".chomp            #=> "hello"
         "hello\n".chomp          #=> "hello"
         "hello\r\n".chomp        #=> "hello"
         "hello\n\r".chomp        #=> "hello\n"
         "hello\r".chomp          #=> "hello"
         "hello \n there".chomp   #=> "hello \n there"
         "hello".chomp("llo")     #=> "he"
         */

        [Test]
        public void Chomp_WithStringNotEndingWithDefaultSeparator_ReturnsString()
        {
            Assert.AreEqual("hello", "hello".Chomp());
        }

        [Test]
        public void Chomp_WithStringEndingWithNewline_ChopsNewline()
        {
            Assert.AreEqual("hello", "hello\n".Chop());
        }

        [Test]
        public void Chomp_WithStringEndingWithWindowsNewLine_ReturnsStringWithoutNewline()
        {
            Assert.AreEqual("hello", "hello\r\n".Chomp());
        }

        [Test]
        public void Chomp_WithStringEndingWithSlashNSlashR_OnlyChopsSlashR()
        {
            Assert.AreEqual("hello\n", "hello\n\r".Chop());
        }

        [Test]
        public void Chomp_WithStringEndingWithSlashR_OnlyChopsSlashR()
        {
            Assert.AreEqual("hello", "hello\r".Chop());
        }

        [Test]
        public void Chomp_WithSeparator_ChopsSeparator()
        {
            Assert.AreEqual("he", "hello".Chomp("llo", StringComparison.Ordinal));
        }

        [Test]
        public void Chomp_WithSeparatorButStringNotEndingWithSeparator_LeavesStringAlone()
        {
            Assert.AreEqual("hello world", "hello world".Chomp("llo", StringComparison.Ordinal));
        }
    }
}using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Tracking;

namespace UnitTests.Subtext.Framework.Tracking
{
    /// <summary>
    /// Summary description for TrackbackHandler.
    /// </summary>
    [TestFixture]
    public class TrackbackHandlerTests
    {
        [Test]
        [RollBack]
        public void ProcessRequest_WithTrackbacksDisabled_ReturnEmptyResponse()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("phil", "title", "body");
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/05/25", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            int id = UnitTestHelper.Create(entry);
            Blog blog = Config.CurrentBlog;
            blog.TrackbacksEnabled = false;
            var subtextContext = new Mock<ISubtextContext>();
            StringWriter writer = subtextContext.FakeSubtextContextRequest(blog, "/trackbackhandler", "/", string.Empty);
            subtextContext.Object.RequestContext.RouteData.Values.Add("id", id.ToString());
            var handler = new TrackBackHandler(subtextContext.Object);

            //act
            handler.ProcessRequest();

            //assert
            Assert.AreEqual(string.Empty, writer.ToString());
        }

        /// <summary>
        /// Sends an RSS Snippet for requests made using the "GET" http verb.
        /// </summary>
        [Test]
        [RollBack]
        public void ProcessRequest_WithGetRequest_SendsRssResponse()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("phil", "this is the title", "body");
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/05/25", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            int id = UnitTestHelper.Create(entry);

            Blog blog = Config.CurrentBlog;
            blog.TrackbacksEnabled = true;

            var subtextContext = new Mock<ISubtextContext>();
            StringWriter writer = subtextContext.FakeSubtextContextRequest(blog, "/trackbackhandler", "/", string.Empty);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Object.RequestContext.RouteData.Values.Add("id", id.ToString());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.TrackbacksUrl(It.IsAny<int>())).Returns("/whatever/trackback");
            subtextContext.SetupBlog(blog);
            var handler = new TrackBackHandler(subtextContext.Object);

            //act
            handler.ProcessRequest();

            //assert
            Assert.IsTrue(writer.ToString().Contains("this is the title"));
        }

        /// <summary>
        /// Sends an error message if the id in the url does not match an existing entry.
        /// </summary>
        [Test]
        [RollBack]
        public void ProcessRequest_WithInvalidEntryId_SendsErrorResponse()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            Blog blog = Config.CurrentBlog;
            blog.TrackbacksEnabled = true;
            var subtextContext = new Mock<ISubtextContext>();
            StringWriter writer = subtextContext.FakeSubtextContextRequest(blog, "/trackbackhandler", "/", string.Empty);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Object.RequestContext.RouteData.Values.Add("id", int.MaxValue.ToString());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.TrackbacksUrl(It.IsAny<int>())).Returns("/whatever/trackback");
            subtextContext.SetupBlog(blog);
            var handler = new TrackBackHandler(subtextContext.Object);

            //act
            handler.ProcessRequest();

            //assert
            Assert.IsTrue(writer.ToString().Contains("EntryId is invalid or missing"));
        }

        /// <summary>
        /// Checks the error message returned when the trackback URL does not have an entry id.
        /// </summary>
        [Test]
        [RollBack]
        public void ProcessRequest_WithoutEntryIdInRouteData_SendsErrorResponse()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            Blog blog = Config.CurrentBlog;
            blog.TrackbacksEnabled = true;
            var subtextContext = new Mock<ISubtextContext>();
            StringWriter writer = subtextContext.FakeSubtextContextRequest(blog, "/trackbackhandler", "/", string.Empty);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.TrackbacksUrl(It.IsAny<int>())).Returns("/whatever/trackback");
            subtextContext.SetupBlog(blog);
            var handler = new TrackBackHandler(subtextContext.Object);

            //act
            handler.ProcessRequest();

            //assert
            Assert.IsTrue(writer.ToString().Contains("EntryId is invalid or missing"));
        }

        /// <summary>
        /// Makes sure the HTTP handler used to handle trackbacks handles a proper trackback request 
        /// by creating a trackback record in the local system.
        /// </summary>
        [Test]
        [RollBack]
        public void ProcessRequest_WithValidTrackback_CreatesTracbackRecordInDatabase()
        {
            //arrange
            UnitTestHelper.SetupBlog();
            Entry entry = UnitTestHelper.CreateEntryInstanceForSyndication("phil", "this is the title", "body");
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/05/25", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            int id = UnitTestHelper.Create(entry);
            Blog blog = Config.CurrentBlog;
            blog.TrackbacksEnabled = true;
            var subtextContext = new Mock<ISubtextContext>();
            StringWriter writer = subtextContext.FakeSubtextContextRequest(blog, "/trackbackhandler", "/", string.Empty);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Object.RequestContext.RouteData.Values.Add("id", id.ToString());
            subtextContext.SetupBlog(blog);
            var handler = new TrackBackHandler(subtextContext.Object);
            handler.SourceVerification += (sender, e) => e.Verified = true;
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/whatever/entry");
            urlHelper.Setup(u => u.TrackbacksUrl(It.IsAny<int>())).Returns("/whatever/trackback");
            Mock<HttpContextBase> httpContext = Mock.Get(subtextContext.Object.RequestContext.HttpContext);
            httpContext.Setup(c => c.Request.HttpMethod).Returns("POST");

            var form = new NameValueCollection();
            form["title"] = entry.Title;
            form["excert"] = entry.Body;
            form["url"] = "http://myblog.example.com/";
            form["blog_name"] = "Random Blog";

            httpContext.Setup(c => c.Request.Form).Returns(form);

            //act
            handler.ProcessRequest();

            //assert
            ICollection<FeedbackItem> trackbacks = ObjectProvider.Instance().GetFeedbackForEntry(entry);
            Assert.AreEqual(1, trackbacks.Count, "We expect to see the one feedback we just created.");
            Assert.AreEqual("this is the title", trackbacks.First().Title);
        }
    }
}using System;
using System.IO;
using MbUnit.Framework;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class FileHelperTests
    {
        private const string TestDirectory = "unit-test-dir";

        [Test]
        public void IsValidImageFileName_WithImageFileName_ReturnsTrue()
        {
            // arrange
            string fileName = @"abc-ae323340-eghe-23423423.jpg";

            // act
            bool isValid = FileHelper.IsValidImageFilePath(fileName);

            // assert
            Assert.IsTrue(isValid);
        }

        [Test]
        public void IsValidImageFileName_WithTextFileName_ReturnsFalse()
        {
            // arrange
            string fileName = @"abc-ae323340-eghe-23423423.txt";

            // act
            bool isValid = FileHelper.IsValidImageFilePath(fileName);

            // assert
            Assert.IsFalse(isValid);
        }

        [Test]
        public void IsValidFileName_WithValidChars_ReturnsTrue()
        {
            // arrange
            string fileName = @"abc-ae323340-eghe-23423423.jpg";

            // act
            bool isValid = FileHelper.IsValidFilePath(fileName);

            // assert
            Assert.IsTrue(isValid);
        }

        [Test]
        public void IsValidFileName_WithBadFileName_ReturnsFalse()
        {
            // arrange
            string fileName = @"abc-*:\0-|\/:.txt";

            // act
            bool isValid = FileHelper.IsValidFilePath(fileName);

            // assert
            Assert.IsFalse(isValid);
        }

        [Test]
        public void CanCheckDirectory()
        {
            string dir = Path.GetFullPath(TestDirectory);
            FileHelper.EnsureDirectory(dir);
            Assert.IsTrue(Directory.Exists(dir));
        }

        [Test]
        public void CheckDirectoryThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => FileHelper.EnsureDirectory(null));
            UnitTestHelper.AssertThrowsArgumentNullException(() => FileHelper.EnsureDirectory(string.Empty));
        }

        [Test]
        public void WriteBytesToFile_WithNullDestination_ThrowsArgumentNullException()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => FileHelper.WriteBytesToFile(null, new byte[0]));
            UnitTestHelper.AssertThrowsArgumentNullException(
                () => FileHelper.WriteBytesToFile(string.Empty, new byte[0]));
        }

        [Test]
        public void WriteBytesToFile_WithInvalidFilePath_ThrowsInvailidOperationException()
        {
            UnitTestHelper.AssertThrows<InvalidOperationException>(
                () => FileHelper.WriteBytesToFile("c:\\foo\\#$3211|.jpg", new byte[0]));
        }

        [SetUp]
        public void SetUp()
        {
            if(Directory.Exists(TestDirectory))
            {
                Directory.Delete(TestDirectory, true);
            }
            if(Directory.Exists("image"))
            {
                Directory.Delete("image", true);
            }
        }

        [TearDown]
        public void TearDown()
        {
            SetUp();
        }
    }
}using System.Drawing;
using System.IO;
using System.Web;
using MbUnit.Framework;
using Subtext.Framework.Util;
using Subtext.Framework.Web;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class GraphicsHelperTests
    {
        [Test]
        public void GetFileStreamReturnsNullForNullPostedFile()
        {
            // arrange
            HttpPostedFile postedFile = null;

            // act
            byte[] fileStream = postedFile.GetFileStream();

            // assert
            Assert.IsNull(fileStream);
        }

        [Test]
        public void FromFilePathAsUnindexedImage_WithFilePath_ReturnsImage()
        {
            // arrange
            string filePath = UnitTestHelper.UnpackEmbeddedBinaryResource("Framework.pb.jpg", "pb.jpg");

            // act
            Size imageSize;
            using(Image image = GraphicsHelper.FromFilePathAsUnindexedImage(filePath))
            {
                imageSize = image.Size;
            }

            // assert
            Assert.AreEqual(150, imageSize.Width);
            Assert.AreEqual(113, imageSize.Height);
        }

        [Test]
        public void GetResizedImage_WithImage_ReturnsResizedImage()
        {
            // arrange
            string filePath = UnitTestHelper.UnpackEmbeddedBinaryResource("Framework.pb.jpg", "pb.jpg");

            // act
            Size imageSize;
            using(Image image = GraphicsHelper.FromFilePathAsUnindexedImage(filePath))
            {
                using(Image resized = image.GetResizedImage(new Size(100, 50)))
                {
                    imageSize = resized.Size;
                }
            }

            // assert
            Assert.AreEqual(100, imageSize.Width);
            Assert.AreEqual(50, imageSize.Height);
        }

        [SetUp]
        public void SetUp()
        {
            TearDown();
        }

        [TearDown]
        public void TearDown()
        {
            string imagePath = UnitTestHelper.GetPathInExecutingAssemblyLocation("pb.jpg");
            if(File.Exists(imagePath))
            {
                File.Delete(imagePath);
            }
        }
    }
}using MbUnit.Framework;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    /// <summary>
    /// Unit tests for the <see cref="KeyWords"/> class.
    /// </summary>
    [TestFixture]
    public class KeywordsTests
    {
    }
}using System.Drawing;
using MbUnit.Framework;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class MathHelperTests
    {
        [Test]
        public void ScaleToFit_WithImageAlreadyFitting_ReturnsOriginalImage()
        {
            // arrange
            var original = new Size(8, 4); // aspect = 2.00

            // act
            Size resized = original.ScaleToFit(new Size(12, 15));

            // assert
            Assert.AreEqual(new Size(8, 4), resized);
        }

        [Test]
        public void ScaleToFit_ScaledToSameAspectRatio_ScalesExactlyToMaxSize()
        {
            // arrange
            var original = new Size(8, 4); // aspect = 2.00

            // act
            Size resized = original.ScaleToFit(new Size(4, 2));

            // assert
            Assert.AreEqual(new Size(4, 2), resized);
        }

        [Test]
        public void ScaleToFit_WithImageHavingAspectRatioGreaterThanOneScaledToAspectRatioLessThanOne_ScalesCorrectly()
        {
            // arrange
            var original = new Size(7, 5); // aspect = 1.40
            var maxSize = new Size(2, 3); // aspect = 0.67

            // act
            Size resized = original.ScaleToFit(maxSize);

            // assert
            Assert.AreEqual(new Size(2, 1), resized); // aspect = 2
        }

        [Test]
        public void ScaleToFit_WithRealisticImageSizes_ScalesProperly()
        {
            // arrange
            var original = new Size(1352, 879);

            // act
            Size resized = original.ScaleToFit(640, 480);

            // assert
            Assert.AreEqual(new Size(640, 416), resized); // aspect = 2
        }

        [Test]
        public void ScaleToFit_WithImageHavingAspectRatioLessThanOneScaledToAspectRatioGreaterThanOne_ScalesCorrectly()
        {
            // arrange
            var original = new Size(5, 7); // aspect = 0.71
            var maxSize = new Size(4, 3); // aspect = 1.33

            // act
            Size resized = original.ScaleToFit(maxSize);

            // assert
            Assert.AreEqual(new Size(2, 3), resized); // aspect = 0.67
        }

        [Test]
        public void GetAspectRatio_WithLargeRatio_ReturnsCorrectValue() { 
            // arrange
            int width = 111;
            int height = 31;

            // act
            var result = MathHelper.GetAspectRatio(width, height);

            // assert
            Assert.Between((double)result, (double)3.5806451612903225806451612902, (double)3.5806451612903225806451612904);
        }
    }
}using System;
using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class RequestExtensionsTests
    {
        [Test]
        public void GetDateFromRequest_WithDateValuesInRouteData_ReturnsCorrectDate()
        {
            // arrange
            var routeData = new RouteData();
            routeData.Values.Add("year", "2009");
            routeData.Values.Add("month", "01");
            routeData.Values.Add("day", "23");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            DateTime theDate = requestContext.GetDateFromRequest();

            // assert
            Assert.AreEqual(new DateTime(2009, 01, 23), theDate);
        }

        [Test]
        public void GetDateFromRequest_WithNoDayValueInRouteValues_ReturnsFirstDayOfMonth()
        {
            // arrange
            var routeData = new RouteData();
            routeData.Values.Add("year", "2009");
            routeData.Values.Add("month", "01");

            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            DateTime theDate = requestContext.GetDateFromRequest();

            // assert
            Assert.AreEqual(new DateTime(2009, 01, 01), theDate);
        }

        [Test]
        public void GetSlugFromRequest_WithSlugInRouteData_ReturnsSlug()
        {
            // arrange
            var routeData = new RouteData();
            routeData.Values.Add("slug", "my-category");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            string slug = requestContext.GetSlugFromRequest();

            // assert
            Assert.AreEqual("my-category", slug);
        }

        [Test]
        public void GetSlugFromRequest_WithoutSlugInRouteData_ReturnsNull()
        {
            // arrange
            var routeData = new RouteData();
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            string slug = requestContext.GetSlugFromRequest();

            // assert
            Assert.IsNull(slug);
        }

        [Test]
        public void GetIdFromRequest_WithIdInRouteData_ReturnsId()
        {
            // arrange
            var routeData = new RouteData();
            routeData.Values.Add("id", "123");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            int? id = requestContext.GetIdFromRequest();

            // assert
            Assert.AreEqual(123, id);
        }

        [Test]
        public void GetIdFromRequest_WithoutIdInRouteData_ReturnsNull()
        {
            // arrange
            var routeData = new RouteData();
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            int? id = requestContext.GetIdFromRequest();

            // assert
            Assert.IsNull(id);
        }

        [Test]
        public void GetIdFromRequest_WithNonNumericIdInRouteData_ReturnsNull()
        {
            // arrange
            var routeData = new RouteData();
            routeData.Values.Add("id", "a1aoeu23");
            var requestContext = new RequestContext(new Mock<HttpContextBase>().Object, routeData);

            // act
            int? id = requestContext.GetIdFromRequest();

            // assert
            Assert.IsNull(id);
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class SerializationHelperTests
    {
        [Test]
        public void CanSerializeAndDeserializeToAndFromBase64()
        {
            TestStruct test;
            test.Foo = 42;
            test.Bar = "Test";

            string serialized = SerializationHelper.SerializeToBase64String(test);
            Assert.IsNotNull(serialized);
            Assert.IsTrue(serialized.Length > 0);

            var deserialized = SerializationHelper.DeserializeFromBase64String<TestStruct>(serialized);
            Assert.AreEqual(42, deserialized.Foo, "Deserialization failed.");
            Assert.AreEqual("Test", deserialized.Bar, "Deserialization failed.");
        }

        #region Nested type: TestStruct

        [Serializable]
        struct TestStruct
        {
            public string Bar;
            public int Foo;
        }

        #endregion
    }
}using System;
using System.Collections.ObjectModel;
using MbUnit.Framework;
using Subtext.Framework.Util;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class TimeZonesTest
    {
        const string CentralEuropeZoneId = "Central Europe Standard Time";
        public const string HawaiiTimeZoneId = "Hawaiian Standard Time";
        const string NewZealandZoneId = "New Zealand Standard Time";
        public const string PacificTimeZoneId = "Pacific Standard Time";

        [Test]
        public void CanGetTimeZones()
        {
            // arrange, act
            ReadOnlyCollection<TimeZoneInfo> timeZones = TimeZones.GetTimeZones();
            foreach(TimeZoneInfo timeZone in timeZones)
            {
                Console.WriteLine(timeZone.Id.GetHashCode() + "\t" + timeZone.StandardName);
            }

            // assert
            Assert.Greater(timeZones.Count, 10);
        }


        [Test]
        public void GenerateUpdateScript()
        {
            string sql = string.Empty;
            string sqlFormat =
                "UPDATE [<dbUser,varchar,dbo>].[subtext_Config] SET TimeZoneId = '{0}' WHERE TimeZone = {1}" +
                Environment.NewLine + "GO" + Environment.NewLine;
            foreach(TimeZoneInfo timezone in TimeZones.GetTimeZones())
            {
                sql += String.Format(sqlFormat, timezone.Id, timezone.Id.GetHashCode());
            }
            Console.Write(sql);
        }

        //[Test]
        //[Ignore("Only run this when we need to regen this file. Better to make this a build step.")]
        //public void WriteTimeZonesToFile()
        //{
        //    ReadOnlyCollection<TimeZoneInfo> timeZones = TimeZoneInfo.GetSystemTimeZones();
        //    foreach(TimeZoneInfo timeZone in timeZones)
        //    {
        //        Console.WriteLine(timeZone.ToSerializedString());
        //    }

        //    Type tzcType = timeZones.GetType();
        //    XmlSerializer ser = new XmlSerializer(tzcType);
        //    using(StreamWriter writer = new StreamWriter("c:\\WindowsTimeZoneCollection.xml", false, Encoding.UTF8))
        //    {
        //        ser.Serialize(writer, timeZones);
        //    }
        //}
    }
}using System.Collections.Generic;
using System.IO;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Util;
using Subtext.Infrastructure;

namespace UnitTests.Subtext.Framework.Util
{
    [TestFixture]
    public class TransformTests
    {
        readonly string emoticonsPath = UnitTestHelper.GetPathInExecutingAssemblyLocation("emoticons.txt");

        [Test]
        public void CanLoadEmoticonsFile()
        {
            //arrange
            UnitTestHelper.UnpackEmbeddedResource("Web.emoticons.txt", emoticonsPath);
            var cache = new Mock<ICache>();
            cache.Setup(c => c[It.IsAny<string>()]).Returns(null);

            //act
            IList<string> transforms = Transform.LoadTransformFile(cache.Object, emoticonsPath);

            //assert
            Assert.AreEqual(48, transforms.Count, "Expected 48 transformations");
            Assert.AreEqual(@"\[\(H\)]", transforms[0], "The first line does not match");
            Assert.AreEqual(@"<img src=""{0}Images/emotions/smiley-cool.gif"" border=""0"" alt=""Cool"" />"
                            , transforms[1]);
        }

        [Test]
        public void Transform_WithSmiley_TransformsSmiley()
        {
            //arrange
            UnitTestHelper.UnpackEmbeddedResource("Web.emoticons.txt", emoticonsPath);
            var cache = new Mock<ICache>();
            cache.Setup(c => c[It.IsAny<string>()]).Returns(null);

            //act
            string result = Transform.EmoticonsTransforms(cache.Object, "http://example.com/", "[:'(]", emoticonsPath);

            //assert
            Assert.AreEqual(
                @"<img src=""http://example.com/Images/emotions/smiley-cry.gif"" border=""0"" alt=""Cry"" /> ", result);
        }

        [Test]
        public void Transform_WithSmileyWithinSentence_TransformsSmiley()
        {
            //arrange
            UnitTestHelper.UnpackEmbeddedResource("Web.emoticons.txt", emoticonsPath);
            var cache = new Mock<ICache>();
            cache.Setup(c => c[It.IsAny<string>()]).Returns(null);

            //act
            string result = Transform.EmoticonsTransforms(cache.Object, "http://example.com/",
                                                          "Wocka Wocka [:'(] The Whip Master", emoticonsPath);

            //assert
            Assert.AreEqual(
                @"Wocka Wocka <img src=""http://example.com/Images/emotions/smiley-cry.gif"" border=""0"" alt=""Cry"" />  The Whip Master",
                result);
        }

        [TearDown]
        public void TearDown()
        {
            if(File.Exists(emoticonsPath))
            {
                File.Delete(emoticonsPath);
            }
        }
    }
}using System;
using System.Collections.Specialized;
using System.Net;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Util;
using Subtext.Framework.Web;
using UnitTests.Subtext.Framework.Util;
using Subtext.Framework.Properties;

namespace UnitTests.Subtext.Framework.Web
{
    /// <summary>
    /// Contains tests of our handling of Http.
    /// </summary>
    [TestFixture]
    public class HttpHelperTests
    {
        /// <summary>
        /// Tests that we can create a proxy. This is based on some 
        /// settings in Web.config, which we populated in App.config 
        /// for this unit test.
        /// </summary>
        [Test]
        public void CanCreateProxy()
        {
            WebRequest request = WebRequest.Create("http://subtextproject.com/");
            HttpHelper.SetProxy(request);
            Assert.IsNotNull(request.Proxy, "Proxy should not be null.");
        }

        /// <summary>
        /// Tests that we correctly parse if-modified-since from the request.
        /// Unfortunately, this unit test is time-zone sensitive.
        /// </summary>
        [RowTest]
        [Row("4/12/2006", "04/11/2006 5:00 PM")]
        [Row("12 Apr 2006 06:59:33 GMT", "4/11/2006 11:59:33 PM")]
        [Row("Wed, 12 Apr 2006 06:59:33 GMT", "04-11-2006 23:59:33")]
        public void TestIfModifiedSinceExtraction(string received, string expected)
        {
            var headers = new NameValueCollection {{"If-Modified-Since", received}};
            var httpRequest = new Mock<HttpRequestBase>();
            httpRequest.Setup(r => r.Headers).Returns(headers);

            DateTime expectedDate = DateTimeHelper.ParseUnknownFormatUtc(expected);
            Console.WriteLine("{0}\t{1}\t{2}", received, expected, expectedDate.ToUniversalTime());

            DateTime result = HttpHelper.GetIfModifiedSinceDateUtc(httpRequest.Object);
            //Convert to PST:
            TimeZoneInfo timeZone = TimeZones.GetTimeZones().GetById(TimeZonesTest.PacificTimeZoneId);
            result = TimeZoneInfo.ConvertTimeFromUtc(result, timeZone);

            Assert.AreEqual(expectedDate, result);
        }

        [RowTest]
        [Row("test.css", true)]
        [Row("test.js", true)]
        [Row("test.png", true)]
        [Row("test.gif", true)]
        [Row("test.jpg", true)]
        [Row("test.html", true)]
        [Row("test.xml", true)]
        [Row("test.htm", true)]
        [Row("test.txt", true)]
        [Row("test.aspx", false)]
        [Row("test.asmx", false)]
        [Row("test.ashx", false)]
        public void CanDeterimineIsStaticFileRequest(string filename, bool expected)
        {
            // arrange
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.Url).Returns(new Uri("http://localhost:1234/whatever/" + filename));

            Assert.AreEqual(expected, request.Object.IsStaticFileRequest());
        }

        [Test]
        public void GetMimeType_WithPngExtension_ReturnsImagePng()
        {
            // arrange, act
            string mimeType = "/foo.png".GetMimeType();

            Assert.AreEqual("image/png", mimeType);
        }

        [Test]
        public void GetMimeType_WithJpgExtension_ReturnsImageJPEG()
        {
            // arrange, act
            string mimeType = "/foo.Jpg".GetMimeType();

            Assert.AreEqual("image/jpeg", mimeType);
        }

        [Test]
        public void GetMimeType_WithJpegExtension_ReturnsImageJPEG()
        {
            // arrange, act
            string mimeType = "/foo.Jpeg".GetMimeType();

            Assert.AreEqual("image/jpeg", mimeType);
        }

        [Test]
        public void GetMimeType_WithBmpExtension_ReturnsImageBmp()
        {
            // arrange, act
            string mimeType = "/foo.bmp".GetMimeType();

            Assert.AreEqual("image/bmp", mimeType);
        }

        [Test]
        public void GetMimeType_WithGifExtension_ReturnsImageGif()
        {
            // arrange, act
            string mimeType = "/foo.gif".GetMimeType();

            Assert.AreEqual("image/gif", mimeType);
        }

        [Test]
        public void GetMimeType_WithUnknownExtension_ReturnsNone()
        {
            // arrange, act
            string mimeType = "/foo.bif".GetMimeType();

            Assert.AreEqual("none", mimeType);
        }

        [Test]
        public void GetSafeFileName_WithTextContainingInvalidText_RemovesInvalidChars()
        {
            // arrange
            const string text = @"This \|/ : contains bad chars";

            // act
            var fileName = text.GetSafeFileName();

            // assert
            Assert.AreEqual("This   contains bad chars", fileName);
        }

        [Test]
        public void GetSafeFileName_WithNullText_ThrowsArgumentNullException()
        {
            // arrange
            const string text = null;

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => text.GetSafeFileName());
        }

        [Test]
        public void GetSafeFileName_WithEmptyText_ThrowsArgumentNullException()
        {
            // arrange
            string text = string.Empty;

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => text.GetSafeFileName());
        }

        [Test]
        public void HandleFileNotFound_InIntegratedMode_Returns404StatusCodeWithNoRedirect()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection { { "", "404;http://example.com:80/admin/" } };
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.SetupSet(c => c.Response.StatusCode, 404);
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound);
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>(), It.IsAny<bool>())).Throws(new InvalidOperationException("Should not redirect"));
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>())).Throws(new InvalidOperationException("Should not redirect"));

            // act
            httpContext.Object.HandleFileNotFound(true /*integratedMode*/);

            // assert
            httpContext.VerifySet(c => c.Response.StatusCode, 404);
            httpContext.VerifySet(c => c.Response.StatusDescription, Resources.FileNotFound);
        }

        [Test]
        public void HandleFileNotFound_InNonIntegratedModeWithNoQueryString_Returns404StatusCodeWithNoRedirect()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request.QueryString).Returns(new NameValueCollection());
            httpContext.SetupSet(c => c.Response.StatusCode, 404);
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound);
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>(), It.IsAny<bool>())).Throws(new InvalidOperationException("Should not redirect"));
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>())).Throws(new InvalidOperationException("Should not redirect"));

            // act
            httpContext.Object.HandleFileNotFound(false /*integratedMode*/);

            // assert
            httpContext.VerifySet(c => c.Response.StatusCode, 404);
            httpContext.VerifySet(c => c.Response.StatusDescription, Resources.FileNotFound);
        }

        [Test]
        public void HandleFileNotFound_InNonIntegratedModeWithReferrerInQueryString_DoesNotRedirects()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection { { "referrer", "http://google.com/?q=new+year" } };
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.SetupSet(c => c.Response.StatusCode, 404);
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound);
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>(), It.IsAny<bool>())).Throws(new InvalidOperationException("Should not redirect"));
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>())).Throws(new InvalidOperationException("Should not redirect"));

            // act
            var returnUrl = httpContext.Object.Request.GetFileNotFoundRedirectUrl(false /*integratedMode*/);

            // assert
            Assert.IsNull(returnUrl, returnUrl + " is not null");
        }

        [Test]
        public void HandleFileNotFound_InNonIntegratedModeWithUrlHavingExtension_Returns404StatusCodeWithNoRedirect()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection { { "", "404;http://example.com:80/admin/foo.html" } };
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.SetupSet(c => c.Response.StatusCode, 404);
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound);
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>(), It.IsAny<bool>())).Throws(new InvalidOperationException("Should not redirect"));
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>())).Throws(new InvalidOperationException("Should not redirect"));

            // act
            httpContext.Object.HandleFileNotFound(false /*integratedMode*/);

            // assert
            httpContext.VerifySet(c => c.Response.StatusCode, 404);
            httpContext.VerifySet(c => c.Response.StatusDescription, Resources.FileNotFound);
        }


        [Test]
        public void HandleFileNotFound_NonIntegratedModeWithRequestForExtensionlessUrl_RedirectsToUrlWithDefaultAspxAppended()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection {{"", "404;http://example.com:80/admin/"}};
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.Setup(c => c.Request.ApplicationPath).Returns("/");
            httpContext.SetupSet(c => c.Response.StatusCode, 404).Throws(new InvalidOperationException("404 status should not be set"));
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound).Throws(new InvalidOperationException("Should not set file not found"));
            httpContext.Setup(c => c.Response.Redirect("/admin/default.aspx", true));

            // act
            httpContext.Object.HandleFileNotFound(false /*integratedMode*/);

            // assert
            httpContext.Verify(c => c.Response.Redirect("/admin/default.aspx", true));
        }

        [Test]
        public void HandleFileNotFound_NonIntegratedModeWithApplicatioPathAndRequestForExtensionlessUrl_RedirectsToUrlWithDefaultAspxAppended()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection { { "", "404;http://example.com:80/Subtext.Web/admin/" } };
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.Setup(c => c.Request.ApplicationPath).Returns("/Subtext.Web");
            httpContext.SetupSet(c => c.Response.StatusCode, 404).Throws(new InvalidOperationException("404 status should not be set"));
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound).Throws(new InvalidOperationException("Should not set file not found"));
            httpContext.Setup(c => c.Response.Redirect("/Subtext.Web/admin/default.aspx", true));

            // act
            httpContext.Object.HandleFileNotFound(false /*integratedMode*/);

            // assert
            httpContext.Verify(c => c.Response.Redirect("/Subtext.Web/admin/default.aspx", true));
        }

        [Test]
        public void HandleFileNotFound_NonIntegratedModeWithApplicatioPathBlogWithSubfolderHavingDotAndRequestForExtensionlessUrl_RedirectsToUrlWithDefaultAspxAppended()
        {
            // arrange
            var httpContext = new Mock<HttpContextBase>();
            var queryString = new NameValueCollection { { "", "404;http://example.com:80/Subtext.Web/blog.net/" } };
            httpContext.Setup(c => c.Request.QueryString).Returns(queryString);
            httpContext.Setup(c => c.Request.ApplicationPath).Returns("/Subtext.Web");
            httpContext.SetupSet(c => c.Response.StatusCode, 404).Throws(new InvalidOperationException("404 status should not be set"));
            httpContext.SetupSet(c => c.Response.StatusDescription, Resources.FileNotFound).Throws(new InvalidOperationException("Should not set file not found"));
            httpContext.Setup(c => c.Response.Redirect("/Subtext.Web/blog.net/default.aspx", true));

            // act
            httpContext.Object.HandleFileNotFound(false /*integratedMode*/);

            // assert
            httpContext.Verify(c => c.Response.Redirect("/Subtext.Web/blog.net/default.aspx", true));
        }
    }
}using System;
using System.Collections.Specialized;
using System.Security.Principal;
using System.Web;
using System.Web.Security;
using MbUnit.Framework;
using Moq;
using Moq.Stub;
using Subtext.Framework;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Web.HttpModules
{
    [TestFixture]
    public class AuthenticationModuleTests
    {
        [Test]
        public void AuthenticateRequest_WithRequestForStaticFile_ReturnsImmediately()
        {
            // arrange
            var module = new AuthenticationModule();
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request.Cookies).Throws(new InvalidOperationException());
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost"), false,
                                              RequestLocation.StaticFile, "/");

            // act, assert
            module.AuthenticateRequest(httpContext.Object, blogRequest);
        }

        [Test]
        public void GetFormsAuthenticationTicket_WithRequestHavingNoCookies_ReturnsNull()
        {
            // arrange
            var module = new AuthenticationModule();
            
            // act
            var authTicket  = module.GetFormsAuthenticationTicket(null);
            
            // assert
            Assert.IsNull(authTicket);
        }

        [Test]
        public void GetFormsAuthenticationTicket_WithRequestHavingIndecipherableAuthCookies_ReturnsNull()
        {
            // arrange
            var module = new AuthenticationModule();
            var badCookie = new HttpCookie(".ASPXAUTH.42") {Value = "STEOHsuthosaeuthoes234234sThisIsGarbage", Expires = DateTime.Now};
            
            // act
            var ticket = module.GetFormsAuthenticationTicket(badCookie);

            // assert
            Assert.IsNull(ticket);
        }

        [Test]
        public void GetFormsAuthenticationTicket_WithRequestHavingNullAuthTicket_ReturnsNull()
        {
            // arrange
            var module = new AuthenticationModule();
            var authCookie = new HttpCookie(".ASPXAUTH.42") {Value = null};
            
            // act
            var ticket = module.GetFormsAuthenticationTicket(authCookie);

            // assert
            Assert.IsNull(ticket);
        }

        [Test]
        public void GetFormsAuthenticationTicket_WithRequestHavingExpiredAuthCookies_SetsUserToGenericPrincipalWithRoles()
        {
            // arrange
            var module = new AuthenticationModule();
            const string roles = "Admins|HostAdmins|Users";
            var ticket = new FormsAuthenticationTicket(1, ".ASPXAUTH.42", DateTime.Now, DateTime.Now.AddDays(-10), true,
                                                       roles);
            Assert.IsTrue(ticket.Expired);
            string cookieValue = FormsAuthentication.Encrypt(ticket);
            var authCookie = new HttpCookie(".ASPXAUTH.42") {Value = cookieValue};
            
            // act
            var authTicket = module.GetFormsAuthenticationTicket(authCookie);

            // assert
            Assert.IsNull(authTicket);
        }

        [Test]
        public void HandleFormsAuthenticationTicket_WithRequestHavingNullAuthTicket_WritesExpiredCookie()
        {
            // arrange
            Func<BlogRequest, HttpContextBase, string> loginFunc = (r, c) => "/foo/login.aspx";
            var module = new AuthenticationModule();
            var authCookie = new HttpCookie(".ASPXAUTH.42") { Value = null };
            var cookies = new HttpCookieCollection { authCookie };
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Stub(c => c.User);
            httpContext.Setup(c => c.Request.Path).Returns("/");
            httpContext.Setup(c => c.Request.QueryString).Returns(new NameValueCollection());
            httpContext.Setup(c => c.Request.Cookies).Returns(cookies);
            httpContext.Setup(c => c.Response.Redirect(It.IsAny<string>(), true));
            var responseCookies = new HttpCookieCollection();
            httpContext.Setup(c => c.Response.Cookies).Returns(responseCookies);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost"), false,
                                              RequestLocation.Blog, "/") { Blog = new Blog { Id = 42 } };

            // act
            module.HandleFormsAuthenticationTicket(blogRequest, httpContext.Object, null);

            // assert
            var principal = httpContext.Object.User as GenericPrincipal;
            Assert.IsNull(principal);
            Assert.AreEqual(1, responseCookies.Count);
            HttpCookie cookie = responseCookies[".ASPXAUTH.42"];
            Assert.IsTrue(cookie.Expires.AddYears(20) < DateTime.Now);
        }

        [Test]
        public void AuthenticateRequest_WithRequestHavingValidAuthCookies_SetsUserToGenericPrincipalWithRoles()
        {
            // arrange
            var module = new AuthenticationModule();
            const string roles = "Admins|HostAdmins|Users";
            var ticket = new FormsAuthenticationTicket(1, ".ASPXAUTH.42", DateTime.Now, DateTime.Now.AddDays(60), true,
                                                       roles);
            string cookieValue = FormsAuthentication.Encrypt(ticket);
            var authCookie = new HttpCookie(".ASPXAUTH.42") {Value = cookieValue};
            var cookies = new HttpCookieCollection {authCookie};
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Stub(c => c.User);
            httpContext.Setup(c => c.Request.Path).Returns("/");
            httpContext.Setup(c => c.Request.QueryString).Returns(new NameValueCollection());
            httpContext.Setup(c => c.Request.Cookies).Returns(cookies);
            httpContext.Setup(c => c.Response.Cookies).Returns(cookies);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost"), false,
                                              RequestLocation.Blog, "/") {Blog = new Blog {Id = 42}};

            // act
            module.AuthenticateRequest(httpContext.Object, blogRequest);

            // assert
            var principal = httpContext.Object.User as GenericPrincipal;
            Assert.IsNotNull(principal);
            Assert.IsTrue(principal.IsInRole("Admins"));
            Assert.IsTrue(principal.IsInRole("HostAdmins"));
            Assert.IsTrue(principal.IsInRole("Users"));
        }
    }
}using System;
using System.Collections.Specialized;
using System.Web;
using MbUnit.Framework;
using Moq;
using Moq.Stub;
using Subtext.Framework;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Web.HttpModules
{
    [TestFixture]
    public class BlogRequestModuleTests
    {
        [Test]
        public void ConvertRequestToBlogRequest_WithRequestForCorrectHost_ReturnsBlogRequest()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns(
                new BlogLookupResult(new Blog {IsActive = true}, null));
            var httpResponse = new Mock<HttpResponseBase>();
            httpResponse.Setup(r => r.End()).Throws(
                new InvalidOperationException("This method should not have been called"));
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNotNull(request);
        }

        [Test]
        public void ConvertRequestToBlogRequest_WithRequestForAlternateHost_RedirectsToPrimaryHost()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns(new BlogLookupResult(null,
                                                                                               new Uri(
                                                                                                   "http://www.example.com/")));
            var httpResponse = new Mock<HttpResponseBase>();
            httpResponse.Stub(r => r.StatusCode);
            httpResponse.Stub(r => r.StatusDescription);
            httpResponse.Stub(r => r.RedirectLocation);
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNull(request);
            httpResponse.Verify(r => r.End());
            Assert.AreEqual(301, httpResponse.Object.StatusCode);
            Assert.AreEqual("301 Moved Permanently", httpResponse.Object.StatusDescription);
            Assert.AreEqual("http://www.example.com/", httpResponse.Object.RedirectLocation);
        }

        [Test]
        public void ConvertRequestToBlogRequest_WithNoMatchingBlog_RedirectsToBlogNotConfiguredPage()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns((BlogLookupResult)null);
            var httpResponse = new Mock<HttpResponseBase>();
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNull(request.Blog);
            httpResponse.Verify(r => r.Redirect("~/install/BlogNotConfiguredError.aspx", true));
        }

        [Test]
        public void ConvertRequestToBlogRequest_MatchingInactiveBlog_RedirectsToBlogInactivePage()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            var result = new BlogLookupResult(new Blog {IsActive = false}, null);
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns(result);
            var httpResponse = new Mock<HttpResponseBase>();
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNull(request);
            httpResponse.Verify(r => r.Redirect("~/SystemMessages/BlogNotActive.aspx", true));
        }

        [Test]
        public void ConvertRequestToBlogRequestWithRequestForLoginPage_MatchingInactiveBlog_DoesNotRedirect()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            var result = new BlogLookupResult(new Blog {IsActive = false}, null);
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns(result);
            var httpResponse = new Mock<HttpResponseBase>();
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/login.aspx", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNotNull(request);
        }

        [Test]
        public void ConvertRequestToBlogRequest_WithNoMatchingBlogButWithRequestForLoginPage_SetsBlogRequestBlogToNull()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns((BlogLookupResult)null);
            var httpResponse = new Mock<HttpResponseBase>();
            httpResponse.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(
                new InvalidOperationException("Method should not have been called"));
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/login.aspx", true);
            httpRequest.Setup(r => r.FilePath).Returns("/Login.aspx");
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNull(request.Blog);
        }

        [Test]
        public void ConvertRequestToBlogRequest_WithRequestForInstallationDirectory_ReturnsNullBlog()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Throws(
                new InvalidOperationException("Should not be called"));
            var httpResponse = new Mock<HttpResponseBase>();
            httpResponse.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(
                new InvalidOperationException("Method should not have been called"));
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/Install/Anything.aspx", true);
            httpRequest.Setup(r => r.FilePath).Returns("/Install/Anything.aspx");
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNull(request.Blog);
        }

        [Test]
        public void ConvertRequestToBlogRequestForStaticImage_WithNoMatchingBlog_DoesNotRedirect()
        {
            //arrange
            var service = new Mock<IBlogLookupService>();
            var result = new BlogLookupResult(null, new Uri("http://localhost/images/blog/services/identiconhandler.ashx"));
            service.Setup(s => s.Lookup(It.IsAny<BlogRequest>())).Returns(result);
            var httpResponse = new Mock<HttpResponseBase>();
            httpResponse.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(new InvalidOperationException("Should not redirect"));
            Mock<HttpRequestBase> httpRequest = CreateRequest("example.com", "/", "/images/services/identiconhandler.ashx", true);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request).Returns(httpRequest.Object);
            httpContext.Setup(c => c.Response).Returns(httpResponse.Object);
            var module = new BlogRequestModule(service.Object);

            //act
            BlogRequest request = module.ConvertRequestToBlogRequest(httpContext.Object);

            //assert
            Assert.IsNotNull(request);
            Assert.IsNull(request.Blog);
            Assert.AreEqual(RequestLocation.StaticFile, request.RequestLocation);
        }

        private static Mock<HttpRequestBase> CreateRequest(string host, string applicationPath, string rawUrl,
                                                           bool useParametersForHost)
        {
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.RawUrl).Returns(rawUrl);
            request.Setup(r => r.Path).Returns(rawUrl);
            request.Setup(r => r.FilePath).Returns(rawUrl);
            request.Setup(r => r.ApplicationPath).Returns(applicationPath);
            request.Setup(r => r.IsLocal).Returns(true);
            request.Setup(r => r.Url).Returns(new Uri("http://" + host + rawUrl));

            var parameters = new NameValueCollection();
            parameters["HTTP_HOST"] = useParametersForHost ? host : null;
            request.Setup(r => r.Params).Returns(parameters);
            return request;
        }
    }
}using System;
using System.Collections.Specialized;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Web.HttpModules
{
    [TestFixture]
    public class BlogRequestTests
    {
        [Test]
        public void Ctor_WithRequestWithSubfolder_CreatesBlogRequestWithSubfolder()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/foo/bar", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual("foo", blogRequest.Subfolder);
        }

        [Test]
        public void Ctor_WithHostHavingPort_StripsPort()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com:1234", "/", "/foo/bar", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual("example.com", blogRequest.Host);
        }

        [Test]
        public void Ctor_WithRequestHavingNoHostInParameters_CreatesBlogRequestWithHostAuthority()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/foo/bar", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual("example.com", blogRequest.Host);
        }

        [Test]
        public void Ctor_WithRequestForLoginPage_SetsRequestLocationToLogin()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/login.aspx", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.LoginPage, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForSystemMessage_SetsRequestLocationToSystemMessages()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/SystemMessages/anything.aspx", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.SystemMessages, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForHostAdmin_SetsRequestLocationToHostAdmin()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/HostAdmin/anything.aspx", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.HostAdmin, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForInstallDirectoryRoot_SetsRequestLocationToInstallDirectory()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/Install", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.Installation, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForInstallDirectory_SetsRequestLocationToInstallDirectory()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/Install/anything.aspx", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.Installation, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForStaticFile_SetsRequestLocationToStaticFile()
        {
            //arrange
            Mock<HttpRequestBase> request = CreateRequest("example.com", "/", "/Install/anything.css", true);

            //act
            var blogRequest = new BlogRequest(request.Object);

            //assert
            Assert.AreEqual(RequestLocation.StaticFile, blogRequest.RequestLocation);
        }

        [Test]
        public void Ctor_WithRequestForBlog_SetsBlogNotRequiredFalse()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false, RequestLocation.Blog,
                                              "/");

            //assert
            Assert.IsFalse(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForHostAdmin_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false,
                                              RequestLocation.HostAdmin, "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForUpgrade_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false, RequestLocation.Upgrade,
                                              "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForSkins_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false, RequestLocation.Skins,
                                              "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForStaticFile_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false,
                                              RequestLocation.StaticFile, "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForSystemMessages_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false,
                                              RequestLocation.SystemMessages, "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForLoginPage_SetsBlogNotRequiredFalse()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false,
                                              RequestLocation.LoginPage, "/");

            //assert
            Assert.IsFalse(blogRequest.BlogNotRequired);
        }

        [Test]
        public void Ctor_WithRequestForInstallation_SetsBlogNotRequiredTrue()
        {
            //arrange, act
            var blogRequest = new BlogRequest(null, null, new Uri("http://example.com"), false,
                                              RequestLocation.Installation, "/");

            //assert
            Assert.IsTrue(blogRequest.BlogNotRequired);
        }

        private static Mock<HttpRequestBase> CreateRequest(string host, string applicationPath, string rawUrl,
                                                           bool useParametersForHost)
        {
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.RawUrl).Returns(rawUrl);
            request.Setup(r => r.Path).Returns(rawUrl);
            request.Setup(r => r.FilePath).Returns(rawUrl);
            request.Setup(r => r.ApplicationPath).Returns(applicationPath);
            request.Setup(r => r.IsLocal).Returns(host == "localhost");
            request.Setup(r => r.Url).Returns(new Uri("http://" + host + rawUrl));

            var parameters = new NameValueCollection();
            parameters["HTTP_HOST"] = useParametersForHost ? host : null;
            request.Setup(r => r.Params).Returns(parameters);
            return request;
        }
    }
}using System;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext.Framework.Web.HttpModules
{
    [TestFixture]
    public class InstallationCheckModuleTests
    {
        [Test]
        public void GetInstallationRedirectUrl_ForStaticFiles_ReturnsNull()
        {
            // arrange
            var module = new InstallationCheckModule(new Mock<IInstallationManager>().Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/whatever/foo.jpg"),
                                              true, RequestLocation.Blog, "/");
            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, null);

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenHostInfoNull_ReturnsInstallDirectory()
        {
            // arrange
            var module = new InstallationCheckModule(new Mock<IInstallationManager>().Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/foo.aspx"), true,
                                              RequestLocation.Blog, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, null);

            // assert
            Assert.AreEqual("~/install/default.aspx", redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenHostInfoNullButInInstallDirAndNoUpgradeIsRequired_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(false);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.Installation, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, null);

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenHostInfoNotNullAndInstallRequiredButInInstallDirectory_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.Installation, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenHostInfoNotNullAndInstallRequiredButInHostAdminDirectory_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsInstallation);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.HostAdmin, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void
            GetInstallationRedirectUrl_WhenHostInfoNotNullInstallationActionRequiredAndNotInInstallDirectory_ReturnsInstallDirecotry
            ()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsInstallation);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.Blog, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.AreEqual("~/install/default.aspx", redirectUrl);
        }

        [Test]
        public void
            GetInstallationRedirectUrl_WhenHostInfoNotNullInstallationActionRequiredAndInLoginPage_ReturnsInstallDirectory
            ()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsInstallation);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.LoginPage, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.AreEqual("~/install/default.aspx", redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenUpgradeRequiredAndInLoginPage_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsUpgrade);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.LoginPage, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenUpgradeRequiredAndInUpgradeDirectory_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsUpgrade);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.Upgrade, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenUpgradeRequiredAndInSystemMessagesDirectory_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsUpgrade);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.SystemMessages, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenUpgradeRequiredAndInHostAdminDirectory_ReturnsNull()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsUpgrade);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.HostAdmin, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.IsNull(redirectUrl);
        }

        [Test]
        public void GetInstallationRedirectUrl_WhenUpgradeRequired_ReturnsUpgradeDirectory()
        {
            // arrange
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(m => m.GetInstallationStatus(It.IsAny<Version>())).Returns(
                InstallationState.NeedsUpgrade);
            installManager.Setup(m => m.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);
            var module = new InstallationCheckModule(installManager.Object);
            var blogRequest = new BlogRequest("localhost", string.Empty, new Uri("http://localhost/Install/foo.aspx"),
                                              true, RequestLocation.Blog, "/");

            // act
            string redirectUrl = module.GetInstallationRedirectUrl(blogRequest, new HostInfo());

            // assert
            Assert.AreEqual("~/SystemMessages/UpgradeInProgress.aspx", redirectUrl);
        }
    }
}using System;
using System.Text;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;

namespace UnitTests.Subtext.Framework.Web
{
    [TestFixture]
    public class RsdHandlerTests
    {
        [Test]
        public void WriteRsdWritesTheCorrectRSD()
        {
            //arrange
            var blog = new Blog();
            blog.Id = 8675309;
            blog.Subfolder = "sub";
            blog.Host = "example.com";

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.MetaWeblogApiUrl(blog)).Returns(
                new Uri("http://example.com/sub/services/metablogapi.aspx"));

            var builder = new StringBuilder();
            XmlWriter writer = XmlWriter.Create(builder);
            var handler = new RsdHandler(null);

            //act
            handler.WriteRsd(writer, blog, urlHelper.Object);

            //assert
            var xml = new XmlDocument();
            Console.WriteLine(builder);
            xml.LoadXml(builder.ToString());

            var nsmgr = new XmlNamespaceManager(xml.NameTable);
            nsmgr.AddNamespace("rsd", "http://archipelago.phrasewise.com/rsd");

            XmlNode rootRsdNode = xml.SelectSingleNode("/rsd:rsd", nsmgr);
            Assert.IsNotNull(rootRsdNode, "Could not find the root RSD node.");
            Assert.AreEqual("1.0", rootRsdNode.Attributes["version"].InnerText,
                            "Expected the version attribute to be '1.0'");

            XmlNode engineNameNode = xml.SelectSingleNode("/rsd:rsd/rsd:service/rsd:engineName", nsmgr);
            Assert.IsNotNull(engineNameNode, "Could not find the engineName node.");
            Assert.AreEqual(engineNameNode.InnerText, "Subtext");
            XmlNode node = xml.SelectSingleNode("/rsd:rsd/rsd:service/rsd:apis/rsd:api[@name='MetaWeblog']", nsmgr);
            Assert.IsNotNull(node, "Could not find the metaweblog node.");
            Assert.AreEqual("http://example.com/sub/services/metablogapi.aspx", node.Attributes["apiLink"].Value,
                            "Api link is wrong");

            Assert.AreEqual("8675309", node.Attributes["blogID"].Value, "Blog Id is not set.");
        }
    }
}using System.Web;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.Handlers;

namespace UnitTests.Subtext.Framework.Routing
{
    [TestFixture]
    public class SubtextPageTests
    {
        [Test]
        public void SettingSubtextContextPopulatesOtherProperties()
        {
            //arrange
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Repository).Returns(new Mock<ObjectProvider>().Object);
            subtextContext.Setup(c => c.UrlHelper).Returns(
                new UrlHelper(new RequestContext(new Mock<HttpContextBase>().Object, new RouteData()), null));
            subtextContext.Setup(c => c.Blog).Returns(new Blog());
            var subtextPage = new SubtextPage();

            //act
            subtextPage.SubtextContext = subtextContext.Object;

            //assert
            Assert.IsNotNull(subtextPage.Repository);
            Assert.AreSame(subtextPage.SubtextContext.Repository, subtextPage.Repository);
            Assert.IsNotNull(subtextPage.Url);
            Assert.AreSame(subtextPage.SubtextContext.UrlHelper, subtextPage.Url);
            Assert.AreSame(subtextPage.SubtextContext.UrlHelper, subtextPage.AdminUrl.Url);
            Assert.IsNotNull(subtextPage.Blog);
            Assert.AreSame(subtextPage.SubtextContext.Blog, subtextPage.Blog);
        }
    }
}using System;
using System.Globalization;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Web.HttpModules;
using Subtext.Framework.XmlRpc;
using Subtext.Infrastructure;
using Enclosure = Subtext.Framework.XmlRpc.Enclosure;
using FrameworkEnclosure = Subtext.Framework.Components.Enclosure;

namespace UnitTests.Subtext.Framework.XmlRpc
{
    [TestFixture]
    public class MetaBlogApiTests
    {
        [Test]
        public void getCategories_ReturnsCategoriesInRepository()
        {
            //arrange
            var blog = new Blog { AllowServiceAccess = true, Host = "localhost", UserName = "username", Password = "password" };
            var category = new LinkCategory
            {
                BlogId = blog.Id,
                IsActive = true,
                Description = "Test category",
                Title = "CategoryA",
                CategoryType = CategoryType.PostCollection,
                Id = 42
            };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.CategoryUrl(It.IsAny<LinkCategory>())).Returns("/Category/42.aspx");
            subtextContext.Setup(c => c.UrlHelper.CategoryRssUrl(It.IsAny<LinkCategory>())).Returns("/rss.aspx?catId=42");
            subtextContext.Setup(c => c.Repository.GetCategories(CategoryType.PostCollection, false)).Returns(new[] { category });
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);
            var api = new MetaWeblog(subtextContext.Object);

            //act
            CategoryInfo[] categories = api.getCategories(blog.Id.ToString(), "username", "password");

            //assert
            Assert.AreEqual(1, categories.Length);
            Assert.AreEqual("http://localhost/Category/42.aspx", categories[0].htmlUrl);
            Assert.AreEqual("http://localhost/rss.aspx?catId=42", categories[0].rssUrl);
        }

        [Test]
        public void newPost_WithCategory_CreatesEntryWithCategory()
        {
            //arrange
            var blog = new Blog { Id = 42, UserName = "username", Password = "password", AllowServiceAccess = true, Host = "localhost" };

            var entryPublisher = new Mock<IEntryPublisher>();
            Entry publishedEntry = null;
            entryPublisher.Setup(publisher => publisher.Publish(It.IsAny<Entry>())).Callback<Entry>(e => publishedEntry = e);
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);

            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            var post = new Post
            {
                categories = new[] { "CategoryA" },
                description = "A unit test",
                title = "A unit testing title",
                dateCreated = DateTime.UtcNow
            };

            //act
            api.newPost("42", "username", "password", post, true);

            //assert
            Assert.IsNotNull(publishedEntry);
            Assert.AreEqual(1, publishedEntry.Categories.Count);
            Assert.AreEqual("CategoryA", publishedEntry.Categories.First());
        }

        [Test]
        public void NewPost_WithNullCategories_DoesNotTHrowException()
        {
            //arrange
            var blog = new Blog { Id = 42, UserName = "username", Password = "password", AllowServiceAccess = true, Host = "localhost" };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            Entry publishedEntry = null;
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(publisher => publisher.Publish(It.IsAny<Entry>())).Returns(42).Callback<Entry>(
                entry => publishedEntry = entry);

            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            var post = new Post
            {
                categories = null, 
                description = "A unit test", 
                title = "A unit testing title", 
                dateCreated = DateTime.UtcNow
            };

            // act
            string result = api.newPost(blog.Id.ToString(CultureInfo.InvariantCulture), "username", "password", post,
                                        true);

            // assert
            int entryId = int.Parse(result);
            Assert.AreEqual(42, entryId);
            Assert.AreEqual(0, publishedEntry.Categories.Count, "Should not have added categories.");
        }

        [Test]
        public void NewPost_WithFutureDate_SyndicatesInTheFuture()
        {
            //arrange
            var blog = new Blog { Id = 42, UserName = "username", Password = "password", AllowServiceAccess = true, Host = "localhost" };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            Entry publishedEntry = null;
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(publisher => publisher.Publish(It.IsAny<Entry>())).Returns(42).Callback<Entry>(
                entry => publishedEntry = entry);
            DateTime now = DateTime.Now;
            DateTime utcNow = now.ToUniversalTime();

            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            var post = new Post();
            post.categories = null;
            post.description = "A unit test";
            post.title = "A unit testing title";
            post.dateCreated = utcNow.AddDays(1);

            // act
            string result = api.newPost(blog.Id.ToString(CultureInfo.InvariantCulture), "username", "password", post,
                                        true);

            // assert
            Assert.IsNotNull(publishedEntry);
            Assert.Greater(publishedEntry.DateSyndicated, now.AddDays(.75));
            Assert.LowerEqualThan(publishedEntry.DateSyndicated, now.AddDays(1));
        }

        [Test]
        public void NewPostWithEnclosureCreatesEntryWithEnclosure()
        {
            //arrange
            var blog = new Blog { Id = 42, UserName = "username", Password = "password", AllowServiceAccess = true, Host = "localhost" };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            FrameworkEnclosure publishedEnclosure = null;
            subtextContext.Setup(c => c.Repository.Create(It.IsAny<FrameworkEnclosure>())).Callback<FrameworkEnclosure>(
                enclosure => publishedEnclosure = enclosure);
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(publisher => publisher.Publish(It.IsAny<Entry>())).Returns(42);
            DateTime now = DateTime.Now;
            DateTime utcNow = now.ToUniversalTime();

            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            var post = new Post();
            post.categories = null;
            post.description = "A unit test";
            post.title = "A unit testing title";
            post.dateCreated = utcNow.AddDays(1);

            var postEnclosure = new Enclosure();
            postEnclosure.url = "http://codeclimber.net.nz/podcast/mypodcast.mp3";
            postEnclosure.type = "audio/mp3";
            postEnclosure.length = 123456789;
            post.enclosure = postEnclosure;

            // act
            string result = api.newPost(blog.Id.ToString(CultureInfo.InvariantCulture), "username", "password", post,
                                        true);

            // assert
            Assert.IsNotNull(publishedEnclosure);
            Assert.AreEqual("http://codeclimber.net.nz/podcast/mypodcast.mp3", publishedEnclosure.Url);
            Assert.AreEqual("audio/mp3", publishedEnclosure.MimeType);
            Assert.AreEqual(123456789, publishedEnclosure.Size);
        }

        [Test]
        public void NewPostAcceptsNullEnclosure()
        {
            //arrange
            var blog = new Blog { Id = 42, UserName = "username", Password = "password", AllowServiceAccess = true, Host = "localhost" };

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            Entry publishedEntry = null;
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(publisher => publisher.Publish(It.IsAny<Entry>())).Returns(42).Callback<Entry>(
                entry => publishedEntry = entry);
            DateTime now = DateTime.Now;
            DateTime utcNow = now.ToUniversalTime();

            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            var post = new Post();
            post.categories = null;
            post.description = "A unit test";
            post.title = "A unit testing title";
            post.dateCreated = utcNow.AddDays(1);
            post.enclosure = null;

            // act
            string result = api.newPost(blog.Id.ToString(CultureInfo.InvariantCulture), "username", "password", post,
                                        true);

            // assert
            Assert.IsNull(publishedEntry.Enclosure);
        }

        [Test]
        public void editPost_WithEntryHavingEnclosure_UpdatesEntryEnclosureWithNewEncoluser()
        {
            //arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Title 1", Body = "Blah", IsActive = true };
            entry.DateCreated = entry.DateSyndicated = entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add("TestCategory");
            var blog = new Blog { Id = 123, Host = "localhost", AllowServiceAccess = true, UserName = "username", Password = "password" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository.GetEntry(It.IsAny<Int32>(), false, true)).Returns(entry);
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry publishedEntry = null;
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>())).Callback<Entry>(e => publishedEntry = e);
            FrameworkEnclosure enclosure = UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              "http://perseus.franklins.net/hanselminutes_0107.mp3", "audio/mp3", 123, 26707573, true, true);
            entry.Enclosure = enclosure;
            var post = new Post {title = "Title 2", description = "Blah", dateCreated = DateTime.UtcNow};

            var postEnclosure = new Enclosure
            {
                url = "http://codeclimber.net.nz/podcast/mypodcastUpdated.mp3",
                type = "audio/mp3",
                length = 123456789
            };
            post.enclosure = postEnclosure;
            var metaWeblog = new MetaWeblog(subtextContext.Object, entryPublisher.Object);

            // act
            bool result = metaWeblog.editPost("123", "username", "password", post, true);

            // assert
            Assert.IsTrue(result);
            Assert.IsNotNull(publishedEntry.Enclosure);
            Assert.AreEqual("http://codeclimber.net.nz/podcast/mypodcastUpdated.mp3", entry.Enclosure.Url);
        }

        [Test]
        public void editPost_WithEnclosure_AddsNewEnclosure()
        {
            //arrange
            FrameworkEnclosure enclosure = UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              "http://example.com/foo.mp3", "audio/mp3", 123, 26707573, true, true);
            var entry = new Entry(PostType.BlogPost) { Title = "Title 1", Body = "Blah", IsActive = true, Enclosure = enclosure};
            entry.DateCreated = entry.DateSyndicated = entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add("TestCategory");
            var blog = new Blog { Id = 123, Host = "localhost", AllowServiceAccess = true, UserName = "username", Password = "password" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository.GetEntry(It.IsAny<Int32>(), false, true)).Returns(entry);
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry publishedEntry = null;
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>())).Callback<Entry>(e => publishedEntry = e);
            var post = new Post { title = "Title 2", description = "Blah", dateCreated = DateTime.UtcNow };
            var postEnclosure = new Enclosure
            {
                url = "http://example.com/bar.mp3",
                type = "audio/mp3",
                length = 123456789
            };
            post.enclosure = postEnclosure;
            var metaWeblog = new MetaWeblog(subtextContext.Object, entryPublisher.Object);

            // act
            bool result = metaWeblog.editPost("123", "username", "password", post, true);

            // assert
            Assert.IsNotNull(publishedEntry.Enclosure);
            Assert.AreEqual("http://example.com/bar.mp3", entry.Enclosure.Url);
            Assert.AreEqual("audio/mp3", entry.Enclosure.MimeType);
            Assert.AreEqual(123456789, entry.Enclosure.Size);
            Assert.IsTrue(result);
        }

        [Test]
        public void EditPost_WithoutEnclosure_RemovesEnclosureFromEntry()
        {
            // arrange
            FrameworkEnclosure enclosure = UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              "http://example.com/foo.mp3", "audio/mp3", 123, 2650, true, true);
            enclosure.Id = 321;
            var entry = new Entry(PostType.BlogPost) {Title = "Title 1", Body = "Blah", IsActive = true, Enclosure = enclosure};
            entry.DateCreated = entry.DateSyndicated = entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var subtextContext = new Mock<ISubtextContext>();
            var blog = new Blog { Id = 999, Host = "localhost", AllowServiceAccess = true, UserName = "username", Password = "password" };
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository.GetEntry(It.IsAny<Int32>(), false, true)).Returns(entry);
            bool enclosureDeleted = false;
            subtextContext.Setup(c => c.Repository.DeleteEnclosure(321)).Callback(() => enclosureDeleted = true);
            var entryPublisher = new Mock<IEntryPublisher>();
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>()));
            var post = new Post {title = "Title 2", description = "Blah", dateCreated = DateTime.UtcNow};
            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);

            // act
            bool result = api.editPost("999", "username", "password", post, true);

            // assert
            Assert.IsTrue(enclosureDeleted);
            Assert.IsTrue(result);
        }

        [Test]
        [RollBack]
        public void editPost_WithPostHavingDifferentCategoryThanEntry_UpdatesCategory()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost) {Id = 12345, Title = "Title 1", Body = "Blah", IsActive = true };
            entry.Categories.Add("Category1");
            entry.DateCreated = entry.DateSyndicated = entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            var subtextContext = new Mock<ISubtextContext>();
            var blog = new Blog { Id = 999, Host = "localhost", AllowServiceAccess = true, UserName = "username", Password = "password" };
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository.GetEntry(It.IsAny<Int32>(), false, true)).Returns(entry);
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry publishedEntry = null;
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>())).Callback<Entry>(e => publishedEntry = e);
            var post = new Post { title = "Title 2", description = "Blah", categories = new[] { "Category2"}, dateCreated = DateTime.UtcNow };
            var api = new MetaWeblog(subtextContext.Object, entryPublisher.Object);
            
            // act
            bool result = api.editPost("12345", "username", "password", post, true);

            // assert
            Assert.AreEqual(1, publishedEntry.Categories.Count);
            Assert.AreEqual("Category2", publishedEntry.Categories.First());
            Assert.IsTrue(result);
        }

        [Test]
        public void editPost_WithNoCategories_RemovesCategoriesFromEntry()
        {
            //arrange
            var entry = new Entry(PostType.BlogPost) { Title = "Title 1", Body = "Blah", IsActive = true };
            entry.DateCreated = entry.DateSyndicated = entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add("TestCategory");
            var blog = new Blog { Id = 123, Host = "localhost", AllowServiceAccess = true, UserName = "username", Password = "password" };
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.Repository.GetEntry(It.IsAny<Int32>(), false, true)).Returns(entry);
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry publishedEntry = null;
            entryPublisher.Setup(p => p.Publish(It.IsAny<Entry>())).Callback<Entry>(e => publishedEntry = e);
            var post = new Post { title = "Title 2", description = "Blah", categories = null, dateCreated = DateTime.UtcNow };
            var metaWeblog = new MetaWeblog(subtextContext.Object, entryPublisher.Object);

            // act
            metaWeblog.editPost("123", "username", "password", post, true);

            // assert
            Assert.AreEqual(0, publishedEntry.Categories.Count, "We expected no category.");
        }

        [Test]
        [RollBack]
        public void GetRecentPosts_ReturnsRecentPosts()
        {
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "");
            Blog blog = Config.GetBlog(hostname, "");
            BlogRequest.Current.Blog = blog;
            blog.AllowServiceAccess = true;

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/entry/whatever");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            //TODO: FIX!!!
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.SetupBlog(blog);
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);

            var api = new MetaWeblog(subtextContext.Object);
            Post[] posts = api.getRecentPosts(Config.CurrentBlog.Id.ToString(), "username", "password", 10);
            Assert.AreEqual(0, posts.Length);

            string category1Name = UnitTestHelper.GenerateUniqueString();
            string category2Name = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category1Name);
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category2Name);

            var entry = new Entry(PostType.BlogPost);
            entry.Title = "Title 1";
            entry.Body = "Blah";
            entry.IsActive = true;
            entry.IncludeInMainSyndication = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category1Name);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.BlogPost);
            entry.IncludeInMainSyndication = true;
            entry.Title = "Title 2";
            entry.Body = "Blah1";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1976/05/25", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category1Name);
            entry.Categories.Add(category2Name);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.BlogPost);
            entry.Title = "Title 3";
            entry.IncludeInMainSyndication = true;
            entry.Body = "Blah2";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1979/09/16", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.BlogPost);
            entry.Title = "Title 4";
            entry.IncludeInMainSyndication = true;
            entry.Body = "Blah3";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/01/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category2Name);
            int entryId = UnitTestHelper.Create(entry);

            string enclosureUrl = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            string enclosureMimeType = "audio/mp3";
            long enclosureSize = 26707573;

            FrameworkEnclosure enc =
                UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              enclosureUrl, enclosureMimeType, entryId, enclosureSize, true, true);
            Enclosures.Create(enc);

            posts = api.getRecentPosts(Config.CurrentBlog.Id.ToString(), "username", "password", 10);
            Assert.AreEqual(4, posts.Length, "Expected 4 posts");
            Assert.AreEqual(1, posts[3].categories.Length, "Expected our categories to be there.");
            Assert.AreEqual(2, posts[2].categories.Length, "Expected our categories to be there.");
            Assert.IsNotNull(posts[1].categories, "Expected our categories to be there.");
            Assert.AreEqual(1, posts[0].categories.Length, "Expected our categories to be there.");
            Assert.AreEqual(category1Name, posts[3].categories[0], "The category returned by the MetaBlogApi is wrong.");
            Assert.AreEqual(category2Name, posts[0].categories[0], "The category returned by the MetaBlogApi is wrong.");

            Assert.AreEqual(enclosureUrl, posts[0].enclosure.Value.url, "Not what we expected for the enclosure url.");
            Assert.AreEqual(enclosureMimeType, posts[0].enclosure.Value.type,
                            "Not what we expected for the enclosure mimetype.");
            Assert.AreEqual(enclosureSize, posts[0].enclosure.Value.length,
                            "Not what we expected for the enclosure size.");
        }

        [Test]
        [RollBack]
        public void GetPages_WithNumberOfPosts_ReturnsPostsInPages()
        {
            //arrange
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, "");
            Config.CurrentBlog.AllowServiceAccess = true;

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/entry/whatever");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            //TODO: FIX!!!
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);

            var api = new MetaWeblog(subtextContext.Object);
            Post[] posts = api.getRecentPosts(Config.CurrentBlog.Id.ToString(), "username", "password", 10);
            Assert.AreEqual(0, posts.Length);

            string category1Name = UnitTestHelper.GenerateUniqueString();
            string category2Name = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category1Name);
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category2Name);

            var entry = new Entry(PostType.Story);
            entry.Title = "Title 1";
            entry.Body = "Blah";
            entry.IsActive = true;
            entry.IncludeInMainSyndication = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.Story);
            entry.IncludeInMainSyndication = true;
            entry.Title = "Title 2";
            entry.Body = "Blah1";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1976/05/25", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.Story);
            entry.Categories.Add(category1Name);
            entry.Categories.Add(category2Name);
            entry.Title = "Title 3";
            entry.IncludeInMainSyndication = true;
            entry.Body = "Blah2";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1979/09/16", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            UnitTestHelper.Create(entry);

            entry = new Entry(PostType.Story);
            entry.Title = "Title 4";
            entry.IncludeInMainSyndication = true;
            entry.Body = "Blah3";
            entry.IsActive = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("2006/01/01", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category2Name);
            int entryId = UnitTestHelper.Create(entry);

            string enclosureUrl = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            string enclosureMimeType = "audio/mp3";
            long enclosureSize = 26707573;

            FrameworkEnclosure enc =
                UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              enclosureUrl, enclosureMimeType, entryId, enclosureSize, true, true);
            Enclosures.Create(enc);

            //act
            posts = api.getPages(Config.CurrentBlog.Id.ToString(), "username", "password", 2);

            //assert
            Assert.AreEqual(2, posts.Length);
            Assert.AreEqual(1, posts[0].categories.Length);
            Assert.AreEqual(2, posts[1].categories.Length);
            Assert.IsNotNull(posts[1].categories, "Expected our categories to be there.");

            Assert.AreEqual(enclosureUrl, posts[0].enclosure.Value.url);
            Assert.AreEqual(enclosureMimeType, posts[0].enclosure.Value.type);
            Assert.AreEqual(enclosureSize, posts[0].enclosure.Value.length);
        }

        [Test]
        [RollBack]
        public void GetPost_WithEntryId_ReturnsPostWithCorrectEntryUrl()
        {
            //arrange
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, "");
            Config.CurrentBlog.AllowServiceAccess = true;

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/entry/whatever");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            //TODO: FIX!!!
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);

            var api = new MetaWeblog(subtextContext.Object);
            string category1Name = UnitTestHelper.GenerateUniqueString();
            string category2Name = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category1Name);
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category2Name);

            var entry = new Entry(PostType.BlogPost);
            entry.Title = "Title 1";
            entry.Body = "Blah";
            entry.IsActive = true;
            entry.IncludeInMainSyndication = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category1Name);
            int entryId = UnitTestHelper.Create(entry);
            string enclosureUrl = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            string enclosureMimeType = "audio/mp3";
            long enclosureSize = 26707573;

            FrameworkEnclosure enc =
                UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              enclosureUrl, enclosureMimeType, entryId, enclosureSize, true, true);
            Enclosures.Create(enc);

            //act
            Post post = api.getPost(entryId.ToString(), "username", "password");

            //assert
            Assert.AreEqual(1, post.categories.Length);
            Assert.AreEqual("http://" + hostname + "/entry/whatever", post.link);
            Assert.AreEqual("http://" + hostname + "/entry/whatever", post.permalink);
            Assert.AreEqual(category1Name, post.categories[0]);
            Assert.AreEqual(enclosureUrl, post.enclosure.Value.url);
            Assert.AreEqual(enclosureMimeType, post.enclosure.Value.type);
            Assert.AreEqual(enclosureSize, post.enclosure.Value.length);
        }

        [Test]
        [RollBack]
        public void GetPage_ReturnsPostWithhCorrectEntrUrl()
        {
            //arrange
            string hostname = UnitTestHelper.GenerateUniqueString();
            Config.CreateBlog("", "username", "password", hostname, "");
            UnitTestHelper.SetHttpContextWithBlogRequest(hostname, "");
            BlogRequest.Current.Blog = Config.GetBlog(hostname, "");
            Config.CurrentBlog.AllowServiceAccess = true;

            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns("/entry/whatever");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(Config.CurrentBlog);
            //TODO: FIX!!!
            subtextContext.Setup(c => c.Repository).Returns(ObjectProvider.Instance());
            subtextContext.Setup(c => c.ServiceLocator).Returns(new Mock<IServiceLocator>().Object);
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);

            var api = new MetaWeblog(subtextContext.Object);
            string category1Name = UnitTestHelper.GenerateUniqueString();
            string category2Name = UnitTestHelper.GenerateUniqueString();
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category1Name);
            UnitTestHelper.CreateCategory(Config.CurrentBlog.Id, category2Name);

            var entry = new Entry(PostType.Story);
            entry.Title = "Title 1";
            entry.Body = "Blah";
            entry.IsActive = true;
            entry.IncludeInMainSyndication = true;
            entry.DateCreated =
                entry.DateSyndicated =
                entry.DateModified = DateTime.ParseExact("1975/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture);
            entry.Categories.Add(category1Name);
            int entryId = UnitTestHelper.Create(entry);
            string enclosureUrl = "http://perseus.franklins.net/hanselminutes_0107.mp3";
            string enclosureMimeType = "audio/mp3";
            long enclosureSize = 26707573;

            FrameworkEnclosure enc =
                UnitTestHelper.BuildEnclosure("<Digital Photography Explained (for Geeks) with Aaron Hockley/>",
                                              enclosureUrl, enclosureMimeType, entryId, enclosureSize, true, true);
            Enclosures.Create(enc);

            //act
            Post post = api.getPage(Config.CurrentBlog.Id.ToString(), entryId.ToString(), "username", "password");

            //assert
            Assert.AreEqual(1, post.categories.Length);
            Assert.AreEqual("http://" + hostname + "/entry/whatever", post.link);
            Assert.AreEqual("http://" + hostname + "/entry/whatever", post.permalink);
            Assert.AreEqual(category1Name, post.categories[0]);
            Assert.AreEqual(enclosureUrl, post.enclosure.Value.url);
            Assert.AreEqual(enclosureMimeType, post.enclosure.Value.type);
            Assert.AreEqual(enclosureSize, post.enclosure.Value.length);
        }
    }
}using System;
using System.Collections.Specialized;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Configuration;
using System.Web.Hosting;
using System.Web.SessionState;

namespace UnitTests.Subtext
{
    public enum HttpVerb
    {
        GET,
        HEAD,
        POST,
        PUT,
        DELETE,
    }

    /// <summary>
    /// Useful class for simulating the HttpContext. This does not actually 
    /// make an HttpRequest, it merely simulates the state that your code 
    /// would be in "as if" handling a request. Thus the HttpContext.Current 
    /// property is populated.
    /// </summary>
    public class HttpSimulator : IDisposable
    {
        private const string DefaultPhysicalAppPath = @"c:\InetPub\wwwRoot\";
        private readonly NameValueCollection _formVars = new NameValueCollection();
        private readonly NameValueCollection _headers = new NameValueCollection();
        private Uri _referer;
        private string _applicationPath = "/";
        private StringBuilder _builder;
        private string _physicalApplicationPath = DefaultPhysicalAppPath;
        private string _physicalPath = DefaultPhysicalAppPath;
        private TextWriter _responseWriter;
        private SimulatedHttpRequest _workerRequest;
        private string _currentExecutionPath;

        public HttpSimulator() : this("/", DefaultPhysicalAppPath)
        {
        }

        public HttpSimulator(string applicationPath) : this(applicationPath, DefaultPhysicalAppPath)
        {
        }

        public HttpSimulator(string applicationPath, string physicalApplicationPath)
        {
            ApplicationPath = applicationPath;
            PhysicalApplicationPath = physicalApplicationPath;
        }

        public string Host { get; private set; }

        public string LocalPath { get; private set; }

        public int Port { get; private set; }

        /// <summary>
        /// Portion of the URL after the application.
        /// </summary>
        public string Page { get; private set; }

        /// <summary>
        /// The same thing as the IIS Virtual directory. It's 
        /// what gets returned by Request.ApplicationPath.
        /// </summary>
        public string ApplicationPath
        {
            get { return _applicationPath; }
            set
            {
                _applicationPath = value ?? "/";
                _applicationPath = NormalizeSlashes(_applicationPath);
            }
        }

        /// <summary>
        /// Physical path to the application (used for simulation purposes).
        /// </summary>
        public string PhysicalApplicationPath
        {
            get { return _physicalApplicationPath; }
            set
            {
                _physicalApplicationPath = value ?? DefaultPhysicalAppPath;
                //strip trailing backslashes.
                _physicalApplicationPath = StripTrailingBackSlashes(_physicalApplicationPath) + @"\";
            }
        }

        /// <summary>
        /// Physical path to the requested file (used for simulation purposes).
        /// </summary>
        public string PhysicalPath
        {
            get { return _physicalPath; }
        }

        public TextWriter ResponseWriter
        {
            get { return _responseWriter; }
            set { _responseWriter = value; }
        }

        /// <summary>
        /// Returns the text from the response to the simulated request.
        /// </summary>
        public string ResponseText
        {
            get { return (_builder ?? new StringBuilder()).ToString(); }
        }

        public SimulatedHttpRequest WorkerRequest
        {
            get { return _workerRequest; }
        }

        /// <summary>
        /// Sets up the HttpContext objects to simulate a GET request.
        /// </summary>
        /// <remarks>
        /// Simulates a request to http://localhost/
        /// </remarks>
        public HttpSimulator SimulateRequest()
        {
            return SimulateRequest(new Uri("http://localhost/"));
        }

        /// <summary>
        /// Sets up the HttpContext objects to simulate a GET request.
        /// </summary>
        /// <param name="url"></param>
        public HttpSimulator SimulateRequest(Uri url)
        {
            return SimulateRequest(url, HttpVerb.GET);
        }

        /// Sets up the HttpContext objects to simulate a request.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpVerb"></param>
        public HttpSimulator SimulateRequest(Uri url, HttpVerb httpVerb)
        {
            return SimulateRequest(url, httpVerb, null, null);
        }

        /// <summary>
        /// Sets up the HttpContext objects to simulate a POST request.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="formVariables"></param>
        public HttpSimulator SimulateRequest(Uri url, NameValueCollection formVariables)
        {
            return SimulateRequest(url, HttpVerb.POST, formVariables, null);
        }

        /// <summary>
        /// Sets up the HttpContext objects to simulate a POST request.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="formVariables"></param>
        /// <param name="headers"></param>
        public HttpSimulator SimulateRequest(Uri url, NameValueCollection formVariables, NameValueCollection headers)
        {
            return SimulateRequest(url, HttpVerb.POST, formVariables, headers);
        }

        /// <summary>
        /// Sets up the HttpContext objects to simulate a request.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpVerb"></param>
        /// <param name="headers"></param>
        public HttpSimulator SimulateRequest(Uri url, HttpVerb httpVerb, NameValueCollection headers)
        {
            return SimulateRequest(url, httpVerb, null, headers);
        }
        
        /// <summary>
        /// Sets up the HttpContext objects to simulate a request.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpVerb"></param>
        /// <param name="formVariables"></param>
        /// <param name="headers"></param>
        protected virtual HttpSimulator SimulateRequest(Uri url, HttpVerb httpVerb, NameValueCollection formVariables,
                                                        NameValueCollection headers)
        {
            HttpContext.Current = null;

            ParseRequestUrl(url);

            if(_responseWriter == null)
            {
                _builder = new StringBuilder();
                _responseWriter = new StringWriter(_builder);
            }

            SetHttpRuntimeInternals();

            string query = ExtractQueryStringPart(url);

            if(formVariables != null)
            {
                _formVars.Add(formVariables);
            }

            if(_formVars.Count > 0)
            {
                httpVerb = HttpVerb.POST; //Need to enforce this.
            }

            if(headers != null)
            {
                _headers.Add(headers);
            }

            _workerRequest = new SimulatedHttpRequest(ApplicationPath, PhysicalApplicationPath, PhysicalPath, Page, query,
                                                     _responseWriter, Host, Port, httpVerb.ToString());
            _workerRequest.CurrentExecutionPath = _currentExecutionPath;
            _workerRequest.Form.Add(_formVars);
            _workerRequest.Headers.Add(_headers);

            if(_referer != null)
            {
                _workerRequest.SetReferer(_referer);
            }

            InitializeSession();
            InitializeApplication();

            #region Console Debug INfo

            //Console.WriteLine("host: " + _host);
            //Console.WriteLine("virtualDir: " + applicationPath);
            //Console.WriteLine("page: " + _localPath);
            //Console.WriteLine("pathPartAfterApplicationPart: " + _page);
            //Console.WriteLine("appPhysicalDir: " + _physicalApplicationPath);
            //Console.WriteLine("Request.Url.LocalPath: " + HttpContext.Current.Request.Url.LocalPath);
            //Console.WriteLine("Request.Url.Host: " + HttpContext.Current.Request.Url.Host);
            //Console.WriteLine("Request.FilePath: " + HttpContext.Current.Request.FilePath);
            //Console.WriteLine("Request.Path: " + HttpContext.Current.Request.Path);
            //Console.WriteLine("Request.RawUrl: " + HttpContext.Current.Request.RawUrl);
            //Console.WriteLine("Request.Url: " + HttpContext.Current.Request.Url);
            //Console.WriteLine("Request.Url.Port: " + HttpContext.Current.Request.Url.Port);
            //Console.WriteLine("Request.ApplicationPath: " + HttpContext.Current.Request.ApplicationPath);
            //Console.WriteLine("Request.PhysicalPath: " + HttpContext.Current.Request.PhysicalPath);
            //Console.WriteLine("HttpRuntime.AppDomainAppPath: " + HttpRuntime.AppDomainAppPath);
            //Console.WriteLine("HttpRuntime.AppDomainAppVirtualPath: " + HttpRuntime.AppDomainAppVirtualPath);
            //Console.WriteLine("HostingEnvironment.ApplicationPhysicalPath: " + HostingEnvironment.ApplicationPhysicalPath);
            //Console.WriteLine("HostingEnvironment.ApplicationVirtualPath: " + HostingEnvironment.ApplicationVirtualPath);

            #endregion

            return this;
        }

        private static void InitializeApplication()
        {
            Type appFactoryType =
                Type.GetType(
                    "System.Web.HttpApplicationFactory, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");
            var appFactory = ReflectionHelper.GetStaticFieldValue<object>("_theApplicationFactory", appFactoryType);
            ReflectionHelper.SetPrivateInstanceFieldValue("_state", appFactory, HttpContext.Current.Application);
        }

        private void InitializeSession()
        {
            HttpContext.Current = new HttpContext(_workerRequest);
            HttpContext.Current.Items.Clear();
            var session =
                (HttpSessionState)
                ReflectionHelper.Instantiate(typeof(HttpSessionState), new[] {typeof(IHttpSessionState)},
                                             new FakeHttpSessionState());

            HttpContext.Current.Items.Add("AspSession", session);
        }

        /// <summary>
        /// Sets the referer for the request. Uses a fluent interface.
        /// </summary>
        /// <param name="referer"></param>
        /// <returns></returns>
        public HttpSimulator SetReferer(Uri referer)
        {
            if(_workerRequest != null)
            {
                _workerRequest.SetReferer(referer);
            }
            _referer = referer;
            return this;
        }

        /// <summary>
        /// Sets a form variable.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public HttpSimulator SetFormVariable(string name, string value)
        {
            //TODO: Change this ordering requirement.
            if(_workerRequest != null)
            {
                throw new InvalidOperationException("Cannot set form variables after calling Simulate().");
            }

            _formVars.Add(name, value);

            return this;
        }

        /// <summary>
        /// Sets a header value.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public HttpSimulator SetHeader(string name, string value)
        {
            //TODO: Change this ordering requirement.
            if(_workerRequest != null)
            {
                throw new InvalidOperationException("Cannot set headers after calling Simulate().");
            }

            _headers.Add(name, value);

            return this;
        }

        private void ParseRequestUrl(Uri url)
        {
            if(url == null)
            {
                return;
            }
            Host = url.Host;
            Port = url.Port;
            LocalPath = url.LocalPath;
            Page = StripPrecedingSlashes(RightAfter(url.LocalPath, ApplicationPath));
            _physicalPath = Path.Combine(_physicalApplicationPath, Page.Replace("/", @"\"));
            _currentExecutionPath = "/" + StripPrecedingSlashes(url.LocalPath);
        }

        static string RightAfter(string original, string search)
        {
            if(search.Length > original.Length || search.Length == 0)
            {
                return original;
            }

            int searchIndex = original.IndexOf(search, 0, StringComparison.InvariantCultureIgnoreCase);

            if(searchIndex < 0)
            {
                return original;
            }

            return original.Substring(original.IndexOf(search) + search.Length);
        }

        private static string ExtractQueryStringPart(Uri url)
        {
            string query = url.Query ?? string.Empty;
            if(query.StartsWith("?"))
            {
                return query.Substring(1);
            }
            return query;
        }

        void SetHttpRuntimeInternals()
        {
            //We cheat by using reflection.

            // get singleton property value
            var runtime = ReflectionHelper.GetStaticFieldValue<HttpRuntime>("_theRuntime", typeof(HttpRuntime));

            // set app path property value
            ReflectionHelper.SetPrivateInstanceFieldValue("_appDomainAppPath", runtime, PhysicalApplicationPath);
            // set app virtual path property value
            const string vpathTypeName = "System.Web.VirtualPath, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
            object virtualPath = ReflectionHelper.Instantiate(vpathTypeName, new[] {typeof(string)},
                                                              new object[] {ApplicationPath + "/"});
            ReflectionHelper.SetPrivateInstanceFieldValue("_appDomainAppVPath", runtime, virtualPath);

            // set codegen dir property value
            ReflectionHelper.SetPrivateInstanceFieldValue("_codegenDir", runtime, PhysicalApplicationPath);

            HostingEnvironment environment = GetHostingEnvironment();
            ReflectionHelper.SetPrivateInstanceFieldValue("_appPhysicalPath", environment, PhysicalApplicationPath);
            ReflectionHelper.SetPrivateInstanceFieldValue("_appVirtualPath", environment, virtualPath);
            ReflectionHelper.SetPrivateInstanceFieldValue("_configMapPath", environment, new ConfigMapPath(this));
        }

        protected static HostingEnvironment GetHostingEnvironment()
        {
            HostingEnvironment environment;
            try
            {
                environment = new HostingEnvironment();
            }
            catch(InvalidOperationException)
            {
                //Shoot, we need to grab it via reflection.
                environment = ReflectionHelper.GetStaticFieldValue<HostingEnvironment>("_theHostingEnvironment",
                                                                                       typeof(HostingEnvironment));
            }
            return environment;
        }

        ///<summary>
        ///Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        ///</summary>
        ///<filterpriority>2</filterpriority>
        public void Dispose()
        {
            if(HttpContext.Current != null)
            {
                HttpContext.Current = null;
            }
        }

        #region --- Text Manipulation Methods for slashes ---

        protected static string NormalizeSlashes(string s)
        {
            if(String.IsNullOrEmpty(s) || s == "/")
            {
                return "/";
            }

            s = s.Replace(@"\", "/");

            //Reduce multiple slashes in row to single.
            string normalized = Regex.Replace(s, "(/)/+", "$1");
            //Strip left.
            normalized = StripPrecedingSlashes(normalized);
            //Strip right.
            normalized = StripTrailingSlashes(normalized);
            return "/" + normalized;
        }

        protected static string StripPrecedingSlashes(string s)
        {
            return Regex.Replace(s, "^/*(.*)", "$1");
        }

        protected static string StripTrailingSlashes(string s)
        {
            return Regex.Replace(s, "(.*)/*$", "$1", RegexOptions.RightToLeft);
        }

        protected static string StripTrailingBackSlashes(string s)
        {
            if(String.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            return Regex.Replace(s, @"(.*)\\*$", "$1", RegexOptions.RightToLeft);
        }

        #endregion

        #region Nested type: ConfigMapPath

        public class ConfigMapPath : IConfigMapPath
        {
            private readonly HttpSimulator _requestSimulation;

            public ConfigMapPath(HttpSimulator simulation)
            {
                _requestSimulation = simulation;
            }

            #region IConfigMapPath Members

            public string GetMachineConfigFilename()
            {
                throw new NotImplementedException();
            }

            public string GetRootWebConfigFilename()
            {
                throw new NotImplementedException();
            }

            public void GetPathConfigFilename(string siteID, string path, out string directory, out string baseName)
            {
                throw new NotImplementedException();
            }

            public void GetDefaultSiteNameAndID(out string siteName, out string siteID)
            {
                throw new NotImplementedException();
            }

            public void ResolveSiteArgument(string siteArgument, out string siteName, out string siteID)
            {
                throw new NotImplementedException();
            }

            public string MapPath(string siteID, string path)
            {
                string page = StripPrecedingSlashes(RightAfter(path, _requestSimulation.ApplicationPath));
                return Path.Combine(_requestSimulation.PhysicalApplicationPath, page.Replace("/", @"\"));
            }

            public string GetAppPathForPath(string siteID, string path)
            {
                return _requestSimulation.ApplicationPath;
            }

            #endregion
        }

        #endregion

        #region Nested type: FakeHttpSessionState

        public class FakeHttpSessionState : NameObjectCollectionBase, IHttpSessionState
        {
            private bool isNewSession = true;
            private string sessionID = Guid.NewGuid().ToString();
            private HttpStaticObjectsCollection staticObjects = new HttpStaticObjectsCollection();
            private object syncRoot = new Object();
            private int timeout = 30; //minutes

            #region IHttpSessionState Members

            ///<summary>
            ///Ends the current session.
            ///</summary>
            ///
            public void Abandon()
            {
                BaseClear();
            }

            ///<summary>
            ///Adds a new item to the session-state collection.
            ///</summary>
            ///
            ///<param name="name">The name of the item to add to the session-state collection. </param>
            ///<param name="value">The value of the item to add to the session-state collection. </param>
            public void Add(string name, object value)
            {
                BaseAdd(name, value);
            }

            ///<summary>
            ///Deletes an item from the session-state item collection.
            ///</summary>
            ///
            ///<param name="name">The name of the item to delete from the session-state item collection. </param>
            public void Remove(string name)
            {
                BaseRemove(name);
            }

            ///<summary>
            ///Deletes an item at a specified index from the session-state item collection.
            ///</summary>
            ///
            ///<param name="index">The index of the item to remove from the session-state collection. </param>
            public void RemoveAt(int index)
            {
                BaseRemoveAt(index);
            }

            ///<summary>
            ///Clears all values from the session-state item collection.
            ///</summary>
            ///
            public void Clear()
            {
                BaseClear();
            }

            ///<summary>
            ///Clears all values from the session-state item collection.
            ///</summary>
            ///
            public void RemoveAll()
            {
                BaseClear();
            }

            ///<summary>
            ///Copies the collection of session-state item values to a one-dimensional array, starting at the specified index in the array.
            ///</summary>
            ///
            ///<param name="array">The <see cref="T:System.Array"></see> that receives the session values. </param>
            ///<param name="index">The index in array where copying starts. </param>
            public void CopyTo(Array array, int index)
            {
                throw new NotImplementedException();
            }

            ///<summary>
            ///Gets the unique session identifier for the session.
            ///</summary>
            ///
            ///<returns>
            ///The session ID.
            ///</returns>
            ///
            public string SessionID
            {
                get { return sessionID; }
            }

            ///<summary>
            ///Gets and sets the time-out period (in minutes) allowed between requests before the session-state provider terminates the session.
            ///</summary>
            ///
            ///<returns>
            ///The time-out period, in minutes.
            ///</returns>
            ///
            public int Timeout
            {
                get { return timeout; }
                set { timeout = value; }
            }

            ///<summary>
            ///Gets a value indicating whether the session was created with the current request.
            ///</summary>
            ///
            ///<returns>
            ///true if the session was created with the current request; otherwise, false.
            ///</returns>
            ///
            public bool IsNewSession
            {
                get { return isNewSession; }
            }

            ///<summary>
            ///Gets the current session-state mode.
            ///</summary>
            ///
            ///<returns>
            ///One of the <see cref="T:System.Web.SessionState.SessionStateMode"></see> values.
            ///</returns>
            ///
            public SessionStateMode Mode
            {
                get { return SessionStateMode.InProc; }
            }

            ///<summary>
            ///Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.
            ///</summary>
            ///
            ///<returns>
            ///true if the session is embedded in the URL; otherwise, false.
            ///</returns>
            ///
            public bool IsCookieless
            {
                get { return false; }
            }

            ///<summary>
            ///Gets a value that indicates whether the application is configured for cookieless sessions.
            ///</summary>
            ///
            ///<returns>
            ///One of the <see cref="T:System.Web.HttpCookieMode"></see> values that indicate whether the application is configured for cookieless sessions. The default is <see cref="F:System.Web.HttpCookieMode.UseCookies"></see>.
            ///</returns>
            ///
            public HttpCookieMode CookieMode
            {
                get { return HttpCookieMode.UseCookies; }
            }

            ///<summary>
            ///Gets or sets the locale identifier (LCID) of the current session.
            ///</summary>
            ///
            ///<returns>
            ///A <see cref="T:System.Globalization.CultureInfo"></see> instance that specifies the culture of the current session.
            ///</returns>
            ///
            public int LCID { get; set; }

            ///<summary>
            ///Gets or sets the code-page identifier for the current session.
            ///</summary>
            ///
            ///<returns>
            ///The code-page identifier for the current session.
            ///</returns>
            ///
            public int CodePage { get; set; }

            ///<summary>
            ///Gets a collection of objects declared by &lt;object Runat="Server" Scope="Session"/&gt; tags within the ASP.NET application file Global.asax.
            ///</summary>
            ///
            ///<returns>
            ///An <see cref="T:System.Web.HttpStaticObjectsCollection"></see> containing objects declared in the Global.asax file.
            ///</returns>
            ///
            public HttpStaticObjectsCollection StaticObjects
            {
                get { return staticObjects; }
            }

            ///<summary>
            ///Gets or sets a session-state item value by name.
            ///</summary>
            ///
            ///<returns>
            ///The session-state item value specified in the name parameter.
            ///</returns>
            ///
            ///<param name="name">The key name of the session-state item value. </param>
            public object this[string name]
            {
                get { return BaseGet(name); }
                set { BaseSet(name, value); }
            }

            ///<summary>
            ///Gets or sets a session-state item value by numerical index.
            ///</summary>
            ///
            ///<returns>
            ///The session-state item value specified in the index parameter.
            ///</returns>
            ///
            ///<param name="index">The numerical index of the session-state item value. </param>
            public object this[int index]
            {
                get { return BaseGet(index); }
                set { BaseSet(index, value); }
            }

            ///<summary>
            ///Gets an object that can be used to synchronize access to the collection of session-state values.
            ///</summary>
            ///
            ///<returns>
            ///An object that can be used to synchronize access to the collection.
            ///</returns>
            ///
            public object SyncRoot
            {
                get { return syncRoot; }
            }


            ///<summary>
            ///Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).
            ///</summary>
            ///<returns>
            ///true if access to the collection is synchronized (thread safe); otherwise, false.
            ///</returns>
            ///
            public bool IsSynchronized
            {
                get { return true; }
            }

            ///<summary>
            ///Gets a value indicating whether the session is read-only.
            ///</summary>
            ///
            ///<returns>
            ///true if the session is read-only; otherwise, false.
            ///</returns>
            ///
            bool IHttpSessionState.IsReadOnly
            {
                get { return true; }
            }

            #endregion
        }

        #endregion
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Components;

namespace UnitTests.Subtext.InstallationTests
{
    /// <summary>
    /// Tests of the InstallationManager class.
    /// </summary>
    [TestFixture]
    public class InstallationManagerTests
    {
        [Test]
        public void IsInstallationActionRequired_WithInstallerReturningNull_ReturnsTrue()
        {
            //arrange
            var installer = new Mock<IInstaller>();
            installer.Setup(i => i.GetCurrentInstallationVersion()).Returns((Version)null);
            var cache = new TestCache();
            cache["NeedsInstallation"] = null;
            var manager = new InstallationManager(installer.Object, cache);

            //act
            bool result = manager.InstallationActionRequired(new Version(), null);

            //assert
            Assert.IsTrue(result);
        }

        [Test]
        public void IsInstallationActionRequired_WithCachedInstallationStatusOfNeedsInstallation_ReturnsTrue()
        {
            //arrange
            var installer = new Mock<IInstaller>();
            installer.Setup(i => i.GetCurrentInstallationVersion()).Throws(new InvalidOperationException());
            var cache = new TestCache();
            cache["NeedsInstallation"] = InstallationState.NeedsInstallation;
            var manager = new InstallationManager(installer.Object, cache);

            //act
            bool result = manager.InstallationActionRequired(new Version(), null);

            //assert
            Assert.IsTrue(result);
        }

        [Test]
        public void IsInstallationActionRequired_WithInstallerReturningSameVersionAsAssembly_ReturnsFalse()
        {
            //arrange
            var installer = new Mock<IInstaller>();
            installer.Setup(i => i.GetCurrentInstallationVersion()).Returns(new Version(1, 0, 0, 0));
            var installManager = new InstallationManager(installer.Object, new TestCache());

            //act
            bool result = installManager.InstallationActionRequired(new Version(1, 0, 0, 0), null);

            //assert
            Assert.IsFalse(result);
        }

        [Test]
        public void IsInstallationActionRequired_WithHostDataDoesNotExistException_ReturnsTrue()
        {
            //arrange
            var installer = new Mock<IInstaller>();
            var installManager = new InstallationManager(installer.Object, new TestCache());

            //act
            bool result = installManager.InstallationActionRequired(new Version(), new HostDataDoesNotExistException());

            //assert
            Assert.IsTrue(result);
        }

        [Test]
        public void Install_ResetsInstallationStatusCache()
        {
            // arrange
            var cache = new TestCache();
            cache["NeedsInstallation"] = InstallationState.NeedsInstallation;
            var installer = new Mock<IInstaller>();
            installer.Setup(i => i.Install(It.IsAny<Version>()));
            var installManager = new InstallationManager(installer.Object, cache);

            // act
            installManager.Install(new Version());

            // assert
            Assert.IsNull(cache["NeedsInstallation"]);
        }

        [Test]
        public void Upgrade_ResetsInstallationStatusCache()
        {
            // arrange
            var cache = new TestCache();
            cache["NeedsInstallation"] = InstallationState.NeedsInstallation;
            var installer = new Mock<IInstaller>();
            installer.Setup(i => i.Upgrade(It.IsAny<Version>()));
            var installManager = new InstallationManager(installer.Object, cache);

            // act
            installManager.Upgrade(new Version());

            // assert
            Assert.IsNull(cache["NeedsInstallation"]);
        }

        [Test]
        public void ResetInstallationStatusCache_WithApplicationNeedingInstallation_SetsStatusToNull()
        {
            // arrange
            var cache = new TestCache();
            cache["NeedsInstallation"] = InstallationState.NeedsInstallation;
            var installManager = new InstallationManager(null, cache);

            // act
            installManager.ResetInstallationStatusCache();

            // assert
            Assert.IsNull(cache["NeedsInstallation"]);
        }

        [Test]
        public void CreateWelcomeContent_CreatesIntroBlogPostAndCategories()
        {
            // arrange
            var installationManager = new InstallationManager(new Mock<IInstaller>().Object, null);
            var repository = new Mock<ObjectProvider>();
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry entry = null;
            entryPublisher.Setup(p => p.Publish(It.Is<Entry>(e => e.PostType == PostType.BlogPost))).Callback<Entry>(e => entry = e);
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl("")).Returns("/admin/default.aspx");
            urlHelper.Setup(u => u.EntryUrl(It.Is<Entry>(e => e.PostType == PostType.Story))).Returns<Entry>(e => "/articles/" + e.EntryName + ".aspx");
            urlHelper.Setup(u => u.HostAdminUrl("default.aspx")).Returns("/hostadmin/default.aspx");
            var context = new Mock<ISubtextContext>();
            context.SetupUrlHelper(urlHelper);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var blog = new Blog {Id = 123, Author = "TestAuthor"};

            // act
            installationManager.CreateWelcomeContent(context.Object, entryPublisher.Object, blog);

            // assert
            Assert.AreEqual(entry.Title, "Welcome to Subtext!");
            Assert.AreEqual(entry.EntryName, "welcome-to-subtext");
            Assert.Contains(entry.Body, @"<a href=""/admin/default.aspx");
            Assert.Contains(entry.Body, @"<a href=""/articles/welcome-to-subtext-article.aspx");
            Assert.Contains(entry.Body, @"<a href=""/hostadmin/default.aspx");
            Assert.IsTrue(entry.AllowComments);
            Assert.IsTrue(!entry.Body.Contains(@"<a href=""{0}"));
            Assert.IsTrue(!entry.Body.Contains(@"<a href=""{1}"));
            Assert.IsTrue(!entry.Body.Contains(@"<a href=""{2}"));
        }

        [Test]
        public void CreateWelcomeContent_CreatesIntroArticle()
        {
            // arrange
            var installationManager = new InstallationManager(new Mock<IInstaller>().Object, null);
            var repository = new Mock<ObjectProvider>();
            var entryPublisher = new Mock<IEntryPublisher>();
            Entry article = null;
            entryPublisher.Setup(p => p.Publish(It.Is<Entry>(e => e.PostType == PostType.Story))).Callback<Entry>(e => article = e);
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl("articles")).Returns("/admin/articles/default.aspx");
            var context = new Mock<ISubtextContext>();
            context.SetupUrlHelper(urlHelper);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var blog = new Blog { Id = 123, Author = "TestAuthor" };
            
            // act
            installationManager.CreateWelcomeContent(context.Object, entryPublisher.Object, blog);

            // assert
            Assert.AreEqual(article.Title, "Welcome to Subtext!");
            Assert.Contains(article.Body, @"<a href=""/admin/articles/");
            Assert.IsTrue(!article.Body.Contains(@"<a href=""{0}"));
        }

        [Test]
        public void CreateWelcomeContent_CreatesIntroComment()
        {
            // arrange
            var installationManager = new InstallationManager(new Mock<IInstaller>().Object, null);
            var repository = new Mock<ObjectProvider>();
            var entryPublisher = new Mock<IEntryPublisher>();
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl("feedback")).Returns("/admin/feedback/default.aspx");
            var context = new Mock<ISubtextContext>();
            context.SetupUrlHelper(urlHelper);
            context.Setup(c => c.Repository).Returns(repository.Object);
            var blog = new Blog { Id = 123, Author = "TestAuthor" };
            FeedbackItem comment = null;
            repository.Setup(r => r.Create(It.IsAny<FeedbackItem>())).Callback<FeedbackItem>(c => comment = c);

            // act
            installationManager.CreateWelcomeContent(context.Object, entryPublisher.Object, blog);

            // assert
            Assert.IsTrue(comment.Approved);
            Assert.AreEqual(comment.Title, "re: Welcome to Subtext!");
            Assert.Contains(comment.Body, @"<a href=""/admin/feedback/");
            Assert.IsTrue(!comment.Body.Contains(@"<a href=""{1}"));
        }

        /// <summary>
        /// Called before each unit test.
        /// </summary>
        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.ObjectModel;
using MbUnit.Framework;
using Subtext.Framework.Infrastructure.Installation;

namespace UnitTests.Subtext.InstallationTests
{
    /// <summary>
    /// Tests of the <see cref="SqlInstallationProvider"/> class.
    /// </summary>
    [TestFixture]
    public class SqlInstallationProviderTests
    {
        /// <summary>
        /// Tests that we can properly list the installation scripts.
        /// </summary>
        [Test]
        public void ListInstallationScriptsReturnsCorrectScripts()
        {
            ReadOnlyCollection<string> scripts = SqlInstaller.ListInstallationScripts(null, new Version(1, 5, 0, 0));
            Assert.AreEqual(2, scripts.Count, "We expected to see two scripts.");
            Assert.AreEqual("Installation.01.00.00.sql", scripts[0], "Expected the initial 1.0 installation file.");
            Assert.AreEqual("Installation.01.05.00.sql", scripts[1], "Expected the bugfix 1.5 installation file.");

            scripts = SqlInstaller.ListInstallationScripts(null, new Version(1, 0, 3, 0));
            Assert.AreEqual(1, scripts.Count, "We expected to see one script.");
            Assert.AreEqual("Installation.01.00.00.sql", scripts[0], "Expected the initial 1.0 installation file.");

            scripts = SqlInstaller.ListInstallationScripts(null, new Version(0, 0, 3, 0));
            Assert.AreEqual(0, scripts.Count, "We expected to see no scripts.");

            scripts = SqlInstaller.ListInstallationScripts(new Version(1, 1, 0, 0), new Version(1, 5, 0, 0));
            Assert.AreEqual(1, scripts.Count, "We expected to see one script.");
            Assert.AreEqual("Installation.01.05.00.sql", scripts[0], "Expected the bugfix 1.5.0 installation file.");

            scripts = SqlInstaller.ListInstallationScripts(new Version(1, 1, 0, 0), new Version(1, 9, 0, 0));
            Assert.AreEqual(2, scripts.Count, "We expected to see two script.");
            Assert.AreEqual("Installation.01.09.00.sql", scripts[1], "Expected the 1.9.0 installation file.");
        }

        /// <summary>
        /// Called before each unit test.
        /// </summary>
        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            //Confirm app settings
            UnitTestHelper.AssertAppSettings();
        }
    }
}ï»¿using MbUnit.Framework;
using log4net.Appender;

namespace UnitTests.Subtext
{
    /// <summary>
    /// Various tests to make sure certain assumptions are met in this build.
    /// </summary>
    [TestFixture]
    public class IntegrityTests
    {
        public void Log4NetHasConnectionStringNameProperty()
        {
            var appender = new AdoNetAppender();
            // we really only care that this property exists. So this test 
            // must simply compile to pass!
            Assert.IsTrue(string.IsNullOrEmpty(appender.ConnectionStringName));
        }
    }
}
using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;
using System.Web;
using System.Web.Caching;
using System.Web.Routing;
using Moq;
using Moq.Stub;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.HttpModules;

namespace UnitTests.Subtext
{
    public static class MockExtensions
    {
        public static Mock<HttpContextBase> FakeRequest(this Mock<HttpContextBase> httpContextMock, string virtualPath)
        {
            httpContextMock.FakeRequest(virtualPath, null);
            return httpContextMock;
        }

        public static StringWriter FakeSitemapHandlerRequest(this Mock<ISubtextContext> subtextContext,
                                                             Mock<ObjectProvider> repository)
        {
            subtextContext.Setup(c => c.Repository).Returns(repository.Object);
            StringWriter writer = subtextContext.FakeSubtextContextRequest(new Blog {Host = "localhost"}, "/sitemap.xml",
                                                                           "/", string.Empty);
            Mock<UrlHelper> urlHelper = Mock.Get(subtextContext.Object.UrlHelper);
            urlHelper.Setup(u => u.EntryUrl(It.IsAny<Entry>())).Returns<Entry>(
                e =>
                e.PostType == PostType.BlogPost
                    ? "/some-blogpost-with-id-of-" + e.Id
                    : "some-article-with-id-of-" + e.Id);
            urlHelper.Setup(u => u.BlogUrl()).Returns("/");
            urlHelper.Setup(u => u.ContactFormUrl()).Returns("/contact.aspx");
            return writer;
        }

        public static StringWriter FakeRequest(this Mock<HttpContextBase> httpContextMock, string virtualPath,
                                               string subfolder)
        {
            return httpContextMock.FakeRequest(virtualPath, subfolder, "~/");
        }

        public static StringWriter FakeRequest(this Mock<HttpContextBase> httpContextMock, string virtualPath,
                                               string subfolder, string applicationPath)
        {
            httpContextMock.Setup(h => h.Request.HttpMethod).Returns("GET");
            httpContextMock.Setup(context => context.Request.ApplicationPath).Returns(applicationPath);
            httpContextMock.Setup(context => context.Request.AppRelativeCurrentExecutionFilePath).Returns(virtualPath);
            httpContextMock.Setup(context => context.Request.Path).Returns(virtualPath);
            httpContextMock.Setup(context => context.Request.FilePath).Returns(virtualPath);
            httpContextMock.SetupGet(c => c.Items[BlogRequest.BlogRequestKey]).Returns(new BlogRequest("localhost",
                                                                                                       subfolder,
                                                                                                       new Uri(
                                                                                                           "http://localhost/"),
                                                                                                       true));
            var writer = new StringWriter();
            httpContextMock.Setup(c => c.Response.Output).Returns(writer);
            return writer;
        }

        public static void FakeSyndicationContext(this Mock<ISubtextContext> subtextContextMock, Blog blog,
                                                  string virtualPath, string applicationPath, Action<string> callback)
        {
            subtextContextMock.FakeSyndicationContext(blog, virtualPath, applicationPath, null, callback);
        }

        public static StringWriter FakeSubtextContextRequest(this Mock<ISubtextContext> subtextContextMock, Blog blog,
                                                             string virtualPath, string applicationPath,
                                                             string subfolder)
        {
            var httpContext = new Mock<HttpContextBase>();
            StringWriter writer = httpContext.FakeRequest(virtualPath, subfolder);
            httpContext.SetupApplicationPath(applicationPath);
            httpContext.Stub(h => h.Response.ContentType);
            var hashTable = new Hashtable();
            httpContext.Setup(c => c.Items).Returns(hashTable);
            var urlHelper = new Mock<UrlHelper>();

            var routeData = new RouteData();
            routeData.Values.Add("subfolder", subfolder);

            subtextContextMock.Setup(c => c.HttpContext).Returns(httpContext.Object);

            subtextContextMock.SetupBlog(blog)
                .SetupUrlHelper(urlHelper)
                .SetupRequestContext(httpContext, routeData);

            return writer;
        }

        public static Mock<HttpContextBase> SetupApplicationPath(this Mock<HttpContextBase> httpContext,
                                                                 string applicationPath)
        {
            httpContext.Setup(c => c.Request.ApplicationPath).Returns(applicationPath);
            return httpContext;
        }

        public static Mock<ISubtextContext> SetupRequestContext(this Mock<ISubtextContext> context,
                                                                Mock<HttpContextBase> httpContext, RouteData routeData)
        {
            return context.SetupRequestContext(httpContext, routeData, null);
        }

        public static Mock<ISubtextContext> SetupBlog(this Mock<ISubtextContext> context, Blog blog)
        {
            context.Setup(c => c.Blog).Returns(blog);
            return context;
        }

        public static Mock<ISubtextContext> SetupUrlHelper(this Mock<ISubtextContext> context, Mock<UrlHelper> urlHelper)
        {
            context.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            return context;
        }

        public static Mock<ISubtextContext> SetupUrlHelper(this Mock<ISubtextContext> context, UrlHelper urlHelper)
        {
            context.Setup(c => c.UrlHelper).Returns(urlHelper);
            return context;
        }

        public static Mock<ISubtextContext> SetupRepository(this Mock<ISubtextContext> context,
                                                            Mock<ObjectProvider> repository)
        {
            context.Setup(c => c.Repository).Returns(repository.Object);
            return context;
        }

        public static Mock<ISubtextContext> SetupRepository(this Mock<ISubtextContext> context,
                                                            ObjectProvider repository)
        {
            context.Setup(c => c.Repository).Returns(repository);
            return context;
        }

        public static Mock<ISubtextContext> SetupRequestContext(this Mock<ISubtextContext> context,
                                                                Mock<HttpContextBase> httpContext, RouteData routeData,
                                                                Blog blog)
        {
            httpContext = httpContext ?? new Mock<HttpContextBase>();
            routeData = routeData ?? new RouteData();
            httpContext.Setup(c => c.Items).Returns(new Hashtable());
            var requestContext = new RequestContext(httpContext.Object, routeData);
            context.SetupRequestContext(requestContext);
            context.Setup(c => c.Cache).Returns(new TestCache());
            context.Setup(c => c.Blog).Returns(blog ?? new Blog());
            context.Setup(c => c.HttpContext.Items).Returns(new Hashtable());
            return context;
        }

        public static Mock<ISubtextContext> SetupRequestContext(this Mock<ISubtextContext> context,
                                                                RequestContext requestContext)
        {
            context.Setup(c => c.RequestContext).Returns(requestContext);
            return context;
        }

        public static void FakeSyndicationContext(this Mock<ISubtextContext> subtextContextMock, Blog blog,
                                                  string virtualPath, string applicationPath, string subfolder,
                                                  Action<string> callback)
        {
            var urlHelper = new Mock<UrlHelper>();
            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeSyndicationRequest(virtualPath, applicationPath, callback);
            var hashTable = new Hashtable();
            httpContext.Setup(c => c.Items).Returns(hashTable);
            subtextContextMock.Setup(c => c.Cache).Returns(new TestCache());
            subtextContextMock.Setup(c => c.HttpContext).Returns(httpContext.Object);

            string imagePath = "/images/RSS2Image.gif";
            if(applicationPath != "/")
            {
                imagePath = applicationPath + imagePath;
            }

            urlHelper.Setup(url => url.ImageUrl(It.IsAny<string>())).Returns(new VirtualPath(imagePath));
            urlHelper.Setup(u => u.AggBugUrl(It.IsAny<int>())).Returns<int>(id => "/Subtext.Web/aggbug/" + id + ".aspx");
            urlHelper.Setup(u => u.CommentRssUrl(It.IsAny<int>())).Returns<int>(
                id => "/Subtext.Web/comments/commentRss/" + id + ".aspx");
            urlHelper.Setup(u => u.TrackbacksUrl(It.IsAny<int>())).Returns<int>(
                id => "/Subtext.Web/services/trackbacks/" + id + ".aspx");

            var routeData = new RouteData();
            routeData.Values.Add("subfolder", subfolder);
            var requestContext = new RequestContext(httpContext.Object, routeData);
            subtextContextMock.SetupBlog(blog);
            subtextContextMock.SetupUrlHelper(urlHelper.Object);
            subtextContextMock.SetupRequestContext(requestContext);
            subtextContextMock.Setup(c => c.Cache).Returns(new TestCache());
        }

        public static void FakeSyndicationContext(this Mock<ISubtextContext> subtextContextMock, Blog blog,
                                                  string virtualPath, Action<string> callback)
        {
            subtextContextMock.FakeSyndicationContext(blog, virtualPath, "/", callback);
        }

        public static void FakeSyndicationRequest(this Mock<HttpContextBase> httpContextMock, string virtualPath,
                                                  string applicationPath, Action<string> callback)
        {
            var headers = new NameValueCollection {{"If-Modified-Since", null}};
            httpContextMock.Setup(c => c.Request.AppRelativeCurrentExecutionFilePath).Returns(virtualPath);
            httpContextMock.Setup(c => c.Request.Path).Returns(virtualPath);
            httpContextMock.Setup(c => c.Request.FilePath).Returns(virtualPath);
            httpContextMock.Setup(c => c.Request.ApplicationPath).Returns(applicationPath);
            httpContextMock.Setup(c => c.Response.Output).Returns(new StringWriter());
            httpContextMock.Setup(c => c.Request.Headers).Returns(headers);
            httpContextMock.SetupSet(c => c.Response.ContentType, "text/xml");
            httpContextMock.Setup(c => c.Response.Cache.SetCacheability(HttpCacheability.Public));
            httpContextMock.Setup(c => c.Response.Cache.SetLastModified(It.IsAny<DateTime>()));
            httpContextMock.Setup(c => c.Response.Cache.SetETag(It.IsAny<string>()));
            httpContextMock.Setup(c => c.Response.AddHeader(It.IsAny<string>(), It.IsAny<string>()));
            httpContextMock.SetupSet(c => c.Response.StatusCode, It.IsAny<int>());
            if(callback != null)
            {
                httpContextMock.Setup(c => c.Response.Write(It.IsAny<string>())).Callback(callback);
            }
            httpContextMock.Setup(c => c.Cache).Returns((Cache)null);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Globalization;
using System.Reflection;
using Subtext.Framework.Properties;

namespace UnitTests.Subtext
{
    /// <summary>
    /// Helper class to simplify common reflection tasks.
    /// </summary>
    public sealed class ReflectionHelper
    {
        private ReflectionHelper()
        {
        }

        /// <summary>
        /// Returns the value of the private member specified.
        /// </summary>
        /// <param name="fieldName">Name of the member.</param>
        /// /// <param name="type">Type of the member.</param>
        public static T GetStaticFieldValue<T>(string fieldName, Type type)
        {
            FieldInfo field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Static);
            if(field != null)
            {
                return (T)field.GetValue(type);
            }
            return default(T);
        }
        /// <summary>
        /// Returns the value of the private member specified.
        /// </summary>
        /// <param name="propertyName">Name of the member.</param>
        /// /// <param name="type">Type of the member.</param>
        public static T GetStaticPropertyValue<T>(string propertyName, Type type)
        {
            PropertyInfo property = type.GetProperty(propertyName, BindingFlags.NonPublic | BindingFlags.Static);
            if(property != null)
            {
                return (T)property.GetValue(type, null);
            }
            return default(T);
        }

        /// <summary>
        /// Returns the value of the private member specified.
        /// </summary>
        /// <param name="fieldName">Name of the member.</param>
        /// <param name="typeName"></param>
        public static T GetStaticFieldValue<T>(string fieldName, string typeName)
        {
            Type type = Type.GetType(typeName, true);
            FieldInfo field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Static);
            if(field != null)
            {
                return (T)field.GetValue(type);
            }
            return default(T);
        }

        /// <summary>
        /// Sets the value of the private static member.
        /// </summary>
        /// <param name="fieldName"></param>
        /// <param name="type"></param>
        /// <param name="value"></param>
        public static void SetStaticFieldValue<T>(string fieldName, Type type, T value)
        {
            FieldInfo field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Static);
            if(field == null)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture,
                                                          Resources.ReflectionArgument_CouldNotFindsStaticField,
                                                          fieldName));
            }

            field.SetValue(null, value);
        }

        /// <summary>
        /// Sets the value of the private static member.
        /// </summary>
        /// <param name="fieldName"></param>
        /// <param name="typeName"></param>
        /// <param name="value"></param>
        public static void SetStaticFieldValue<T>(string fieldName, string typeName, T value)
        {
            Type type = Type.GetType(typeName, true);
            FieldInfo field = type.GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Static);
            if(field == null)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture,
                                                          Resources.ReflectionArgument_CouldNotFindsStaticField,
                                                          fieldName));
            }

            field.SetValue(null, value);
        }

        /// <summary>
        /// Returns the value of the private member specified.
        /// </summary>
        /// <param name="fieldName">Name of the member.</param>
        /// <param name="source">The object that contains the member.</param>
        public static T GetPrivateInstanceFieldValue<T>(string fieldName, object source)
        {
            FieldInfo field = source.GetType().GetField(fieldName,
                                                        BindingFlags.GetField | BindingFlags.NonPublic |
                                                        BindingFlags.Instance);
            if(field != null)
            {
                return (T)field.GetValue(source);
            }
            return default(T);
        }

        /// <summary>
        /// Returns the value of the private member specified.
        /// </summary>
        /// <param name="memberName">Name of the member.</param>
        /// <param name="source">The object that contains the member.</param>
        /// <param name="value">The value to set the member to.</param>
        public static void SetPrivateInstanceFieldValue(string memberName, object source, object value)
        {
            FieldInfo field = source.GetType().GetField(memberName,
                                                        BindingFlags.GetField | BindingFlags.NonPublic |
                                                        BindingFlags.Instance);
            if(field == null)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture,
                                                          Resources.ReflectionArgument_CouldNotFindInstanceField,
                                                          memberName));
            }

            field.SetValue(source, value);
        }

        public static object Instantiate(string typeName)
        {
            return Instantiate(typeName, null, null);
        }

        public static object Instantiate(string typeName, Type[] constructorArgumentTypes,
                                         params object[] constructorParameterValues)
        {
            return Instantiate(Type.GetType(typeName, true), constructorArgumentTypes, constructorParameterValues);
        }

        public static object Instantiate(Type type, Type[] constructorArgumentTypes,
                                         params object[] constructorParameterValues)
        {
            ConstructorInfo constructor = type.GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null,
                                                              constructorArgumentTypes, null);
            return constructor.Invoke(constructorParameterValues);
        }

        /// <summary>
        /// Invokes a non-public static method.
        /// </summary>
        /// <typeparam name="TReturn"></typeparam>
        /// <param name="type"></param>
        /// <param name="methodName"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public static TReturn InvokeNonPublicMethod<TReturn>(Type type, string methodName, params object[] parameters)
        {
            Type[] paramTypes = Array.ConvertAll(parameters, o => o.GetType());

            MethodInfo method = type.GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Static, null,
                                               paramTypes, null);
            if(method == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindMethod,
                                  methodName), "method");
            }

            return (TReturn)method.Invoke(null, parameters);
        }

        public static void InvokeNonPublicMethod(object source, string methodName, params object[] parameters)
        {
            Type[] paramTypes = Array.ConvertAll(parameters, o => o.GetType());

            MethodInfo method = source.GetType().GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance,
                                                           null, paramTypes, null);
            if(method == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindMethod,
                                  methodName), "method");
            }

            method.Invoke(source, parameters);
        }

        public static TReturn InvokeNonPublicMethod<TReturn>(object source, string methodName,
                                                             params object[] parameters)
        {
            Type[] paramTypes = Array.ConvertAll(parameters, o => o.GetType());

            MethodInfo method = source.GetType().GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance,
                                                           null, paramTypes, null);
            if(method == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindMethod,
                                  methodName), "method");
            }

            return (TReturn)method.Invoke(source, parameters);
        }

        public static TReturn InvokeProperty<TReturn>(object source, string propertyName)
        {
            PropertyInfo propertyInfo = source.GetType().GetProperty(propertyName);
            if(propertyInfo == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindProperty,
                                  propertyName), "propertyName");
            }

            return (TReturn)propertyInfo.GetValue(source, null);
        }

        public static TReturn InvokeNonPublicProperty<TReturn>(object source, string propertyName)
        {
            PropertyInfo propertyInfo = source.GetType().GetProperty(propertyName,
                                                                     BindingFlags.NonPublic | BindingFlags.Instance,
                                                                     null, typeof(TReturn), new Type[0], null);
            if(propertyInfo == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindProperty,
                                  propertyName), "propertyName");
            }

            return (TReturn)propertyInfo.GetValue(source, null);
        }

        public static object InvokeNonPublicProperty(object source, string propertyName)
        {
            PropertyInfo propertyInfo = source.GetType().GetProperty(propertyName,
                                                                     BindingFlags.NonPublic | BindingFlags.Instance);
            if(propertyInfo == null)
            {
                throw new ArgumentException(
                    string.Format(CultureInfo.InvariantCulture, Resources.ReflectionArgument_CouldNotFindProperty,
                                  propertyName), "propertyName");
            }

            return propertyInfo.GetValue(source, null);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using MbUnit.Framework;
using Subtext.Scripting;

namespace UnitTests.Subtext.Scripting
{
    /// <summary>
    /// Summary description for ConnectionStringParseTests.
    /// </summary>
    [TestFixture]
    public class ConnectionStringParseTests
    {
        [RowTest]
        [Row("Data Source=TEST;Initial Catalog=pubs;User Id=sa;Password=asdasd;", "TEST", "pubs", "sa", "asdasd")]
        [Row("Data Source=;Initial Catalog=;User Id=;Password=;", "", "", "", "")]
        [Row("Data Source = TEST;Initial Catalog = pubs;User Id = sa;Password = asdasd", "TEST", "pubs", "sa", "asdasd")
        ]
        [Row("Data Source = TEST;User Id = sa;Password = asdasd;Initial Catalog = pubs", "TEST", "pubs", "sa", "asdasd")
        ]
        [Row("Server=127.0.0.1;Database=pubs;User ID=sa;Password=asdasd;Trusted_Connection=False", "127.0.0.1", "pubs",
            "sa", "asdasd")]
        [Row("Server= 127.0.0.1 ; Database = SubtextData; User ID = sa ; Password = asdasd ; Trusted_Connection = False"
            , "127.0.0.1", "SubtextData", "sa", "asdasd")]
        public void CanVariousStandardSecurityConnectionStrings(string connectionString, string dataSource,
                                                                string database, string userId, string password)
        {
            ConnectionString connectionInfo = ConnectionString.Parse(connectionString);
            Assert.AreEqual(database, connectionInfo.Database, "Did not parse the database string correctly.");
            Assert.AreEqual(dataSource, connectionInfo.Server, "Did not parse the server string correctly.");
            Assert.AreEqual(userId, connectionInfo.UserId, "Did not parse the user id correctly.");
            Assert.AreEqual(password, connectionInfo.Password, "Did not parse the password correctly.");

            //Test the implicit operation
            ConnectionString connectionInfo2 = connectionString;
            Assert.AreEqual(database, connectionInfo2.Database, "Did not parse the database string correctly.");
            Assert.AreEqual(dataSource, connectionInfo2.Server, "Did not parse the server string correctly.");
            Assert.AreEqual(userId, connectionInfo2.UserId, "Did not parse the user id correctly.");
            Assert.AreEqual(password, connectionInfo2.Password, "Did not parse the password correctly.");
        }

        [Test]
        public void Parse_WithSqlExpressAttachConnectionString_DoesNotLoseAttach()
        {
            // arrange
            string connectionString =
                @"Server=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\Subtext2.1.mdf;Database=Subtext2.1;Trusted_Connection=True;";

            // act
            ConnectionString connectionInfo = ConnectionString.Parse(connectionString);

            // assert
            Assert.AreEqual(@"Subtext2.1", connectionInfo.Database);
            Assert.AreEqual(@".\SQLEXPRESS", connectionInfo.Server);
            Assert.AreEqual(connectionString, connectionInfo.ToString());
        }

        [Test]
        public void CanParseSqlExpressConnectionString()
        {
            string connectionString =
                @"Data Source=.\SQLExpress;Integrated Security=true;AttachDbFilename=|DataDirectory|\Subtext3.0.mdf;User Instance=true;";
            ConnectionString connectionInfo = ConnectionString.Parse(connectionString);

            Assert.AreEqual(@"Subtext3.0.mdf", connectionInfo.Database);
            Assert.AreEqual(@".\SQLExpress", connectionInfo.Server);
        }

        [Test]
        public void CanImplicitlyConvertConnectionStringToString()
        {
            ConnectionString connection =
                ConnectionString.Parse("Data Source=TEST;Initial Catalog=pubs;User Id=sa;Password=asdasd;");
            string s = connection;
            Assert.AreEqual("Data Source=TEST;Initial Catalog=pubs;User Id=sa;Password=asdasd;", s);
        }
    }
}using System.Data.SqlClient;
using MbUnit.Framework;
using Subtext.Framework.Configuration;
using Subtext.Scripting;
using Subtext.Scripting.Exceptions;

namespace UnitTests.Subtext.Scripting
{
    /// <summary>
    /// Some tests of various exception conditions.
    /// </summary>
    [TestFixture]
    public class ExceptionTests
    {
        [Test]
        public void ExecuteThrowsArgumentExceptionForNullTransaction()
        {
            var script = new Script("");
            
            UnitTestHelper.AssertThrowsArgumentNullException(() => script.Execute(null));
        }

        [Test]
        public void ExecuteThrowsScriptExceptionForBadSql()
        {
            var script = new Script("SELECT * FROM BLAHBLAH");
            using(var connection = new SqlConnection(Config.ConnectionString))
            {
                connection.Open();
                UnitTestHelper.AssertThrows<SqlScriptExecutionException>(() => script.Execute(connection.BeginTransaction()));
            }
        }

        [Test]
        public void ExecuteThrowsProperScriptExceptionForBadSql()
        {
            var script = new Script("SELECT * FROM BLAHBLAH");
            using(var connection = new SqlConnection(Config.ConnectionString))
            {
                connection.Open();

                var e = UnitTestHelper.AssertThrows<SqlScriptExecutionException>(() => script.Execute(connection.BeginTransaction()));
                
                Assert.IsTrue(e.Message.Length > 0);
                Assert.AreEqual(0, e.ReturnValue);
                Assert.AreEqual("SELECT * FROM BLAHBLAH", e.Script.ScriptText);
            }
        }
    }
}using MbUnit.Framework;
using Subtext.Scripting;

namespace UnitTests.Subtext.Scripting
{
    [TestFixture]
    public class ScriptCollectionTests
    {
        [Test]
        public void AddRangeWithNullArgumentThrowsArgumentNullException()
        {
            ScriptCollection scripts = Script.ParseScripts("/* Test */");
            UnitTestHelper.AssertThrowsArgumentNullException(() => scripts.AddRange(null));
        }

        [Test]
        public void FullScriptTextReturnsFullScript()
        {
            ScriptCollection scripts = Script.ParseScripts("/* Test */");
            Assert.AreEqual("/* Test */", scripts.FullScriptText);
        }

        [Test]
        public void AddRangeIncrementsScriptCountWhenAddingAScript()
        {
            ScriptCollection scripts = Script.ParseScripts("/* Test */");
            Assert.AreEqual(1, scripts.Count);
            scripts.AddRange(new[] {new Script("test"), new Script("test2")});
            Assert.AreEqual(3, scripts.Count);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using MbUnit.Framework;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Scripting;
using Subtext.Scripting.Exceptions;

namespace UnitTests.Subtext.Scripting
{
    /// <summary>
    /// Summary description for ScriptHelperTests.
    /// </summary>
    [TestFixture]
    public class ScriptHelperTests
    {
        [Test]
        public void CanParseGoWithDashDashCommentAfter()
        {
            const string script = @"SELECT * FROM foo;
 GO --  Hello Phil
CREATE PROCEDURE dbo.Test AS SELECT * FROM foo";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(2, scripts.Count);
        }

        [Test]
        public void CanParseNestedComments()
        {
            const string script = @"/*
select 1
/* nested comment */
go
delete from users
-- */";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(1, scripts.Count, "This contains a comment and no scripts.");
        }

        [Test]
        public void SlashStarCommentAfterGoThrowsException()
        {
            const string script = @"PRINT 'blah'
GO /* blah */";

            UnitTestHelper.AssertThrows<SqlParseException>(() => Script.ParseScripts(script));
        }

        [Test]
        public void CanParseSuccessiveGoStatements()
        {
            const string script = @"GO
GO";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(0, scripts.Count, "Expected no scripts since they would be empty.");
        }

        [Test]
        public void SemiColonDoesNotSplitScript()
        {
            const string script = "CREATE PROC Blah AS SELECT FOO; SELECT Bar;";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(1, scripts.Count, "Expected no scripts since they would be empty.");
        }

        [Test]
        public void CanParseQuotedCorrectly()
        {
            const string script = @"INSERT INTO #Indexes
	EXEC sp_helpindex 'dbo.subtext_URLs'";

            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(script, scripts[0].ScriptText, "Script text should not be modified");
        }

        [Test]
        public void CanParseSimpleScript()
        {
            string script = "Test" + Environment.NewLine + "go";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(1, scripts.Count);
            Assert.AreEqual("Test", scripts[0].ScriptText);
        }

        [Test]
        public void CanParseCommentBeforeGoStatement()
        {
            const string script = @"SELECT FOO
/*TEST*/ GO
BAR";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(2, scripts.Count);
        }

        [Test]
        public void CanParseCommentWithQuoteChar()
        {
            const string script = @"/* Add the Url column to the subtext_Log table if it doesn't exist */
	ADD [Url] VARCHAR(255) NULL
GO
		AND		COLUMN_NAME = 'BlogGroup') IS NULL";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(2, scripts.Count);
        }

        [Test]
        public void CanParseDashDashCommentWithQuoteChar()
        {
            const string script = @"-- Add the Url column to the subtext_Log table if it doesn't exist
SELECT * FROM BLAH
GO
PRINT 'FOO'";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(2, scripts.Count);
        }

        [Test]
        public void CanParseLineEndingInDashDashComment()
        {
            const string script = @"SELECT * FROM BLAH -- Comment
GO
FOOBAR
GO";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(2, scripts.Count);
        }

        [Test]
        public void CanParseSimpleScriptEndingInNewLine()
        {
            string script = "Test" + Environment.NewLine + "GO" + Environment.NewLine;
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(1, scripts.Count);
            Assert.AreEqual("Test", scripts[0].ScriptText);
        }

        [Test]
        public void MultiLineQuoteShouldNotIgnoreDoubleQuote()
        {
            string script = "PRINT '" + Environment.NewLine
                            + "''" + Environment.NewLine
                            + "GO" + Environment.NewLine
                            + "/*" + Environment.NewLine
                            + "GO"
                            + "'";

            ScriptCollection scripts = Script.ParseScripts(script);
            
            Assert.AreEqual(1, scripts.Count);
            UnitTestHelper.AssertStringsEqualCharacterByCharacter(script, scripts[0].ScriptText);
        }

        [Test]
        public void MultiLineQuoteShouldNotBeSplitByGoKeyword()
        {
            string script = "PRINT '" + Environment.NewLine
                            + "GO" + Environment.NewLine
                            + "SELECT * FROM BLAH" + Environment.NewLine
                            + "GO" + Environment.NewLine
                            + "'";

            ScriptCollection scripts = Script.ParseScripts(script);

            UnitTestHelper.AssertStringsEqualCharacterByCharacter(script, scripts[0].ScriptText);
            Assert.AreEqual(1, scripts.Count, "expected only one script");
        }

        /// <summary>
        /// Makes sure that ParseScript parses correctly.
        /// </summary>
        [Test]
        [RollBack]
        public void ParseScriptParsesCorrectly()
        {
            const string script = @"SET QUOTED_IDENTIFIER OFF 
-- Comment
Go
		
SET ANSI_NULLS ON 


GO

GO

SET ANSI_NULLS ON 


CREATE TABLE [<username,varchar,dbo>].[blog_Gost] (
	[HostUserName] [nvarchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
	[Password] [nvarchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
	[Salt] [nvarchar] (32) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
	[DateCreated] [datetime] NOT NULL
) ON [PRIMARY]
gO

";
            ScriptCollection scripts = Script.ParseScripts(script);
            Assert.AreEqual(3, scripts.Count, "This should parse to three scripts.");
            for(int i = 0; i < scripts.Count; i++)
            {
                Script sqlScript = scripts[i];
                Assert.IsFalse(sqlScript.ScriptText.StartsWith("GO"), "Script '" + i + "' failed had a GO statement");
            }

            string expectedThirdScriptBeginning = "SET ANSI_NULLS ON "
                                                  + Environment.NewLine
                                                  + Environment.NewLine
                                                  + Environment.NewLine +
                                                  "CREATE TABLE [<username,varchar,dbo>].[blog_Gost]";

            Assert.AreEqual(expectedThirdScriptBeginning,
                            scripts[2].OriginalScriptText.Substring(0, expectedThirdScriptBeginning.Length),
                            "Script not parsed correctly");

            scripts.TemplateParameters.SetValue("username", "haacked");

            expectedThirdScriptBeginning = "SET ANSI_NULLS ON "
                                           + Environment.NewLine
                                           + Environment.NewLine
                                           + Environment.NewLine + "CREATE TABLE [haacked].[blog_Gost]";

            Assert.AreEqual(expectedThirdScriptBeginning,
                            scripts[2].ScriptText.Substring(0, expectedThirdScriptBeginning.Length),
                            "Script not parsed correctly");
        }

        /// <summary>
        /// Unpacks the installation script and makes sure it returns a script.
        /// </summary>
        [Test]
        public void UnpackScriptReturnsScript()
        {
            Stream stream = ScriptHelper.UnpackEmbeddedScript("Installation.01.00.00.sql");
            Assert.IsNotNull(stream);
        }

        /// <summary>
        /// Unpacks the installation script and makes sure it returns a script.
        /// </summary>
        [Test]
        public void UnpackScriptAsStringReturnsScript()
        {
            string script = ScriptHelper.UnpackEmbeddedScriptAsString("Installation.01.00.00.sql");
            StringAssert.IsNonEmpty(script);
        }
    }
}using System.Collections.Generic;
using MbUnit.Framework;
using Subtext.Scripting;

namespace UnitTests.Subtext.Scripting
{
    [TestFixture]
    public class ScriptSplitterTests
    {
        [Test]
        public void ScriptSplitterCanEnumerate()
        {
            var splitter = new ScriptSplitter("This is a test");
            IEnumerable<string> enumerable = splitter;
            int i = 0;
            foreach(string s in enumerable)
            {
                i++;
            }
            Assert.AreEqual(1, i);
        }
    }
}using MbUnit.Framework;
using Subtext.Scripting;

namespace UnitTests.Subtext.Scripting
{
    [TestFixture]
    public class ScriptTests
    {
        [Test]
        public void ToStringWithScriptWithNoTokensDisplaysNoTokensMessage()
        {
            var script = new Script("/*nothing*/");
            Assert.AreEqual("Script has no tokens.", script.ToString());
        }
    }
}using MbUnit.Framework;
using Subtext.Scripting;
using Subtext.Scripting.Exceptions;

namespace UnitTests.Subtext.Scripting
{
    [TestFixture]
    public class SqlScriptExecutionExceptionTests
    {
        [Test]
        public void InstantiateWithMessageSetsMessageProperty()
        {
            var exception = new SqlScriptExecutionException();
            exception = new SqlScriptExecutionException("Message");
            Assert.AreEqual("MessageReturn Value: 0", exception.Message);
        }

        [Test]
        public void CtorSetsProperties()
        {
            var exception = new SqlScriptExecutionException("Message", new Script("test"), 123);
            Assert.IsTrue(exception.Message.IndexOf("Message") > -1);
            Assert.AreEqual(123, exception.ReturnValue);
            Assert.AreEqual("test", exception.Script.OriginalScriptText);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using MbUnit.Framework;
using Subtext.Scripting;

namespace UnitTests.Subtext.Scripting
{
    /// <summary>
    /// Tests parsing template parameters in a script.
    /// </summary>
    [TestFixture]
    public class TemplateParameterParseTests
    {
        [Test]
        public void AddWithNullTemplateParameterThrowsArgumentNullException()
        {
            var collection = new TemplateParameterCollection();

            UnitTestHelper.AssertThrowsArgumentNullException(() => collection.Add((TemplateParameter)null));
        }

        [Test]
        public void AddWithNullRegexMatchThrowsArgumentNullException()
        {
            var collection = new TemplateParameterCollection();
            UnitTestHelper.AssertThrowsArgumentNullException(() => collection.Add((Match)null));
        }

        [Test]
        public void CanClearCollection()
        {
            var collection = new TemplateParameterCollection {new TemplateParameter("name", "string", "0")};
            Assert.AreEqual(1, collection.Count);
            collection.Clear();
            Assert.AreEqual(0, collection.Count);
        }

        [Test]
        public void CopyToEmptyArrayLeavesNotEmptyArray()
        {
            var collection = new TemplateParameterCollection {new TemplateParameter("test", "string", "")};

            var parameters = new TemplateParameter[1];
            collection.CopyTo(parameters, 0);
            Assert.AreEqual("test", parameters[0].Name);
        }

        [Test]
        public void IndexOfFindsTemplate()
        {
            var collection = new TemplateParameterCollection();
            var param = new TemplateParameter("test", "string", "");
            collection.Add(param);
            Assert.AreEqual(0, collection.IndexOf(param));
        }

        [Test]
        public void IsReadOnlyReturnsFalse()
        {
            var collection = new TemplateParameterCollection();
            Assert.IsFalse(collection.IsReadOnly);
        }

        [Test]
        public void RemoveRemovesTemplate()
        {
            var collection = new TemplateParameterCollection();
            var param = new TemplateParameter("test", "string", "");
            collection.Add(param);
            Assert.AreEqual(1, collection.Count);
            collection.Remove(param);
            Assert.AreEqual(0, collection.Count);
        }

        [Test]
        public void TemplateParameterCollectionDoesNotStoreDuplicateParameters()
        {
            var collection = new TemplateParameterCollection {new TemplateParameter("MyTest", "int", 0.ToString())};
            Assert.AreEqual(1, collection.Count, "Our one parameter is in there.");

            collection.Add(new TemplateParameter("MyTest", "nvarchar(32)", "Blah"));
            Assert.AreEqual(1, collection.Count, "Should only be one parameter still.");
        }

        [Test]
        public void ScriptDoesNotStoreDuplicateParameters()
        {
            string scriptText = "SELECT TOP <name, int, 0> * FROM Somewhere"
                                + Environment.NewLine
                                + "GO"
                                + Environment.NewLine
                                + "SELECT TOP <name, int, 1> * FROM SomewhereElse";
            ScriptCollection scripts = Script.ParseScripts(scriptText);
            Assert.AreEqual(2, scripts.Count, "Did not parse the script.");
            Assert.AreEqual(1, scripts.TemplateParameters.Count, "did not merge or parse the template params.");
        }

        /// <summary>
        /// Tests the contains method.
        /// </summary>
        [Test]
        public void ContainsReturnsCorrectParameter()
        {
            var collection = new TemplateParameterCollection();
            Assert.IsFalse(collection.Contains("test"), "An empty collection should not contain a parameter.");
            var parameter = new TemplateParameter("test", "type", "something");
            Assert.IsFalse(collection.Contains(parameter), "An empty collection should not contain a parameter.");

            collection.Add(parameter);
            Assert.IsTrue(collection.Contains(parameter));
            Assert.IsTrue(collection.Contains("test"));

            var differentParameter = new TemplateParameter("differentName", "", "");
            Assert.IsFalse(collection.Contains(differentParameter), "Contains should not be a \"yes\" method.");
            Assert.IsFalse(collection.Contains(differentParameter.Name), "Contains should not be a \"yes\" method.");

            var newParameterWithSameName = new TemplateParameter("test", "type", "something");
            Assert.IsTrue(collection.Contains(newParameterWithSameName),
                          "Even though this is a separate instance, we match parameters by name. So we should already contain this one.");
        }

        /// <summary>
        /// Tests parsing simple scripts with template parameters.
        /// </summary>
        /// <param name="scriptText">The script.</param>
        /// <param name="name">The name.</param>
        /// <param name="dataType">Type of the data.</param>
        /// <param name="defaultValue">The default value.</param>
        [RowTest]
        [Row("<name,varchar(100),'default'>", "name", "varchar(100)", "'default'")]
        [Row("XYZ <name,varchar(100),'default'> ABC", "name", "varchar(100)", "'default'")]
        [Row("<name ,  varchar(100)		, 'default' >", "name ", "varchar(100)		", "'default' ")]
        [Row("<name, int,10>", "name", "int", "10")]
        [Row("<name, int,>", "name", "int", "")]
        [Row("<name, int, 10>", "name", "int", "10")]
        public void TestParseSimpleScripts(string scriptText, string name, string dataType, string defaultValue)
        {
            var script = new Script(scriptText);
            TemplateParameterCollection parameters = script.TemplateParameters;
            Assert.AreEqual(1, parameters.Count, "Expected one parameter.");
            TemplateParameter parameter = parameters[0];
            Assert.AreEqual(name, parameter.Name, "Parameter name was not parsed correctly.");
            Assert.AreEqual(dataType, parameter.DataType, "Data Type was not parsed correctly.");
            Assert.AreEqual(defaultValue, parameter.Value, "DefaultValue was not parsed correctly.");
        }

        /// <summary>
        /// Tests parsing simple scripts with template parameters.
        /// </summary>
        /// <param name="scriptText">The script.</param>
        /// <param name="replaceValue"></param>
        /// <param name="expectedResult"></param>
        [RowTest]
        [Row("<name,varchar(100),'default'>", "'MyValue'", "'MyValue'")]
        [Row("<name ,  varchar(100)		, default >", "default", "default")]
        [Row("ABC <name ,  varchar(100)		, default > XYZ", "default", "ABC default XYZ")]
        [Row("<name, int,10>", "15", "15")]
        [Row("ABC<name, int,10>XYZ", "15", "ABC15XYZ")]
        [Row("<name, int,>", "", "")]
        public void TestReplaceSimpleScripts(string scriptText, string replaceValue, string expectedResult)
        {
            var script = new Script(scriptText);
            script.TemplateParameters[0].Value = replaceValue;
            Assert.AreEqual(expectedResult, script.ScriptText, "Expected a replacement to occur.");
        }

        /// <summary>
        /// Tests parsing simple scripts with template parameters that have default values.
        /// </summary>
        /// <param name="scriptText">The script.</param>
        /// <param name="expectedResult"></param>
        [RowTest]
        [Row("<name,varchar(100),'default'>", "'default'")]
        [Row("<name ,  varchar(100)		, default >", "default ")]
        [Row("ABC <name ,  varchar(100)		, default > XYZ", "ABC default  XYZ")]
        [Row("<name, int,10>", "10")]
        [Row("ABC<name, int,10>XYZ", "ABC10XYZ")]
        [Row("<name, int,>", "")]
        [Row("AND DateAdded < DateAdd(day, 1, @StopDate) AND PostConfig & 1 <> CASE ",
            "AND DateAdded < DateAdd(day, 1, @StopDate) AND PostConfig & 1 <> CASE ")]
        public void TestReplaceSimpleScriptsWithDefaults(string scriptText, string expectedResult)
        {
            var script = new Script(scriptText);
            Assert.AreEqual(expectedResult, script.ScriptText, "Expected a replacement to occur.");
        }

        /// <summary>
        /// Tests the more complex script.
        /// </summary>
        /// <remarks>
        /// The script itself is non-sensical, but that's not the point.
        /// </remarks>
        [Test]
        public void TestMoreComplexScript()
        {
            string scriptText = "<name,varchar,default>SELECT * FROM <name,varchar,default> WHERE " +
                                Environment.NewLine
                                + "<name,varchar,default> = <name2,int,10> and <name3,decimal,>";

            var script = new Script(scriptText);
            script.TemplateParameters.SetValue("name", "subtext_Config");
            script.TemplateParameters.SetValue("name3", "'32'");

            string expected = "subtext_ConfigSELECT * FROM subtext_Config WHERE " + Environment.NewLine
                              + "subtext_Config = 10 and '32'";

            Assert.AreEqual(expected, script.ScriptText, "The template replacements failed");
        }

        /// <summary>
        /// Tests expanding a templated collection of scripts without changing any defaults.
        /// </summary>
        [Test]
        public void TestScriptCollectionsDefaultExpansion()
        {
            Stream stream = UnitTestHelper.UnpackEmbeddedResource("Scripting.TestTemplateSqlScript.txt");
            var scriptRunner = new SqlScriptRunner(stream, Encoding.UTF8);
            Assert.AreEqual(5, scriptRunner.TemplateParameters.Count,
                            "Not the expected number of template parameters. Make sure it merges correctly.");

            string expectedDefault =
                UnitTestHelper.UnpackEmbeddedResource("Scripting.TestTemplateSqlScriptExpectedDefault.txt",
                                                      Encoding.UTF8);
            Assert.AreEqual(expectedDefault, scriptRunner.ScriptCollection.ExpandedScriptText);
        }

        /// <summary>
        /// Tests expanding a templated collection of scripts with changes to the defaults.
        /// </summary>
        [Test]
        public void TestScriptCollectionsExpansionWithChanges()
        {
            Stream stream = UnitTestHelper.UnpackEmbeddedResource("Scripting.TestTemplateSqlScript.txt");
            var scriptRunner = new SqlScriptRunner(stream, Encoding.UTF8);
            Assert.AreEqual(5, scriptRunner.TemplateParameters.Count,
                            "Not the expected number of template parameters. Make sure it merges correctly.");

            string expectedDefault =
                UnitTestHelper.UnpackEmbeddedResource("Scripting.TestTemplateSqlScriptExpectedChanges.txt",
                                                      Encoding.UTF8);

            scriptRunner.TemplateParameters["subtext_db_name"].Value = "SubtextDB";
            scriptRunner.TemplateParameters["dottext_db_name"].Value = "dbDotText";
            scriptRunner.TemplateParameters["dotTextDbUser"].Value = "haacked";
            scriptRunner.TemplateParameters["someOtherTemplate"].Value = "NotABlogId";

            string expected = expectedDefault.Trim();
            string result = scriptRunner.ScriptCollection.ExpandedScriptText.Trim();
            expected = expected.Replace("" + (char)13, ""); //Ugly hack!  I know. I'll Explain later.
            result = result.Replace("" + ((char)13), ""); //Ugly hack!  I know. I'll Explain later.

            UnitTestHelper.AssertStringsEqualCharacterByCharacter(expected, result);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web.Hosting;

namespace UnitTests.Subtext
{
    /// <summary>
    /// Used to simulate an HttpRequest.
    /// </summary>
    public class SimulatedHttpRequest : SimpleWorkerRequest
    {
        readonly string _host;
        readonly string _physicalFilePath;
        readonly int _port;
        Uri _referer;
        readonly string _verb;
        private readonly NameValueCollection _formVariables = new NameValueCollection();
        private readonly NameValueCollection _headers = new NameValueCollection();

        /// <summary>
        /// Creates a new <see cref="SimulatedHttpRequest"/> instance.
        /// </summary>
        /// <param name="applicationPath">App virtual dir.</param>
        /// <param name="physicalAppPath">Physical Path to the app.</param>
        /// <param name="physicalFilePath">Physical Path to the file.</param>
        /// <param name="page">The Part of the URL after the application.</param>
        /// <param name="query">Query.</param>
        /// <param name="output">Output.</param>
        /// <param name="host">Host.</param>
        /// <param name="port">Port to request.</param>
        /// <param name="verb">The HTTP Verb to use.</param>
        public SimulatedHttpRequest(string applicationPath, string physicalAppPath, string physicalFilePath, string page,
                                    string query, TextWriter output, string host, int port, string verb)
            : base(applicationPath, physicalAppPath, page, query, output)
        {
            if(String.IsNullOrEmpty(host))
            {
                throw new ArgumentNullException("host");
            }

            if(applicationPath == null)
            {
                throw new ArgumentNullException("applicationPath");
            }

            _host = host;
            _verb = verb;
            _port = port;
            _physicalFilePath = physicalFilePath;
        }

        public SimulatedHttpRequest(string applicationPath, string physicalAppPath, string page, string query) : this(applicationPath, physicalAppPath, @"c:\inetpub\" + page, page, query, new StringWriter(), "localhost", 80, "GET")
        {
        }

        /// <summary>
        /// Gets the headers.
        /// </summary>
        /// <value>The headers.</value>
        public NameValueCollection Headers
        {
            get { return _headers; }
        }

        /// <summary>
        /// Gets the format exception.
        /// </summary>
        /// <value>The format exception.</value>
        public NameValueCollection Form
        {
            get { return _formVariables; }
        }

        internal void SetReferer(Uri referer)
        {
            _referer = referer;
        }

        /// <summary>
        /// Returns the specified member of the request header.
        /// </summary>
        /// <returns>
        /// The HTTP verb returned in the request
        /// header.
        /// </returns>
        public override string GetHttpVerbName()
        {
            return _verb;
        }

        /// <summary>
        /// Gets the name of the server.
        /// </summary>
        /// <returns></returns>
        public override string GetServerName()
        {
            return _host;
        }

        public override int GetLocalPort()
        {
            return _port;
        }

        /// <summary>
        /// Get all nonstandard HTTP header name-value pairs.
        /// </summary>
        /// <returns>An array of header name-value pairs.</returns>
        public override string[][] GetUnknownRequestHeaders()
        {
            if(_headers == null || _headers.Count == 0)
            {
                return null;
            }
            var headersArray = new string[_headers.Count][];
            for(int i = 0; i < _headers.Count; i++)
            {
                headersArray[i] = new string[2];
                headersArray[i][0] = _headers.Keys[i];
                headersArray[i][1] = _headers[i];
            }
            return headersArray;
        }

        public override string GetKnownRequestHeader(int index)
        {
            if(index == 0x24)
            {
                return _referer == null ? string.Empty : _referer.ToString();
            }

            if(index == 12 && _verb == "POST")
            {
                return "application/x-www-form-urlencoded";
            }

            return base.GetKnownRequestHeader(index);
        }

        /// <summary>
        /// Returns the virtual path to the currently executing
        /// server application.
        /// </summary>
        /// <returns>
        /// The virtual path of the current application.
        /// </returns>
        public override string GetAppPath()
        {
            string appPath = base.GetAppPath();
            return appPath;
        }

        public override string GetAppPathTranslated()
        {
            string path = base.GetAppPathTranslated();
            return path;
        }

        public override string GetUriPath()
        {
            string uriPath = base.GetUriPath();
            return uriPath;
        }

        public override string GetFilePathTranslated()
        {
            return _physicalFilePath;
        }

        public override string GetFilePath()
        {
            return CurrentExecutionPath ?? base.GetFilePath();
        }

        public override string GetPathInfo()
        {
            return "/";
        }

        public string CurrentExecutionPath
        {
            get; 
            set;
        }

        /// <summary>
        /// Reads request data from the client (when not preloaded).
        /// </summary>
        /// <returns>The number of bytes read.</returns>
        public override byte[] GetPreloadedEntityBody()
        {
            string formText = string.Empty;

            foreach(string key in _formVariables.Keys)
            {
                formText += string.Format(CultureInfo.InvariantCulture, "{0}={1}&", key, _formVariables[key]);
            }

            return Encoding.UTF8.GetBytes(formText);
        }

        /// <summary>
        /// Returns a value indicating whether all request data
        /// is available and no further reads from the client are required.
        /// </summary>
        /// <returns>
        /// 	<see langword="true"/> if all request data is available; otherwise,
        /// <see langword="false"/>.
        /// </returns>
        public override bool IsEntireEntityBodyIsPreloaded()
        {
            return true;
        }
    }
}using System.IO;
using System.Text;

namespace UnitTests.Subtext
{
    /// <summary>
    /// When simulating a blog request, this class 
    /// contains some useful context for the setup.
    /// </summary>
    internal class SimulatedRequestContext
    {
        public string HostName;
        public StringBuilder ResponseStringBuilder;
        public TextWriter ResponseTextWriter;
        public SimulatedHttpRequest SimulatedRequest;

        public SimulatedRequestContext(SimulatedHttpRequest request, StringBuilder responseText,
                                       TextWriter responseWriter, string host)
        {
            ResponseStringBuilder = responseText;
            ResponseTextWriter = responseWriter;
            SimulatedRequest = request;
            HostName = host;
        }
    }
}using MbUnit.Framework;

namespace UnitTests.Subtext.SubtextWeb.Admin
{
    [TestFixture]
    public class AdminPageTests
    {
    }
}using MbUnit.Framework;
using Subtext.Framework.Components;
using Subtext.Web.Admin.Feedback;

namespace UnitTests.Subtext.SubtextWeb.Admin
{
    [TestFixture]
    public class FeedbackTests
    {
        [Test]
        public void WhenFeedbackApprovedUiShowsRelevantItems()
        {
            FeedbackState state = FeedbackState.GetUiState(FeedbackStatusFlag.Approved);
            Assert.AreEqual("Comments", state.HeaderText);
            Assert.IsFalse(state.Approvable);
            Assert.IsFalse(state.Destroyable);
            Assert.IsTrue(state.Deletable);
            Assert.AreEqual("", state.DeleteToolTip);
            Assert.IsTrue(state.Spammable);
            Assert.IsFalse(state.Emptyable);
            Assert.AreEqual("", state.EmptyToolTip);
            Assert.AreEqual("<em>There are no approved comments to display.</em>", state.NoCommentsHtml);
        }

        [Test]
        public void WhenFeedbackNeedsModerationUiShowsRelevantItems()
        {
            FeedbackState state = FeedbackState.GetUiState(FeedbackStatusFlag.NeedsModeration);
            Assert.AreEqual("Comments Pending Moderator Approval", state.HeaderText);
            Assert.IsTrue(state.Approvable);
            Assert.AreEqual("Approve", state.ApproveText);
            Assert.IsFalse(state.Destroyable);
            Assert.IsTrue(state.Deletable);
            Assert.AreEqual("", state.DeleteToolTip);
            Assert.IsTrue(state.Spammable);
            Assert.IsFalse(state.Emptyable);
            Assert.AreEqual("", state.EmptyToolTip);
            Assert.AreEqual("<em>No Entries Need Moderation.</em>", state.NoCommentsHtml);
        }

        [Test]
        public void WhenFeedbackFlaggedAsSpamUiShowsRelevantItems()
        {
            FeedbackState state = FeedbackState.GetUiState(FeedbackStatusFlag.FlaggedAsSpam);
            Assert.AreEqual("Comments Flagged as SPAM", state.HeaderText);
            Assert.IsTrue(state.Approvable);
            Assert.AreEqual("Approve", state.ApproveText);
            Assert.IsFalse(state.Destroyable);
            Assert.IsTrue(state.Deletable);
            Assert.AreEqual("Trashes checked spam", state.DeleteToolTip);
            Assert.IsFalse(state.Spammable);
            Assert.IsTrue(state.Emptyable);
            Assert.AreEqual("Destroy all spam, not just checked", state.EmptyToolTip);
            Assert.AreEqual("<em>No Entries Flagged as SPAM.</em>", state.NoCommentsHtml);
        }

        [Test]
        public void WhenFeedbackDeletedUiShowsRelevantItems()
        {
            FeedbackState state = FeedbackState.GetUiState(FeedbackStatusFlag.Deleted);
            Assert.AreEqual("Comments In The Trash Bin", state.HeaderText);
            Assert.IsTrue(state.Approvable);
            Assert.AreEqual("Undelete", state.ApproveText);
            Assert.IsTrue(state.Destroyable);
            Assert.IsFalse(state.Deletable);
            Assert.AreEqual("Trashes checked spam", state.DeleteToolTip);
            Assert.IsFalse(state.Spammable);
            Assert.IsTrue(state.Emptyable);
            Assert.AreEqual("Destroy all trash, not just checked", state.EmptyToolTip);
            Assert.AreEqual("<em>No Entries in the Trash.</em>", state.NoCommentsHtml);
        }
    }
}ï»¿using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Services.Account;
using Subtext.Web.Controllers;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class AccountControllerTests
    {
        [Test]
        public void Logout_LogsUserOut()
        {
            // arrange
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.UrlHelper.BlogUrl()).Returns("/blog");
            var accountService = new Mock<IAccountService>();
            accountService.Setup(s => s.Logout(context.Object));
            var controller = new AccountController(context.Object, accountService.Object);

            // act
            var result = controller.Logout() as RedirectResult;

            // assert
            accountService.Verify(s => s.Logout(context.Object));
            Assert.AreEqual("/blog", result.Url);
        }
    }
}
ï»¿using System.Web.Mvc;
using System.Web.Routing;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework.Components;
using Subtext.Framework.Services;
using Subtext.Web.Controllers;

namespace UnitTests.Subtext.SubtextWeb.Controllers.Admin
{
    [TestFixture]
    public class EntryControllerTests
    {
        [Test]
        public void Delete_WithEntryId_CallsDeleteEntryOnRepository()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment) { Id = 123, Author = "Bugs" };
            var service = new Mock<ICommentService>();
            service.Setup(s => s.Get(123)).Returns(feedback);
            service.Setup(s => s.UpdateStatus(feedback, FeedbackStatusFlag.Deleted));
            var controller = new CommentController(service.Object);

            // act
            var result = controller.UpdateStatus(123, FeedbackStatusFlag.Deleted) as JsonResult;

            // assert
            service.Verify(c => c.UpdateStatus(feedback, FeedbackStatusFlag.Deleted));
            var data = new RouteValueDictionary(result.Data);
            Assert.AreEqual("Comment by Bugs", data["subject"]);
            Assert.AreEqual("has been removed", data["predicate"]);
        }

        [Test]
        public void Destroy_WithEntryId_CallsDestroyFeedbackOnRepository()
        {
            // arrange
            var feedback = new FeedbackItem(FeedbackType.Comment) { Id = 123, Author = "Calvin"};
            var service = new Mock<ICommentService>();
            service.Setup(s => s.Get(123)).Returns(feedback);
            service.Setup(s => s.Destroy(123));
            var controller = new CommentController(service.Object);

            // act
            var result = controller.Destroy(123) as JsonResult;

            // assert
            service.Verify(c => c.Destroy(123));
            var data = new RouteValueDictionary(result.Data);
            Assert.AreEqual("Comment by Calvin", data["subject"]);
            Assert.AreEqual("was destroyed (there is no undo)", data["predicate"]);
        }
    }
}
using System;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services;
using Subtext.Web.Controllers;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class CommentApiControllerTests
    {
        [Test]
        public void CtorSetsCommentService()
        {
            // arrange
            ICommentService service = new Mock<ICommentService>().Object;
            ISubtextContext subtextContext = new Mock<ISubtextContext>().Object;

            // act
            var controller = new CommentApiController(subtextContext, service);

            // assert
            Assert.AreSame(service, controller.CommentService);
        }

        [Test]
        public void CreateWithNullXmlThrowsInvalidOperationException()
        {
            // arrange
            ICommentService service = new Mock<ICommentService>().Object;
            ISubtextContext subtextContext = new Mock<ISubtextContext>().Object;
            var controller = new CommentApiController(subtextContext, service);

            // act, assert
            UnitTestHelper.AssertThrowsArgumentNullException(() => controller.Create(1, null));
        }

        [Test]
        public void CreatePassesFeedbackItemToService()
        {
            // arrange
            var service = new Mock<ICommentService>();
            var subtextContext = new Mock<ISubtextContext>();

            FeedbackItem comment = null;
            service.Setup(s => s.Create(It.IsAny<FeedbackItem>(), It.IsAny<bool>())).Callback<FeedbackItem, bool>((f, b) => comment = f);
            var controller = new CommentApiController(subtextContext.Object, service.Object);
            string xmlText =
                @"<?xml version=""1.0""?>
                            <item>
                                <title>Haack's Wild Ride</title>
                                <description>This tests the CommentAPI</description>
                                <author>Me</author>
                                <link>http://subtextproject.com/</link>
                            </item>";
            var doc = new XmlDocument();
            doc.LoadXml(xmlText);

            // act
            controller.Create(123, doc);

            // assert
            Assert.IsNotNull(comment);
            Assert.AreEqual("Haack's Wild Ride", comment.Title);
            Assert.AreEqual("This tests the CommentAPI", comment.Body);
            Assert.AreEqual("Me", comment.Author);
            Assert.AreEqual("http://subtextproject.com/", comment.SourceUrl.ToString());
        }

        [Test]
        public void CreateMissingAuthorDoesNotThrowException()
        {
            // arrange
            var service = new Mock<ICommentService>();
            var subtextContext = new Mock<ISubtextContext>();

            FeedbackItem comment = null;
            service.Setup(s => s.Create(It.IsAny<FeedbackItem>(), It.IsAny<bool>())).Callback<FeedbackItem, bool>((f, b) => comment = f);
            var controller = new CommentApiController(subtextContext.Object, service.Object);
            const string xmlText = @"<?xml version=""1.0""?>
                            <item>
                                <title>Haack's Wild Ride</title>
                                <description>This tests the CommentAPI</description>
                                <link>http://subtextproject.com/</link>
                            </item>";
            var doc = new XmlDocument();
            doc.LoadXml(xmlText);

            // act
            controller.Create(123, doc);

            // assert
            Assert.IsNotNull(comment);
            Assert.AreEqual("Haack's Wild Ride", comment.Title);
            Assert.AreEqual("This tests the CommentAPI", comment.Body);
            Assert.AreEqual(string.Empty, comment.Author);
            Assert.AreEqual("http://subtextproject.com/", comment.SourceUrl.ToString());
        }
    }
}ï»¿using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.ImportExport;
using Subtext.Infrastructure.ActionResults;
using Subtext.Web.Controllers;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class ExportControllerTests
    {
        [Test]
        public void Ctor_WithBlogMLSource_SetsSource()
        {
            // arrange
            var source = new Mock<IBlogMLSource>();
            
            // act
            var controller = new ExportController(source.Object, new Blog {Title = "whatever"});

            // assert
            Assert.AreEqual(source.Object, controller.Source);
        }

        [Test]
        public void ExportBlogML_WithEmbedAttachmetsTrue_ReturnsExportActionResultWithEmbedTrue()
        {
            // arrange
            var source = new Mock<IBlogMLSource>();
            var controller = new ExportController(source.Object, new Blog { Title = "whatever" });

            // act
            var result = controller.BlogML(true /*embedAttachments*/) as ExportActionResult;

            // assert
            var writer = result.BlogMLWriter as BlogMLWriter;
            Assert.IsTrue(writer.EmbedAttachments);
        }

        [Test]
        public void ExportBlogML_WithEmbedAttachmentsFalse_ReturnsExportActionResultWithEmbedFalse()
        {
            // arrange
            var source = new Mock<IBlogMLSource>();
            var controller = new ExportController(source.Object, new Blog { Title = "whatever" });

            // act
            var result = controller.BlogML(false /*embedAttachments*/) as ExportActionResult;

            // assert
            var writer = result.BlogMLWriter as BlogMLWriter;
            Assert.IsFalse(writer.EmbedAttachments);
        }

        [Test]
        public void ExportBlogML_WithBlogTitle_SetsFileDownloadNameToTitle()
        {
            // arrange
            var source = new Mock<IBlogMLSource>();
            var controller = new ExportController(source.Object, new Blog { Title = "whatever" });

            // act
            var result = controller.BlogML(false /*embedAttachments*/) as ExportActionResult;

            // assert
            Assert.AreEqual("whatever-Export.xml", result.FileDownloadName);
        }

        [Test]
        public void ExportBlogML_WithBlogTitleHavingIllegalFileNameCharacters_RemovesThoseCharactersFromFileDownloadName()
        {
            // arrange
            var source = new Mock<IBlogMLSource>();
            var controller = new ExportController(source.Object, new Blog { Title = @"whatever \|/ you say" });

            // act
            var result = controller.BlogML(false /*embedAttachments*/) as ExportActionResult;

            // assert
            Assert.AreEqual("whatever  you say-Export.xml", result.FileDownloadName);
        }
    }
}
ï»¿#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Collections.Specialized;
using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Services.Identicon;
using Subtext.Identicon;
using Subtext.Web.Controllers;
using Subtext.Infrastructure.ActionResults;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class IdenticonControllerTests
    {
        [Test]
        public void Image_WithCode_ReturnsResultWithCorrectCodeAndContentTypeAndDefaultSize()
        {
            // arrange
            var controller = new IdenticonController();

            // act
            var result = controller.Image(123) as IdenticonResult;

            // assert
            Assert.AreEqual(123, result.Code);
            Assert.AreEqual(40, result.Size);
            Assert.AreEqual("image/png", result.ContentType);
        }

        [Test]
        public void Image_WithSize_ReturnsResultWithSpecifiedSize()
        {
            // arrange
            var controller = new IdenticonController(new NameValueCollection{{"IdenticonSize", "80"}});

            // act
            var result = controller.Image(0) as IdenticonResult;

            // assert
            Assert.AreEqual(80, result.Size);
        }


        [Test]
        public void Image_WithoutCode_ReturnsCodeBasedOnIpAddress()
        {
            // arrange
            var controller = new IdenticonController();
            var controllerContext = new Mock<ControllerContext>();
            controller.ControllerContext = controllerContext.Object;
            controllerContext.Setup(c => c.HttpContext.Request.UserHostAddress).Returns("123.234.245.255");

            // act
            var result = controller.Image(null) as IdenticonResult;

            // assert
            Assert.AreEqual(-315619697, result.Code);
        }

        [Test]
        public void Image_WithRequestMatchingEtag_ReturnsNotModifiedResult()
        {
            // arrange
            string etag = IdenticonUtil.ETag(-1234, 40);
            var controller = new IdenticonController();
            var controllerContext = new Mock<ControllerContext>();
            controller.ControllerContext = controllerContext.Object;
            controllerContext.Setup(c => c.HttpContext.Request.Headers).Returns(new NameValueCollection {{"If-None-Match", etag}});

            // act
            var result = controller.Image(-1234) as NotModifiedResult;

            // assert
            Assert.IsNotNull(result);
        }

        public IdenticonControllerTests()
        {
            IdenticonUtil.Salt = "and pepper";
        }
    }
}
ï»¿using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Web.Controllers;
using UrlHelper=Subtext.Framework.Routing.UrlHelper;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class ManifestControllerTests
    {
        [Test]
        public void Index_ReturnsContentWithContentTypeTextXml()
        {
            // arrange
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl(It.IsAny<string>())).Returns("/");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "localhost"});
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            var controller = new ManifestController(subtextContext.Object);

            // act
            var manifest = controller.Index() as ContentResult;

            // assert
            Assert.AreEqual("text/xml", manifest.ContentType);
        }

        [Test]
        public void Index_WithBlogNotAllowingTrackbacks_ReturnsManifestWithSupportsTrackbacksNo()
        {
            // arrange
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl(It.IsAny<string>())).Returns("/");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "localhost", TrackbacksEnabled = false });
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            var controller = new ManifestController(subtextContext.Object);

            // act
            var manifest = controller.Index() as ContentResult;

            // assert
            Assert.Contains(manifest.Content, "<supportsTrackbacks>No</supportsTrackbacks>");
        }

        [Test]
        public void Index_WithBlogAllowingTrackbacks_ReturnsManifestWithSupportsTrackbacksYes()
        {
            // arrange
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl(It.IsAny<string>())).Returns("/");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "localhost", TrackbacksEnabled = true });
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            var controller = new ManifestController(subtextContext.Object);

            // act
            var manifest = controller.Index() as ContentResult;

            // assert
            Assert.Contains(manifest.Content, "<supportsTrackbacks>Yes</supportsTrackbacks>");
        }

        [Test]
        public void Index_ReturnsManifestWithProperAdminUrls()
        {
            // arrange
            var urlHelper = new Mock<UrlHelper>();
            urlHelper.Setup(u => u.AdminUrl("")).Returns("/admin/default.aspx");
            urlHelper.Setup(u => u.AdminUrl("posts/edit.aspx")).Returns("/admin/posts/edit.aspx");
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog { Host = "localhost" });
            subtextContext.Setup(c => c.UrlHelper).Returns(urlHelper.Object);
            var controller = new ManifestController(subtextContext.Object);

            // act
            var manifest = controller.Index() as ContentResult;

            // assert
            string expected =
                @"<adminUrl>
      <![CDATA[
        http://localhost/admin/default.aspx
    ]]>
    </adminUrl>
    <postEditingUrl>
      <![CDATA[
        http://localhost/admin/posts/edit.aspx
    ]]>
    </postEditingUrl>";

            Assert.Contains(manifest.Content, expected);
        }
    }
}
using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Web;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services;
using Subtext.Infrastructure.ActionResults;
using Subtext.Web.Controllers;

namespace UnitTests.Subtext.SubtextWeb.Controllers
{
    [TestFixture]
    public class StatisticsControllerTests
    {
        [Test]
        public void CtorSetsStatisticsService()
        {
            // arrange
            IStatisticsService service = new Mock<IStatisticsService>().Object;
            ISubtextContext subtextContext = new Mock<ISubtextContext>().Object;

            // act
            var controller = new StatisticsController(subtextContext, service);

            // assert
            Assert.AreSame(service, controller.StatisticsService);
        }

        [Test]
        public void TwoRequestsWithinTimeoutGetsNotModifiedResult()
        {
            // arrange
            IStatisticsService service = new Mock<IStatisticsService>().Object;
            var subtextContext = new Mock<ISubtextContext>();
            var headers = new NameValueCollection();
            headers.Add("If-Modified-Since", DateTime.UtcNow.ToString(CultureInfo.InvariantCulture));
            subtextContext.Setup(c => c.HttpContext.Request.Headers).Returns(headers);
            var controller = new StatisticsController(subtextContext.Object, service);

            // act
            var result = controller.RecordAggregatorView(123) as NotModifiedResult;

            // assert
            Assert.IsNotNull(result);
        }

        [Test]
        public void RequestForEntryRecordedAsAnAggregatorVisit()
        {
            // arrange
            EntryView entryView = null;
            var service = new Mock<IStatisticsService>();
            service.Setup(s => s.RecordAggregatorView(It.IsAny<EntryView>())).Callback<EntryView>(
                view => entryView = view);
            var headers = new NameValueCollection();
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 99});
            subtextContext.Setup(c => c.HttpContext.Request.Headers).Returns(headers);
            var controller = new StatisticsController(subtextContext.Object, service.Object);

            // act
            controller.RecordAggregatorView(123);

            // assert
            Assert.IsNotNull(entryView);
            Assert.AreEqual(PageViewType.AggView, entryView.PageViewType);
            Assert.AreEqual(99, entryView.BlogId);
            Assert.AreEqual(123, entryView.EntryId);
        }

        [Test]
        public void RequestForInvalidEntryIdNotRecordedAsAnAggregatorVisit()
        {
            // arrange
            var service = new Mock<IStatisticsService>();
            service.Setup(s => s.RecordAggregatorView(It.IsAny<EntryView>())).Throws(
                new InvalidOperationException("RecordAggregatorView should not be called"));
            var headers = new NameValueCollection();
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 99});
            subtextContext.Setup(c => c.HttpContext.Request.Headers).Returns(headers);
            var controller = new StatisticsController(subtextContext.Object, service.Object);

            // act, no assert
            controller.RecordAggregatorView(-1);
        }

        [Test]
        public void RequestReturnsFileResultContainingSinglePixelImage()
        {
            // arrange
            var service = new Mock<IStatisticsService>();
            var headers = new NameValueCollection();
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Id = 99});
            subtextContext.Setup(c => c.HttpContext.Request.Headers).Returns(headers);
            var controller = new StatisticsController(subtextContext.Object, service.Object);

            // act
            var result = controller.RecordAggregatorView(-1) as CacheableFileContentResult;

            // assert
            Assert.IsNotNull(result);
            Assert.AreEqual(HttpCacheability.Public, result.Cacheability);
            Assert.AreEqual("image/gif", result.ContentType);
        }
    }
}using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web.UI;
using MbUnit.Framework;
using Subtext.Web.Controls.Captcha;

namespace UnitTests.Subtext.SubtextWeb.Controls
{
    [TestFixture]
    public class CaptchaTests
    {
        [Test]
        public void CanRoundTripCaptchaInfo()
        {
            DateTime date =
                DateTime.ParseExact(DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture),
                                    "yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture);

            var info = new CaptchaInfo("My Test");
            info.WarpFactor = CaptchaImage.FontWarpFactor.High;
            info.DateGenerated = date;

            string encrypted = info.ToEncryptedString();
            Assert.IsTrue(encrypted.IndexOf("My Test") < 0);
            info = CaptchaInfo.FromEncryptedString(encrypted);
            Assert.AreEqual("My Test", info.Text);
            Assert.AreEqual(CaptchaImage.FontWarpFactor.High, info.WarpFactor);
            Assert.AreEqual(date, info.DateGenerated);
        }
    }

    public class CaptchaControlTester : CaptchaControl
    {
        public void RenderOverride(HtmlTextWriter writer)
        {
            base.Render(writer);
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Web.UI.WebControls;
using MbUnit.Framework;
using Subtext.Web.Controls;

namespace UnitTests.Subtext.SubtextWeb.Controls
{
    [TestFixture]
    public class ControlHelperTests
    {
        [RowTest]
        [Row("a tooltip", "trying this title", "a tooltip")]
        [Row((string)null, "this is my title", "this is my title")]
        [Row("", "", "")]
        public void OnlyAddTitleWhenNotAlreadyThere(string toolTip, string title, string expectedTitle)
        {
            var link = new HyperLink();
            link.ToolTip = toolTip;

            ControlHelper.SetTitleIfNone(link, title);

            Assert.AreEqual(expectedTitle, link.ToolTip, "Didn't set the tooltip correctly.");
            Assert.IsNull(link.Attributes["title"], "Oops, looks like we set the title attribute too!");
        }

        [Test]
        public void OnlyAddCssClassWhenNotAlreadyThere()
        {
            var label = new Label();
            label.CssClass = "foo bar baz quux";

            ControlHelper.AddCssClass(label, "baz");
            Assert.AreEqual("foo bar baz quux", label.CssClass);

            ControlHelper.AddCssClass(label, "click");
            Assert.AreEqual("foo bar baz quux click", label.CssClass);

            label.CssClass = "click";
            ControlHelper.AddCssClass(label, "click");
            Assert.AreEqual("click", label.CssClass);

            label.CssClass = "";
            ControlHelper.AddCssClass(label, "click");
            Assert.AreEqual("click", label.CssClass);

            label.CssClass = "click";
            ControlHelper.AddCssClass(label, "cluck");
            Assert.AreEqual("click cluck", label.CssClass);
        }
    }
}using MbUnit.Framework;
using Subtext.Web.Controls.Captcha;

namespace UnitTests.Subtext.SubtextWeb.Controls
{
    [TestFixture]
    public class InvisibleCaptchaTests
    {
        [Test]
        public void CanRoundTripEncryption()
        {
            string encrypted = CaptchaBase.EncryptString("Hello Sucka!");
            string decrypted = CaptchaBase.DecryptString(encrypted);
            Assert.AreEqual("Hello Sucka!", decrypted, "Round trip did not work.");
        }
    }
}using MbUnit.Framework;

namespace UnitTests.Subtext.SubtextWeb.HostAdmin
{
    [TestFixture]
    public class HostAdminPageTests
    {
    }
}ï»¿using System;
using System.Web.Mvc;
using MbUnit.Framework;
using Moq;
using Subtext.Infrastructure;
using Subtext.Web.Controllers;
using Subtext.Web.Infrastructure;

namespace UnitTests.Subtext.SubtextWeb.Infrastructure
{
    [TestFixture]
    public class SubtextControllerFactoryTests
    {
        [Test]
        public void CreateController_WithControllerName_CanCreateControllerCaseInsensitively()
        {
            // arrange
            var serviceLocator = new Mock<IServiceLocator>();
            serviceLocator.Setup(l => l.GetService(typeof(IdenticonController))).Returns(new IdenticonController());
            var factory = new SubtextControllerFactory(serviceLocator.Object);

            // act
            var controller = factory.CreateController(null, "identicon");

            // assert
            Assert.AreEqual(typeof(IdenticonController), controller.GetType());
        }

        [Test]
        public void ReleaseController_WithDisposableController_CallsDisposeOnController()
        {
            // arrange
            var serviceLocator = new Mock<IServiceLocator>();
            var factory = new SubtextControllerFactory(serviceLocator.Object);
            var controller = new Mock<IController>();
            var disposable = controller.As<IDisposable>();
            disposable.Setup(d => d.Dispose());
            
            // act
            factory.ReleaseController(controller.Object);

            // assert
            disposable.Verify(d => d.Dispose());
        }
    }
}
#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Security.Principal;
using System.Threading;
using System.Web.UI.WebControls;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Providers.BlogEntryEditor.FCKeditor;

namespace UnitTests.Subtext.SubtextWeb.Providers.RichTextEditor
{
    /// <summary>
    /// Summary description for FCKeditorProviderTests.
    /// </summary>
    [TestFixture]
    public class FCKeditorProviderTests
    {
        string _hostName;
        FckBlogEntryEditorProvider frtep;

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueHostname();

            IPrincipal principal = UnitTestHelper.MockPrincipalWithRoles("Admins");
            Thread.CurrentPrincipal = principal;
            frtep = new FckBlogEntryEditorProvider();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, "MyBlog", "Subtext.Web");
        }

        [TearDown]
        public void TearDown()
        {
            Thread.CurrentPrincipal = null;
        }

        [Test]
        public void SetControlID()
        {
            string test = "MyTestControlID";
            frtep.ControlId = test;
            Assert.AreEqual(test, frtep.ControlId);
        }

        [Test]
        public void SetText()
        {
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            string test = "Lorem Ipsum";
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            frtep.InitializeControl(subtextContext.Object);
            frtep.Text = test;
            Assert.AreEqual(test, frtep.Text);
            Assert.AreEqual(test, frtep.Xhtml);
        }

        [Test]
        public void SetWidth()
        {
            Unit test = 200;
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            frtep.InitializeControl(subtextContext.Object);

            frtep.Width = test;
            Assert.AreEqual(test, frtep.Width);
        }

        [Test]
        public void SetHeight()
        {
            Unit test = 100;
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            frtep.InitializeControl(subtextContext.Object);
            frtep.Height = test;
            Assert.AreEqual(test, frtep.Height);
        }

        [Test]
        public void TestInitializationWithNullName()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => frtep.Initialize(null, new NameValueCollection()));
        }

        [Test]
        public void TestInitializationWithNullConfigValue()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() => frtep.Initialize("FCKProvider", null));
        }

        [Test]
        public void TestInitializationWithEmptyWebFolder()
        {
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => frtep.Initialize("FCKProvider", new NameValueCollection()));
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Web.UI.WebControls;
using FreeTextBoxControls;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Web.Providers.BlogEntryEditor.FTB;

namespace UnitTests.Subtext.SubtextWeb.Providers.RichTextEditor
{
    /// <summary>
    /// Summary description for FtbProviderTests.
    /// </summary>
    [TestFixture]
    public class FtbProviderTests
    {
        readonly string _testToolbarLayout =
            "Bold,Italic,Underline,Strikethrough;Superscript,Subscript,RemoveFormat|FontFacesMenu,FontSizesMenu,FontForeColorsMenu|InsertTable|JustifyLeft,JustifyRight,JustifyCenter,JustifyFull;BulletedList,NumberedList,Indent,Outdent;CreateLink,Unlink,Insert,InsertRule|Cut,Copy,Paste;Undo,Redo|ieSpellCheck,WordClean|InsertImage,InsertImageFromGallery";

        string _hostName;

        FtbBlogEntryEditorProvider frtep;

        [SetUp]
        public void SetUp()
        {
            _hostName = UnitTestHelper.GenerateUniqueHostname();
            frtep = new FtbBlogEntryEditorProvider();
            UnitTestHelper.SetHttpContextWithBlogRequest(_hostName, "MyBlog", "Subtext.Web");
        }

        [Test]
        public void SetControlID()
        {
            string test = "MyTestControlID";
            frtep.ControlId = test;
            Assert.AreEqual(test, frtep.ControlId);
        }

        [Test]
        public void SetText()
        {
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.ImageDirectoryUrl(blog)).Returns("/images");

            string test = "Lorem Ipsum";
            frtep.InitializeControl(subtextContext.Object);
            frtep.Text = test;
            Assert.AreEqual(test, frtep.Text);
            Assert.AreEqual(test, frtep.Xhtml);
        }

        [Test]
        public void SetWidth()
        {
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.ImageDirectoryUrl(blog)).Returns("/images");

            Unit test = 200;
            frtep.InitializeControl(subtextContext.Object);
            frtep.Width = test;
            Assert.AreEqual(test, frtep.Width);
        }

        [Test]
        public void SetHeight()
        {
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.ImageDirectoryUrl(blog)).Returns("/images");

            Unit test = 100;
            frtep.InitializeControl(subtextContext.Object);
            frtep.Height = test;
            Assert.AreEqual(test, frtep.Height);
        }

        [Test]
        public void TestInitializationWithNullName()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(
                () => frtep.Initialize(null, new NameValueCollection()));
        }

        [Test]
        public void TestInitializationWithNullConfigValue()
        {
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                frtep.Initialize("FTBProvider", null)
            );
        }

        [Test]
        public void TestInitializationWithEmptyWebFolder()
        {
            UnitTestHelper.AssertThrows<InvalidOperationException>(() => 
                frtep.Initialize("FTBProvider", new NameValueCollection())
            );
        }

        [Test]
        public void TestInitialization()
        {
            var blog = new Blog {Host = "localhost", Subfolder = "subfolder"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.Blog).Returns(blog);
            subtextContext.Setup(c => c.UrlHelper.ImageDirectoryUrl(blog)).Returns("/images");

            NameValueCollection coll = GetNameValueCollection();
            frtep.Initialize("FTBProvider", coll);
            frtep.InitializeControl(subtextContext.Object);
            Assert.IsTrue(frtep.RichTextEditorControl.GetType() == typeof(FreeTextBox));
            var txt = frtep.RichTextEditorControl as FreeTextBox;
            Assert.AreEqual(frtep.Name, "FTBProvider");
            Assert.AreEqual(txt.ToolbarLayout, _testToolbarLayout);
            Assert.AreEqual(txt.FormatHtmlTagsToXhtml, true);
            Assert.AreEqual(txt.RemoveServerNameFromUrls, false);
        }

        private NameValueCollection GetNameValueCollection()
        {
            var ret = new NameValueCollection(3)
            {
                {"WebFormFolder", "~/Providers/RichTextEditor/FTB/"},
                {"toolbarlayout", _testToolbarLayout},
                {"FormatHtmlTagsToXhtml", "true"},
                {"RemoveServerNamefromUrls", "false"}
            };
            return ret;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Specialized;
using System.Web.UI.WebControls;
using MbUnit.Framework;
using Moq;
using Subtext.Framework;
using Subtext.Web.Providers.BlogEntryEditor.PlainText;

namespace UnitTests.Subtext.SubtextWeb.Providers.RichTextEditor
{
    /// <summary>
    /// Summary description for PlainTextProviderTests.
    /// </summary>
    [TestFixture]
    public class PlainTextProviderTests
    {
        [Test]
        public void SetControlID()
        {
            string test = "MyTestControlID";
            var provider = new PlainTextBlogEntryEditorProvider();
            provider.ControlId = test;
            Assert.AreEqual(test, provider.ControlId);
        }

        [Test]
        public void SetText()
        {
            string test = "Lorem Ipsum";
            var provider = new PlainTextBlogEntryEditorProvider();
            provider.InitializeControl(new Mock<ISubtextContext>().Object);
            provider.Text = test;
            Assert.AreEqual(test, provider.Text);
            Assert.AreEqual(test, provider.Xhtml);
        }

        [Test]
        public void SetWidth()
        {
            Unit test = 200;
            var provider = new PlainTextBlogEntryEditorProvider();
            provider.InitializeControl(new Mock<ISubtextContext>().Object);
            provider.Width = test;
            Assert.AreEqual(test, provider.Width);
        }

        [Test]
        public void SetHeight()
        {
            Unit test = 100;
            var provider = new PlainTextBlogEntryEditorProvider();
            provider.InitializeControl(new Mock<ISubtextContext>().Object);
            provider.Height = test;
            Assert.AreEqual(test, provider.Height);
        }

        [Test]
        public void TestInitializationWithNullName()
        {
            var provider = new PlainTextBlogEntryEditorProvider();
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                                                               provider.Initialize(null, null)
                );
        }

        [Test]
        public void TestInitializationWithNullConfigValue()
        {
            var provider = new PlainTextBlogEntryEditorProvider();
            UnitTestHelper.AssertThrowsArgumentNullException(() =>
                                                               provider.Initialize("PlainTextProvider", null)
                );
        }

        [Test]
        public void TestInitialization()
        {
            var provider = new PlainTextBlogEntryEditorProvider();
            NameValueCollection coll = GetNameValueCollection();
            provider.Initialize("PlainTextProvider", coll);
            provider.InitializeControl(new Mock<ISubtextContext>().Object);
            Assert.IsTrue(provider.RichTextEditorControl.GetType() == typeof(TextBox));
            var txt = provider.RichTextEditorControl as TextBox;
            Assert.AreEqual(provider.Name, "PlainTextProvider");
            Assert.AreEqual(txt.Rows, 10);
            Assert.AreEqual(txt.Columns, 70);
            Assert.AreEqual(txt.CssClass, "myCssClass");
        }

        private NameValueCollection GetNameValueCollection()
        {
            var ret = new NameValueCollection(3);
            ret.Add("rows", "10");
            ret.Add("cols", "70");
            ret.Add("cssClass", "myCssClass");
            return ret;
        }
    }
}using System;
using MbUnit.Framework;
using Subtext.Web.SiteMap;

namespace UnitTests.Subtext.SubtextWeb
{
    [TestFixture]
    public class Sitemap
    {
        [Test]
        public void Add_WithUrlElement_IncreasesCountByOne()
        {
            var urlCollection = new UrlCollection();
            urlCollection.Add(new UrlElement(new Uri("http://someurl.com"), DateTime.Today, ChangeFrequency.Daily, 1));
            Assert.AreEqual(1, urlCollection.Count);
        }

        [Test]
        public void UrlElement_WithPropertiesSet_ReturnsSameValuesForProperties()
        {
            var url = new UrlElement(new Uri("http://someurl.com"), DateTime.MinValue, ChangeFrequency.Never, 0);
            StringAssert.AreEqualIgnoreCase("http://someurl.com/", url.Location);
            Assert.AreEqual(DateTime.MinValue, url.LastModified);
            Assert.AreEqual(ChangeFrequency.Never, url.ChangeFrequency);
            Assert.AreEqual(0, url.Priority);
        }

        [Test]
        public void UrlElement_CtorSetsPriority_ToLessThanZero()
        {
            // using property
            var url = new UrlElement();

            UnitTestHelper.AssertThrows<ArgumentOutOfRangeException>(() => url.Priority = -0.5M);
        }
    }
}using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Xml;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Providers;
using Subtext.Web.SiteMap;

namespace UnitTests.Subtext.SubtextWeb
{
    [TestFixture]
    public class SitemapHandlerTests
    {
        [Test]
        public void ProcessRequest_WithSingleBlogPost_ProducesSitemapWithBlogPostNode()
        {
            //arrange
            var entries = new List<Entry>();
            entries.Add(new Entry(PostType.BlogPost)
            {Id = 123, DateModified = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture)});
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetPostCountsByMonth()).Returns(new List<ArchiveCount>());
            repository.Setup(
                r => r.GetEntries(It.IsAny<int>(), PostType.BlogPost, It.IsAny<PostConfig>(), It.IsAny<bool>())).Returns
                (entries);
            repository.Setup(
                r => r.GetEntries(It.IsAny<int>(), PostType.Story, It.IsAny<PostConfig>(), It.IsAny<bool>())).Returns(
                new List<Entry>());
            repository.Setup(r => r.GetCategories(CategoryType.PostCollection, true)).Returns(new List<LinkCategory>());

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupSet(c => c.HttpContext.Response.ContentType, It.IsAny<string>());
            StringWriter writer = subtextContext.FakeSitemapHandlerRequest(repository);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "localhost"});
            var handler = new SiteMapHttpHandler(subtextContext.Object);

            //act
            handler.ProcessRequest();

            //assert
            var doc = new XmlDocument();
            doc.LoadXml(writer.ToString());
            XmlNode entryUrlNode = doc.DocumentElement.ChildNodes[1];
            Assert.AreEqual("http://localhost/some-blogpost-with-id-of-123", entryUrlNode.ChildNodes[0].InnerText);
            Assert.AreEqual("2008-01-23", entryUrlNode.ChildNodes[1].InnerText);
        }

        [Test]
        public void ProcessRequest_WithSingleArticle_ProducesSitemapWithArticleNode()
        {
            //arrange
            var entries = new List<Entry>();
            entries.Add(new Entry(PostType.Story)
            {Id = 321, DateModified = DateTime.ParseExact("2008/01/23", "yyyy/MM/dd", CultureInfo.InvariantCulture)});
            var repository = new Mock<ObjectProvider>();
            repository.Setup(r => r.GetPostCountsByMonth()).Returns(new List<ArchiveCount>());
            repository.Setup(
                r => r.GetEntries(It.IsAny<int>(), PostType.BlogPost, It.IsAny<PostConfig>(), It.IsAny<bool>())).Returns
                (new List<Entry>());
            repository.Setup(
                r => r.GetEntries(It.IsAny<int>(), PostType.Story, It.IsAny<PostConfig>(), It.IsAny<bool>())).Returns(
                entries);
            repository.Setup(r => r.GetCategories(CategoryType.PostCollection, true)).Returns(new List<LinkCategory>());

            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.SetupSet(c => c.HttpContext.Response.ContentType, It.IsAny<string>());

            StringWriter writer = subtextContext.FakeSitemapHandlerRequest(repository);
            var handler = new SiteMapHttpHandler(subtextContext.Object);
            subtextContext.Setup(c => c.Blog).Returns(new Blog {Host = "localhost"});

            //act
            handler.ProcessRequest();

            //assert
            var doc = new XmlDocument();
            doc.LoadXml(writer.ToString());
            XmlNode entryUrlNode = doc.DocumentElement.ChildNodes[1];
            Assert.AreEqual("http://localhost/some-article-with-id-of-321", entryUrlNode.ChildNodes[0].InnerText);
            Assert.AreEqual("2008-01-23", entryUrlNode.ChildNodes[1].InnerText);
        }
    }
}using System;
using System.IO;
using System.Web;
using System.Web.Routing;
using log4net;
using MbUnit.Framework;
using Moq;
using Subtext.Framework.Data;
using Subtext.Framework.Exceptions;
using Subtext.Framework.Infrastructure.Installation;
using Subtext.Framework.Routing;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;
using Subtext.Web;

namespace UnitTests.Subtext.SubtextWeb
{
    [TestFixture]
    public class SubtextApplicationTests
    {
        [Test]
        public void StartApplication_SetsLogInitializedToFalse()
        {
            // arrange
            var app = new SubtextApplication(null);
            var server = new Mock<HttpServerUtilityBase>();

            // act
            app.StartApplication(new SubtextRouteMapper(new RouteCollection(), new Mock<IServiceLocator>().Object),
                                 server.Object);

            // assert
            Assert.IsFalse(app.LogInitialized);
        }

        [Test]
        public void StartApplication_AddsAdminDirectoryToInvalidPaths_IfAdminDirectoryExistsInWrongPlace()
        {
            // arrange
            var app = new SubtextApplication(null);
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.MapPath("~/Admin")).Returns(Directory.CreateDirectory("Admin").FullName);

            // act
            app.StartApplication(new SubtextRouteMapper(new RouteCollection(), new Mock<IServiceLocator>().Object),
                                 server.Object);

            // assert
            Assert.AreEqual("~/Admin", app.DeprecatedPhysicalPaths[0]);
        }

        [Test]
        public void StartApplication_AddsLoginFileToInvalidPaths_IfLoginFileExistsInWrongPlace()
        {
            // arrange
            var app = new SubtextApplication(null);
            var server = new Mock<HttpServerUtilityBase>();
            using(StreamWriter writer = File.CreateText("login.aspx"))
            {
                writer.Write("test");
            }
            server.Setup(s => s.MapPath("~/login.aspx")).Returns(Path.GetFullPath("login.aspx"));

            // act
            app.StartApplication(new SubtextRouteMapper(new RouteCollection(), new Mock<IServiceLocator>().Object),
                                 server.Object);

            // assert
            Assert.AreEqual("~/login.aspx", app.DeprecatedPhysicalPaths[0]);
        }

        [Test]
        public void StartApplication_AddsHostAdminDirectoryToInvalidPaths_IfHostAdminDirectoryExistsInWrongPlace()
        {
            // arrange
            var app = new SubtextApplication(null);
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.MapPath("~/HostAdmin")).Returns(Directory.CreateDirectory("HostAdmin").FullName);

            // act
            app.StartApplication(new SubtextRouteMapper(new RouteCollection(), new Mock<IServiceLocator>().Object),
                                 server.Object);

            // assert
            Assert.AreEqual("~/HostAdmin", app.DeprecatedPhysicalPaths[0]);
        }

        [Test]
        public void BeginApplicationRequest_LogsThatTheApplicationHasStartedAndSetsLogInitializedTrue()
        {
            // arrange
            var app = new SubtextApplication(null);
            Assert.IsFalse(app.LogInitialized);
            var log = new Mock<ILog>();
            string logMessage = null;
            log.Setup(l => l.Info(It.IsAny<string>())).Callback<object>(s => logMessage = s.ToString());

            // act
            app.BeginApplicationRequest(log.Object);

            // assert
            Assert.AreEqual("Subtext Application Started", logMessage);
            Assert.IsTrue(app.LogInitialized);
        }

        [Test]
        public void BeginApplicationRequest_WithOldAdminDirectory_ThrowsDeprecatedFileExistsException()
        {
            // arrange
            var app = new SubtextApplication(null);
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.MapPath("~/Admin")).Returns(Directory.CreateDirectory("Admin").FullName);
            app.StartApplication(new SubtextRouteMapper(new RouteCollection(), new Mock<IServiceLocator>().Object),
                                 server.Object);

            // act, assert
            var exception = UnitTestHelper.AssertThrows<DeprecatedPhysicalPathsException>(() =>
                                                                                          app.BeginApplicationRequest(
                                                                                              new Mock<ILog>().Object));

            Assert.AreEqual("~/Admin", exception.InvalidPhysicalPaths[0]);
        }

        [Test]
        public void UnwrapHttpUnhandledException_WithHttpUnhandledExceptionContainingNoInnerException_ReturnsNull()
        {
            // act
            Exception exception = SubtextApplication.UnwrapHttpUnhandledException(new HttpUnhandledException());

            // assert
            Assert.IsNull(exception);
        }

        [Test]
        public void
            UnwrapHttpUnhandledException_WithHttpUnhandledExceptionContainingInnerException_ReturnsInnerException()
        {
            // arrange
            var innerException = new Exception();

            // act
            Exception exception =
                SubtextApplication.UnwrapHttpUnhandledException(new HttpUnhandledException("whatever", innerException));

            // assert
            Assert.AreEqual(innerException, exception);
        }

        [Test]
        public void OnApplicationError_WithUnhandledExceptionAndCustomErrorsEnabled_TransfersToErrorPage()
        {
            // arrange
            string transferLocation = null;
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            SubtextApplication.HandleUnhandledException(new Exception(), server.Object, true /* customErrorEnabled */,
                                                        new Mock<ILog>().Object);

            // assert
            Assert.AreEqual("~/aspx/SystemMessages/error.aspx", transferLocation);
        }

        [Test]
        public void OnApplicationError_WithUnhandledExceptionAndCustomErrorsDisabled_LogsMessage()
        {
            // arrange
            var log = new Mock<ILog>();
            string logMessage = null;
            log.Setup(l => l.Error(It.IsAny<object>(), It.IsAny<Exception>())).Callback<object, Exception>(
                (s, e) => logMessage = s.ToString());

            // act
            SubtextApplication.HandleUnhandledException(new Exception(), null, false /* customErrorEnabled */,
                                                        log.Object);

            // assert
            Assert.AreEqual("Unhandled Exception trapped in Global.asax", logMessage);
        }

        [Test]
        public void OnApplicationError_WithHttpUnhandledExceptionContainingNoInnerException_Transfers()
        {
            // arrange
            var app = new SubtextApplication(null);
            string transferLocation = null;
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            app.OnApplicationError(new HttpUnhandledException(), server.Object, new Mock<ILog>().Object, null);

            // assert
            Assert.AreEqual("~/aspx/SystemMessages/error.aspx", transferLocation);
        }

        [Test]
        public void LogIfCommentException_LogsCommentException()
        {
            // arrange
            var exception = new CommentDuplicateException();
            var log = new Mock<ILog>();
            string logMessage = null;
            log.Setup(l => l.Info(It.IsAny<string>(), exception)).Callback<object, Exception>(
                (o, e) => logMessage = o.ToString());

            // act
            SubtextApplication.LogIfCommentException(exception, log.Object);

            // assert
            Assert.AreEqual("Comment exception thrown and handled in Global.asax.", logMessage);
        }

        [Test]
        public void LogIfCommentException_DoesNothingForNonCommentException()
        {
            // arrange
            var exception = new Exception();
            var log = new Mock<ILog>();
            log.Setup(l => l.Info(It.IsAny<string>())).Throws(new Exception("Nothing should have been logged"));

            // act, assert
            SubtextApplication.LogIfCommentException(exception, log.Object);
        }

        [Test]
        public void HandleDrepecatedFilePathsException_WithNonDeprecatedPhysicalPathsException_ReturnsFalse()
        {
            // arrange
            var exception = new Exception();
            var application = new Mock<SubtextApplication>();
            application.Setup(a => a.FinishRequest());

            // act
            bool handled = SubtextApplication.HandleDeprecatedFilePathsException(exception, null, application.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void HandleDeprecatedFilePathsException_WithDepecatedPhysicalPathsException_ReturnsFalse()
        {
            // arrange
            var exception = new DeprecatedPhysicalPathsException(new[] {"~/Admin"});
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Execute(It.IsAny<string>(), false)).Callback<string, bool>(
                (s, b) => transferLocation = s);
            var application = new Mock<SubtextApplication>();
            application.Setup(a => a.FinishRequest());

            // act
            bool handled = SubtextApplication.HandleDeprecatedFilePathsException(exception, server.Object,
                                                                                 application.Object);

            // assert
            Assert.AreEqual("~/aspx/SystemMessages/DeprecatedPhysicalPaths.aspx", transferLocation);
            Assert.IsTrue(handled);
        }

        [Test]
        public void HandleSqlException_ReturnsFalseForNonSqlException()
        {
            // arrange
            var exception = new Exception();

            // act
            bool handled = SubtextApplication.HandleSqlException(exception, null);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void
            HandleSqlException_WithSqlServerDoesNotExistOrAccessDeniedError_TransfersToBadConnectionStringPageAndReturnsTrue
            ()
        {
            // arrange
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            bool handled =
                SubtextApplication.HandleSqlExceptionNumber((int)SqlErrorMessage.SqlServerDoesNotExistOrAccessDenied, "",
                                                            server.Object);

            // assert
            Assert.AreEqual("~/aspx/SystemMessages/CheckYourConnectionString.aspx", transferLocation);
            Assert.IsTrue(handled);
        }

        [Test]
        public void
            HandleSqlException_WithSqlServerCouldNotFindStoredProcedureAndProcNameIsBlog_GetConfig_TransfersToBadConnectionStringPageAndReturnsTrue
            ()
        {
            // arrange
            
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            bool handled = SubtextApplication.HandleSqlExceptionNumber(
                (int)SqlErrorMessage.CouldNotFindStoredProcedure, "'blog_GetConfig'", server.Object);

            // assert
            Assert.AreEqual("~/aspx/SystemMessages/CheckYourConnectionString.aspx", transferLocation);
            Assert.IsTrue(handled);
        }

        [Test]
        public void HandleRequestLocationException_WithInstallationActionRequired_RedirectsToInstallDefault()
        {
            // arrange
            var response = new Mock<HttpResponseBase>();
            string redirectLocation = null;
            response.Setup(r => r.Redirect(It.IsAny<string>(), true)).Callback<string, bool>(
                (s, endRequest) => redirectLocation = s);
            var blogRequest = new BlogRequest("", "", new Uri("http://haacked.com/"), false);
            var installationManager = new Mock<IInstallationManager>();
            installationManager.Setup(i => i.InstallationActionRequired(It.IsAny<Version>(), null)).Returns(true);

            // act
            bool handled = SubtextApplication.HandleRequestLocationException(null, blogRequest, installationManager.Object, response.Object);

            // assert
            Assert.AreEqual("~/install/default.aspx", redirectLocation);
            Assert.IsTrue(handled);
        }

        [Test]
        public void HandleRequestLocationException_IgnoresInstallationLocation()
        {
            // arrange
            var response = new Mock<HttpResponseBase>();
            response.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(
                new Exception("Test Failed. Should not have redirected"));
            var blogRequest = new BlogRequest("", "", new Uri("http://haacked.com/"), false,
                                              RequestLocation.Installation, "/");
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(i => i.InstallationActionRequired(It.IsAny<Version>(), null)).Throws(new InvalidOperationException());

            // act
            bool handled = SubtextApplication.HandleRequestLocationException(new Exception(), blogRequest, installManager.Object,
                                                                             response.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void HandleRequestLocationException_IgnoresUpgradeLocation()
        {
            // arrange
            var response = new Mock<HttpResponseBase>();
            response.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(
                new Exception("Test Failed. Should not have redirected"));
            var blogRequest = new BlogRequest("", "", new Uri("http://haacked.com/"), false, RequestLocation.Upgrade, "/");
            var installManager = new Mock<IInstallationManager>();
            installManager.Setup(i => i.InstallationActionRequired(It.IsAny<Version>(), It.IsAny<Exception>())).Throws(new InvalidOperationException());

            // act
            bool handled = SubtextApplication.HandleRequestLocationException(new Exception(), blogRequest, installManager.Object,
                                                                             response.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void HandleRequestLocationException_HandlesBlogInactiveException()
        {
            // arrange
            var exception = new BlogInactiveException();
            var response = new Mock<HttpResponseBase>();
            string redirectLocation = null;
            response.Setup(r => r.Redirect(It.IsAny<string>(), true)).Callback<string, bool>(
                (s, endRequest) => redirectLocation = s);
            var blogRequest = new BlogRequest("", "", new Uri("http://haacked.com/"), false);
            var installManager = new Mock<IInstallationManager>().Object;

            // act
            bool handled = SubtextApplication.HandleRequestLocationException(exception, blogRequest, installManager,
                                                                             response.Object);

            // assert
            Assert.AreEqual("~/SystemMessages/BlogNotActive.aspx", redirectLocation);
            Assert.IsTrue(handled);
        }

        [Test]
        public void HandleRequestLocationException_IgnoresBlogInactiveExceptionWhenInSystemMessagesDirectory()
        {
            // arrange
            var exception = new BlogInactiveException();
            var response = new Mock<HttpResponseBase>();
            response.Setup(r => r.Redirect(It.IsAny<string>(), true)).Throws(new Exception("Should not have redirected"));
            var blogRequest = new BlogRequest("", "", new Uri("http://haacked.com/"), false,
                                              RequestLocation.SystemMessages, "/");
            var installManager = new Mock<IInstallationManager>().Object;

            // act
            bool handled = SubtextApplication.HandleRequestLocationException(exception, blogRequest, installManager,
                                                                             response.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void
            HandleBadConnectionStringException_WithInvalidOperationExceptionMentioningConnectionString_TransfersToBadConnectionStringPage
            ()
        {
            // arrange
            var exception = new InvalidOperationException("No ConnectionString Found");
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsTrue(handled);
            Assert.AreEqual("~/aspx/SystemMessages/CheckYourConnectionString.aspx", transferLocation);
        }

        [Test]
        public void
            HandleBadConnectionStringException_WithInvalidOperationExceptionContainingOtherMessages_IgnoresException()
        {
            // arrange
            var exception = new InvalidOperationException("Something or other");
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.Transfer(It.IsAny<string>())).Throws(new Exception("Should not have transfered"));

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void
            HandleBadConnectionStringException_WithArgumentExceptionContainingKeywordNotSupported_TransfersToBadConnectionStringPage
            ()
        {
            // arrange
            var exception = new ArgumentException("Keyword not supported");
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsTrue(handled);
            Assert.AreEqual("~/aspx/SystemMessages/CheckYourConnectionString.aspx", transferLocation);
        }

        [Test]
        public void
            HandleBadConnectionStringException_WithArgumentExceptionContainingInvalidValueForKey_TransfersToBadConnectionStringPage
            ()
        {
            // arrange
            var exception = new ArgumentException("Invalid value for key");
            var server = new Mock<HttpServerUtilityBase>();
            string transferLocation = null;
            server.Setup(s => s.Transfer(It.IsAny<string>())).Callback<string>(s => transferLocation = s);

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsTrue(handled);
            Assert.AreEqual("~/aspx/SystemMessages/CheckYourConnectionString.aspx", transferLocation);
        }

        [Test]
        public void HandleBadConnectionStringException_WithArgumentExceptionContainingOtherMessages_IgnoresException()
        {
            // arrange
            var exception = new ArgumentException("Something or other");
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.Transfer(It.IsAny<string>())).Throws(new Exception("Should not have transfered"));

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [Test]
        public void HandleBadConnectionStringException_IgnoresOtherExceptions()
        {
            // arrange
            var exception = new Exception();
            var server = new Mock<HttpServerUtilityBase>();
            server.Setup(s => s.Transfer(It.IsAny<string>())).Throws(new Exception("Should not have transfered"));

            // act
            bool handled = SubtextApplication.HandleBadConnectionStringException(exception, server.Object);

            // assert
            Assert.IsFalse(handled);
        }

        [SetUp]
        public void SetUp()
        {
            CleanupDirectories();
        }

        [TearDown]
        public void TearDown()
        {
            CleanupDirectories();
            File.Delete("login.aspx");
        }

        private static void CleanupDirectories()
        {
            var directories = new[] {"Admin", "HostAdmin"};
            Array.ForEach(directories, directory =>
                {
                    if(Directory.Exists(directory))
                    {
                        Directory.Delete(directory, true);
                    }
                });
        }
    }
}ï»¿using System;
using System.Collections.Specialized;
using System.Web;
using System.Web.Routing;
using System.Web.UI;
using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.UI.Skinning;
using Subtext.Web.UI.Controls;
using Subtext.Web.UI.Pages;
using UnitTests.Subtext.Framework.Util;

namespace UnitTests.Subtext.SubtextWeb.UI.Pages
{
    [TestFixture]
    public class SubtextMasterPageTests
    {
        [Test]
        public void AddControlToBody_WithComments_AddsControlToUpdatePanel()
        {
            // arrange
            var updatePanel = new UpdatePanel();
            var control = new UserControl {Visible = false};
            var bodyControl = new UserControl();
            var page = new SubtextMasterPage();

            // act
            page.AddControlToBody("Comments", control, updatePanel, bodyControl);
            
            // assert
            Assert.AreEqual(control, updatePanel.ContentTemplateContainer.Controls[0]);
            Assert.IsTrue(control.Visible);
        }

        [Test]
        public void AddControlToBody_WithPostComment_AddsControlToUpdatePanelAndUpdatePanelToCenterBodyControl()
        {
            // arrange
            var updatePanel = new UpdatePanel();
            var postCommentControl = new PostComment();
            var bodyControl = new UserControl();
            var page = new SubtextMasterPage();

            // act
            page.AddControlToBody("PostComment", postCommentControl, updatePanel, bodyControl);

            // assert
            Assert.AreEqual(postCommentControl, updatePanel.ContentTemplateContainer.Controls[0]);
            Assert.AreEqual(updatePanel, bodyControl.Controls[0]);
            Assert.IsTrue(postCommentControl.Visible);
        }

        [Test]
        public void AddControlToBody_WithOtherControl_AddsControlToBodyControl()
        {
            // arrange
            var updatePanel = new UpdatePanel();
            var control = new UserControl();
            var bodyControl = new UserControl();
            var page = new SubtextMasterPage();

            // act
            page.AddControlToBody("Other", control, updatePanel, bodyControl);

            // assert
            Assert.AreEqual(control, bodyControl.Controls[0]);
        }

        [RowTest]
        [Row("javascript", "scripts/test.js", "", "", @"<script type=""javascript"" src=""scripts/test.js""></script>")]
        [Row("javascript", "scripts/test.js", "", "/Subtext.Web/MyBlog/",
            @"<script type=""javascript"" src=""/Subtext.Web/MyBlog/scripts/test.js""></script>")]
        [Row("javascript", "~/scripts/test.js", "Subtext.Web", "/Anything/",
            @"<script type=""javascript"" src=""/Subtext.Web/scripts/test.js""></script>")]
        [Row("javascript", "~/scripts/test.js", "", "/Anything/",
            @"<script type=""javascript"" src=""/scripts/test.js""></script>")]
        [Row("javascript", "/scripts/test.js", "Subtext.Web", "/Anything/",
            @"<script type=""javascript"" src=""/scripts/test.js""></script>")]
        public void RenderScriptElementRendersAppropriatePath(string type, string src, string virtualDir,
                                                              string skinPath, string expected)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "Anything", virtualDir);

            var script = new Script {Type = type, Src = src};

            string scriptTag = ScriptElementCollectionRenderer.RenderScriptElement(skinPath, script);
            Assert.AreEqual(scriptTag, expected + Environment.NewLine,
                            "The rendered script tag was not what we expected.");
        }

        [RowTest]
        [Row("style/test.css", "", "", @"style/test.css")]
        [Row("style/test.css", "", "/Subtext.Web/MyBlog/", @"/Subtext.Web/MyBlog/style/test.css")]
        [Row("~/style/test.css", "Subtext.Web", "/Anything/", @"/Subtext.Web/style/test.css")]
        [Row("~/style/test.css", "", "/Anything/", "/style/test.css")]
        [Row("/style/test.css", "Subtext.Web", "/Anything/", "/style/test.css")]
        [Row("http://haacked.com/style/test.css", "Subtext.Web", "/Anything/", "http://haacked.com/style/test.css")]
        public void GetStylesheetHrefPathRendersAppropriatePath(string src, string virtualDir, string skinPath,
                                                                string expected)
        {
            UnitTestHelper.SetHttpContextWithBlogRequest("localhost", "Anything", virtualDir);

            var style = new Style {Href = src};

            string stylePath = StyleSheetElementCollectionRenderer.GetStylesheetHrefPath(skinPath, style);
            Assert.AreEqual(stylePath, expected, "The rendered style path was not what we expected.");
        }
        
        [Test]
        public void InitializeControls_WithControlNames_AddsControlsToBody()
        {
            // arrange
            var page = new SubtextMasterPage();
            var context = new Mock<ISubtextContext>();
            page.SubtextContext = context.Object;
            context.Setup(c => c.HttpContext.Request.UrlReferrer).Returns((Uri)null);
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            page.SetControls(new[]{"Test"});
            var loader = new Mock<ISkinControlLoader>();
            loader.Setup(l => l.LoadControl("Test")).Returns(new UserControl());

            // act
            page.InitializeControls(loader.Object);

            // assert
            loader.Verify(l => l.LoadControl("Test"));
        }

        [Test]
        public void InitializeControls_WithReferrer_LoadsMoreResultsControl()
        {
            // arrange
            var page = new SubtextMasterPage();
            var context = new Mock<ISubtextContext>();
            context.Setup(c => c.Blog).Returns(new Blog {Id = 123});
            context.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://bing.com/?q=test"));
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            context.Setup(c => c.HttpContext.Request.Url).Returns(new Uri("http://example.com/"));
            


            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/the-slug.aspx");

            var routeData = new RouteData();
            routeData.Values.Add("slug", "the-slug");

            context.SetupRequestContext(httpContext, routeData)
                .SetupBlog(new Blog { Id = 1, TimeZoneId = TimeZonesTest.PacificTimeZoneId /* pacific */})
                .Setup(c => c.Repository.GetEntry("the-slug", true, true)).Returns(new Entry(PostType.BlogPost) { Id = 123, EntryName = "the-slug", Title = "Testing 123" });

            page.SubtextContext = context.Object;
            page.SetControls(new[] { "Test" });
            var searchEngine = new Mock<ISearchEngineService>();
            searchEngine.Setup(s => s.Search(It.IsAny<string>(), It.IsAny<int>(), It.IsAny<int>())).Returns(new[]{new SearchEngineResult()});
            page.SearchEngineService = searchEngine.Object;
            var loader = new Mock<ISkinControlLoader>();
            loader.Setup(l => l.LoadControl("MoreResults")).Returns(new UserControl());

            // act
            page.InitializeControls(loader.Object);

            // assert
            loader.Verify(l => l.LoadControl("Test"));
        }

        [Test]
        public void InitializeControls_WithReferrerButOnlyHomepageControl_DoesNotLoadsMoreResultsControl()
        {
            // arrange
            var page = new SubtextMasterPage();
            var context = new Mock<ISubtextContext>();
            page.SubtextContext = context.Object;
            context.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://bing.com/?q=test"));
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            page.SetControls(new[] { "HomePage" });
            var loader = new Mock<ISkinControlLoader>();
            loader.Setup(l => l.LoadControl("MoreResults")).Throws(new InvalidOperationException());

            // act, assert
            page.InitializeControls(loader.Object);
        }

        [Test]
        public void InitializeControls_WithReferrerButNoControls_DoesNotLoadMoreResultsControl()
        {
            // arrange
            var page = new SubtextMasterPage();
            var context = new Mock<ISubtextContext>();
            page.SubtextContext = context.Object;
            context.Setup(c => c.HttpContext.Request.UrlReferrer).Returns(new Uri("http://bing.com/?q=test"));
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(false);
            page.SetControls(null);
            var loader = new Mock<ISkinControlLoader>();
            loader.Setup(l => l.LoadControl("MoreResults")).Throws(new InvalidOperationException());

            // act, assert
            page.InitializeControls(loader.Object);
        }

        [Test]
        public void InitializeControls_WithLocalRequestAndReferrerInQueryString_LoadsMoreResultsControl()
        {
            // arrange
            var page = new SubtextMasterPage();
            var context = new Mock<ISubtextContext>();
            page.SubtextContext = context.Object;
            context.Setup(c => c.Blog).Returns(new Blog { Id = 123 });
            context.Setup(c => c.HttpContext.Request.UrlReferrer).Returns((Uri)null);
            context.Setup(c => c.HttpContext.Request.IsLocal).Returns(true);
            context.Setup(c => c.HttpContext.Request.Url).Returns(new Uri("http://example.com/"));
            var queryString = new NameValueCollection { { "referrer", "http://bing.com/?q=test" } };
            context.Setup(c => c.HttpContext.Request.QueryString).Returns(queryString);

            var httpContext = new Mock<HttpContextBase>();
            httpContext.FakeRequest("~/archive/the-slug.aspx");

            var routeData = new RouteData();
            routeData.Values.Add("slug", "the-slug");

            context.SetupRequestContext(httpContext, routeData)
                .SetupBlog(new Blog { Id = 1, TimeZoneId = TimeZonesTest.PacificTimeZoneId /* pacific */})
                .Setup(c => c.Repository.GetEntry("the-slug", true, true)).Returns(new Entry(PostType.BlogPost) { Id = 123, EntryName = "the-slug", Title = "Testing 123" });

            page.SetControls(new[] { "Test" });
            var loader = new Mock<ISkinControlLoader>();
            loader.Setup(l => l.LoadControl("MoreResults")).Returns(new UserControl());
            var searchEngine = new Mock<ISearchEngineService>();
            searchEngine.Setup(s => s.Search(It.IsAny<string>(), It.IsAny<int>(), It.IsAny<int>())).Returns(new[] { new SearchEngineResult() });
            page.SearchEngineService = searchEngine.Object;

            // act
            page.InitializeControls(loader.Object);

            // assert
            loader.Verify(l => l.LoadControl("Test"));
        }
    }
}using MbUnit.Framework;
using Moq;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Routing;
using Subtext.Web.UI.ViewModels;

namespace UnitTests.Subtext.SubtextWeb.UI.ViewModels
{
    [TestFixture]
    public class EntryViewModelTests
    {
        [Test]
        public void Ctor_CopiesAllPropertiesOfEntry()
        {
            // arrange
            var entry = new Entry(PostType.BlogPost);
            entry.Id = 123;
            entry.FeedBackCount = 99;
            entry.Title = "The title";

            // act
            var model = new EntryViewModel(entry, null);

            // assert
            Assert.AreEqual(PostType.BlogPost, model.PostType);
            Assert.AreEqual(123, model.Id);
            Assert.AreEqual(99, model.FeedBackCount);
            Assert.AreEqual("The title", model.Title);
        }

        [Test]
        public void FullyQualifiedUrl_ReturnsCorrectUrl()
        {
            // arrange
            var urlHelper = new Mock<UrlHelper>();
            var entry = new Entry(PostType.BlogPost)
            {
                Id = 123,
                EntryName = "post-slug"
            };
            var blog = new Blog {Host = "localhost"};
            var subtextContext = new Mock<ISubtextContext>();
            subtextContext.Setup(c => c.UrlHelper.EntryUrl(It.IsAny<Entry>())).Returns("/2009/01/23/post-slug.aspx");
            subtextContext.Setup(c => c.Blog).Returns(blog);

            // act
            var model = new EntryViewModel(entry, subtextContext.Object);

            // assert
            Assert.AreEqual(model.FullyQualifiedUrl, "http://localhost/2009/01/23/post-slug.aspx");
        }
    }
}using System;
using System.Collections.Specialized;
using System.Web.Caching;
using Subtext.Infrastructure;

namespace UnitTests.Subtext
{
    internal class TestCache : NameObjectCollectionBase, ICache
    {
        public object this[string key]
        {
            get { return BaseGet(key); }
            set { BaseSet(key, value); }
        }

        public void Insert(string key, object value, CacheDependency dependency)
        {
            this[key] = value;
        }

        public void Insert(string key, object value, CacheDependency dependency, DateTime absoluteExpiration,
                           TimeSpan slidingExpiration)
        {
            this[key] = value;
        }

        public void Remove(string key)
        {
            BaseRemove(key);
        }

        public void Insert(string key, object value)
        {
            this[key] = value;
        }

        public void Insert(string key, object value, CacheDependency dependencies, DateTime absoluteExpiration,
                           TimeSpan slidingExpiration, CacheItemPriority priority,
                           CacheItemRemovedCallback onRemoveCallback)
        {
            this[key] = value;
        }
    }
}using Subtext.Extensibility.Providers;

namespace UnitTests.Subtext
{
    public class UnitTestEmailProvider : EmailProvider
    {
        public string From;
        EmailProvider internalProvider;
        public string Message;
        public string ReplyTo;
        public string Subject;
        public string To;

        /// <summary>
        /// Sends an email.
        /// </summary>
        /// <param name="to"></param>
        /// <param name="from"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public override void Send(string to, string from, string subject, string message)
        {
            To = to;
            From = from;
            Subject = subject;
            Message = message;

            if(internalProvider == null)
            {
                return;
            }

            internalProvider.Send(to, from, subject, message);
        }

        public void SetInternalProvider(EmailProvider provider)
        {
            internalProvider = provider;
        }
    }
}#region Disclaimer/Info

///////////////////////////////////////////////////////////////////////////////////////////////////
// Subtext WebLog
// 
// Subtext is an open source weblog system that is a fork of the .TEXT
// weblog system.
//
// For updated news and information please visit http://subtextproject.com/
// Subtext is hosted at Google Code at http://code.google.com/p/subtext/
// The development mailing list is at subtext@googlegroups.com 
//
// This project is licensed under the BSD license.  See the License.txt file for more information.
///////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Principal;
using System.Text;
using System.Web;
using System.Web.Routing;
using ICSharpCode.SharpZipLib.GZip;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using MbUnit.Framework;
using Moq;
using Ninject;
using Ninject.Activation;
using Ninject.Parameters;
using Ninject.Planning.Bindings;
using Subtext.Configuration;
using Subtext.Extensibility;
using Subtext.Framework;
using Subtext.Framework.Components;
using Subtext.Framework.Configuration;
using Subtext.Framework.Emoticons;
using Subtext.Framework.Providers;
using Subtext.Framework.Routing;
using Subtext.Framework.Services;
using Subtext.Framework.Services.SearchEngine;
using Subtext.Framework.Text;
using Subtext.Framework.Web;
using Subtext.Framework.Web.HttpModules;
using Subtext.Infrastructure;

namespace UnitTests.Subtext
{
    /// <summary>
    /// Contains helpful methods for packing and unpacking resources
    /// </summary>
    public static class UnitTestHelper
    {
        /// <summary>
        /// Unpacks an embedded resource into the specified directory. The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName"></param>
        /// <param name="outputPath">The path to write the file as.</param>
        public static void UnpackEmbeddedResource(string resourceName, string outputPath)
        {
            Stream stream = UnpackEmbeddedResource(resourceName);
            using(var reader = new StreamReader(stream))
            {
                using(StreamWriter writer = File.CreateText(outputPath))
                {
                    writer.Write(reader.ReadToEnd());
                    writer.Flush();
                }
            }
        }

        /// <summary>
        /// Unpacks an embedded resource as a string. The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName"></param>
        /// <param name="encoding">The path to write the file as.</param>
        public static string UnpackEmbeddedResource(string resourceName, Encoding encoding)
        {
            Stream stream = UnpackEmbeddedResource(resourceName);
            using(var reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }

        /// <summary>
        /// Unpacks an embedded binary resource into the specified directory. The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName"></param>
        /// <param name="fileName">The file to write the resourcce.</param>
        public static string UnpackEmbeddedBinaryResource(string resourceName, string fileName)
        {
            using(Stream stream = UnpackEmbeddedResource(resourceName))
            {
                var buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);
                string filePath = !Path.IsPathRooted(fileName) ? GetPathInExecutingAssemblyLocation(fileName) : Path.GetFullPath(fileName);
                using(FileStream outStream = File.Create(filePath))
                {
                    outStream.Write(buffer, 0, buffer.Length);
                }
                return filePath;
            }
        }

        public static string GetPathInExecutingAssemblyLocation(string fileName)
        {
            return Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), fileName);
        }

        /// <summary>
        /// Unpacks an embedded resource into a Stream.  The resource name should 
        /// be everything after 'UnitTests.Subtext.Resources.'.
        /// </summary>
        /// <remarks>Omit the UnitTests.Subtext.Resources. part of the 
        /// resource name.</remarks>
        /// <param name="resourceName">Name of the resource.</param>
        public static Stream UnpackEmbeddedResource(string resourceName)
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            return assembly.GetManifestResourceStream("UnitTests.Subtext.Resources." + resourceName);
        }

        /// <summary>
        /// Generates a unique string.
        /// </summary>
        /// <returns></returns>
        public static string GenerateUniqueString()
        {
            return Guid.NewGuid().ToString().Replace("-", "");
        }

        /// <summary>
        /// Generates a unique host name.
        /// </summary>
        /// <returns></returns>
        public static string GenerateUniqueHostname()
        {
            return GenerateUniqueString() + ".com";
        }

        /// <summary>
        /// Sets the HTTP context with a valid request for the blog specified 
        /// by the host and application.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <param name="subfolder">Subfolder Name.</param>
        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, string subfolder)
        {
            return SetHttpContextWithBlogRequest(host, subfolder, string.Empty);
        }

        /// <summary>
        /// Sets the HTTP context with a valid request for the blog specified 
        /// by the host and subfolder hosted in a virtual directory.
        /// </summary>
        /// <param name="host">Host.</param>
        /// <param name="subfolder">Subfolder Name.</param>
        /// <param name="applicationPath"></param>
        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, string subfolder,
                                                                         string applicationPath)
        {
            return SetHttpContextWithBlogRequest(host, subfolder, applicationPath, "default.aspx");
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, int port, string subfolder,
                                                                         string applicationPath)
        {
            return SetHttpContextWithBlogRequest(host, port, subfolder, applicationPath, "default.aspx");
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, string subfolder,
                                                                         string applicationPath, string page)
        {
            return SetHttpContextWithBlogRequest(host, 80, subfolder, applicationPath, page);
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, int port, string subfolder,
                                                                         string applicationPath, string page)
        {
            return SetHttpContextWithBlogRequest(host, port, subfolder, applicationPath, page, null, "GET");
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, string subfolder,
                                                                         string applicationPath, string page,
                                                                         TextWriter output)
        {
            return SetHttpContextWithBlogRequest(host, subfolder, applicationPath, page, output, "GET");
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, string subfolder,
                                                                         string applicationPath, string page,
                                                                         TextWriter output, string httpVerb)
        {
            return SetHttpContextWithBlogRequest(host, 80, subfolder, applicationPath, page, output, httpVerb);
        }

        public static SimulatedHttpRequest SetHttpContextWithBlogRequest(string host, int port, string subfolder,
                                                                         string applicationPath, string page,
                                                                         TextWriter output, string httpVerb)
        {
            HttpContext.Current = null;

            applicationPath = HttpHelper.StripSurroundingSlashes(applicationPath); // Subtext.Web
            subfolder = StripSlashes(subfolder); // MyBlog

            string appPhysicalDir = @"c:\projects\SubtextSystem\";
            if(applicationPath.Length == 0)
            {
                applicationPath = "/";
            }
            else
            {
                appPhysicalDir += applicationPath + @"\"; //	c:\projects\SubtextSystem\Subtext.Web\
                applicationPath = "/" + applicationPath; //	/Subtext.Web
            }

            SetHttpRequestApplicationPath(applicationPath);

            if(subfolder.Length > 0)
            {
                page = subfolder + "/" + page; //	MyBlog/default.aspx
            }

            string query = string.Empty;

            var workerRequest = new SimulatedHttpRequest(applicationPath, appPhysicalDir, appPhysicalDir + page, page,
                                                         query, output, host, port, httpVerb);
            HttpContext.Current = new HttpContext(workerRequest);
            BlogRequest.Current = new BlogRequest(host, subfolder, HttpContext.Current.Request.Url, host == "localhost");

            return workerRequest;
        }

        static void SetHttpRequestApplicationPath(string applicationPath)
        {
            //We cheat by using reflection.
            FieldInfo runtimeField = typeof(HttpRuntime).GetField("_theRuntime",
                                                                  BindingFlags.NonPublic | BindingFlags.Static);
            Assert.IsNotNull(runtimeField);
            var currentRuntime = runtimeField.GetValue(null) as HttpRuntime;
            Assert.IsNotNull(currentRuntime);
            FieldInfo appDomainAppVPathField = typeof(HttpRuntime).GetField("_appDomainAppVPath",
                                                                            BindingFlags.NonPublic |
                                                                            BindingFlags.Instance);
            Assert.IsNotNull(appDomainAppVPathField);

            Type virtualPathType =
                Type.GetType(
                    "System.Web.VirtualPath, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
                    true);
            Assert.IsNotNull(virtualPathType);
            MethodInfo createMethod = virtualPathType.GetMethod("Create", BindingFlags.Static | BindingFlags.Public,
                                                                null, new[] {typeof(string)}, null);
            object virtualPath = createMethod.Invoke(null, new object[] {applicationPath});

            appDomainAppVPathField.SetValue(currentRuntime, virtualPath);
        }

        /// <summary>
        /// Strips the slashes from the target string.
        /// </summary>
        /// <param name="target">Target.</param>
        /// <returns></returns>
        public static string StripSlashes(string target)
        {
            if(target.Length == 0)
            {
                return target;
            }

            return target.Replace(@"\", string.Empty).Replace("/", string.Empty);
        }

        /// <summary>
        /// Strips the outer slashes.
        /// </summary>
        /// <param name="target">Target.</param>
        /// <returns></returns>
        public static string StripOuterSlashes(string target)
        {
            if(target.Length == 0)
            {
                return target;
            }

            char firstChar = target[0];
            if(firstChar == '\\' || firstChar == '/')
            {
                target = target.Substring(1);
            }

            if(target.Length > 0)
            {
                char lastChar = target[target.Length - 1];
                if(lastChar == '\\' || lastChar == '/')
                {
                    target = target.Substring(0, target.Length - 1);
                }
            }
            return target;
        }

        /// <summary>
        /// This is useful when two strings appear to be but Assert.AreEqual says they are not.
        /// </summary>
        /// <param name="result"></param>
        /// <param name="expected"></param>
        public static void AssertStringsEqualCharacterByCharacter(string expected, string result)
        {
            if(result != expected)
            {
                int unequalPos = 0;
                for(int i = 0; i < Math.Max(result.Length, expected.Length); i++)
                {
                    var originalChar = (char)0;
                    var expectedChar = (char)0;
                    if(i < result.Length)
                    {
                        originalChar = result[i];
                    }

                    if(i < expected.Length)
                    {
                        expectedChar = expected[i];
                    }

                    if(unequalPos == 0 && originalChar != expectedChar)
                    {
                        unequalPos = i;
                    }

                    string expectedCharText = "" + originalChar;
                    if(char.IsWhiteSpace(originalChar))
                    {
                        expectedCharText = "{" + (int)originalChar + "}";
                    }

                    string expectedCharDisplay = "" + expectedChar;
                    if(char.IsWhiteSpace(expectedChar))
                    {
                        expectedCharDisplay = "{" + (int)expectedChar + "}";
                    }

                    Console.WriteLine("{0}:\t{1} ({2})\t{3} ({4})", i, expectedCharDisplay, (int)expectedChar,
                                      expectedCharText, (int)originalChar);
                }
                Assert.AreEqual(expected, result, "Strings are not equal starting at character {0}", unequalPos);
            }
        }

        public static Entry CreateEntryInstanceForSyndication(string author, string title, string body)
        {
            return CreateEntryInstanceForSyndication(Config.CurrentBlog, author, title, body);
        }

        public static Entry CreateEntryInstanceForSyndication(Blog blog, string author, string title, string body)
        {
            return CreateEntryInstanceForSyndication(blog, author, title, body, null, DateTime.Now);
        }

        public static Entry CreateEntryInstanceForSyndication(string author, string title, string body, string entryName,
                                                              DateTime dateCreated)
        {
            return CreateEntryInstanceForSyndication(Config.CurrentBlog, author, title, body, entryName, dateCreated);
        }

        public static Entry CreateEntryInstanceForSyndication(Blog blog, string author, string title, string body,
                                                              string entryName, DateTime dateCreated)
        {
            var entry = new Entry(PostType.BlogPost);
            if(entryName != null)
            {
                entry.EntryName = entryName;
            }
            entry.BlogId = blog.Id;
            if(dateCreated != NullValue.NullDateTime)
            {
                entry.DateCreated = dateCreated;
                entry.DateModified = entry.DateCreated;
                entry.DateSyndicated = entry.DateCreated;
            }
            entry.Title = title;
            entry.Author = author;
            entry.Body = body;
            entry.DisplayOnHomePage = true;
            entry.IsAggregated = true;
            entry.IsActive = true;
            entry.AllowComments = true;
            entry.IncludeInMainSyndication = true;

            return entry;
        }

        public static Link CreateLinkInDb(int categoryId, string title, int? entryId, string rel)
        {
            var link = new Link
            {
                BlogId = Config.CurrentBlog.Id,
                IsActive = true,
                CategoryId = categoryId,
                Title = title,
                Url = "http://noneofyourbusiness.com/",
                Relation = rel
            };
            if(entryId != null)
            {
                link.PostId = (int)entryId;
            }
            link.Id = Links.CreateLink(link);
            return link;
        }

        /// <summary>
        /// Creates a blog post link category.
        /// </summary>
        /// <param name="blogId"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        public static int CreateCategory(int blogId, string title)
        {
            var category = new LinkCategory
            {
                BlogId = Config.CurrentBlog.Id,
                Title = title,
                CategoryType = CategoryType.PostCollection,
                IsActive = true
            };
            return Links.CreateLinkCategory(category);
        }

        /// <summary>
        /// Creates a blog post link category.
        /// </summary>
        /// <param name="blogId">The blog id.</param>
        /// <param name="title">The title.</param>
        /// <param name="categoryType">Type of the category.</param>
        /// <returns></returns>
        public static int CreateCategory(int blogId, string title, CategoryType categoryType)
        {
            var category = new LinkCategory
            {
                BlogId = Config.CurrentBlog.Id, 
                Title = title, 
                CategoryType = categoryType, 
                IsActive = true
            };
            return Links.CreateLinkCategory(category);
        }

        /// <summary>
        /// Useful for unit testing that classes implement serialization.  This simply takes in a class, 
        /// serializes it into a byte array, deserializes the byte array, and returns the result. 
        /// The unit test should check that all the properties are set correctly.
        /// </summary>
        /// <param name="serializableObject">The serializable object.</param>
        /// <returns></returns>
        public static T SerializeRoundTrip<T>(T serializableObject)
        {
            var stream = new MemoryStream();
            var formatter = new BinaryFormatter();
            formatter.Serialize(stream, serializableObject);
            byte[] serialized = stream.ToArray();

            stream = new MemoryStream(serialized) {Position = 0};
            formatter = new BinaryFormatter();
            object o = formatter.Deserialize(stream);
            return (T)o;
        }

        /// <summary>
        /// Returns a deflated version of the response sent by the web server. If the 
        /// web server did not send a compressed stream then the original stream is returned. 
        /// </summary>
        /// <param name="encoding">Encoding of the stream. One of 'deflate' or 'gzip' or Empty.</param>
        /// <param name="inputStream">Input Stream</param>
        /// <returns>Seekable Stream</returns>
        public static Stream GetDeflatedResponse(string encoding, Stream inputStream)
        {
            //BORROWED FROM RSS BANDIT.
            const int bufferSize = 4096; // 4K read buffer

            Stream compressed = null, input = inputStream;
            bool tryAgainDeflate = true;

            if(input.CanSeek)
            {
                input.Seek(0, SeekOrigin.Begin);
            }

            if(encoding == "deflate")
            {
                //to solve issue "invalid checksum" exception with dasBlog and "deflate" setting:
                //input = ResponseToMemory(input);			// need them within mem to have a seekable stream
                compressed = new InflaterInputStream(input); // try deflate with headers
            }
            else if(encoding == "gzip")
            {
                compressed = new GZipInputStream(input);
            }

            retry_decompress:
            if(compressed != null)
            {
                var decompressed = new MemoryStream();

                try
                {
                    int size = bufferSize;
                    var writeData = new byte[bufferSize];
                    while(true)
                    {
                        size = compressed.Read(writeData, 0, size);
                        if(size > 0)
                        {
                            decompressed.Write(writeData, 0, size);
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                catch(GZipException)
                {
                    if(tryAgainDeflate && (encoding == "deflate"))
                    {
                        input.Seek(0, SeekOrigin.Begin); // reset position
                        compressed = new InflaterInputStream(input, new Inflater(true));
                        tryAgainDeflate = false;
                        goto retry_decompress;
                    }
                    throw;
                }

                //reposition to beginning of decompressed stream then return
                decompressed.Seek(0, SeekOrigin.Begin);
                return decompressed;
            }
            // allready seeked, just return
            return input;
        }

        public static Blog CreateBlogAndSetupContext()
        {
            string hostName = GenerateUniqueString();
            Config.CreateBlog("Just A Test Blog", "test", "test", hostName, string.Empty /* subfolder */);
            Blog blog = Config.GetBlog(hostName, string.Empty);
            SetHttpContextWithBlogRequest(hostName, string.Empty);
            BlogRequest.Current.Blog = blog;
            Assert.IsNotNull(Config.CurrentBlog, "Current Blog is null.");

            // NOTE- is this OK?
            return Config.CurrentBlog;
        }

        public static BlogAlias CreateBlogAlias(Blog info, string host, string subfolder)
        {
            return CreateBlogAlias(info, host, subfolder, true);
        }

        public static BlogAlias CreateBlogAlias(Blog info, string host, string subfolder, bool active)
        {
            var alias = new BlogAlias {BlogId = info.Id, Host = host, Subfolder = subfolder, IsActive = active};

            Config.AddBlogAlias(alias);
            return alias;
        }

        public static MetaTag BuildMetaTag(string content, string name, string httpEquiv, int blogId, int? entryId,
                                           DateTime created)
        {
            var mt = new MetaTag {Name = name, HttpEquiv = httpEquiv, Content = content, BlogId = blogId};

            if(entryId.HasValue)
            {
                mt.EntryId = entryId.Value;
            }

            mt.DateCreated = created;

            return mt;
        }

        public static ICollection<MetaTag> BuildMetaTagsFor(Blog blog, Entry entry, int numberOfTags)
        {
            var tags = new List<MetaTag>(numberOfTags);

            int? entryId = null;
            if(entry != null)
            {
                entryId = entry.Id;
            }

            for(int i = 0; i < numberOfTags; i++)
            {
                MetaTag aTag = BuildMetaTag(
                    GenerateUniqueString().Left(50),
                    // if even, make a name attribute, else http-equiv
                    (i % 2 == 0) ? GenerateUniqueString().Left(25) : null,
                    (i % 2 == 1) ? GenerateUniqueString().Left(25) : null,
                    blog.Id,
                    entryId,
                    DateTime.Now);

                tags.Add(aTag);
            }

            return tags;
        }

        public static Enclosure BuildEnclosure(string title, string url, string mimetype, int entryId, long size, bool addToFeed, bool showWithPost)
        {
            var enc = new Enclosure
            {
                EntryId = entryId,
                Title = title,
                Url = url,
                Size = size,
                MimeType = mimetype,
                ShowWithPost = showWithPost,
                AddToFeed = addToFeed
            };
            return enc;
        }

        public static void AssertSimpleProperties(object o, params string[] excludedProperties)
        {
            var excludes = new StringDictionary();
            foreach(string exclude in excludedProperties)
            {
                excludes.Add(exclude, "");
            }

            Type t = o.GetType();
            PropertyInfo[] props = t.GetProperties();
            foreach(PropertyInfo property in props)
            {
                if(excludes.ContainsKey(property.Name))
                {
                    continue;
                }

                if(property.CanRead && property.CanWrite)
                {
                    object valueToSet;
                    if(property.PropertyType == typeof(int)
                       || property.PropertyType == typeof(short)
                       || property.PropertyType == typeof(decimal)
                       || property.PropertyType == typeof(double)
                       || property.PropertyType == typeof(long))
                    {
                        valueToSet = 42;
                    }
                    else if(property.PropertyType == typeof(string))
                    {
                        valueToSet = "This Is a String";
                    }
                    else if(property.PropertyType == typeof(DateTime))
                    {
                        valueToSet = DateTime.Now;
                    }
                    else if(property.PropertyType == typeof(Uri))
                    {
                        valueToSet = new Uri("http://subtextproject.com/");
                    }
                    else if(property.PropertyType == typeof(IPAddress))
                    {
                        valueToSet = IPAddress.Parse("127.0.0.1");
                    }
                    else if(property.PropertyType == typeof(bool))
                    {
                        valueToSet = true;
                    }
                    else if(property.PropertyType == typeof(PageType))
                    {
                        valueToSet = PageType.HomePage;
                    }
                    else if(property.PropertyType == typeof(ICollection<Link>))
                    {
                        valueToSet = new List<Link>();
                    }
                    else if(property.PropertyType == typeof(ICollection<Image>))
                    {
                        valueToSet = new List<Image>();
                    }
                    else
                    {
                        //Don't know what to do.
                        continue;
                    }

                    property.SetValue(o, valueToSet, null);
                    object retrievedValue = property.GetValue(o, null);
                    Assert.AreEqual(valueToSet, retrievedValue,
                                    string.Format(CultureInfo.InvariantCulture,
                                                  "Could not set and get this property '{0}'", property.Name));
                }
            }
        }

        public static IPrincipal MockPrincipalWithRoles(params string[] roles)
        {
            var principal = new Mock<IPrincipal>();
            principal.Setup(p => p.Identity.IsAuthenticated).Returns(true);
            principal.Setup(p => p.Identity.Name).Returns("Username");
            Array.ForEach(roles, role => principal.Setup(p => p.IsInRole(role)).Returns(true));
            return principal.Object;
        }

        public static void AssertEnclosures(Enclosure expected, Enclosure result)
        {
            Assert.AreEqual(expected.Title, result.Title, "Wrong title.");
            Assert.AreEqual(expected.Url, result.Url, "Wrong Url.");
            Assert.AreEqual(expected.MimeType, result.MimeType, "Wrong mimetype.");
            Assert.AreEqual(expected.Size, result.Size, "Wrong size.");
            Assert.AreEqual(expected.AddToFeed, result.AddToFeed, "Wrong AddToFeed flag.");
            Assert.AreEqual(expected.ShowWithPost, result.ShowWithPost, "Wrong ShowWithPost flag.");
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context 
        /// with the blog.
        /// </summary>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated 
        /// requests.
        /// </returns>
        internal static SimulatedRequestContext SetupBlog()
        {
            return SetupBlog(string.Empty);
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated 
        /// requests.
        /// </returns>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        internal static SimulatedRequestContext SetupBlog(string subfolder)
        {
            return SetupBlog(subfolder, string.Empty);
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated 
        /// requests.
        /// </returns>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        /// <param name="applicationPath">The name of the IIS virtual directory the blog lives in.</param>
        internal static SimulatedRequestContext SetupBlog(string subfolder, string applicationPath)
        {
            return SetupBlog(subfolder, applicationPath, 80);
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated 
        /// requests.
        /// </returns>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        /// <param name="applicationPath">The name of the IIS virtual directory the blog lives in.</param>
        /// <param name="port">The port for this blog.</param>
        internal static SimulatedRequestContext SetupBlog(string subfolder, string applicationPath, int port)
        {
            return SetupBlog(subfolder, applicationPath, port, string.Empty);
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        /// <param name="applicationPath">The name of the IIS virtual directory the blog lives in.</param>
        /// <param name="page">The page to request.</param>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated
        /// requests.
        /// </returns>
        internal static SimulatedRequestContext SetupBlog(string subfolder, string applicationPath, string page)
        {
            return SetupBlog(subfolder, applicationPath, 80, page);
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        /// <param name="applicationPath">The name of the IIS virtual directory the blog lives in.</param>
        /// <param name="port">The port for this blog.</param>
        /// <param name="page">The page to request.</param>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated
        /// requests.
        /// </returns>
        internal static SimulatedRequestContext SetupBlog(string subfolder, string applicationPath, int port,
                                                          string page)
        {
            return SetupBlog(subfolder, applicationPath, port, page, "username", "password");
        }

        /// <summary>
        /// Takes all the necessary steps to create a blog and set up the HTTP Context
        /// with the blog.
        /// </summary>
        /// <param name="subfolder">The 'virtualized' subfolder the blog lives in.</param>
        /// <param name="applicationPath">The name of the IIS virtual directory the blog lives in.</param>
        /// <param name="port">The port for this blog.</param>
        /// <param name="page">The page to request.</param>
        /// <param name="userName">Name of the user.</param>
        /// <param name="password">The password.</param>
        /// <returns>
        /// Returns a reference to a string builder.
        /// The stringbuilder will end up containing the Response of any simulated
        /// requests.
        /// </returns>
        internal static SimulatedRequestContext SetupBlog(string subfolder, string applicationPath, int port,
                                                          string page, string userName, string password)
        {
            string host = GenerateUniqueString();

            HttpContext.Current = null;
            //I wish this returned the blog it created.
            Config.CreateBlog("Unit Test Blog", userName, password, host, subfolder);
            Blog blog = Config.GetBlog(host, subfolder);

            var sb = new StringBuilder();
            TextWriter output = new StringWriter(sb);
            SimulatedHttpRequest request = SetHttpContextWithBlogRequest(host, port, subfolder, applicationPath, page,
                                                                         output, "GET");
            BlogRequest.Current.Blog = blog;

            if(Config.CurrentBlog != null)
            {
                Config.CurrentBlog.AutoFriendlyUrlEnabled = true;
            }
            HttpContext.Current.User = new GenericPrincipal(new GenericIdentity(userName), new[] {"Administrators"});

            return new SimulatedRequestContext(request, sb, output, host);
        }

        public static int Create(Entry entry)
        {
            var requestContext = new RequestContext(new HttpContextWrapper(HttpContext.Current), new RouteData());
            Bootstrapper.RequestContext = requestContext;
            var serviceLocator = new Mock<IServiceLocator>().Object;
            var searchEngineService = new Mock<IIndexingService>().Object;
            Bootstrapper.ServiceLocator = serviceLocator;
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, serviceLocator);
            Routes.RegisterRoutes(subtextRoutes);
            var urlHelper = new UrlHelper(requestContext, routes);
            var subtextContext = new SubtextContext(Config.CurrentBlog, requestContext, urlHelper,
                                                    ObjectProvider.Instance(), requestContext.HttpContext.User,
                                                    new SubtextCache(requestContext.HttpContext.Cache), serviceLocator);
            IEntryPublisher entryPublisher = CreateEntryPublisher(subtextContext, searchEngineService);
            int id = entryPublisher.Publish(entry);
            entry.Id = id;
            return id;
        }

        public static IEntryPublisher CreateEntryPublisher(ISubtextContext subtextContext, IIndexingService searchEngineService)
        {
            var slugGenerator = new SlugGenerator(FriendlyUrlSettings.Settings, subtextContext.Repository);
            var transformations = new CompositeTextTransformation
            {
                new XhtmlConverter(), 
                new EmoticonsTransformation(subtextContext)
            };
            return new EntryPublisher(subtextContext, transformations, slugGenerator, searchEngineService);
        }

        public static Stream ToStream(this string text)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(text);
            writer.Flush();
            stream.Position = 0;
            return stream;
        }

        public static IKernel MockKernel(Func<IEnumerable<object>> returnFunc)
        {
            var request = new Mock<IRequest>();
            var kernel = new Mock<IKernel>();
            kernel.Setup(
                k =>
                k.CreateRequest(It.IsAny<Type>(), It.IsAny<Func<IBindingMetadata, bool>>(),
                                It.IsAny<IEnumerable<IParameter>>(), It.IsAny<bool>())).Returns(request.Object);
            kernel.Setup(k => k.Resolve(It.IsAny<IRequest>())).Returns(returnFunc);
            return kernel.Object;
        }

        public static UrlHelper SetupUrlHelper(string appPath)
        {
            return SetupUrlHelper(appPath, new RouteData());
        }

        public static UrlHelper SetupUrlHelper(string appPath, RouteData routeData)
        {
            var routes = new RouteCollection();
            var subtextRoutes = new SubtextRouteMapper(routes, new Mock<IServiceLocator>().Object);
            Routes.RegisterRoutes(subtextRoutes);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(c => c.Request.ApplicationPath).Returns(appPath);
            httpContext.Setup(c => c.Response.ApplyAppPathModifier(It.IsAny<string>())).Returns<string>(s => s);
            var requestContext = new RequestContext(httpContext.Object, routeData);
            var helper = new UrlHelper(requestContext, routes);
            return helper;
        }

        /// <summary>
        /// Updates the specified entry in the data provider.
        /// </summary>
        /// <param name="entry">Entry.</param>
        /// <param name="context"></param>
        /// <returns></returns>
        public static void Update(Entry entry, ISubtextContext context)
        {
            if(entry == null)
            {
                throw new ArgumentNullException("entry");
            }

            ObjectProvider repository = ObjectProvider.Instance();
            var transform = new CompositeTextTransformation
            {
                new XhtmlConverter(),
                new EmoticonsTransformation(context),
                new KeywordExpander(repository)
            };
            
            //TODO: Maybe use a INinjectParameter to control this.
            var searchEngineService = new Mock<IIndexingService>().Object;
            var publisher = new EntryPublisher(context, transform, new SlugGenerator(FriendlyUrlSettings.Settings), searchEngineService);
            publisher.Publish(entry);
        }

        public static Entry GetEntry(int entryId, PostConfig postConfig, bool includeCategories)
        {
            bool isActive = ((postConfig & PostConfig.IsActive) == PostConfig.IsActive);
            return ObjectProvider.Instance().GetEntry(entryId, isActive, includeCategories);
        }

        #region ...Assert.AreNotEqual replacements...

        public static ArgumentNullException AssertThrowsArgumentNullException(this Action action)
        {
            return action.AssertThrows<ArgumentNullException>();
        }

        public static TException AssertThrows<TException>(this Action action) where TException : Exception
        {
            try
            {
                action();
            }
            catch(TException exception)
            {
                return exception;
            }
            return null;
        }

        /// <summary>
        /// Asserts that the two values are not equal.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <param name="compare">The compare.</param>
        public static void AssertAreNotEqual(int first, int compare)
        {
            AssertAreNotEqual(first, compare, "");
        }

        /// <summary>
        /// Makes sure we can read app settings
        /// </summary>
        public static void AssertAppSettings()
        {
            Assert.AreEqual("UnitTestValue", ConfigurationManager.AppSettings["UnitTestKey"], "Cannot read app settings");
        }

        /// <summary>
        /// Asserts that the two values are not equal.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <param name="compare">The compare.</param>
        /// <param name="message"></param>
        public static void AssertAreNotEqual(int first, int compare, string message)
        {
            Assert.IsTrue(first != compare, message + "{0} is equal to {1}", first, compare);
        }

        /// <summary>
        /// Asserts that the two values are not equal.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <param name="compare">The compare.</param>
        public static void AssertAreNotEqual(string first, string compare)
        {
            AssertAreNotEqual(first, compare, "");
        }

        /// <summary>
        /// Asserts that the two values are not equal.
        /// </summary>
        /// <param name="first">The first.</param>
        /// <param name="compare">The compare.</param>
        /// <param name="message"></param>
        public static void AssertAreNotEqual(string first, string compare, string message)
        {
            Assert.IsTrue(first != compare, message + "{0} is equal to {1}", first, compare);
        }

        #endregion
    }
}using System;
using System.Reflection;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: AssemblyVersionAttribute("2.5.2.0")]

