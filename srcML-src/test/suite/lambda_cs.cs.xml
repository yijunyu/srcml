<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C#" url="lambda" filename="lambda_cs">

<unit>
<expr_stmt><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>w</name></decl></parameter></parameter_list> =&gt; <block type="pseudo"><expr><name><name>w</name><operator>.</operator><name>Length</name></name></expr></block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>shortestWordLength</name> <init>= <expr><call><name><name>words</name><operator>.</operator><name>Min</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>w</name></decl></parameter></parameter_list> =&gt; <block type="pseudo"><expr><name><name>w</name><operator>.</operator><name>Length</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><parameter_list>()</parameter_list> =&gt; <block type="pseudo"><expr><name><name>w</name><operator>.</operator><name>Length</name></name></expr></block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><parameter_list>(<parameter><decl><type><name>string</name></type> <name>w</name></decl></parameter>)</parameter_list> =&gt; <block type="pseudo"><expr><name><name>w</name><operator>.</operator><name>Length</name></name></expr></block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>int</name></type> <name>shortestWordLength</name> <init>= <expr><call><name><name>words</name><operator>.</operator><name>Min</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>string</name></type> <name>w</name></decl></parameter>)</parameter_list> =&gt; <block type="pseudo"><expr><name><name>w</name><operator>.</operator><name>Length</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>shortDigits</name> <init>= <expr><call><name><name>digits</name><operator>.</operator><name>Where</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>digit</name></decl></parameter>, <parameter><decl><name>index</name></decl></parameter>)</parameter_list> =&gt; <block type="pseudo"><expr><name><name>digit</name><operator>.</operator><name>Length</name></name> <operator>&lt;</operator> <name>index</name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>var</name></type> <name>shortDigits</name> <init>= <expr><call><name><name>digits</name><operator>.</operator><name>Where</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><type><name>string</name></type> <name>digit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> =&gt; <block type="pseudo"><expr><name><name>digit</name><operator>.</operator><name>Length</name></name> <operator>&lt;</operator> <name>index</name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><parameter_list>(<parameter><decl><type><name>input</name></type> <name>parameters</name></decl></parameter>)</parameter_list> =&gt; <block>{<expr_stmt><expr><name>statement</name></expr>;</expr_stmt>}</block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>TestDelegate</name></type> <name>myDel</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>n</name></decl></parameter></parameter_list> =&gt; <block>{ <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <literal type="string">"World"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>Console</name><operator>.</operator><name>WriteLine</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></lambda></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><lambda><specifier>async</specifier> <parameter_list>(<parameter><decl><name>t1</name></decl></parameter>,<parameter><decl><name>t2</name></decl></parameter>)</parameter_list>=&gt; <block type="pseudo"><expr><operator>await</operator> <name>t1</name> <operator>+</operator> <operator>await</operator> <name>t2</name></expr></block></lambda></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> =&gt; <block type="pseudo"><expr><literal type="boolean">true</literal></expr></block></lambda></expr></argument>, <argument><expr><delegate><name>delegate</name> <block>{
    <if>if <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><then> <block>{

    }</block></then></if>
}</block></delegate></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

</unit>
