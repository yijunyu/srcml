<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" url="cppif" options="NESTIF,CPPIF_CHECK">

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
<expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
<expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>a</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>b</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if>if<condition>()</condition><then> <block>{}</block></then>
<else>else <block>{}</block></else>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else <block>{}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if>if<condition>()</condition><then> <block>{}</block></then>
<else>else <block>{}</block></else>
<cpp:elif>#<cpp:directive>elif</cpp:directive></cpp:elif>
<else>else <block>{}</block></else>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else <block>{}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<!-- this test case is probably marked up wrong
<unit>
<if>if<condition>()</condition><then>
<if>if<condition>()</condition><then> <block>{}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<else>else <block>{}</block></else></if></then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else <block>{}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
-->

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}<block/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}<block/>
<cpp:elif>#<cpp:directive>elif</cpp:directive></cpp:elif>
}<block/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}<block/>
<cpp:elif>#<cpp:directive>elif</cpp:directive></cpp:elif>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}<block/>
<cpp:elif>#<cpp:directive>elif</cpp:directive></cpp:elif>
}<block/>
<cpp:elif>#<cpp:directive>elif</cpp:directive></cpp:elif>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
)<condition/></expr>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if>
</unit>

<unit>
<block>{
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}<block/>
}<block/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
}</block>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}</block></then> <else>else <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<expr_stmt><expr><name>a</name></expr>;</expr_stmt>
</unit>

<unit>
<if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
}</block></then> <else>else <block type="pseudo"><if>if<then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
}</block></then> <else>else <block type="pseudo"><if>if<then> <block>{
  <expr_stmt><expr><name>b</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if></block></else></if></block></else></if>
</unit>

<unit>
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
      <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt>
</unit>

<unit>
<if>if<condition>()</condition><then> <block>{
    <expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt>
}</block></then></if>
</unit>

<unit>
<if>if<condition>()</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt></block></then></if>

</unit>

<unit>
<else>else <block>{
    <expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt>
}</block></else>
</unit>

<unit>
<else>else
    <block type="pseudo"><expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt></block></else>

</unit>

<unit>
<if>if<condition>()</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt></block></then></if>
<else>else <block type="pseudo"><empty_stmt>;</empty_stmt></block></else>
</unit>

<unit>
<if>if<condition>()</condition><then>
<block type="pseudo"><if>if<condition>()</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><call><name>arg1</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <argument><expr><name>arg2</name></expr></argument>)<argument_list/><call/><expr/><argument/>)<argument_list/><call/><expr/>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif></expr_stmt></block></then></if></block></then></if>
<else>else <block type="pseudo"><empty_stmt>;</empty_stmt></block></else>
</unit>

<unit>
<expr_stmt><expr><call><name>A</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CONFIG</name></cpp:ifdef>
<function><type><name>void</name></type> <name>cache</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>a</name></type> <name>b</name></decl>;</decl_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<if>if<condition>(<expr><name>a</name></expr>)</condition><then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>a</name></expr></cpp:if>
    <block type="pseudo"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><block type="pseudo"/><then/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<while>while<condition>(<expr><name>a</name></expr>)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>a</name></expr></cpp:if>
    <block type="pseudo"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><block type="pseudo"/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>a</name></expr></cpp:if>
    <block type="pseudo"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><block type="pseudo"/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<switch>switch<condition>(<expr><name>a</name></expr>)</condition>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>a</name></expr></cpp:if>
    <block type="pseudo"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><block type="pseudo"/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name> <range>: <expr><name>b</name></expr></range></decl></init>)</control>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>a</name></expr></cpp:if>
    <block type="pseudo"><expr_stmt><expr><name>b</name></expr>;</expr_stmt><block type="pseudo"/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>c</name></expr>;</expr_stmt></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit>
<block>{
<if>if <condition>(<expr><name>is_tli</name></expr>)</condition><then>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><block type="pseudo"/><then/>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block></then></if>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

}</block>
</unit>

<unit>
<block>{
      <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>ACE_ENABLE_SWAP_ON_WRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <block type="pseudo"><expr_stmt><expr><name>x</name></expr>;</expr_stmt><block type="pseudo"/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <if>if <condition>(<expr><name>b</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block></then>
        <else>else
          <block>{
            <expr_stmt><expr><name>c</name></expr>;</expr_stmt>
          }</block></else></if></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
</unit>

<unit>
<function><type><name>int</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">2</literal></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">3</literal></expr></cpp:if>
  <if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><then> <block>{

  }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{

    }</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>a</name></expr>;</expr_stmt></block></then></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
</unit>

<unit>
<if>if<condition>(<expr><name>a</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <expr><operator>&amp;&amp;</operator> <name>b</name></expr>)<condition/>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name>d</name></expr>;</expr_stmt></block></then></if>
</unit>

</unit>
