<?xml version="1.0" encoding="UTF-8"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" language="C++" url="ternary" filename="ternary">

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><operator>(</operator><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>


<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><operator>(</operator><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr> </then><else>: <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><literal type="number">0</literal> <operator>+</operator> <name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name> <operator>+</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name> <operator>+</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><literal type="number">0</literal> <operator>+</operator> <name>a</name></expr> ?</condition><then> <expr><name>b</name> <operator>+</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>c</name> <operator>+</operator> <literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name> <operator>*</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name> <operator>&amp;</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name>bool</name></type> <name>is_true</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<expr_stmt><expr><name><name>a</name><index>[<expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><call><name>a</name><argument_list>(<argument><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<unit>
<if>if<condition>(<expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if>
</unit>

<unit>
<if>if<condition>(<decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if>
</unit>

<unit>
<while>while<condition>(<expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
</unit>

<unit>
<while>while<condition>(<decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
</unit>

<unit>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
</unit>

<unit>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
</unit>

<unit>
<for>for<control>(<init>;</init><condition><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</condition><incr/>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
</unit>

<unit>
<for>for<control>(<init>;</init><condition>;</condition><incr><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
</unit>

<unit>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>;</init><condition><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</condition><incr><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
</unit>

<unit>
<do>do <block type="pseudo"><empty_stmt>;</empty_stmt></block> while<condition>(<expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>)</condition>;</do>
</unit>

<unit>
<do>do <block type="pseudo"><empty_stmt>;</empty_stmt></block> while<condition>(<decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></init></decl>)</condition>;</do>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>*=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>/=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>%=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>c</name><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><name>i</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

<unit>
<expr_stmt><expr><ternary><condition><expr><call><name>a</name><argument_list>(<argument><expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
</unit>

</unit>
