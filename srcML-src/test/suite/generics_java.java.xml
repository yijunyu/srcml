<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Java" url="generics" filename="generics_java">

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name><name>Class</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>new</operator> <call><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<function><parameter_list type="generic">&lt;<parameter><name>U</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<function><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>U</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{}</block></function>
</unit>

<unit>
<constructor><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>U</name></parameter>&gt;</parameter_list> <name>Class</name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{}</block></constructor>
</unit>

<unit>
<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><operator>new</operator> <argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list> <call><name><name>Class</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
</unit>

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>Object</name></extends></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>?</name> <extends>extends <name>Object</name></extends></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>?</name></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>T</name> <super>super <name>Object</name></super></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<class><specifier>public</specifier> class <name><name>Class</name><parameter_list>&lt;<parameter><name>?</name> <super>super <name>Object</name></super></parameter>&gt;</parameter_list></name> <block>{}</block></class>
</unit>

<unit>
<interface><specifier>public</specifier> interface <name><name>Cage</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{}</block></interface>
</unit>

<unit>
<interface><specifier>public</specifier> interface <name><name>Cage</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></super> <block>{}</block></interface>
</unit>

</unit>
