<!--
    srcML.dtd

    srcML is an XML application that adds information about syntactic
    structure to source code using XML tags.  Currently it is being
    used with C++ source code.

    Any compilable C++ program can be represented in srcML.  The dtd
    does not try to match the grammar of C++ but to contain it,
    i.e., all valid C++ programs can be represented in srcML, but not
    all valid srcML documents are valid C++ programs.

    srcML also stores all information in the source code file before
    the pre-processor is run.  This includes preprocessor directives,
    comments, macros, etc.

    srcML is a project of srcML, LLC.
    For more information see the srcML website at:

        www.srcML.org
-->

<!-- Preprocessor directives-->
<!ENTITY % cpp "cpp:include | cpp:define | cpp:undef | cpp:if | cpp:then | cpp:else | cpp:endif | cpp:elif | cpp:ifdef | cpp:ifndef | cpp:line">

<!-- Common elements -->
<!ENTITY % common.extra "">
<!ENTITY % common "comment | formfeed | %cpp; | macro %common.extra;">

<!-- Basic elements -->
<!ENTITY % basic_elements "%common; | block">

<!-- Basic statements -->
<!ENTITY % basic_statements "if | while | for | do | switch | break | goto | label | expr_stmt">

<!-- Basic declarations -->
<!ENTITY % basic_declarations "decl_stmt | typedef | enum | extern | struct | struct_decl | union | union_decl | asm">

<!-- Base function -->
<!ENTITY % function_elements "function | function_decl | return">

<!-- Class elements -->
<!ENTITY % class_elements "class | class_decl | constructor | constructor_decl | destructor | destructor_decl">

<!-- Template elements -->
<!ENTITY % template_elements "template">

<!-- Namespace elements -->
<!ENTITY % namespace_elements "namespace | using">

<!-- Exception handling elements -->
<!ENTITY % exception_elements "try | throw | catch">

<!-- Elements -->
<!ENTITY % statement "%basic_elements; | %basic_statements; | %basic_declarations; | %function_elements; |
%class_elements; | %namespace_elements; | %template_elements; | %exception_elements; | %cpp;">

<!--
  main element 

  Element unit can contain any statement or other units
-->
<!ELEMENT unit ( #PCDATA | unit | %statement; )* >
<!ATTLIST unit
    xmlns     CDATA #IMPLIED
    xmlns:cpp CDATA #IMPLIED
    filename  CDATA #IMPLIED
    dir       CDATA #IMPLIED
    language  CDATA #IMPLIED
>

<!--
  comment 

  Comments are of two types distinguished by an attribute type.
  Block comments are of the form: /*  */
  Line comments are of the form:  //
-->
<!ELEMENT comment          ANY >
<!ATTLIST comment type ( block | line ) #REQUIRED >

<!--
  formfeed

  Special empty element for the formfeed character.
-->
<!ELEMENT formfeed         EMPTY >

<!-- block, compound statement; -->
<!ENTITY % access_specifier "public | private | protected" >
<!ENTITY % switch_section "case | default" >

<!ELEMENT block            ( #PCDATA | %statement; | %access_specifier; | %switch_section; | expr )* >


<!-- expressions -->
<!ELEMENT expr             ( #PCDATA | name | call | type | init | block | %common; )* >

<!-- expression statements -->
<!ELEMENT expr_stmt        ( #PCDATA | expr | %common; )* >

<!-- declaration -->
<!ELEMENT decl             ( #PCDATA | type | name | init | argument_list | %common; )* >

<!ELEMENT type             ( #PCDATA | name | enum | class | struct | union | %common; )* >

<!ELEMENT name             ( #PCDATA | name | argument_list | expr | %common; )* >

<!ELEMENT init             ( #PCDATA | block | expr | %common; )* >


<!-- declaration statement; -->
<!ELEMENT decl_stmt        ( #PCDATA | decl | %common; )* >


<!-- typedef statement; -->
<!ELEMENT typedef          ( #PCDATA | type | name | function_decl | %common; )* >


<!-- label statement; -->
<!ELEMENT label            ( #PCDATA | name | %common; )* >


<!-- goto statement; -->
<!ELEMENT goto             ( #PCDATA | name | %common; )* >


<!-- asm statement; -->
<!ELEMENT asm              ( #PCDATA | %common; )* >

<!-- enum statement; -->
<!ELEMENT enum             ( #PCDATA | name | block | %common; )* >

<!-- if statement; -->
<!ELEMENT if               ( #PCDATA | condition | then | else | %common; )* >

<!ELEMENT then             ( #PCDATA | %statement; )* >

<!ELEMENT else             ( #PCDATA | %statement; )* >


<!-- loops -->

<!-- while statement; -->
<!ELEMENT while            ( #PCDATA | condition | %statement; )* >

<!-- do..while statement; -->
<!ELEMENT do               ( #PCDATA | %statement; | condition )* >

<!-- for statement; -->
<!ELEMENT for              ( #PCDATA | init | condition | incr | %statement; )* >

<!ELEMENT incr             ( #PCDATA | expr | %common; )* >

<!ELEMENT condition        ( #PCDATA | expr | %common;)* >


<!-- switch statement; -->
<!ELEMENT switch           ( #PCDATA | condition | block | %common; )* >

<!ELEMENT case             ( #PCDATA | expr | %statement; )* >

<!ELEMENT default          ( #PCDATA | %statement; )* >

<!ELEMENT break            ( #PCDATA | %common; )* >


<!-- function call -->
<!ELEMENT call             ( #PCDATA | name | argument_list | %common; )* >

<!ELEMENT argument_list    ( #PCDATA | argument | %common; )* >

<!ELEMENT argument         ( #PCDATA | name | expr | %common; )* >


<!-- functions -->
<!ENTITY % function_prototype "type | name | parameter_list | throw | specifier | block | decl_stmt | %common;">

<!ELEMENT function         ( #PCDATA | %function_prototype; )* >

<!ELEMENT function_decl    ( #PCDATA | %function_prototype; )* >

<!ELEMENT parameter_list   ( #PCDATA | param | %common; )* >

<!ELEMENT param            ( #PCDATA | decl | name | init | type | function_decl | %common; )* >

<!ELEMENT specifier        ( #PCDATA | %common; )* >

<!ELEMENT return           ( #PCDATA | expr | %common; )* >


<!-- class -->
<!ENTITY % class_contents "name | super | block | %common;">

<!ELEMENT class            ( #PCDATA | %class_contents; )*>

<!ELEMENT class_decl       ( #PCDATA | %class_contents; )*>

<!ELEMENT struct           ( #PCDATA | %class_contents; )*>

<!ELEMENT struct_decl      ( #PCDATA | %class_contents; )*>

<!ELEMENT union            ( #PCDATA | %class_contents; )*>

<!ELEMENT union_decl       ( #PCDATA | %class_contents; )*>

<!-- methods -->
<!ENTITY % method_prototype "specifier | name | parameter_list | throw | %common;">

<!ELEMENT constructor      ( #PCDATA | %method_prototype; | member_list | block )*>

<!ELEMENT member_list      ( #PCDATA | call | %common; )*>

<!ELEMENT constructor_decl ( #PCDATA | %method_prototype; )*>

<!ELEMENT destructor       ( #PCDATA | %method_prototype; | block )*>

<!ELEMENT destructor_decl  ( #PCDATA | %method_prototype; )*>

<!-- member function category -->
<!ENTITY % member_function "function_decl | function | constructor | constructor_decl | destructor | destructor_decl | decl_stmt | %common;" >

<!ELEMENT public           ( #PCDATA | %member_function; )* >
<!ATTLIST public
    type     CDATA #IMPLIED
>

<!ELEMENT protected        ( #PCDATA | %member_function; )* >

<!ELEMENT private          ( #PCDATA | %member_function; )* >
<!ATTLIST private
    type     CDATA #IMPLIED
>

<!ELEMENT super            ( #PCDATA | specifier | name | %common; )* >


<!-- exception handling -->
<!ELEMENT try              ( #PCDATA | block | %common; )* >

<!ELEMENT throw            ( #PCDATA | expr | argument | %common; )* >

<!ELEMENT catch            ( #PCDATA | param | block | %common; )* >


<!-- template -->
<!ELEMENT template         ( #PCDATA | parameter_list | class | function | function_decl | %common;)* >


<!-- namespace -->
<!ELEMENT namespace        ( #PCDATA | name | block | %common; )* >

<!ELEMENT using            ( #PCDATA | name | %common; )* >

<!-- extern -->
<!ELEMENT extern           ( #PCDATA | block | %common; )* >

<!-- macro -->
<!ELEMENT macro            ( #PCDATA | name | argument_list | %common; )* >

<!-- cpp - C-PreProcessor -->
<!ELEMENT cpp:directive    ( #PCDATA ) >

<!ELEMENT cpp:file         ( #PCDATA ) >

<!ELEMENT cpp:include      ( #PCDATA | cpp:directive| cpp:file | %common; )* >

<!ELEMENT cpp:define       ( #PCDATA | cpp:directive| name | expr | %common; )* >

<!ELEMENT cpp:undef        ( #PCDATA | cpp:directive| name | %common; )* >

<!ELEMENT cpp:if           ( #PCDATA | cpp:directive | expr | %common; )* >

<!ELEMENT cpp:then         ( #PCDATA | cpp:directive | %common; )* >

<!ELEMENT cpp:else         ( #PCDATA | cpp:directive | %common; )* >

<!ELEMENT cpp:endif        ( #PCDATA | cpp:directive | %common; )* >

<!ELEMENT cpp:elif         ( #PCDATA | cpp:directive | expr | %common; )* >

<!ELEMENT cpp:ifdef        ( #PCDATA | cpp:directive | name | %common; )* >

<!ELEMENT cpp:ifndef       ( #PCDATA | cpp:directive | name | %common; )* >

<!ELEMENT cpp:line         ( #PCDATA | cpp:directive | file | %common; )* >



