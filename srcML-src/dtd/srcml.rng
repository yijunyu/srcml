<?xml version="1.0" encoding="UTF-8"?>
<!--
  srcML.dtd
  
  srcML is an XML application that adds information about syntactic
  structure to source code using XML tags.  Currently it is being
  used with C++ source code.
  
  Any compilable C++ program can be represented in srcML.  The dtd
  does not try to match the grammar of C++ but to contain it,
  i.e., all valid C++ programs can be represented in srcML, but not
  all valid srcML documents are valid C++ programs.
  
  srcML also stores all information in the source code file before
  the pre-processor is run.  This includes preprocessor directives,
  comments, macros, etc.
  
  srcML is a project of srcML, LLC.
  For more information see the srcML website at:
  
      www.srcML.org
-->
<!-- Common elements -->
<grammar xmlns:cpp="http://www.sdml.info/srcML/cpp" ns="http://www.sdml.info/srcML/src" xmlns="http://relaxng.org/ns/structure/1.0">
  <define name="common">
    <choice>
      <ref name="comment"/>
      <ref name="macro"/>
    </choice>
  </define>
  <!-- Basic elements -->
  <define name="basic_elements">
    <choice>
      <ref name="common"/>
      <ref name="block"/>
    </choice>
  </define>
  <!-- Basic statements -->
  <define name="basic_statements">
    <choice>
      <ref name="if"/>
      <ref name="while"/>
      <ref name="for"/>
      <ref name="do"/>
      <ref name="switch"/>
      <ref name="break"/>
      <ref name="goto"/>
      <ref name="label"/>
      <ref name="expr_stmt"/>
    </choice>
  </define>
  <!-- Basic declarations -->
  <define name="basic_declarations">
    <choice>
      <ref name="decl_stmt"/>
      <ref name="typedef"/>
      <ref name="enum"/>
      <ref name="extern"/>
      <ref name="struct"/>
      <ref name="struct_decl"/>
      <ref name="union"/>
      <ref name="union_decl"/>
      <ref name="asm"/>
    </choice>
  </define>
  <!-- Base function -->
  <define name="function_elements">
    <choice>
      <ref name="function"/>
      <ref name="function_decl"/>
      <ref name="return"/>
    </choice>
  </define>
  <!-- Class elements -->
  <define name="class_elements">
    <choice>
      <ref name="class"/>
      <ref name="class_decl"/>
      <ref name="constructor"/>
      <ref name="constructor_decl"/>
      <ref name="destructor"/>
      <ref name="destructor_decl"/>
    </choice>
  </define>
  <!-- Template elements -->
  <define name="template_elements">
    <ref name="template"/>
  </define>
  <!-- Namespace elements -->
  <define name="namespace_elements">
    <choice>
      <ref name="namespace"/>
      <ref name="using"/>
    </choice>
  </define>
  <!-- Exception handling elements -->
  <define name="exception_elements">
    <choice>
      <ref name="try"/>
      <ref name="throw"/>
      <ref name="catch"/>
    </choice>
  </define>
  <!--  Preprocessor directives -->
  <define name="cpp">
    <choice>
      <ref name="cpp.include"/>
      <ref name="cpp.define"/>
      <ref name="cpp.undef"/>
      <ref name="cpp.if"/>
      <ref name="cpp.then"/>
      <ref name="cpp.else"/>
      <ref name="cpp.endif"/>
      <ref name="cpp.elif"/>
      <ref name="cpp.ifdef"/>
      <ref name="cpp.ifndef"/>
    </choice>
  </define>
  <!-- Elements -->
  <define name="statement">
    <choice>
      <ref name="basic_elements"/>
      <ref name="basic_statements"/>
      <ref name="basic_declarations"/>
      <ref name="function_elements"/>
      <ref name="class_elements"/>
      <ref name="namespace_elements"/>
      <ref name="template_elements"/>
      <ref name="exception_elements"/>
      <ref name="cpp"/>
    </choice>
  </define>
  <!--
    main element 
    
    Element unit can contain any statement or other units
  -->
  <define name="unit">
    <element name="unit">
      <ref name="unit_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="unit"/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="unit_attlist" combine="interleave">
    <optional>
      <attribute name="filename"/>
    </optional>
    <optional>
      <attribute name="dir"/>
    </optional>
  </define>
  <!--
    comment 
    
    Comments are of two types distinguished by an attribute type.
    Block comments are of the form: /*  */
    Line comments are of the form:  //
  -->
  <define name="comment">
    <element name="comment">
      <ref name="comment_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="comment"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="comment_attlist" combine="interleave">
    <attribute name="type">
      <choice>
        <value>block</value>
        <value>line</value>
      </choice>
    </attribute>
  </define>
  <!-- block, compound statement; -->
  <define name="access_specifier">
    <choice>
      <ref name="public"/>
      <ref name="private"/>
      <ref name="protected"/>
    </choice>
  </define>
  <define name="switch_section">
    <choice>
      <ref name="case"/>
      <ref name="default"/>
    </choice>
  </define>
  <define name="block">
    <element name="block">
      <ref name="block_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="statement"/>
          <ref name="access_specifier"/>
          <ref name="switch_section"/>
          <ref name="expr"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="block_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- expressions -->
  <define name="expr">
    <element name="expr">
      <ref name="expr_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="call"/>
          <ref name="type"/>
          <ref name="init"/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="expr_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- expression statements -->
  <define name="expr_stmt">
    <element name="expr_stmt">
      <ref name="expr_stmt_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="expr_stmt_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- declaration -->
  <define name="decl">
    <element name="decl">
      <ref name="decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="type"/>
          <ref name="name"/>
          <ref name="init"/>
          <ref name="argument_list"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="decl_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="type">
    <element name="type">
      <ref name="type_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="enum"/>
          <ref name="class"/>
          <ref name="struct"/>
          <ref name="union"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="type_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="name">
    <element name="name">
      <ref name="name_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="argument_list"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="name_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="init">
    <element name="init">
      <ref name="init_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="block"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="init_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- declaration statement; -->
  <define name="decl_stmt">
    <element name="decl_stmt">
      <ref name="decl_stmt_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="decl"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="decl_stmt_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- typedef statement; -->
  <define name="typedef">
    <element name="typedef">
      <ref name="typedef_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="type"/>
          <ref name="name"/>
          <ref name="function_decl"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="typedef_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- label statement; -->
  <define name="label">
    <element name="label">
      <ref name="label_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="label_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- goto statement; -->
  <define name="goto">
    <element name="goto">
      <ref name="goto_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="goto_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- asm statement; -->
  <define name="asm">
    <element name="asm">
      <ref name="asm_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="asm_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- enum statement; -->
  <define name="enum">
    <element name="enum">
      <ref name="enum_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="enum_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- if statement; -->
  <define name="if">
    <element name="if">
      <ref name="if_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="condition"/>
          <ref name="then"/>
          <ref name="else"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="if_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="then">
    <element name="then">
      <ref name="then_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="then_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="else">
    <element name="else">
      <ref name="else_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="else_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- loops -->
  <!-- while statement; -->
  <define name="while">
    <element name="while">
      <ref name="while_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="condition"/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="while_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- do..while statement; -->
  <define name="do">
    <element name="do">
      <ref name="do_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="statement"/>
          <ref name="condition"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="do_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- for statement; -->
  <define name="for">
    <element name="for">
      <ref name="for_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="init"/>
          <ref name="condition"/>
          <ref name="incr"/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="for_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="incr">
    <element name="incr">
      <ref name="incr_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="incr_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="condition">
    <element name="condition">
      <ref name="condition_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="condition_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- switch statement; -->
  <define name="switch">
    <element name="switch">
      <ref name="switch_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="condition"/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="switch_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="case">
    <element name="case">
      <ref name="case_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="case_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="default">
    <element name="default">
      <ref name="default_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="default_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="break">
    <element name="break">
      <ref name="break_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="break_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- function call -->
  <define name="call">
    <element name="call">
      <ref name="call_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="argument_list"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="call_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="argument_list">
    <element name="argument_list">
      <ref name="argument_list_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="argument"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="argument_list_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="argument">
    <element name="argument">
      <ref name="argument_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="argument_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- functions -->
  <define name="function_prototype">
    <choice>
      <ref name="type"/>
      <ref name="name"/>
      <ref name="parameter_list"/>
      <ref name="throw"/>
      <ref name="specifier"/>
      <ref name="block"/>
      <ref name="common"/>
    </choice>
  </define>
  <define name="function">
    <element name="function">
      <ref name="function_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="function_prototype"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="function_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="function_decl">
    <element name="function_decl">
      <ref name="function_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="function_prototype"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="function_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="parameter_list">
    <element name="parameter_list">
      <ref name="parameter_list_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="param"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="parameter_list_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="param">
    <element name="param">
      <ref name="param_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
	  <ref name="decl"/>
          <ref name="specifier"/>
          <ref name="type"/>
          <ref name="name"/>
          <ref name="init"/>
          <ref name="function_decl"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="param_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="specifier">
    <element name="specifier">
      <ref name="specifier_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="specifier_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="return">
    <element name="return">
      <ref name="return_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="return_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- class -->
  <define name="class_contents">
    <choice>
      <ref name="name"/>
      <ref name="super"/>
      <ref name="block"/>
      <ref name="common"/>
    </choice>
  </define>
  <define name="class">
    <element name="class">
      <ref name="class_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="class_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="class_decl">
    <element name="class_decl">
      <ref name="class_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="class_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="struct">
    <element name="struct">
      <ref name="struct_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="struct_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="struct_decl">
    <element name="struct_decl">
      <ref name="struct_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="struct_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="union">
    <element name="union">
      <ref name="union_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="union_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="union_decl">
    <element name="union_decl">
      <ref name="union_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="class_contents"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="union_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- methods -->
  <define name="method_prototype">
    <choice>
      <ref name="specifier"/>
      <ref name="name"/>
      <ref name="parameter_list"/>
      <ref name="throw"/>
      <ref name="common"/>
    </choice>
  </define>
  <define name="constructor">
    <element name="constructor">
      <ref name="constructor_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="method_prototype"/>
          <ref name="member_list"/>
          <ref name="block"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="constructor_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="member_list">
    <element name="member_list">
      <ref name="member_list_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="call"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="member_list_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="constructor_decl">
    <element name="constructor_decl">
      <ref name="constructor_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="method_prototype"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="constructor_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="destructor">
    <element name="destructor">
      <ref name="destructor_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="method_prototype"/>
          <ref name="block"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="destructor_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="destructor_decl">
    <element name="destructor_decl">
      <ref name="destructor_decl_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="method_prototype"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="destructor_decl_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- member function category -->
  <define name="member_function">
    <choice>
      <ref name="function_decl"/>
      <ref name="function"/>
      <ref name="constructor"/>
      <ref name="constructor_decl"/>
      <ref name="destructor"/>
      <ref name="destructor_decl"/>
      <ref name="decl_stmt"/>
      <ref name="common"/>
    </choice>
  </define>
  <define name="public">
    <element name="public">
      <ref name="public_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="member_function"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="public_attlist" combine="interleave">
    <optional>
      <attribute name="type"/>
    </optional>
  </define>
  <define name="protected">
    <element name="protected">
      <ref name="protected_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="member_function"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="protected_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="private">
    <element name="private">
      <ref name="private_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="member_function"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="private_attlist" combine="interleave">
    <optional>
      <attribute name="type"/>
    </optional>
  </define>
  <define name="super">
    <element name="super">
      <ref name="super_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="specifier"/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="super_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- exception handling -->
  <define name="try">
    <element name="try">
      <ref name="try_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="try_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="throw">
    <element name="throw">
      <ref name="throw_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="expr"/>
          <ref name="argument"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="throw_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="catch">
    <element name="catch">
      <ref name="catch_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="param"/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="catch_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- template -->
  <define name="template">
    <element name="template">
      <ref name="template_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="parameter_list"/>
          <ref name="class"/>
          <ref name="function"/>
          <ref name="function_decl"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="template_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- namespace -->
  <define name="namespace">
    <element name="namespace">
      <ref name="namespace_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="namespace_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="using">
    <element name="using">
      <ref name="using_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="using_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- extern -->
  <define name="extern">
    <element name="extern">
      <ref name="extern_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="block"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="extern_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- macro -->
  <define name="macro">
    <element name="macro">
      <ref name="macro_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="name"/>
          <ref name="argument_list"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="macro_attlist" combine="interleave">
    <empty/>
  </define>
  <!-- cpp - C-PreProcessor -->
  <define name="cpp.directive">
    <element name="cpp:directive">
      <ref name="cpp.directive_attlist"/>
      <text/>
    </element>
  </define>
  <define name="cpp.directive_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.file">
    <element name="cpp:file">
      <ref name="cpp.file_attlist"/>
      <text/>
    </element>
  </define>
  <define name="cpp.file_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.include">
    <element name="cpp:include">
      <ref name="cpp.include_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="cpp.file"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.include_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.define">
    <element name="cpp:define">
      <ref name="cpp.define_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="name"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.define_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.undef">
    <element name="cpp:undef">
      <ref name="cpp.undef_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.undef_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.if">
    <element name="cpp:if">
      <ref name="cpp.if_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.if_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.then">
    <element name="cpp:then">
      <ref name="cpp.then_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.then_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.else">
    <element name="cpp:else">
      <ref name="cpp.else_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.else_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.endif">
    <element name="cpp:endif">
      <ref name="cpp.endif_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.endif_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.elif">
    <element name="cpp:elif">
      <ref name="cpp.elif_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="expr"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.elif_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.ifdef">
    <element name="cpp:ifdef">
      <ref name="cpp.ifdef_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.ifdef_attlist" combine="interleave">
    <empty/>
  </define>
  <define name="cpp.ifndef">
    <element name="cpp:ifndef">
      <ref name="cpp.ifndef_attlist"/>
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="cpp.directive"/>
          <ref name="name"/>
          <ref name="common"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="cpp.ifndef_attlist" combine="interleave">
    <empty/>
  </define>
  <start>
      <ref name="unit"/>
<!--
    <choice>
      <ref name="argument"/>
      <ref name="specifier"/>
      <ref name="call"/>
      <ref name="function"/>
      <ref name="typedef"/>
      <ref name="using"/>
      <ref name="return"/>
      <ref name="struct_decl"/>
      <ref name="try"/>
      <ref name="asm"/>
      <ref name="extern"/>
      <ref name="macro"/>
      <ref name="param"/>
      <ref name="member_list"/>
      <ref name="do"/>
      <ref name="block"/>
      <ref name="cpp.directive"/>
      <ref name="constructor_decl"/>
      <ref name="default"/>
      <ref name="class_decl"/>
      <ref name="throw"/>
      <ref name="class"/>
      <ref name="name"/>
      <ref name="private"/>
      <ref name="cpp.else"/>
      <ref name="else"/>
      <ref name="cpp.file"/>
      <ref name="argument_list"/>
      <ref name="enum"/>
      <ref name="goto"/>
      <ref name="super"/>
      <ref name="cpp.then"/>
      <ref name="then"/>
      <ref name="decl_stmt"/>
      <ref name="break"/>
      <ref name="expr_stmt"/>
      <ref name="cpp.elif"/>
      <ref name="cpp.if"/>
      <ref name="union"/>
      <ref name="union_decl"/>
      <ref name="protected"/>
      <ref name="comment"/>
      <ref name="struct"/>
      <ref name="if"/>
      <ref name="while"/>
      <ref name="cpp.ifdef"/>
      <ref name="cpp.undef"/>
      <ref name="destructor_decl"/>
      <ref name="destructor"/>
      <ref name="function_decl"/>
      <ref name="parameter_list"/>
      <ref name="cpp.endif"/>
      <ref name="namespace"/>
      <ref name="public"/>
      <ref name="for"/>
      <ref name="cpp.include"/>
      <ref name="unit"/>
      <ref name="expr"/>
      <ref name="case"/>
      <ref name="label"/>
      <ref name="template"/>
      <ref name="incr"/>
      <ref name="condition"/>
      <ref name="init"/>
      <ref name="cpp.define"/>
      <ref name="catch"/>
      <ref name="decl"/>
      <ref name="switch"/>
      <ref name="constructor"/>
      <ref name="cpp.ifndef"/>
      <ref name="type"/>
    </choice>
-->
  </start>
</grammar>
